Description: End of line chars
 This characters appear when switching from Window system
 to a Linux system
 .
 tigger-lsm (1.7.0-1kern1) focal; urgency=medium
 .
   [ Athanaseus Javas Ramaila ]
   * New upstream version 1.7.0
Author: KERN packaging <packaging@kernsuite.info>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2021-08-24

--- tigger-lsm-1.7.0.orig/.dockerignore
+++ tigger-lsm-1.7.0/.dockerignore
@@ -1,5 +1,5 @@
-.git
-.gitignore
-.idea/
-.venv2/
-.venv3/
+.git
+.gitignore
+.idea/
+.venv2/
+.venv3/
--- tigger-lsm-1.7.0.orig/.github/workflows/publish_package.yml
+++ tigger-lsm-1.7.0/.github/workflows/publish_package.yml
@@ -1,31 +1,31 @@
-# This workflows will upload a Python Package using Twine when a release is created
-# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries
-
-name: Upload Python Package
-
-on:
-  release:
-    types: [created]
-
-jobs:
-  deploy:
-
-    runs-on: ubuntu-latest
-
-    steps:
-    - uses: actions/checkout@v2
-    - name: Set up Python
-      uses: actions/setup-python@v1
-      with:
-        python-version: '3.x'
-    - name: Install dependencies
-      run: |
-        python -m pip install --upgrade pip
-        pip install setuptools wheel twine
-    - name: Build and publish
-      env:
-        TWINE_USERNAME: __token__
-        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
-      run: |
-        python setup.py sdist bdist_wheel
-        twine upload dist/*
+# This workflows will upload a Python Package using Twine when a release is created
+# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries
+
+name: Upload Python Package
+
+on:
+  release:
+    types: [created]
+
+jobs:
+  deploy:
+
+    runs-on: ubuntu-latest
+
+    steps:
+    - uses: actions/checkout@v2
+    - name: Set up Python
+      uses: actions/setup-python@v1
+      with:
+        python-version: '3.x'
+    - name: Install dependencies
+      run: |
+        python -m pip install --upgrade pip
+        pip install setuptools wheel twine
+    - name: Build and publish
+      env:
+        TWINE_USERNAME: __token__
+        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
+      run: |
+        python setup.py sdist bdist_wheel
+        twine upload dist/*
--- tigger-lsm-1.7.0.orig/.github/workflows/test_installation.yml
+++ tigger-lsm-1.7.0/.github/workflows/test_installation.yml
@@ -1,69 +1,69 @@
-# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
-# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
-
-name: Python package
-
-on:
-  push:
-    branches: [ master ]
-  pull_request:
-    branches: [ master ]
-
-jobs:
-  build:
-
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        python-version: [3.6, 3.7, 3.8]
-
-    steps:
-    - uses: actions/checkout@v2
-    - name: Set up Python ${{ matrix.python-version }}
-      uses: actions/setup-python@v1
-      with:
-        python-version: ${{ matrix.python-version }}
-    - name: Install dependencies
-      run: |
-        python -m pip install --upgrade pip
-        pip install --upgrade setuptools wheel
-        pip install flake8 pytest
-        pip install .
-    - name: Lint with flake8
-      run: |
-        # stop the build if there are Python syntax errors or undefined names
-        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
-        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
-        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
-    - name: Test conversion to .txt models
-      run: |
-        tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.txt -f \
-          --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
-        tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.recentred.txt -f --center 85.5deg,49.9deg --rename \
-          --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
-        echo "Checking reference LSM"
-        diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.reference.txt /tmp/output.txt
-        echo "Checking recentred reference LSM"
-        diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.recentred.reference.txt /tmp/output.recentred.txt
-    - name: Test reverse conversion to .lsm.html models
-      run: |
-        tigger-convert /tmp/output.txt /tmp/output.lsm.html -f
-    - name: Test .gaul conversions
-      run: |
-        tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.lsm.html -f 
-        tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.txt -f --output-format "name ra_d dec_d i q u v spi rm emaj_s emin_s pa_d freq0"
-        diff $GITHUB_WORKSPACE/test/deep4.reference.txt /tmp/deep4.txt
-    - name: Test .AIPSCC conversions
-      run: |
-        gunzip <$GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.fits.gz >/tmp/3C147-L-A-CLEAN.fits
-        tigger-convert /tmp/3C147-L-A-CLEAN.fits /tmp/3C147-L-A-CLEAN.fits.lsm.html -f
-        tigger-convert /tmp/3C147-L-A-CLEAN.fits.lsm.html /tmp/3C147-L-A-CLEAN.txt -f --output-format "name ra_d dec_d i q u v"
-        zdiff $GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.txt.gz /tmp/3C147-L-A-CLEAN.txt
-    - name: Testing tigger-restore and tigger-make-brick
-      run: |
-        cp $GITHUB_WORKSPACE/test/3C147tmp.fits /tmp
-        tigger-make-brick $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/3C147tmp.fits 
-        tigger-restore -f $GITHUB_WORKSPACE/test/3C147tmp.fits $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/restored.fits
-    - name: Test tigger-tag
-      run: |
-        tigger-tag $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html 'r<0.5d' inner=1 -o /tmp/tmp.lsm.html -f
+# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
+# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
+
+name: Python package
+
+on:
+  push:
+    branches: [ master ]
+  pull_request:
+    branches: [ master ]
+
+jobs:
+  build:
+
+    runs-on: ubuntu-latest
+    strategy:
+      matrix:
+        python-version: [3.6, 3.7, 3.8]
+
+    steps:
+    - uses: actions/checkout@v2
+    - name: Set up Python ${{ matrix.python-version }}
+      uses: actions/setup-python@v1
+      with:
+        python-version: ${{ matrix.python-version }}
+    - name: Install dependencies
+      run: |
+        python -m pip install --upgrade pip
+        pip install --upgrade setuptools wheel
+        pip install flake8 pytest
+        pip install .
+    - name: Lint with flake8
+      run: |
+        # stop the build if there are Python syntax errors or undefined names
+        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
+        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
+        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
+    - name: Test conversion to .txt models
+      run: |
+        tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.txt -f \
+          --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
+        tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.recentred.txt -f --center 85.5deg,49.9deg --rename \
+          --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
+        echo "Checking reference LSM"
+        diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.reference.txt /tmp/output.txt
+        echo "Checking recentred reference LSM"
+        diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.recentred.reference.txt /tmp/output.recentred.txt
+    - name: Test reverse conversion to .lsm.html models
+      run: |
+        tigger-convert /tmp/output.txt /tmp/output.lsm.html -f
+    - name: Test .gaul conversions
+      run: |
+        tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.lsm.html -f 
+        tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.txt -f --output-format "name ra_d dec_d i q u v spi rm emaj_s emin_s pa_d freq0"
+        diff $GITHUB_WORKSPACE/test/deep4.reference.txt /tmp/deep4.txt
+    - name: Test .AIPSCC conversions
+      run: |
+        gunzip <$GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.fits.gz >/tmp/3C147-L-A-CLEAN.fits
+        tigger-convert /tmp/3C147-L-A-CLEAN.fits /tmp/3C147-L-A-CLEAN.fits.lsm.html -f
+        tigger-convert /tmp/3C147-L-A-CLEAN.fits.lsm.html /tmp/3C147-L-A-CLEAN.txt -f --output-format "name ra_d dec_d i q u v"
+        zdiff $GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.txt.gz /tmp/3C147-L-A-CLEAN.txt
+    - name: Testing tigger-restore and tigger-make-brick
+      run: |
+        cp $GITHUB_WORKSPACE/test/3C147tmp.fits /tmp
+        tigger-make-brick $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/3C147tmp.fits 
+        tigger-restore -f $GITHUB_WORKSPACE/test/3C147tmp.fits $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/restored.fits
+    - name: Test tigger-tag
+      run: |
+        tigger-tag $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html 'r<0.5d' inner=1 -o /tmp/tmp.lsm.html -f
--- tigger-lsm-1.7.0.orig/.travis/mypy.docker
+++ tigger-lsm-1.7.0/.travis/mypy.docker
@@ -1,7 +1,7 @@
-FROM kernsuite/base:4
-RUN docker-apt-install python3-pip
-RUN pip3 install mypy
-ADD . /code
-WORKDIR /code
-RUN mypy --ignore-missing-imports Tigger
-
+FROM kernsuite/base:4
+RUN docker-apt-install python3-pip
+RUN pip3 install mypy
+ADD . /code
+WORKDIR /code
+RUN mypy --ignore-missing-imports Tigger
+
--- tigger-lsm-1.7.0.orig/.travis/pep8.docker
+++ tigger-lsm-1.7.0/.travis/pep8.docker
@@ -1,7 +1,7 @@
-FROM kernsuite/base:4
-RUN docker-apt-install python3-pip
-RUN pip3 install pycodestyle
-ADD . /code
-WORKDIR /code
-RUN pycodestyle Tigger --ignore=E501
-
+FROM kernsuite/base:4
+RUN docker-apt-install python3-pip
+RUN pip3 install pycodestyle
+ADD . /code
+WORKDIR /code
+RUN pycodestyle Tigger --ignore=E501
+
--- tigger-lsm-1.7.0.orig/.travis/py2.docker
+++ tigger-lsm-1.7.0/.travis/py2.docker
@@ -1,63 +1,63 @@
-FROM kernsuite/base:6
-
-RUN docker-apt-install python-casacore casacore-data makems casarest \
-                       python-pip git wget meqtrees meqtrees-timba owlcat
-
-WORKDIR /src
-RUN wget https://codeload.github.com/ska-sa/pyxis/tar.gz/refs/tags/v1.7.1 && \
-    tar zxvf v1.7.1 && \
-    rm v1.7.1
-RUN pip install -e ./pyxis-1.7.1
-
-WORKDIR /code
-ADD . /code/tigger-lsm
-RUN pip install ./tigger-lsm
-
-# basic install tests
-RUN flag-ms.py --help
-RUN meqtree-pipeliner.py --help
-RUN pyxis --help
-
-# run end to end test when built
-RUN pip install nose
-WORKDIR /src/pyxis-1.7.1/Pyxis/recipes/meqtrees-batch-test
-RUN python -m "nose"
-
-#######################################
-# run oleg's new tests
-#######################################
-ENV GITHUB_WORKSPACE=/code/tigger-lsm
-# Test conversion to .txt models
-RUN tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.txt -f \
-    --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
-RUN tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.recentred.txt -f --center 85.5deg,49.9deg --rename \
-    --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
-RUN echo "Checking reference LSM"
-RUN diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.reference.txt /tmp/output.txt
-RUN echo "Checking recentred reference LSM"
-RUN diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.recentred.reference.txt /tmp/output.recentred.txt
-
-#Test reverse conversion to .lsm.html models
-RUN tigger-convert /tmp/output.txt /tmp/output.lsm.html -f
-
-#Test .gaul conversions
-RUN tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.lsm.html -f 
-RUN tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.txt -f --output-format "name ra_d dec_d i q u v spi rm emaj_s emin_s pa_d freq0"
-RUN diff $GITHUB_WORKSPACE/test/deep4.reference.txt /tmp/deep4.txt
-
-# Test .AIPSCC conversions
-RUN gunzip <$GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.fits.gz >/tmp/3C147-L-A-CLEAN.fits
-RUN tigger-convert /tmp/3C147-L-A-CLEAN.fits /tmp/3C147-L-A-CLEAN.fits.lsm.html -f
-RUN tigger-convert /tmp/3C147-L-A-CLEAN.fits.lsm.html /tmp/3C147-L-A-CLEAN.txt -f --output-format "name ra_d dec_d i q u v"
-RUN zdiff $GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.txt.gz /tmp/3C147-L-A-CLEAN.txt
-
-# Testing tigger-restore and tigger-make-brick
-RUN cp $GITHUB_WORKSPACE/test/3C147tmp.fits /tmp
-RUN tigger-make-brick $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/3C147tmp.fits 
-RUN tigger-restore -f $GITHUB_WORKSPACE/test/3C147tmp.fits $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/restored.fits
-
-#Test tigger-tag
-RUN tigger-tag $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html 'r<0.5d' inner=1 -o /tmp/tmp.lsm.html -f
-
-ENTRYPOINT ["meqtree-pipeliner.py"]
-CMD ["--help"]
+FROM kernsuite/base:6
+
+RUN docker-apt-install python-casacore casacore-data makems casarest \
+                       python-pip git wget meqtrees meqtrees-timba owlcat
+
+WORKDIR /src
+RUN wget https://codeload.github.com/ska-sa/pyxis/tar.gz/refs/tags/v1.7.1 && \
+    tar zxvf v1.7.1 && \
+    rm v1.7.1
+RUN pip install -e ./pyxis-1.7.1
+
+WORKDIR /code
+ADD . /code/tigger-lsm
+RUN pip install ./tigger-lsm
+
+# basic install tests
+RUN flag-ms.py --help
+RUN meqtree-pipeliner.py --help
+RUN pyxis --help
+
+# run end to end test when built
+RUN pip install nose
+WORKDIR /src/pyxis-1.7.1/Pyxis/recipes/meqtrees-batch-test
+RUN python -m "nose"
+
+#######################################
+# run oleg's new tests
+#######################################
+ENV GITHUB_WORKSPACE=/code/tigger-lsm
+# Test conversion to .txt models
+RUN tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.txt -f \
+    --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
+RUN tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.recentred.txt -f --center 85.5deg,49.9deg --rename \
+    --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
+RUN echo "Checking reference LSM"
+RUN diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.reference.txt /tmp/output.txt
+RUN echo "Checking recentred reference LSM"
+RUN diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.recentred.reference.txt /tmp/output.recentred.txt
+
+#Test reverse conversion to .lsm.html models
+RUN tigger-convert /tmp/output.txt /tmp/output.lsm.html -f
+
+#Test .gaul conversions
+RUN tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.lsm.html -f 
+RUN tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.txt -f --output-format "name ra_d dec_d i q u v spi rm emaj_s emin_s pa_d freq0"
+RUN diff $GITHUB_WORKSPACE/test/deep4.reference.txt /tmp/deep4.txt
+
+# Test .AIPSCC conversions
+RUN gunzip <$GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.fits.gz >/tmp/3C147-L-A-CLEAN.fits
+RUN tigger-convert /tmp/3C147-L-A-CLEAN.fits /tmp/3C147-L-A-CLEAN.fits.lsm.html -f
+RUN tigger-convert /tmp/3C147-L-A-CLEAN.fits.lsm.html /tmp/3C147-L-A-CLEAN.txt -f --output-format "name ra_d dec_d i q u v"
+RUN zdiff $GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.txt.gz /tmp/3C147-L-A-CLEAN.txt
+
+# Testing tigger-restore and tigger-make-brick
+RUN cp $GITHUB_WORKSPACE/test/3C147tmp.fits /tmp
+RUN tigger-make-brick $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/3C147tmp.fits 
+RUN tigger-restore -f $GITHUB_WORKSPACE/test/3C147tmp.fits $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/restored.fits
+
+#Test tigger-tag
+RUN tigger-tag $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html 'r<0.5d' inner=1 -o /tmp/tmp.lsm.html -f
+
+ENTRYPOINT ["meqtree-pipeliner.py"]
+CMD ["--help"]
--- tigger-lsm-1.7.0.orig/.travis/py3.docker
+++ tigger-lsm-1.7.0/.travis/py3.docker
@@ -1,97 +1,97 @@
-FROM kernsuite/base:6
-
-RUN docker-apt-install python3-casacore casacore-dev casacore-data makems casarest \
-                       python3-pip git wget cmake libblitz0-dev libqdbm-dev \
-                       libfftw3-dev wcslib-dev libcfitsio-dev \
-                       'libcasa-*' liblapack-dev libatlas-base-dev
-#######################################
-# Install python 3 meqtrees
-#######################################
-# add additional Timba dependencies
-RUN docker-apt-install python3-pyqt4 python3-pyqt5
-WORKDIR /src
-RUN wget https://codeload.github.com/ska-sa/meqtrees-cattery/tar.gz/refs/tags/v1.7.1 && \
-    tar zxvf v1.7.1 && \
-    rm v1.7.1 
-RUN wget https://codeload.github.com/ska-sa/purr/tar.gz/refs/tags/v1.5.0 && \
-    tar zxvf v1.5.0 && \
-    rm v1.5.0
-RUN wget https://codeload.github.com/ska-sa/owlcat/tar.gz/refs/tags/v1.6.0 && \
-    tar zxvf v1.6.0 && \
-    rm v1.6.0
-RUN wget https://codeload.github.com/ska-sa/kittens/tar.gz/refs/tags/v1.4.3 && \
-    tar zxvf v1.4.3 && \
-    rm v1.4.3
-RUN wget https://codeload.github.com/ska-sa/pyxis/tar.gz/refs/tags/v1.7.1 && \
-    tar zxvf v1.7.1 && \
-    rm v1.7.1
-
-RUN pip3 install ./meqtrees-cattery-1.7.1 ./purr-1.5.0 ./owlcat-1.6.0 ./kittens-1.4.3
-RUN pip3 install -e ./pyxis-1.7.1
-
-WORKDIR /src
-RUN wget https://codeload.github.com/ska-sa/meqtrees-timba/tar.gz/refs/tags/v1.8.0 && \
-    tar zxvf v1.8.0 && \
-    rm v1.8.0
-RUN mkdir /src/meqtrees-timba-1.8.0/build
-WORKDIR /src/meqtrees-timba-1.8.0/build
-RUN cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DENABLE_PYTHON_3=ON ..
-RUN make
-RUN make install
-RUN ldconfig
-
-WORKDIR /code
-ADD . /code/tigger-lsm
-RUN pip3 install ./tigger-lsm
-
-RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2
-# basic install tests
-RUN flag-ms.py --help
-RUN meqtree-pipeliner.py --help
-RUN pyxis --help
-
-#######################################
-# run oleg's new tests
-#######################################
-ENV GITHUB_WORKSPACE=/code/tigger-lsm
-# Test conversion to .txt models
-RUN tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.txt -f \
-    --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
-RUN tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.recentred.txt -f --center 85.5deg,49.9deg --rename \
-    --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
-RUN echo "Checking reference LSM"
-RUN diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.reference.txt /tmp/output.txt
-RUN echo "Checking recentred reference LSM"
-RUN diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.recentred.reference.txt /tmp/output.recentred.txt
-
-#Test reverse conversion to .lsm.html models
-RUN tigger-convert /tmp/output.txt /tmp/output.lsm.html -f
-
-#Test .gaul conversions
-RUN tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.lsm.html -f 
-RUN tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.txt -f --output-format "name ra_d dec_d i q u v spi rm emaj_s emin_s pa_d freq0"
-RUN diff $GITHUB_WORKSPACE/test/deep4.reference.txt /tmp/deep4.txt
-
-# Test .AIPSCC conversions
-RUN gunzip <$GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.fits.gz >/tmp/3C147-L-A-CLEAN.fits
-RUN tigger-convert /tmp/3C147-L-A-CLEAN.fits /tmp/3C147-L-A-CLEAN.fits.lsm.html -f
-RUN tigger-convert /tmp/3C147-L-A-CLEAN.fits.lsm.html /tmp/3C147-L-A-CLEAN.txt -f --output-format "name ra_d dec_d i q u v"
-RUN zdiff $GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.txt.gz /tmp/3C147-L-A-CLEAN.txt
-
-# Testing tigger-restore and tigger-make-brick
-RUN cp $GITHUB_WORKSPACE/test/3C147tmp.fits /tmp
-RUN tigger-make-brick $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/3C147tmp.fits 
-RUN tigger-restore -f $GITHUB_WORKSPACE/test/3C147tmp.fits $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/restored.fits
-
-#Test tigger-tag
-RUN tigger-tag $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html 'r<0.5d' inner=1 -o /tmp/tmp.lsm.html -f
-
-#######################################
-# end to end test
-#######################################
-RUN pip3 install nose
-WORKDIR /src/pyxis-1.7.1/Pyxis/recipes/meqtrees-batch-test
-RUN python3 -m "nose"
-
-ENTRYPOINT ["meqtree-pipeliner.py"]
-CMD ["--help"]
+FROM kernsuite/base:6
+
+RUN docker-apt-install python3-casacore casacore-dev casacore-data makems casarest \
+                       python3-pip git wget cmake libblitz0-dev libqdbm-dev \
+                       libfftw3-dev wcslib-dev libcfitsio-dev \
+                       'libcasa-*' liblapack-dev libatlas-base-dev
+#######################################
+# Install python 3 meqtrees
+#######################################
+# add additional Timba dependencies
+RUN docker-apt-install python3-pyqt4 python3-pyqt5
+WORKDIR /src
+RUN wget https://codeload.github.com/ska-sa/meqtrees-cattery/tar.gz/refs/tags/v1.7.1 && \
+    tar zxvf v1.7.1 && \
+    rm v1.7.1 
+RUN wget https://codeload.github.com/ska-sa/purr/tar.gz/refs/tags/v1.5.0 && \
+    tar zxvf v1.5.0 && \
+    rm v1.5.0
+RUN wget https://codeload.github.com/ska-sa/owlcat/tar.gz/refs/tags/v1.6.0 && \
+    tar zxvf v1.6.0 && \
+    rm v1.6.0
+RUN wget https://codeload.github.com/ska-sa/kittens/tar.gz/refs/tags/v1.4.3 && \
+    tar zxvf v1.4.3 && \
+    rm v1.4.3
+RUN wget https://codeload.github.com/ska-sa/pyxis/tar.gz/refs/tags/v1.7.1 && \
+    tar zxvf v1.7.1 && \
+    rm v1.7.1
+
+RUN pip3 install ./meqtrees-cattery-1.7.1 ./purr-1.5.0 ./owlcat-1.6.0 ./kittens-1.4.3
+RUN pip3 install -e ./pyxis-1.7.1
+
+WORKDIR /src
+RUN wget https://codeload.github.com/ska-sa/meqtrees-timba/tar.gz/refs/tags/v1.8.0 && \
+    tar zxvf v1.8.0 && \
+    rm v1.8.0
+RUN mkdir /src/meqtrees-timba-1.8.0/build
+WORKDIR /src/meqtrees-timba-1.8.0/build
+RUN cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DENABLE_PYTHON_3=ON ..
+RUN make
+RUN make install
+RUN ldconfig
+
+WORKDIR /code
+ADD . /code/tigger-lsm
+RUN pip3 install ./tigger-lsm
+
+RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2
+# basic install tests
+RUN flag-ms.py --help
+RUN meqtree-pipeliner.py --help
+RUN pyxis --help
+
+#######################################
+# run oleg's new tests
+#######################################
+ENV GITHUB_WORKSPACE=/code/tigger-lsm
+# Test conversion to .txt models
+RUN tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.txt -f \
+    --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
+RUN tigger-convert $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/output.recentred.txt -f --center 85.5deg,49.9deg --rename \
+    --output-format "name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0"
+RUN echo "Checking reference LSM"
+RUN diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.reference.txt /tmp/output.txt
+RUN echo "Checking recentred reference LSM"
+RUN diff $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.recentred.reference.txt /tmp/output.recentred.txt
+
+#Test reverse conversion to .lsm.html models
+RUN tigger-convert /tmp/output.txt /tmp/output.lsm.html -f
+
+#Test .gaul conversions
+RUN tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.lsm.html -f 
+RUN tigger-convert $GITHUB_WORKSPACE/test/deep4.gaul /tmp/deep4.txt -f --output-format "name ra_d dec_d i q u v spi rm emaj_s emin_s pa_d freq0"
+RUN diff $GITHUB_WORKSPACE/test/deep4.reference.txt /tmp/deep4.txt
+
+# Test .AIPSCC conversions
+RUN gunzip <$GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.fits.gz >/tmp/3C147-L-A-CLEAN.fits
+RUN tigger-convert /tmp/3C147-L-A-CLEAN.fits /tmp/3C147-L-A-CLEAN.fits.lsm.html -f
+RUN tigger-convert /tmp/3C147-L-A-CLEAN.fits.lsm.html /tmp/3C147-L-A-CLEAN.txt -f --output-format "name ra_d dec_d i q u v"
+RUN zdiff $GITHUB_WORKSPACE/test/3C147-L-A-CLEAN.txt.gz /tmp/3C147-L-A-CLEAN.txt
+
+# Testing tigger-restore and tigger-make-brick
+RUN cp $GITHUB_WORKSPACE/test/3C147tmp.fits /tmp
+RUN tigger-make-brick $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/3C147tmp.fits 
+RUN tigger-restore -f $GITHUB_WORKSPACE/test/3C147tmp.fits $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html /tmp/restored.fits
+
+#Test tigger-tag
+RUN tigger-tag $GITHUB_WORKSPACE/test/3C147-HI6.refmodel.lsm.html 'r<0.5d' inner=1 -o /tmp/tmp.lsm.html -f
+
+#######################################
+# end to end test
+#######################################
+RUN pip3 install nose
+WORKDIR /src/pyxis-1.7.1/Pyxis/recipes/meqtrees-batch-test
+RUN python3 -m "nose"
+
+ENTRYPOINT ["meqtree-pipeliner.py"]
+CMD ["--help"]
--- tigger-lsm-1.7.0.orig/CHANGELOG.rst
+++ tigger-lsm-1.7.0/CHANGELOG.rst
@@ -1,47 +1,47 @@
-================
-Tigger Changelog
-================
-
-1.7.0
-=====
-
-* Ported from PyQt 4 to PyQt 5
-* Works with Tigger 1.6.0 and Python 3
-* Various bug fixes
-
-1.3.9
-=====
-
-Changes since 1.3.8:
- 
-* Improve freq0 parsing logic (#84)
-* Install vext.pyqt4 if in virtualenv (#86)
-* Use KERN-2 in Dockerfile
-* Define f0 outside the "if" block #87
-
-1.3.8
-=====
-
-changes since 1.3.7:
- * hack around problem with pkg_resources package bug
-
-
-1.3.5
-=====
-
- * Provide MS list to tigger-convert --app-to-int operation (#69)
- * Tigger incompatible with pyfits>=3.4 (#71)
- * It's given the correct name (install_requires) so that it will actually have an
-   effect on the package manager.
- * PyQt4 is removed from install_requires, since it is not a PyPA-installable package.
-   Instead, a check is added to fail setup if it is not already installed.
- * Added missing scipy and pyfits dependencies.
-
-
-
-1.3.3
-=====
-
- * renamed package to astro-tigger to resolve name conflict on pypi
-
-
+================
+Tigger Changelog
+================
+
+1.7.0
+=====
+
+* Ported from PyQt 4 to PyQt 5
+* Works with Tigger 1.6.0 and Python 3
+* Various bug fixes
+
+1.3.9
+=====
+
+Changes since 1.3.8:
+ 
+* Improve freq0 parsing logic (#84)
+* Install vext.pyqt4 if in virtualenv (#86)
+* Use KERN-2 in Dockerfile
+* Define f0 outside the "if" block #87
+
+1.3.8
+=====
+
+changes since 1.3.7:
+ * hack around problem with pkg_resources package bug
+
+
+1.3.5
+=====
+
+ * Provide MS list to tigger-convert --app-to-int operation (#69)
+ * Tigger incompatible with pyfits>=3.4 (#71)
+ * It's given the correct name (install_requires) so that it will actually have an
+   effect on the package manager.
+ * PyQt4 is removed from install_requires, since it is not a PyPA-installable package.
+   Instead, a check is added to fail setup if it is not already installed.
+ * Added missing scipy and pyfits dependencies.
+
+
+
+1.3.3
+=====
+
+ * renamed package to astro-tigger to resolve name conflict on pypi
+
+
--- tigger-lsm-1.7.0.orig/Dockerfile
+++ tigger-lsm-1.7.0/Dockerfile
@@ -1,30 +1,30 @@
-FROM kernsuite/base:4
-RUN docker-apt-install \
-    python-setuptools \
-    python-numpy \
-    python-scipy \
-    python-astropy \
-    python-astro-kittens \
-    python-astlib \
-    python-pip \
-    python3-setuptools \
-    python3-numpy \
-    python3-scipy \
-    python3-astropy \
-    python3-astlib \
-    python3-pip
-RUN docker-apt-install git
-ADD . /code
-RUN pip3 install git+https://github.com/ska-sa/kittens.git@modernize
-RUN pip install /code
-RUN python2 /usr/local/bin/tigger-convert /code/test/3C147-HI6.refmodel.lsm.html /tmp/output.txt
-RUN python2 /usr/local/bin/tigger-make-brick /code/test/3C147-HI6.refmodel.lsm.html /code/test/bla.fits
-RUN python2 /usr/local/bin/tigger-tag /code/test/3C147-HI6.refmodel.lsm.html gijs
-RUN python2 /usr/local/bin/tigger-restore -f /code/test/bla.fits /code/test/3C147-HI6.refmodel.lsm.html
-RUN pip3 install /code
-RUN python3 /usr/local/bin/tigger-convert -f /code/test/3C147-HI6.refmodel.lsm.html /tmp/output.txt
-RUN python3 /usr/local/bin/tigger-make-brick /code/test/3C147-HI6.refmodel.lsm.html /code/test/bla.fits
-RUN python3 /usr/local/bin/tigger-tag /code/test/3C147-HI6.refmodel.lsm.html gijs
-RUN python3 /usr/local/bin/tigger-restore -f /code/test/bla.fits /code/test/3C147-HI6.refmodel.lsm.html
-RUN echo "the next command should not print 1"
-RUN wc -l /tmp/output.txt
+FROM kernsuite/base:4
+RUN docker-apt-install \
+    python-setuptools \
+    python-numpy \
+    python-scipy \
+    python-astropy \
+    python-astro-kittens \
+    python-astlib \
+    python-pip \
+    python3-setuptools \
+    python3-numpy \
+    python3-scipy \
+    python3-astropy \
+    python3-astlib \
+    python3-pip
+RUN docker-apt-install git
+ADD . /code
+RUN pip3 install git+https://github.com/ska-sa/kittens.git@modernize
+RUN pip install /code
+RUN python2 /usr/local/bin/tigger-convert /code/test/3C147-HI6.refmodel.lsm.html /tmp/output.txt
+RUN python2 /usr/local/bin/tigger-make-brick /code/test/3C147-HI6.refmodel.lsm.html /code/test/bla.fits
+RUN python2 /usr/local/bin/tigger-tag /code/test/3C147-HI6.refmodel.lsm.html gijs
+RUN python2 /usr/local/bin/tigger-restore -f /code/test/bla.fits /code/test/3C147-HI6.refmodel.lsm.html
+RUN pip3 install /code
+RUN python3 /usr/local/bin/tigger-convert -f /code/test/3C147-HI6.refmodel.lsm.html /tmp/output.txt
+RUN python3 /usr/local/bin/tigger-make-brick /code/test/3C147-HI6.refmodel.lsm.html /code/test/bla.fits
+RUN python3 /usr/local/bin/tigger-tag /code/test/3C147-HI6.refmodel.lsm.html gijs
+RUN python3 /usr/local/bin/tigger-restore -f /code/test/bla.fits /code/test/3C147-HI6.refmodel.lsm.html
+RUN echo "the next command should not print 1"
+RUN wc -l /tmp/output.txt
--- tigger-lsm-1.7.0.orig/Jenkinsfile.sh
+++ tigger-lsm-1.7.0/Jenkinsfile.sh
@@ -1,25 +1,25 @@
-set -e
-echo "----------------------------------------------"
-echo "$JOB_NAME build $BUILD_NUMBER"
-WORKSPACE_ROOT="$WORKSPACE/$BUILD_NUMBER"
-echo "Setting up build in $WORKSPACE_ROOT"
-TEST_OUTPUT_DIR_REL=testcase_output
-TEST_OUTPUT_DIR="$WORKSPACE_ROOT/$TEST_OUTPUT_DIR_REL"
-TEST_DATA_DIR="$WORKSPACE/../../../test-data"
-PROJECTS_DIR_REL="projects"
-PROJECTS_DIR=$WORKSPACE_ROOT/$PROJECTS_DIR_REL
-mkdir $TEST_OUTPUT_DIR
-echo "----------------------------------------------"
-echo "\nEnvironment:"
-df -h .
-echo "----------------------------------------------"
-cat /proc/meminfo
-echo "----------------------------------------------"
-
-#build using docker file in directory:
-cd $PROJECTS_DIR/meqtrees-tigger-lsm
-IMAGENAME="mttiglsmpr"
-
-# build and test
-docker build -f .travis/py2.docker -t "${IMAGENAME}27:$BUILD_NUMBER" --no-cache=true .
-docker build -f .travis/py3.docker -t "${IMAGENAME}36:$BUILD_NUMBER" --no-cache=true .
+set -e
+echo "----------------------------------------------"
+echo "$JOB_NAME build $BUILD_NUMBER"
+WORKSPACE_ROOT="$WORKSPACE/$BUILD_NUMBER"
+echo "Setting up build in $WORKSPACE_ROOT"
+TEST_OUTPUT_DIR_REL=testcase_output
+TEST_OUTPUT_DIR="$WORKSPACE_ROOT/$TEST_OUTPUT_DIR_REL"
+TEST_DATA_DIR="$WORKSPACE/../../../test-data"
+PROJECTS_DIR_REL="projects"
+PROJECTS_DIR=$WORKSPACE_ROOT/$PROJECTS_DIR_REL
+mkdir $TEST_OUTPUT_DIR
+echo "----------------------------------------------"
+echo "\nEnvironment:"
+df -h .
+echo "----------------------------------------------"
+cat /proc/meminfo
+echo "----------------------------------------------"
+
+#build using docker file in directory:
+cd $PROJECTS_DIR/meqtrees-tigger-lsm
+IMAGENAME="mttiglsmpr"
+
+# build and test
+docker build -f .travis/py2.docker -t "${IMAGENAME}27:$BUILD_NUMBER" --no-cache=true .
+docker build -f .travis/py3.docker -t "${IMAGENAME}36:$BUILD_NUMBER" --no-cache=true .
--- tigger-lsm-1.7.0.orig/README.rst
+++ tigger-lsm-1.7.0/README.rst
@@ -1,67 +1,67 @@
-==========================
-Tigger-LSM: LSM Libs/utils
-==========================
-
-Installing Tigger-LSM
-=====================
-
-Ubuntu package
---------------
-
-Enable the KERN suite and install the tigger-lsm package.
-
-
-from pypi or from source
-------------------------
-
-requirements:
-
- * Assorted python packages: astropy, numpy, scipy, astLib, python-casacore, future.
- With the exception of astLib, these are already present in most Linux
- distros.  astLib may be downloaded here: http://astlib.sourceforge.net/
-
- * Purr/Kittens. Available from pip as astro-kittens. Else, install the purr package from a MeqTrees binary
- distribution (see http://www.astron.nl/meqwiki/Downloading). Alternatively, check it out from svn (see below),
- and make sure the parent of the Kittens directory is in your PYTHONPATH.
-
-To obtain on ubuntu you can run::
-
-  $ sudo apt-get install python-kittens python-pyfits python-astlib python-scipy python-numpy
-
-now from pip::
-
-    $ pip install astro-tigger-lsm
-
-or from source::
-
-    $ git clone https://github.com/ska-sa/tigger-lsm
-    $ cd tigger-lsm
-    $ python setup.py install
-
-
-Using Tigger-LSM
-================
-
-In python:
-
-    $ import Tigger
-    $ model = Tigger.load("foo.lsm.html")
-
-In the shell
-
-    $ tigger-convert foo.txt foo.lsm.html
-
-
-Questions or problems
-=====================
-
-Open an issue on github
-
-https://github.com/ska-sa/tigger-lsm
-
-
-Travis
-======
-
-.. image:: https://travis-ci.org/ska-sa/tigger-lsm.svg?branch=master
-    :target: https://travis-ci.org/ska-sa/tigger-lsm
+==========================
+Tigger-LSM: LSM Libs/utils
+==========================
+
+Installing Tigger-LSM
+=====================
+
+Ubuntu package
+--------------
+
+Enable the KERN suite and install the tigger-lsm package.
+
+
+from pypi or from source
+------------------------
+
+requirements:
+
+ * Assorted python packages: astropy, numpy, scipy, astLib, python-casacore, future.
+ With the exception of astLib, these are already present in most Linux
+ distros.  astLib may be downloaded here: http://astlib.sourceforge.net/
+
+ * Purr/Kittens. Available from pip as astro-kittens. Else, install the purr package from a MeqTrees binary
+ distribution (see http://www.astron.nl/meqwiki/Downloading). Alternatively, check it out from svn (see below),
+ and make sure the parent of the Kittens directory is in your PYTHONPATH.
+
+To obtain on ubuntu you can run::
+
+  $ sudo apt-get install python-kittens python-pyfits python-astlib python-scipy python-numpy
+
+now from pip::
+
+    $ pip install astro-tigger-lsm
+
+or from source::
+
+    $ git clone https://github.com/ska-sa/tigger-lsm
+    $ cd tigger-lsm
+    $ python setup.py install
+
+
+Using Tigger-LSM
+================
+
+In python:
+
+    $ import Tigger
+    $ model = Tigger.load("foo.lsm.html")
+
+In the shell
+
+    $ tigger-convert foo.txt foo.lsm.html
+
+
+Questions or problems
+=====================
+
+Open an issue on github
+
+https://github.com/ska-sa/tigger-lsm
+
+
+Travis
+======
+
+.. image:: https://travis-ci.org/ska-sa/tigger-lsm.svg?branch=master
+    :target: https://travis-ci.org/ska-sa/tigger-lsm
--- tigger-lsm-1.7.0.orig/Tigger/Coordinates.py
+++ tigger-lsm-1.7.0/Tigger/Coordinates.py
@@ -1,478 +1,478 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import Tigger
-from Tigger import startup_dprint
-
-startup_dprint(1, "start of Coordinates")
-
-import math
-import numpy
-import traceback
-import warnings
-import numpy as np
-from numpy import sin, cos, arcsin
-
-startup_dprint(1, "imported numpy")
-
-from astropy.io import fits as pyfits
-
-startup_dprint(1, "imported pyfits")
-
-DEG = math.pi / 180
-
-startup_dprint(1, "importing WCS")
-
-# If we're being imported outside the main app (e.g. a script is trying to read a Tigger model,
-# whether TDL or otherwise), then pylab may be needed by that script for decent God-fearing
-# purposes. Since WCS is going to pull it in anyway, we try to import it here, and if that
-# fails, replace it by dummies.
-if not Tigger.matplotlib_nuked:
-    try:
-        import pylab
-    except:
-        Tigger.nuke_matplotlib()
-
-# some locales cause WCS to complain that "." is not the decimal separator, so reset it to "C"
-import locale
-
-locale.setlocale(locale.LC_NUMERIC, 'C')
-
-from astropy.wcs import WCS, FITSFixedWarning
-from astropy.coordinates import SkyCoord
-from astropy import units as u
-from astropy.wcs import utils
-import PyWCSTools.wcs
-
-startup_dprint(1, "imported WCS")
-warnings.simplefilter('ignore', category=FITSFixedWarning)
-
-def angular_dist_pos_angle(ra1, dec1, ra2, dec2):
-    """Computes the angular distance between the two points on a sphere, and
-    the position angle (North through East) of the direction from 1 to 2."""
-    # I lifted this somewhere
-    sind1, sind2 = sin(dec1), sin(dec2)
-    cosd1, cosd2 = cos(dec1), cos(dec2)
-    cosra, sinra = cos(ra1 - ra2), sin(ra1 - ra2)
-
-    adist = numpy.arccos(min(sind1 * sind2 + cosd1 * cosd2 * cosra, 1))
-    pa = numpy.arctan2(-cosd2 * sinra, -cosd2 * sind1 * cosra + sind2 * cosd1)
-    return adist, pa
-
-
-def angular_dist_pos_angle2(ra1, dec1, ra2, dec2):
-    """Computes the angular distance between the two points on a sphere, and
-    the position angle (North through East) of the direction from 1 to 2."""
-    # I re-derived this from Euler angles, but it seems to be identical to the above
-    ra = ra2 - ra1
-    sind0, sind, cosd0, cosd = sin(dec1), sin(dec2), cos(dec1), cos(dec2)
-    sina, cosa = sin(ra) * cosd, cos(ra) * cosd
-    x = cosa * sind0 - sind * cosd0
-    y = sina
-    z = cosa * cosd0 + sind * sind0
-    print(x, y, z)
-    PA = numpy.arctan2(y, -x)
-    R = numpy.arccos(z)
-
-    return R, PA
-
-
-def angular_dist_pos_angle2(ra1, dec1, ra2, dec2):
-    """Computes the angular distance between the two points on a sphere, and
-    the position angle (North through East) of the direction from 1 to 2."""
-    # I re-derived this from Euler angles, but it seems to be identical to the above
-    ra = ra2 - ra1
-    sind0, sind, cosd0, cosd = sin(dec1), sin(dec2), cos(dec1), cos(dec2)
-    sina, cosa = sin(ra) * cosd, cos(ra) * cosd
-    x = cosa * sind0 - sind * cosd0
-    y = sina
-    z = cosa * cosd0 + sind * sind0
-    print(x, y, z)
-    PA = numpy.arctan2(y, -x)
-    R = numpy.arccos(z)
-    return R, PA
-
-
-def _deg_to_dms(x, prec=0.01):
-    """Converts x (in degrees) into d,m,s tuple, where d and m are ints.
-    prec gives the precision, in arcseconds."""
-    mins, secs = divmod(round(x * 3600 / prec) * prec, 60)
-    mins = int(mins)
-    degs, mins = divmod(mins, 60)
-    return degs, mins, secs
-
-
-def ra_hms(rad, scale=12, prec=0.01):
-    """Returns RA as tuple of (h,m,s)"""
-    # convert negative values
-    while rad < 0:
-        rad += 2 * math.pi
-    # convert to hours
-    rad *= scale / math.pi
-    return _deg_to_dms(rad, prec)
-
-
-def dec_dms(rad, prec=0.01):
-    return dec_sdms(rad, prec)[1:]
-
-
-def dec_sdms(rad, prec=0.01):
-    """Returns Dec as tuple of (sign,d,m,s). Sign is "+" or "-"."""
-    sign = "-" if rad < 0 else "+"
-    d, m, s = _deg_to_dms(abs(rad) / DEG, prec)
-    return (sign, d, m, s)
-
-
-def ra_hms_string(rad):
-    return "%dh%02dm%05.2fs" % ra_hms(rad)
-
-
-def dec_sdms_string(rad):
-    return "%s%dd%02dm%05.2fs" % dec_sdms(rad)
-
-
-def radec_string(ra, dec):
-    return "%s %s" % (ra_hms_string(ra), dec_sdms_string(dec))
-
-
-class _Projector(object):
-    """This is an abstract base class for all projection classes below. A projection class can be used to create projector objects for
-    conversion between world (ra,dec) and projected (l,m) coordinates.
-
-    * A projector is instantiated as proj = Proj(ra0,dec0)      # ra0,dec0 is projection centre
-    * converts ra,dec->l,m as
-          l,m = proj.lm(ra,dec)
-    * converts l,m->ra,dec as
-          ra,dec = proj.radec(l,m)
-    * converts angular offsets (from 0,0 point) into l,m:
-          l,m = proj.offset(dra,ddec)
-
-    Alternativelty, there are class methods which do not require one to instantiate a projector object:
-
-    * Proj.radec_lm(ra,dec,ra0,dec0)
-    * Proj.lm_radec(l,m,ra0,dec0)
-    * Proj.offset_lm(dra,ddec,ra0,dec0)
-    """
-
-    def __init__(self, ra0, dec0, has_projection=False):
-        self.ra0, self.dec0, self.sin_dec0, self.cos_dec0 = ra0, dec0, sin(dec0), cos(dec0)
-        self._has_projection = has_projection
-
-    def has_projection(self):
-        return bool(self._has_projection)
-
-    def __eq__(self, other):
-        """By default, two projections are the same if their classes match, and their ra0/dec0 match."""
-        return type(self) is type(other) and self.ra0 == other.ra0 and self.dec0 == other.dec0
-
-    def __ne__(self, other):
-        return not self == other
-
-    @classmethod
-    def radec_lm(cls, ra, dec, ra0, dec0):
-        return cls(ra0, dec0).lm(ra, dec)
-
-    @classmethod
-    def lm_radec(cls, l, m, ra0, dec0):
-        return cls(ra0, dec0).radec(l, m)
-
-    @classmethod
-    def offset_lm(cls, dra, ddec, ra0, dec0):
-        return cls(ra0, dec0).offset(dra, ddec)
-
-    def lm(self, ra, dec):
-        raise TypeError("lm() not yet implemented in projection %s" % type(self).__name__)
-
-    def offset(self, dra, ddec):
-        raise TypeError("offset() not yet implemented in projection %s" % type(self).__name__)
-
-    def radec(self, l, m):
-        raise TypeError("radec() not yet implemented in projection %s" % type(self).__name__)
-
-
-def get_wcs_info(hdr):
-    naxis = hdr['NAXIS']
-    ra_axis = dec_axis = None
-    refpix = [hdr["CRPIX%d" % (iaxis+1)]-1 for iaxis in range(naxis)]
-    for iaxis in range(naxis):
-        name = hdr.get("CTYPE%d" % (iaxis+1), '').upper()
-        if name.startswith("RA"):
-            ra_axis = iaxis
-        elif name.startswith("DEC"):
-            dec_axis = iaxis
-    wcs = WCS(hdr)  
-    refsky = wcs.wcs_pix2world([refpix], 0)[0,:]    
-    return wcs, refpix, refsky, ra_axis, dec_axis
-
-
-class Projection(object):
-    """Projection is a container for the different projection classes.
-    Each Projection class can be used to create a projection object: proj = Proj(ra0,dec0), with lm(ra,dec) and radec(l,m) methods.
-    """
-
-    class FITSWCSpix(_Projector):
-        """FITS WCS projection, as determined by a FITS header. lm is in pixels (0-based)."""
-
-        def __init__(self, header):
-            """Constructor. Create from filename (treated as FITS file), or a FITS header object"""
-            # attach to FITS file or header
-            if isinstance(header, str):
-                header = pyfits.open(header)[0].header
-
-            try:
-                self.wcs, self.refpix, self.refsky, self.ra_axis, self.dec_axis = get_wcs_info(header)
-                if self.ra_axis is None or self.dec_axis is None:
-                    raise RuntimeError("Missing RA or DEC axis")
-                ra0, dec0 = self.refsky[self.ra_axis], self.refsky[self.dec_axis]
-                self.xpix0, self.ypix0 = self.refpix[self.ra_axis], self.refpix[self.dec_axis]
-                refpix1 = np.array(self.refpix).copy()
-                refpix1[self.ra_axis] += 1
-                refpix1[self.dec_axis] += 1
-                delta = self.wcs.wcs_pix2world([refpix1], 0)[0] - self.refsky
-                self.xscale = -delta[self.ra_axis] * DEG
-                self.yscale = delta[self.dec_axis] * DEG
-                has_projection = True
-            except Exception as exc:
-                traceback.print_exc()
-                print("No WCS in FITS file, falling back to pixel coordinates.")
-                ra0 = dec0 = self.xpix0 = self.ypix0 = 0
-                self.xscale = self.yscale = DEG / 3600
-                has_projection = False
-            _Projector.__init__(self, ra0 * DEG, dec0 * DEG, has_projection=has_projection)
-
-        def lm(self, ra, dec):
-            if not self.has_projection():
-                return numpy.sin(ra) / -self.xscale, numpy.sin(dec) / self.yscale
-            if numpy.isscalar(ra) and numpy.isscalar(dec):
-                if ra - self.ra0 > math.pi:
-                    ra -= 2 * math.pi
-                if ra - self.ra0 < -math.pi:
-                    ra += 2 * math.pi
-                skyvec = self.refsky.copy()
-                skyvec[self.ra_axis] = ra / DEG
-                skyvec[self.dec_axis] = dec / DEG
-                pixvec = self.wcs.wcs_world2pix([skyvec], 0)[0]
-                return pixvec[self.ra_axis], pixvec[self.dec_axis]
-            else:
-                if numpy.isscalar(ra):
-                    ra = numpy.array(ra)
-                if numpy.isscalar(dec):
-                    dec = numpy.array(dec)
-                n = max(len(ra), len(dec))
-                skymat = numpy.array([self.refsky for _ in range(n)])
-                skymat[:, self.ra_axis] = ra / DEG
-                skymat[:, self.dec_axis] = dec / DEG
-                ra = skymat[:, self.ra_axis]
-                ra[ra - self.ra0 > 180] -= 360
-                ra[ra - self.ra0 < -180] += 360
-                ## when fed in arrays of ra/dec, wcs.wcs2pix will return a nested list of
-                ## [[l1,m1],[l2,m2],,...]. Convert this to an array and extract columns.
-                lm = self.wcs.wcs_world2pix(skymat, 0)
-                return lm[:, self.ra_axis], lm[:, self.dec_axis]
-
-        def radec(self, l, m):
-            if not self.has_projection():
-                return numpy.arcsin(l * -self.xscale), numpy.arcsin(m * self.yscale)
-            if numpy.isscalar(l) and numpy.isscalar(m):
-                pixvec = np.array(self.refpix).copy()
-                pixvec[self.ra_axis] = l
-                pixvec[self.dec_axis] = m
-                skyvec = self.wcs.wcs_pix2world([pixvec], 0)[0]
-                ra, dec = skyvec[self.ra_axis], skyvec[self.dec_axis]
-            else:
-                ## this is slow as molasses because of the way astLib.WCS implements the loop. ~120 seconds for 4M pixels
-                ## when fed in arrays of ra/dec, wcs.wcs2pix will return a nested list of
-                ## [[l1,m1],[l2,m2],,...]. Convert this to an array and extract columns.
-                #        radec = numpy.array(self.wcs.pix2wcs(l,m))
-                #        ra = radec[...,0]
-                #        dec = radec[...,1]
-                ### try a faster implementation -- oh well, only a bit faster, ~95 seconds for the same
-                ### can also replace list comprehension with map(), but that doesn't improve things.
-                ### Note also that the final array constructor takes ~10 secs!
-                radec = numpy.array(
-                    [PyWCSTools.wcs.pix2wcs(self.wcs.WCSStructure, x, y) for x, y in zip(l + 1, m + 1)])
-                ra = radec[..., 0]
-                dec = radec[..., 1]
-            return ra * DEG, dec * DEG
-
-        def offset(self, dra, ddec):
-            """ dra and ddec must be in radians """
-            return self.xpix0 + dra / -self.xscale, self.ypix0 + ddec / self.xscale
-            # TODO - investigate; old code has 'self.xpix0 - dra...', new code is 'self.xpix0 + dra...'?
-            # return self.xpix0 - dra / self.xscale, self.ypix0 + ddec / self.xscale
-
-        def __eq__(self, other):
-            """By default, two projections are the same if their classes match, and their ra0/dec0 match."""
-            return type(self) is type(other) and (
-                self.ra0, self.dec0, self.xpix0, self.ypix0, self.xscale, self.yscale) == (
-                       other.ra0, other.dec0, other.xpix0, other.ypix0, other.xscale, other.yscale)
-
-    ## OMS 9/2/2021: Retiring FITSWCS, as it was only being used as a base for SinWCS() before, so it's cleaner to do SinWCS directly.
-    ## There is one place that Tigger uses FITSWCS, but only to get the header info, not for coordinate conversions.
-
-    ## RAZ 19/4/2021: FITSWCS is still needed by Tigger v1.6.0. The SinWCS Class was not compatible with Tigger v1.6.0.
-    ## Tigger *does* use FITSWCS for coordinate conversions.
-
-    class FITSWCS(_Projector):
-        """FITS WCS projection used by Tigger v1.6.0, as determined by a FITS header.
-        lm is renormalized to radians, l is reversed, 0,0 is at reference pixel.
-        """
-
-        def __init__(self, header):
-            """Constructor. Create from filename (treated as FITS file), or a FITS header object"""
-            # init() has been modified to be a self contained workaround for Tigger v1.6.0
-            # Test file model/2015/combined-4M5S.fits has NAXIS = 3 and WCS AXES = 4,
-            # pix2world then fails expecting N x 4. Using astropy wcs methods and not sub-classing FITSWCSpix
-            # avoids the error and a reliance on naxis.
-
-            # get astropy WCS
-            self.wcs = WCS(header)
-
-            # get number of axis
-            naxis = header['NAXIS']
-
-            # get ra and dec axis
-            self.ra_axis = self.dec_axis = None
-            for iaxis in range(naxis):
-                name = header.get("CTYPE%d" % (iaxis + 1), '').upper()
-                if name.startswith("RA"):
-                    self.ra_axis = iaxis
-                elif name.startswith("DEC"):
-                    self.dec_axis = iaxis
-
-            # get refpix
-            crpix = self.wcs.wcs.crpix
-            self.refpix = crpix - 1
-
-            # get refsky
-            self.refsky = self.wcs.wcs_pix2world([self.refpix], 0)[0, :]
-
-            # get ra0, dec0
-            ra0, dec0 = self.refsky[self.ra_axis], self.refsky[self.dec_axis]
-
-            # set centre x/y pixels
-            self.xpix0, self.ypix0 = self.refpix[self.ra_axis], self.refpix[self.dec_axis]
-
-            # set x/y scales
-            pix_scales = self.wcs.wcs.cdelt
-            self.xscale = -pix_scales[self.ra_axis] * DEG
-            self.yscale = pix_scales[self.dec_axis] * DEG
-
-            # set l0, m0
-            self._l0 = self.refpix[self.ra_axis]
-            self._m0 = self.refpix[self.dec_axis]
-
-            # set projection
-            has_projection = True
-            _Projector.__init__(self, ra0 * DEG, dec0 * DEG, has_projection=has_projection)
-
-        def lm(self, ra, dec):
-            coord = SkyCoord(ra=ra * u.rad, dec=dec * u.rad)
-            coord_pixels = utils.skycoord_to_pixel(coords=coord, wcs=self.wcs, origin=0, mode='all')
-            if np.isnan(np.sum(coord_pixels)):
-                l, m = -0.0, 0.0
-            else:
-                l, m = coord_pixels[self.ra_axis], coord_pixels[self.dec_axis]
-            l = (l - self._l0) * -self.xscale
-            m = (m - self._m0) * self.yscale
-            return l, m
-
-        def radec(self, l, m):
-            x = self.xpix0 + l / -self.xscale
-            y = self.ypix0 + m / self.yscale
-            coord = utils.pixel_to_skycoord(xp=x, yp=y, wcs=self.wcs, origin=0, mode='all')
-            ra = coord.ra.value
-            dec = coord.dec.value
-            return ra * DEG, dec * DEG
-
-        def offset(self, dra, ddec):
-            # old tigger-lsm had 'return dra, ddec'
-            # using new tigger-lsm SinWCS default
-            return sin(dra), sin(ddec)
-
-        def __eq__(self, other):
-            """By default, two projections are the same if their classes match, and their ra0/dec0 match."""
-            return type(self) is type(other) and (
-                self.ra0, self.dec0, self.xpix0, self.ypix0, self.xscale, self.yscale) == (
-                       other.ra0, other.dec0, other.xpix0, other.ypix0, other.xscale, other.yscale)
-
-    @staticmethod
-    def FITSWCS_static(ra0, dec0):
-        """
-        A static FITSWCS projection used by Tigger v.1.60, which is centred on the given ra0/dec0 coordinates,
-        with 0,0 being the reference pixel,
-        """
-        hdu = pyfits.PrimaryHDU()
-        hdu.header.set('NAXIS', 2)
-        hdu.header.set('NAXIS1', 3)
-        hdu.header.set('NAXIS2', 3)
-        hdu.header.set('CTYPE1', 'RA---SIN')
-        hdu.header.set('CDELT1', -1. / 60)
-        hdu.header.set('CRPIX1', 2)
-        hdu.header.set('CRVAL1', ra0 / DEG)
-        hdu.header.set('CUNIT1', 'deg     ')
-        hdu.header.set('CTYPE2', 'DEC--SIN')
-        hdu.header.set('CDELT2', 1. / 60)
-        hdu.header.set('CRPIX2', 2)
-        hdu.header.set('CRVAL2', dec0 / DEG)
-        hdu.header.set('CUNIT2', 'deg     ')
-        return Projection.FITSWCS(hdu.header)
-
-    class SinWCS(FITSWCSpix):
-        """
-        A sin WCS projection centred on the given ra0/dec0 coordinates,
-        with 0,0 being the reference pixel,
-        """
-
-        def __init__(self, ra0, dec0):
-            hdu = pyfits.PrimaryHDU()
-            hdu.header.set('NAXIS', 2)
-            hdu.header.set('NAXIS1', 3)
-            hdu.header.set('NAXIS2', 3)
-            hdu.header.set('CTYPE1', 'RA---SIN')
-            hdu.header.set('CDELT1', -1. / 60)
-            hdu.header.set('CRPIX1', 2)
-            hdu.header.set('CRVAL1', ra0 / DEG)
-            hdu.header.set('CUNIT1', 'deg     ')
-            hdu.header.set('CTYPE2', 'DEC--SIN')
-            hdu.header.set('CDELT2', 1. / 60)
-            hdu.header.set('CRPIX2', 2)
-            hdu.header.set('CRVAL2', dec0 / DEG)
-            hdu.header.set('CUNIT2', 'deg     ')
-            Projection.FITSWCSpix.__init__(self, hdu.header)
-            self._l0 = self.refpix[self.ra_axis]
-            self._m0 = self.refpix[self.dec_axis]
-
-        def lm(self, ra, dec):
-            l, m = Projection.FITSWCSpix.lm(self, ra, dec)
-            return sin((l - self._l0) * -self.xscale), sin((m - self._m0)*self.yscale)
-
-        def radec(self, l, m):
-            return Projection.FITSWCSpix.radec(self, arcsin(l / -self.xscale + self._l0), arcsin(m / self.yscale + self._m0))
-
-        def offset(self, dra, ddec):
-            return sin(dra), sin(ddec)
-
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import Tigger
+from Tigger import startup_dprint
+
+startup_dprint(1, "start of Coordinates")
+
+import math
+import numpy
+import traceback
+import warnings
+import numpy as np
+from numpy import sin, cos, arcsin
+
+startup_dprint(1, "imported numpy")
+
+from astropy.io import fits as pyfits
+
+startup_dprint(1, "imported pyfits")
+
+DEG = math.pi / 180
+
+startup_dprint(1, "importing WCS")
+
+# If we're being imported outside the main app (e.g. a script is trying to read a Tigger model,
+# whether TDL or otherwise), then pylab may be needed by that script for decent God-fearing
+# purposes. Since WCS is going to pull it in anyway, we try to import it here, and if that
+# fails, replace it by dummies.
+if not Tigger.matplotlib_nuked:
+    try:
+        import pylab
+    except:
+        Tigger.nuke_matplotlib()
+
+# some locales cause WCS to complain that "." is not the decimal separator, so reset it to "C"
+import locale
+
+locale.setlocale(locale.LC_NUMERIC, 'C')
+
+from astropy.wcs import WCS, FITSFixedWarning
+from astropy.coordinates import SkyCoord
+from astropy import units as u
+from astropy.wcs import utils
+import PyWCSTools.wcs
+
+startup_dprint(1, "imported WCS")
+warnings.simplefilter('ignore', category=FITSFixedWarning)
+
+def angular_dist_pos_angle(ra1, dec1, ra2, dec2):
+    """Computes the angular distance between the two points on a sphere, and
+    the position angle (North through East) of the direction from 1 to 2."""
+    # I lifted this somewhere
+    sind1, sind2 = sin(dec1), sin(dec2)
+    cosd1, cosd2 = cos(dec1), cos(dec2)
+    cosra, sinra = cos(ra1 - ra2), sin(ra1 - ra2)
+
+    adist = numpy.arccos(min(sind1 * sind2 + cosd1 * cosd2 * cosra, 1))
+    pa = numpy.arctan2(-cosd2 * sinra, -cosd2 * sind1 * cosra + sind2 * cosd1)
+    return adist, pa
+
+
+def angular_dist_pos_angle2(ra1, dec1, ra2, dec2):
+    """Computes the angular distance between the two points on a sphere, and
+    the position angle (North through East) of the direction from 1 to 2."""
+    # I re-derived this from Euler angles, but it seems to be identical to the above
+    ra = ra2 - ra1
+    sind0, sind, cosd0, cosd = sin(dec1), sin(dec2), cos(dec1), cos(dec2)
+    sina, cosa = sin(ra) * cosd, cos(ra) * cosd
+    x = cosa * sind0 - sind * cosd0
+    y = sina
+    z = cosa * cosd0 + sind * sind0
+    print(x, y, z)
+    PA = numpy.arctan2(y, -x)
+    R = numpy.arccos(z)
+
+    return R, PA
+
+
+def angular_dist_pos_angle2(ra1, dec1, ra2, dec2):
+    """Computes the angular distance between the two points on a sphere, and
+    the position angle (North through East) of the direction from 1 to 2."""
+    # I re-derived this from Euler angles, but it seems to be identical to the above
+    ra = ra2 - ra1
+    sind0, sind, cosd0, cosd = sin(dec1), sin(dec2), cos(dec1), cos(dec2)
+    sina, cosa = sin(ra) * cosd, cos(ra) * cosd
+    x = cosa * sind0 - sind * cosd0
+    y = sina
+    z = cosa * cosd0 + sind * sind0
+    print(x, y, z)
+    PA = numpy.arctan2(y, -x)
+    R = numpy.arccos(z)
+    return R, PA
+
+
+def _deg_to_dms(x, prec=0.01):
+    """Converts x (in degrees) into d,m,s tuple, where d and m are ints.
+    prec gives the precision, in arcseconds."""
+    mins, secs = divmod(round(x * 3600 / prec) * prec, 60)
+    mins = int(mins)
+    degs, mins = divmod(mins, 60)
+    return degs, mins, secs
+
+
+def ra_hms(rad, scale=12, prec=0.01):
+    """Returns RA as tuple of (h,m,s)"""
+    # convert negative values
+    while rad < 0:
+        rad += 2 * math.pi
+    # convert to hours
+    rad *= scale / math.pi
+    return _deg_to_dms(rad, prec)
+
+
+def dec_dms(rad, prec=0.01):
+    return dec_sdms(rad, prec)[1:]
+
+
+def dec_sdms(rad, prec=0.01):
+    """Returns Dec as tuple of (sign,d,m,s). Sign is "+" or "-"."""
+    sign = "-" if rad < 0 else "+"
+    d, m, s = _deg_to_dms(abs(rad) / DEG, prec)
+    return (sign, d, m, s)
+
+
+def ra_hms_string(rad):
+    return "%dh%02dm%05.2fs" % ra_hms(rad)
+
+
+def dec_sdms_string(rad):
+    return "%s%dd%02dm%05.2fs" % dec_sdms(rad)
+
+
+def radec_string(ra, dec):
+    return "%s %s" % (ra_hms_string(ra), dec_sdms_string(dec))
+
+
+class _Projector(object):
+    """This is an abstract base class for all projection classes below. A projection class can be used to create projector objects for
+    conversion between world (ra,dec) and projected (l,m) coordinates.
+
+    * A projector is instantiated as proj = Proj(ra0,dec0)      # ra0,dec0 is projection centre
+    * converts ra,dec->l,m as
+          l,m = proj.lm(ra,dec)
+    * converts l,m->ra,dec as
+          ra,dec = proj.radec(l,m)
+    * converts angular offsets (from 0,0 point) into l,m:
+          l,m = proj.offset(dra,ddec)
+
+    Alternativelty, there are class methods which do not require one to instantiate a projector object:
+
+    * Proj.radec_lm(ra,dec,ra0,dec0)
+    * Proj.lm_radec(l,m,ra0,dec0)
+    * Proj.offset_lm(dra,ddec,ra0,dec0)
+    """
+
+    def __init__(self, ra0, dec0, has_projection=False):
+        self.ra0, self.dec0, self.sin_dec0, self.cos_dec0 = ra0, dec0, sin(dec0), cos(dec0)
+        self._has_projection = has_projection
+
+    def has_projection(self):
+        return bool(self._has_projection)
+
+    def __eq__(self, other):
+        """By default, two projections are the same if their classes match, and their ra0/dec0 match."""
+        return type(self) is type(other) and self.ra0 == other.ra0 and self.dec0 == other.dec0
+
+    def __ne__(self, other):
+        return not self == other
+
+    @classmethod
+    def radec_lm(cls, ra, dec, ra0, dec0):
+        return cls(ra0, dec0).lm(ra, dec)
+
+    @classmethod
+    def lm_radec(cls, l, m, ra0, dec0):
+        return cls(ra0, dec0).radec(l, m)
+
+    @classmethod
+    def offset_lm(cls, dra, ddec, ra0, dec0):
+        return cls(ra0, dec0).offset(dra, ddec)
+
+    def lm(self, ra, dec):
+        raise TypeError("lm() not yet implemented in projection %s" % type(self).__name__)
+
+    def offset(self, dra, ddec):
+        raise TypeError("offset() not yet implemented in projection %s" % type(self).__name__)
+
+    def radec(self, l, m):
+        raise TypeError("radec() not yet implemented in projection %s" % type(self).__name__)
+
+
+def get_wcs_info(hdr):
+    naxis = hdr['NAXIS']
+    ra_axis = dec_axis = None
+    refpix = [hdr["CRPIX%d" % (iaxis+1)]-1 for iaxis in range(naxis)]
+    for iaxis in range(naxis):
+        name = hdr.get("CTYPE%d" % (iaxis+1), '').upper()
+        if name.startswith("RA"):
+            ra_axis = iaxis
+        elif name.startswith("DEC"):
+            dec_axis = iaxis
+    wcs = WCS(hdr)  
+    refsky = wcs.wcs_pix2world([refpix], 0)[0,:]    
+    return wcs, refpix, refsky, ra_axis, dec_axis
+
+
+class Projection(object):
+    """Projection is a container for the different projection classes.
+    Each Projection class can be used to create a projection object: proj = Proj(ra0,dec0), with lm(ra,dec) and radec(l,m) methods.
+    """
+
+    class FITSWCSpix(_Projector):
+        """FITS WCS projection, as determined by a FITS header. lm is in pixels (0-based)."""
+
+        def __init__(self, header):
+            """Constructor. Create from filename (treated as FITS file), or a FITS header object"""
+            # attach to FITS file or header
+            if isinstance(header, str):
+                header = pyfits.open(header)[0].header
+
+            try:
+                self.wcs, self.refpix, self.refsky, self.ra_axis, self.dec_axis = get_wcs_info(header)
+                if self.ra_axis is None or self.dec_axis is None:
+                    raise RuntimeError("Missing RA or DEC axis")
+                ra0, dec0 = self.refsky[self.ra_axis], self.refsky[self.dec_axis]
+                self.xpix0, self.ypix0 = self.refpix[self.ra_axis], self.refpix[self.dec_axis]
+                refpix1 = np.array(self.refpix).copy()
+                refpix1[self.ra_axis] += 1
+                refpix1[self.dec_axis] += 1
+                delta = self.wcs.wcs_pix2world([refpix1], 0)[0] - self.refsky
+                self.xscale = -delta[self.ra_axis] * DEG
+                self.yscale = delta[self.dec_axis] * DEG
+                has_projection = True
+            except Exception as exc:
+                traceback.print_exc()
+                print("No WCS in FITS file, falling back to pixel coordinates.")
+                ra0 = dec0 = self.xpix0 = self.ypix0 = 0
+                self.xscale = self.yscale = DEG / 3600
+                has_projection = False
+            _Projector.__init__(self, ra0 * DEG, dec0 * DEG, has_projection=has_projection)
+
+        def lm(self, ra, dec):
+            if not self.has_projection():
+                return numpy.sin(ra) / -self.xscale, numpy.sin(dec) / self.yscale
+            if numpy.isscalar(ra) and numpy.isscalar(dec):
+                if ra - self.ra0 > math.pi:
+                    ra -= 2 * math.pi
+                if ra - self.ra0 < -math.pi:
+                    ra += 2 * math.pi
+                skyvec = self.refsky.copy()
+                skyvec[self.ra_axis] = ra / DEG
+                skyvec[self.dec_axis] = dec / DEG
+                pixvec = self.wcs.wcs_world2pix([skyvec], 0)[0]
+                return pixvec[self.ra_axis], pixvec[self.dec_axis]
+            else:
+                if numpy.isscalar(ra):
+                    ra = numpy.array(ra)
+                if numpy.isscalar(dec):
+                    dec = numpy.array(dec)
+                n = max(len(ra), len(dec))
+                skymat = numpy.array([self.refsky for _ in range(n)])
+                skymat[:, self.ra_axis] = ra / DEG
+                skymat[:, self.dec_axis] = dec / DEG
+                ra = skymat[:, self.ra_axis]
+                ra[ra - self.ra0 > 180] -= 360
+                ra[ra - self.ra0 < -180] += 360
+                ## when fed in arrays of ra/dec, wcs.wcs2pix will return a nested list of
+                ## [[l1,m1],[l2,m2],,...]. Convert this to an array and extract columns.
+                lm = self.wcs.wcs_world2pix(skymat, 0)
+                return lm[:, self.ra_axis], lm[:, self.dec_axis]
+
+        def radec(self, l, m):
+            if not self.has_projection():
+                return numpy.arcsin(l * -self.xscale), numpy.arcsin(m * self.yscale)
+            if numpy.isscalar(l) and numpy.isscalar(m):
+                pixvec = np.array(self.refpix).copy()
+                pixvec[self.ra_axis] = l
+                pixvec[self.dec_axis] = m
+                skyvec = self.wcs.wcs_pix2world([pixvec], 0)[0]
+                ra, dec = skyvec[self.ra_axis], skyvec[self.dec_axis]
+            else:
+                ## this is slow as molasses because of the way astLib.WCS implements the loop. ~120 seconds for 4M pixels
+                ## when fed in arrays of ra/dec, wcs.wcs2pix will return a nested list of
+                ## [[l1,m1],[l2,m2],,...]. Convert this to an array and extract columns.
+                #        radec = numpy.array(self.wcs.pix2wcs(l,m))
+                #        ra = radec[...,0]
+                #        dec = radec[...,1]
+                ### try a faster implementation -- oh well, only a bit faster, ~95 seconds for the same
+                ### can also replace list comprehension with map(), but that doesn't improve things.
+                ### Note also that the final array constructor takes ~10 secs!
+                radec = numpy.array(
+                    [PyWCSTools.wcs.pix2wcs(self.wcs.WCSStructure, x, y) for x, y in zip(l + 1, m + 1)])
+                ra = radec[..., 0]
+                dec = radec[..., 1]
+            return ra * DEG, dec * DEG
+
+        def offset(self, dra, ddec):
+            """ dra and ddec must be in radians """
+            return self.xpix0 + dra / -self.xscale, self.ypix0 + ddec / self.xscale
+            # TODO - investigate; old code has 'self.xpix0 - dra...', new code is 'self.xpix0 + dra...'?
+            # return self.xpix0 - dra / self.xscale, self.ypix0 + ddec / self.xscale
+
+        def __eq__(self, other):
+            """By default, two projections are the same if their classes match, and their ra0/dec0 match."""
+            return type(self) is type(other) and (
+                self.ra0, self.dec0, self.xpix0, self.ypix0, self.xscale, self.yscale) == (
+                       other.ra0, other.dec0, other.xpix0, other.ypix0, other.xscale, other.yscale)
+
+    ## OMS 9/2/2021: Retiring FITSWCS, as it was only being used as a base for SinWCS() before, so it's cleaner to do SinWCS directly.
+    ## There is one place that Tigger uses FITSWCS, but only to get the header info, not for coordinate conversions.
+
+    ## RAZ 19/4/2021: FITSWCS is still needed by Tigger v1.6.0. The SinWCS Class was not compatible with Tigger v1.6.0.
+    ## Tigger *does* use FITSWCS for coordinate conversions.
+
+    class FITSWCS(_Projector):
+        """FITS WCS projection used by Tigger v1.6.0, as determined by a FITS header.
+        lm is renormalized to radians, l is reversed, 0,0 is at reference pixel.
+        """
+
+        def __init__(self, header):
+            """Constructor. Create from filename (treated as FITS file), or a FITS header object"""
+            # init() has been modified to be a self contained workaround for Tigger v1.6.0
+            # Test file model/2015/combined-4M5S.fits has NAXIS = 3 and WCS AXES = 4,
+            # pix2world then fails expecting N x 4. Using astropy wcs methods and not sub-classing FITSWCSpix
+            # avoids the error and a reliance on naxis.
+
+            # get astropy WCS
+            self.wcs = WCS(header)
+
+            # get number of axis
+            naxis = header['NAXIS']
+
+            # get ra and dec axis
+            self.ra_axis = self.dec_axis = None
+            for iaxis in range(naxis):
+                name = header.get("CTYPE%d" % (iaxis + 1), '').upper()
+                if name.startswith("RA"):
+                    self.ra_axis = iaxis
+                elif name.startswith("DEC"):
+                    self.dec_axis = iaxis
+
+            # get refpix
+            crpix = self.wcs.wcs.crpix
+            self.refpix = crpix - 1
+
+            # get refsky
+            self.refsky = self.wcs.wcs_pix2world([self.refpix], 0)[0, :]
+
+            # get ra0, dec0
+            ra0, dec0 = self.refsky[self.ra_axis], self.refsky[self.dec_axis]
+
+            # set centre x/y pixels
+            self.xpix0, self.ypix0 = self.refpix[self.ra_axis], self.refpix[self.dec_axis]
+
+            # set x/y scales
+            pix_scales = self.wcs.wcs.cdelt
+            self.xscale = -pix_scales[self.ra_axis] * DEG
+            self.yscale = pix_scales[self.dec_axis] * DEG
+
+            # set l0, m0
+            self._l0 = self.refpix[self.ra_axis]
+            self._m0 = self.refpix[self.dec_axis]
+
+            # set projection
+            has_projection = True
+            _Projector.__init__(self, ra0 * DEG, dec0 * DEG, has_projection=has_projection)
+
+        def lm(self, ra, dec):
+            coord = SkyCoord(ra=ra * u.rad, dec=dec * u.rad)
+            coord_pixels = utils.skycoord_to_pixel(coords=coord, wcs=self.wcs, origin=0, mode='all')
+            if np.isnan(np.sum(coord_pixels)):
+                l, m = -0.0, 0.0
+            else:
+                l, m = coord_pixels[self.ra_axis], coord_pixels[self.dec_axis]
+            l = (l - self._l0) * -self.xscale
+            m = (m - self._m0) * self.yscale
+            return l, m
+
+        def radec(self, l, m):
+            x = self.xpix0 + l / -self.xscale
+            y = self.ypix0 + m / self.yscale
+            coord = utils.pixel_to_skycoord(xp=x, yp=y, wcs=self.wcs, origin=0, mode='all')
+            ra = coord.ra.value
+            dec = coord.dec.value
+            return ra * DEG, dec * DEG
+
+        def offset(self, dra, ddec):
+            # old tigger-lsm had 'return dra, ddec'
+            # using new tigger-lsm SinWCS default
+            return sin(dra), sin(ddec)
+
+        def __eq__(self, other):
+            """By default, two projections are the same if their classes match, and their ra0/dec0 match."""
+            return type(self) is type(other) and (
+                self.ra0, self.dec0, self.xpix0, self.ypix0, self.xscale, self.yscale) == (
+                       other.ra0, other.dec0, other.xpix0, other.ypix0, other.xscale, other.yscale)
+
+    @staticmethod
+    def FITSWCS_static(ra0, dec0):
+        """
+        A static FITSWCS projection used by Tigger v.1.60, which is centred on the given ra0/dec0 coordinates,
+        with 0,0 being the reference pixel,
+        """
+        hdu = pyfits.PrimaryHDU()
+        hdu.header.set('NAXIS', 2)
+        hdu.header.set('NAXIS1', 3)
+        hdu.header.set('NAXIS2', 3)
+        hdu.header.set('CTYPE1', 'RA---SIN')
+        hdu.header.set('CDELT1', -1. / 60)
+        hdu.header.set('CRPIX1', 2)
+        hdu.header.set('CRVAL1', ra0 / DEG)
+        hdu.header.set('CUNIT1', 'deg     ')
+        hdu.header.set('CTYPE2', 'DEC--SIN')
+        hdu.header.set('CDELT2', 1. / 60)
+        hdu.header.set('CRPIX2', 2)
+        hdu.header.set('CRVAL2', dec0 / DEG)
+        hdu.header.set('CUNIT2', 'deg     ')
+        return Projection.FITSWCS(hdu.header)
+
+    class SinWCS(FITSWCSpix):
+        """
+        A sin WCS projection centred on the given ra0/dec0 coordinates,
+        with 0,0 being the reference pixel,
+        """
+
+        def __init__(self, ra0, dec0):
+            hdu = pyfits.PrimaryHDU()
+            hdu.header.set('NAXIS', 2)
+            hdu.header.set('NAXIS1', 3)
+            hdu.header.set('NAXIS2', 3)
+            hdu.header.set('CTYPE1', 'RA---SIN')
+            hdu.header.set('CDELT1', -1. / 60)
+            hdu.header.set('CRPIX1', 2)
+            hdu.header.set('CRVAL1', ra0 / DEG)
+            hdu.header.set('CUNIT1', 'deg     ')
+            hdu.header.set('CTYPE2', 'DEC--SIN')
+            hdu.header.set('CDELT2', 1. / 60)
+            hdu.header.set('CRPIX2', 2)
+            hdu.header.set('CRVAL2', dec0 / DEG)
+            hdu.header.set('CUNIT2', 'deg     ')
+            Projection.FITSWCSpix.__init__(self, hdu.header)
+            self._l0 = self.refpix[self.ra_axis]
+            self._m0 = self.refpix[self.dec_axis]
+
+        def lm(self, ra, dec):
+            l, m = Projection.FITSWCSpix.lm(self, ra, dec)
+            return sin((l - self._l0) * -self.xscale), sin((m - self._m0)*self.yscale)
+
+        def radec(self, l, m):
+            return Projection.FITSWCSpix.radec(self, arcsin(l / -self.xscale + self._l0), arcsin(m / self.yscale + self._m0))
+
+        def offset(self, dra, ddec):
+            return sin(dra), sin(ddec)
+
--- tigger-lsm-1.7.0.orig/Tigger/Models/Formats/AIPSCC.py
+++ tigger-lsm-1.7.0/Tigger/Models/Formats/AIPSCC.py
@@ -1,108 +1,108 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id: BBS.py 8378 2011-08-30 15:18:30Z oms $
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import math
-from math import cos, sin, asin, atan2, sqrt
-
-import Tigger.Models.Formats
-from Tigger import Coordinates
-from Tigger.Models import ModelClasses
-from Tigger.Models import SkyModel
-from Tigger.Models.Formats import dprint, dprintf
-
-ARCSEC = (math.pi / 180) / (60 * 60)
-
-"""
-Loads an AIPS-format clean component list
-"""
-
-
-def lm_to_radec(l, m, ra0, dec0):
-    """Returns ra,dec corresponding to l,m w.r.t. direction ra0,dec0"""
-    # see formula at http://en.wikipedia.org/wiki/Orthographic_projection_(cartography)
-    rho = sqrt(l ** 2 + m ** 2)
-    if rho == 0.0:
-        ra = ra0
-        dec = dec0
-    else:
-        cc = asin(rho)
-        ra = ra0 + atan2(l * sin(cc), rho * cos(dec0) * cos(cc) - m * sin(dec0) * sin(cc))
-        dec = asin(cos(cc) * sin(dec0) + m * sin(cc) * cos(dec0) / rho)
-    return ra, dec
-
-
-def load(filename, center=None, **kw):
-    """Imports an AIPs clean component list file
-    """
-    srclist = []
-    dprint(1, "importing AIPS clean component table", filename)
-    # read file
-    ff = open(filename)
-
-    if center is None:
-        raise ValueError("field centre must be specified")
-
-    # now process file line-by-line
-    linenum = 0
-    for line in ff:
-        linenum += 1
-        # parse one line
-        dprint(4, "read line:", line)
-        ff = line.split()
-        if len(ff) != 5:
-            continue
-        try:
-            num = int(ff[0])
-            dx, dy, i, i_tot = list(map(float, ff[1:]))
-        except:
-            continue
-        try:
-            # convert dx/dy to real positions
-            l, m = sin(dx * ARCSEC), sin(dy * ARCSEC)
-            ra, dec = lm_to_radec(l, m, *center)
-            pos = ModelClasses.Position(ra, dec)
-        except Exception as exc:
-            print("CC %d: error converting coordinates (%s), skipping" % (num, str(exc)))
-            continue
-        flux = ModelClasses.Flux(i)
-        # now create a source object
-        src = SkyModel.Source('cc%d' % num, pos, flux)
-        src.setAttribute('r', math.sqrt(l * l + m * m))
-        srclist.append(src)
-    dprintf(2, "imported %d sources from file %s\n", len(srclist), filename)
-    # create model
-    model = ModelClasses.SkyModel(*srclist)
-    # setup model center
-    model.setFieldCenter(*center)
-    # setup radial distances
-    projection = Coordinates.Projection.SinWCS(*model.fieldCenter())
-    for src in model.sources:
-        l, m = projection.lm(src.pos.ra, src.pos.dec)
-        src.setAttribute('r', math.sqrt(l * l + m * m))
-    return model
-
-
-Tigger.Models.Formats.registerFormat("AIPSCC", load, "AIPS CC list", (".cc", ".CC"))
+# -*- coding: utf-8 -*-
+#
+# % $Id: BBS.py 8378 2011-08-30 15:18:30Z oms $
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import math
+from math import cos, sin, asin, atan2, sqrt
+
+import Tigger.Models.Formats
+from Tigger import Coordinates
+from Tigger.Models import ModelClasses
+from Tigger.Models import SkyModel
+from Tigger.Models.Formats import dprint, dprintf
+
+ARCSEC = (math.pi / 180) / (60 * 60)
+
+"""
+Loads an AIPS-format clean component list
+"""
+
+
+def lm_to_radec(l, m, ra0, dec0):
+    """Returns ra,dec corresponding to l,m w.r.t. direction ra0,dec0"""
+    # see formula at http://en.wikipedia.org/wiki/Orthographic_projection_(cartography)
+    rho = sqrt(l ** 2 + m ** 2)
+    if rho == 0.0:
+        ra = ra0
+        dec = dec0
+    else:
+        cc = asin(rho)
+        ra = ra0 + atan2(l * sin(cc), rho * cos(dec0) * cos(cc) - m * sin(dec0) * sin(cc))
+        dec = asin(cos(cc) * sin(dec0) + m * sin(cc) * cos(dec0) / rho)
+    return ra, dec
+
+
+def load(filename, center=None, **kw):
+    """Imports an AIPs clean component list file
+    """
+    srclist = []
+    dprint(1, "importing AIPS clean component table", filename)
+    # read file
+    ff = open(filename)
+
+    if center is None:
+        raise ValueError("field centre must be specified")
+
+    # now process file line-by-line
+    linenum = 0
+    for line in ff:
+        linenum += 1
+        # parse one line
+        dprint(4, "read line:", line)
+        ff = line.split()
+        if len(ff) != 5:
+            continue
+        try:
+            num = int(ff[0])
+            dx, dy, i, i_tot = list(map(float, ff[1:]))
+        except:
+            continue
+        try:
+            # convert dx/dy to real positions
+            l, m = sin(dx * ARCSEC), sin(dy * ARCSEC)
+            ra, dec = lm_to_radec(l, m, *center)
+            pos = ModelClasses.Position(ra, dec)
+        except Exception as exc:
+            print("CC %d: error converting coordinates (%s), skipping" % (num, str(exc)))
+            continue
+        flux = ModelClasses.Flux(i)
+        # now create a source object
+        src = SkyModel.Source('cc%d' % num, pos, flux)
+        src.setAttribute('r', math.sqrt(l * l + m * m))
+        srclist.append(src)
+    dprintf(2, "imported %d sources from file %s\n", len(srclist), filename)
+    # create model
+    model = ModelClasses.SkyModel(*srclist)
+    # setup model center
+    model.setFieldCenter(*center)
+    # setup radial distances
+    projection = Coordinates.Projection.SinWCS(*model.fieldCenter())
+    for src in model.sources:
+        l, m = projection.lm(src.pos.ra, src.pos.dec)
+        src.setAttribute('r', math.sqrt(l * l + m * m))
+    return model
+
+
+Tigger.Models.Formats.registerFormat("AIPSCC", load, "AIPS CC list", (".cc", ".CC"))
--- tigger-lsm-1.7.0.orig/Tigger/Models/Formats/AIPSCCFITS.py
+++ tigger-lsm-1.7.0/Tigger/Models/Formats/AIPSCCFITS.py
@@ -1,114 +1,114 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id: BBS.py 8378 2011-08-30 15:18:30Z oms $
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import math
-import sys
-from math import cos, sin, asin, atan2, sqrt
-
-from astropy.io import fits as pyfits
-
-import Tigger.Models.Formats
-from Tigger import Coordinates
-from Tigger.Models import ModelClasses
-from Tigger.Models import SkyModel
-from Tigger.Models.Formats import dprint, dprintf
-
-DEG = math.pi / 180
-ARCMIN = DEG / 60
-ARCSEC = ARCMIN / 60
-
-"""
-Loads an AIPS-format clean component list
-"""
-
-
-def lm_to_radec(l, m, ra0, dec0):
-    """Returns ra,dec corresponding to l,m w.r.t. direction ra0,dec0"""
-    # see formula at http://en.wikipedia.org/wiki/Orthographic_projection_(cartography)
-    rho = sqrt(l ** 2 + m ** 2)
-    if rho == 0.0:
-        ra = ra0
-        dec = dec0
-    else:
-        cc = asin(rho)
-        ra = ra0 + atan2(l * sin(cc), rho * cos(dec0) * cos(cc) - m * sin(dec0) * sin(cc))
-        dec = asin(cos(cc) * sin(dec0) + m * sin(cc) * cos(dec0) / rho)
-    return ra, dec
-
-
-_units = dict(DEG=DEG, DEGREE=DEG, DEGREES=DEG,
-              RAD=1, RADIAN=1, RADIANS=1,
-              ARCMIN=ARCMIN, ARCMINS=ARCMIN,
-              ARCSEC=ARCSEC, ARCSECS=ARCSEC
-              )
-
-
-def load(filename, center=None, **kw):
-    """Imports an AIPS clean component list from FITS table
-    """
-    srclist = []
-    dprint(1, "importing AIPS clean component FITS table", filename)
-    # read file
-    ff = pyfits.open(filename)
-
-    if center is None:
-        hdr = ff[0].header
-        ra = hdr['CRVAL1'] * _units[hdr.get('CUNIT1', 'DEG').strip()]
-        dec = hdr['CRVAL2'] * _units[hdr.get('CUNIT2', 'DEG').strip()]
-
-        print("Using FITS image centre (%.4f, %.4f deg) as field centre" % (ra / DEG, dec / DEG))
-        center = ra, dec
-
-    # now process file line-by-line
-    cclist = ff[1].data
-    hdr = ff[1].header
-    ux = _units[hdr.get('TUNIT2', 'DEG').strip()]
-    uy = _units[hdr.get('TUNIT3', 'DEG').strip()]
-    for num, ccrec in enumerate(cclist):
-        stokes_i, dx, dy = list(map(float, ccrec))
-        # convert dx/dy to real positions
-        l, m = sin(dx * ux), sin(dy * uy)
-        ra, dec = lm_to_radec(l, m, *center)
-        pos = ModelClasses.Position(ra, dec)
-        flux = ModelClasses.Flux(stokes_i)
-        # now create a source object
-        src = SkyModel.Source('cc%d' % num, pos, flux)
-        src.setAttribute('r', math.sqrt(l * l + m * m))
-        srclist.append(src)
-    dprintf(2, "imported %d sources from file %s\n", len(srclist), filename)
-    # create model
-    model = ModelClasses.SkyModel(*srclist)
-    # setup model center
-    model.setFieldCenter(*center)
-    # setup radial distances
-    projection = Coordinates.Projection.SinWCS(*model.fieldCenter())
-    for src in model.sources:
-        l, m = projection.lm(src.pos.ra, src.pos.dec)
-        src.setAttribute('r', math.sqrt(l * l + m * m))
-    return model
-
-
-Tigger.Models.Formats.registerFormat("AIPSCCFITS", load, "AIPS CC FITS model", (".fits", ".FITS", ".fts", ".FTS"))
+# -*- coding: utf-8 -*-
+#
+# % $Id: BBS.py 8378 2011-08-30 15:18:30Z oms $
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import math
+import sys
+from math import cos, sin, asin, atan2, sqrt
+
+from astropy.io import fits as pyfits
+
+import Tigger.Models.Formats
+from Tigger import Coordinates
+from Tigger.Models import ModelClasses
+from Tigger.Models import SkyModel
+from Tigger.Models.Formats import dprint, dprintf
+
+DEG = math.pi / 180
+ARCMIN = DEG / 60
+ARCSEC = ARCMIN / 60
+
+"""
+Loads an AIPS-format clean component list
+"""
+
+
+def lm_to_radec(l, m, ra0, dec0):
+    """Returns ra,dec corresponding to l,m w.r.t. direction ra0,dec0"""
+    # see formula at http://en.wikipedia.org/wiki/Orthographic_projection_(cartography)
+    rho = sqrt(l ** 2 + m ** 2)
+    if rho == 0.0:
+        ra = ra0
+        dec = dec0
+    else:
+        cc = asin(rho)
+        ra = ra0 + atan2(l * sin(cc), rho * cos(dec0) * cos(cc) - m * sin(dec0) * sin(cc))
+        dec = asin(cos(cc) * sin(dec0) + m * sin(cc) * cos(dec0) / rho)
+    return ra, dec
+
+
+_units = dict(DEG=DEG, DEGREE=DEG, DEGREES=DEG,
+              RAD=1, RADIAN=1, RADIANS=1,
+              ARCMIN=ARCMIN, ARCMINS=ARCMIN,
+              ARCSEC=ARCSEC, ARCSECS=ARCSEC
+              )
+
+
+def load(filename, center=None, **kw):
+    """Imports an AIPS clean component list from FITS table
+    """
+    srclist = []
+    dprint(1, "importing AIPS clean component FITS table", filename)
+    # read file
+    ff = pyfits.open(filename)
+
+    if center is None:
+        hdr = ff[0].header
+        ra = hdr['CRVAL1'] * _units[hdr.get('CUNIT1', 'DEG').strip()]
+        dec = hdr['CRVAL2'] * _units[hdr.get('CUNIT2', 'DEG').strip()]
+
+        print("Using FITS image centre (%.4f, %.4f deg) as field centre" % (ra / DEG, dec / DEG))
+        center = ra, dec
+
+    # now process file line-by-line
+    cclist = ff[1].data
+    hdr = ff[1].header
+    ux = _units[hdr.get('TUNIT2', 'DEG').strip()]
+    uy = _units[hdr.get('TUNIT3', 'DEG').strip()]
+    for num, ccrec in enumerate(cclist):
+        stokes_i, dx, dy = list(map(float, ccrec))
+        # convert dx/dy to real positions
+        l, m = sin(dx * ux), sin(dy * uy)
+        ra, dec = lm_to_radec(l, m, *center)
+        pos = ModelClasses.Position(ra, dec)
+        flux = ModelClasses.Flux(stokes_i)
+        # now create a source object
+        src = SkyModel.Source('cc%d' % num, pos, flux)
+        src.setAttribute('r', math.sqrt(l * l + m * m))
+        srclist.append(src)
+    dprintf(2, "imported %d sources from file %s\n", len(srclist), filename)
+    # create model
+    model = ModelClasses.SkyModel(*srclist)
+    # setup model center
+    model.setFieldCenter(*center)
+    # setup radial distances
+    projection = Coordinates.Projection.SinWCS(*model.fieldCenter())
+    for src in model.sources:
+        l, m = projection.lm(src.pos.ra, src.pos.dec)
+        src.setAttribute('r', math.sqrt(l * l + m * m))
+    return model
+
+
+Tigger.Models.Formats.registerFormat("AIPSCCFITS", load, "AIPS CC FITS model", (".fits", ".FITS", ".fts", ".FTS"))
--- tigger-lsm-1.7.0.orig/Tigger/Models/Formats/ASCII.py
+++ tigger-lsm-1.7.0/Tigger/Models/Formats/ASCII.py
@@ -1,518 +1,518 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import math
-import re
-import sys
-import traceback
-
-import Tigger.Models.Formats
-from Tigger import Coordinates
-from Tigger.Models import ModelClasses
-from Tigger.Models import SkyModel
-from Tigger.Models.Formats import dprint, dprintf
-
-DefaultDMSFormat = dict(name=0,
-                        ra_h=1, ra_m=2, ra_s=3, dec_d=4, dec_m=5, dec_s=6,
-                        i=7, q=8, u=9, v=10, spi=11, rm=12, emaj_s=13, emin_s=14, pa_d=15,
-                        freq0=16, tags=slice(17, None))
-
-DefaultDMSFormatString = "name ra_h ra_m ra_s dec_d dec_m dec_s i q u v spi rm emaj_s emin_s pa_d freq0 tags..."
-
-FormatHelp = """
-ASCII files are treated as columns of whitespace-separated values. The order
-of the columns is determined by a format string, which can be specified in
-the first line of the file (prefixed by "#format:"), or supplied by the
-user.  Note that in subsequent lines the "#" character is treated as a
-comment delimiter, everything following a "#" is ignored.
-
-The format string contains a simple list of field names, such as "name ra_d
-dec_d i".  Fields with unrecognized names are simply ignored -- a good way
-to skip over unwanted columns is to use a name like 'dummy' or '-'.
-
-The following field names are recognized. Note that only a subset of these
-needs to be present (as a minimum, coordinates and I flux needs to be
-supplied, but the rest is optional):
-
-name:             source name
-ra_{rad,d,h,m,s}: RA or RA component,
-                  (in radians, degrees, hours, minutes or seconds)
-ra_err_{rad,d,h,m,s}: error on RA (in appropriate units)
-dec_{rad,d,m,s}:  declination or declination component
-dec_sign:         declination sign (+ or -)
-dec_err_{rad,d,m,s}: error on dec (in appropriate units)
-i,q,u,v:          IQUV fluxes
-{i,q,u,v}_err:    errors on fluxes
-pol_frac:         linear polarization fraction
-                  (will interpret both "0.1" and "10%" correctly)
-pol_pa_{rad,d}:   linear polarization angle
-rm:               rotation measure (freq0 must be supplied as well)
-rm_err:           error on rotation measures
-spi:              spectral index (freq0 must be supplied as well)
-spi2,3,4...:      spectral curvature
-spi_err,spi2_err,...: error on spectral index and curvature
-freq0:            reference frequency, for rm and/or spi
-emaj_{rad,d,m,s}: source extent, major axis (for Gaussian sources)
-emin_{rad,d,m,s}: source extent, minor axis (for Gaussian sources)
-{emin,emaj}_err_{rad,d,m,s}:  error on source extent
-pa_{rad,d}:       position angle (for Gaussian sources)
-pa_err_{ra,d}:    error on position angle
-tags:             comma-separated source tags
-tags...:          absorb all remaining fields as source tags
-:TYPE:ATTR        custom attribute. Contents of field will be converted to Python TYPE
-                  (bool, int, float, complex, str) and associated with custom source atribute "ATTR"
-"""
-
-DEG = math.pi / 180
-
-# dict of angulr units with their scale in radians
-ANGULAR_UNITS = dict(rad=1, d=DEG, m=DEG / 60, s=DEG / 3600, h=DEG * 15)
-# subsets of angular units for leading RA or Dec column
-ANGULAR_UNITS_RA = dict(rad=1, d=DEG, h=DEG * 15)
-ANGULAR_UNITS_DEC = dict(rad=1, d=DEG)
-
-
-def load(filename, format=None, freq0=None, center_on_brightest=False, min_extent=0, verbose=0, **kw):
-    """Imports an ASCII table
-    The 'format' argument can be either a dict (such as the DefaultDMSFormat dict above), or a string such as DefaultDMSFormatString.
-    (Other possible field names are "ra_d", "ra_rad", "dec_rad", "dec_sign".)
-    If None is specified, DefaultDMSFormat is used.
-    The 'freq0' argument supplies a default reference frequency (if one is not contained in the file.)
-    If 'center_on_brightest' is True, the mpodel field center will be set to the brightest source.
-    'min_extent' is minimal source extent (in radians), above which a source will be treated as a Gaussian rather than a point component.
-    """
-    srclist = []
-    dprint(1, "importing ASCII DMS file", filename)
-    # brightest source and its coordinates
-    maxbright = 0
-    brightest_name = radec0 = None
-
-    # Get column number associated with field from format dict, as well as the error
-    # column number. Returns tuple of indices, with None index indicating no such column
-    def get_field(name):
-        return format.get(name, None), format.get(name + "_err", None)
-
-    # Get column number associated with field from format dict, as well as the error
-    # column number. Field is an angle thus will be suffixed with _{rad,d,h,m,s}.
-    # Returns tuple of
-    #     column,scale,err_column,err_scale
-    # with None index indicating no such column. Scale is scaling factor to convert
-    # quantity in column to radians
-    def get_ang_field(name, units=ANGULAR_UNITS):
-        column = err_column = colunit = errunit = None
-        units = units or ANGULAR_UNITS
-        for unit, scale in list(units.items()):
-            if column is None:
-                column = format.get("%s_%s" % (name, unit))
-                if column is not None:
-                    colunit = scale
-            if err_column is None:
-                err_column = format.get("%s_err_%s" % (name, unit))
-                if err_column is not None:
-                    errunit = scale
-        return column, colunit, err_column, errunit
-
-    # helper function: returns element #num from the fields list, multiplied by scale, or None if no such field
-    def getval(num, scale=1):
-        return None if (num is None or len(fields) <= num) else float(fields[num]) * scale
-
-    # now process file line-by-line
-    linenum = 0
-    format_str = ''
-    for line in open(filename):
-        # for the first line, figure out the file format
-        if not linenum:
-            if not format and line.startswith("#format:"):
-                format = line[len("#format:"):].strip()
-                dprint(1, "file contains format header:", format)
-            # set default format
-            if format is None:
-                format = DefaultDMSFormatString
-            # is the format a string rather than a dict? Turn it into a dict then
-            if isinstance(format, str):
-                format_str = format
-                # make list of fieldname,fieldnumber tuples
-                fields = [(field, i) for i, field in enumerate(format.split())]
-                if not fields:
-                    raise ValueError("illegal format string in file: '%s'" % format)
-                # last fieldname can end with ... to indicate that it absorbs the rest of the line
-                if fields[-1][0].endswith('...'):
-                    fields[-1] = (fields[-1][0][:-3], slice(fields[-1][1], None))
-                # make format dict
-                format = dict(fields)
-            elif not isinstance(format, dict):
-                raise TypeError("invalid 'format' argument of type %s" % (type(format)))
-                # nf = max(format.itervalues())+1
-                # fields = ['---']*nf
-                # for field,number in format.iteritems():
-                #   fields[number] = field
-                # format_str = " ".join(fields)
-            # get list of custom attributes from format
-            custom_attrs = []
-            for name, col in list(format.items()):
-                if name.startswith(":"):
-                    m = re.match("^:(bool|int|float|complex|str):([\w]+)$", name)
-                    if not m:
-                        raise TypeError("invalid field specification '%s' in format string" % name)
-                    custom_attrs.append((eval(m.group(1)), m.group(2), col))
-            # get minimum necessary fields from format
-            name_field = format.get('name', None)
-            # flux
-            i_field, i_err_field = get_field("i")
-            if i_field is None:
-                raise ValueError("ASCII format specification lacks mandatory flux field ('i')")
-            # main RA field
-            ra_field, ra_scale, ra_err_field, ra_err_scale = get_ang_field('ra', ANGULAR_UNITS_RA)
-            if ra_field is None:
-                raise ValueError("ASCII format specification lacks mandatory Right Ascension field ('ra_h', 'ra_d' or 'ra_rad')")
-            # main Dec field
-            dec_field, dec_scale, dec_err_field, dec_err_scale = get_ang_field('dec', ANGULAR_UNITS_DEC)
-            if dec_field is None:
-                raise ValueError("ASCII format specification lacks mandatory Declination field ('dec_d' or 'dec_rad')")
-            # polarization as QUV
-            quv_fields = [get_field(x) for x in ['q', 'u', 'v']]
-            # linear polarization as fraction and angle
-            polfrac_field = format.get('pol_frac', None)
-            if polfrac_field is not None:
-                polpa_field, polpa_scale = format.get('pol_pa_d', None), (math.pi / 180)
-                if not polpa_field is not None:
-                    polpa_field, polpa_scale = format.get('pol_pa_rad', None), 1
-            # fields for extent parameters
-            extent_fields = [get_ang_field(x, ANGULAR_UNITS) for x in ('emaj', 'emin', 'pa')]
-            # all three must be present, else ignore
-            if any([x[0] is None for x in extent_fields]):
-                extent_fields = None
-            # fields for reference freq and RM and SpI
-            freq0_field = format.get('freq0', None)
-            rm_field, rm_err_field = get_field('rm')
-            spi_fields = [get_field('spi')] + [get_field('spi%d' % i) for i in range(2, 10)]
-            tags_slice = format.get('tags', None)
-        # now go on to process the line
-        linenum += 1
-        try:
-            # strip whitespace
-            line = line.strip()
-            dprintf(4, "%s:%d: read line '%s'\n", filename, linenum, line)
-            # skip empty or commented lines
-            if not line or line[0] == '#':
-                continue
-            # split (at whitespace) into fields
-            fields = line.split()
-            # get  name
-            name = fields[name_field] if name_field is not None else str(len(srclist) + 1)
-            i = getval(i_field)
-            i_err = getval(i_err_field)
-            # get position: RA
-            ra = getval(ra_field)
-            ra_err = getval(ra_err_field, ra_scale)
-            if 'ra_m' in format:
-                ra += float(fields[format['ra_m']]) / 60.
-            if 'ra_s' in format:
-                ra += float(fields[format['ra_s']]) / 3600.
-            ra *= ra_scale
-            # position: Dec. Separate treatment of sign
-            dec = abs(getval(dec_field))
-            dec_err = getval(dec_err_field, dec_scale)
-            if 'dec_m' in format:
-                dec += float(fields[format['dec_m']]) / 60.
-            if 'dec_s' in format:
-                dec += float(fields[format['dec_s']]) / 3600.
-            if fields[format.get('dec_sign', dec_field)][0] == '-':
-                dec = -dec
-            dec *= dec_scale
-            # for up position object
-            pos = ModelClasses.Position(ra, dec, ra_err=ra_err, dec_err=dec_err)
-            # see if we have freq0
-
-            # Use explicitly provided reference frequency for this source if available
-            f0 = None
-            if freq0_field is not None:
-                try:
-                    f0 = float(fields[freq0_field])
-                    # If no default reference frequency for the model was supplied,
-                    # initialise from first source with a reference frequency
-                    if freq0 is None:
-                        freq0 = f0
-                        dprint(0, "Set default freq0 to %s "
-                                  "from source on line %s." % (f0, linenum))
-
-                except IndexError:
-                    f0 = None
-
-            # Otherwise use default reference frequency (derived from args
-            # or first reference frequency found in source)
-            if f0 is None and freq0 is not None:
-                f0 = freq0
-
-            # see if we have Q/U/V
-            (q, q_err), (u, u_err), (v, v_err) = [(getval(x), getval(x_err)) for x, x_err in quv_fields]
-            if polfrac_field is not None:
-                pf = fields[polfrac_field]
-                pf = float(pf[:-1]) / 100 if pf.endswith("%") else float(pf)
-                ppa = float(fields[polpa_field]) * polpa_scale if polpa_field is not None else 0
-                q = i * pf * math.cos(2 * ppa)
-                u = i * pf * math.sin(2 * ppa)
-                v = 0
-            # see if we have RM as well. Create flux object (unpolarized, polarized, polarized w/RM)
-            rm, rm_err = getval(rm_field), getval(rm_err_field)
-            if q is None:
-                flux = ModelClasses.Polarization(i, 0, 0, 0, I_err=i_err)
-            elif f0 is None or rm is None:
-                flux = ModelClasses.Polarization(i, q, u, v, I_err=i_err, Q_err=q_err, U_err=u_err, V_err=v_err)
-            else:
-                flux = ModelClasses.PolarizationWithRM(i, q, u, v, rm, f0, I_err=i_err, Q_err=q_err, U_err=u_err,
-                                                       V_err=v_err, rm_err=rm_err)
-            # see if we have a spectral index
-            if f0 is None:
-                spectrum = None
-            else:
-                spi = [getval(x) for x, xerr in spi_fields]
-                spi_err = [getval(xerr) for x, xerr in spi_fields]
-                dprint(4, name, "spi is", spi, "err is", spi_err)
-                # if any higher-order spectral terms are specified, include them here but trim off all trailing zeroes
-                while spi and not spi[-1]:
-                    del spi[-1]
-                    del spi_err[-1]
-                if not spi:
-                    spectrum = None
-                elif len(spi) == 1:
-                    spectrum = ModelClasses.SpectralIndex(spi[0], f0)
-                    if spi_err[0] is not None:
-                        spectrum.spi_err = spi_err[0]
-                else:
-                    spectrum = ModelClasses.SpectralIndex(spi, f0)
-                    if any([x is not None for x in spi_err]):
-                        spectrum.spi_err = spi_err
-            # see if we have extent parameters
-            ex = ey = pa = 0
-            if extent_fields:
-                ex, ey, pa = [(getval(x[0], x[1]) or 0) for x in extent_fields]
-                extent_errors = [getval(x[2], x[3]) for x in extent_fields]
-            # form up shape object
-            if (ex or ey) and max(ex, ey) >= min_extent:
-                shape = ModelClasses.Gaussian(ex, ey, pa)
-                for ifield, field in enumerate(['ex', 'ey', 'pa']):
-                    if extent_errors[ifield] is not None:
-                        shape.setAttribute(field + "_err", extent_errors[ifield])
-            else:
-                shape = None
-            # get tags
-            tagdict = {}
-            if tags_slice:
-                try:
-                    tags = fields[tags_slice]
-                except IndexError:
-                    pass
-                for tagstr1 in tags:
-                    for tagstr in tagstr1.split(","):
-                        if tagstr[0] == "+":
-                            tagname, value = tagstr[1:], True
-                        elif tagstr[0] == "-":
-                            tagname, value = tagstr[1:], False
-                        elif "=" in tagstr:
-                            tagname, value = tagstr.split("=", 1)
-                            if value[0] in "'\"" and value[-1] in "'\"":
-                                value = value[1:-1]
-                            else:
-                                try:
-                                    value = float(value)
-                                except:
-                                    continue
-                        else:
-                            tagname, value = tagstr, True
-                        tagdict[tagname] = value
-            # OK, now form up the source object
-            # now create a source object
-            dprint(3, name, ra, dec, i, q, u, v)
-            src = SkyModel.Source(name, pos, flux, shape=shape, spectrum=spectrum, **tagdict)
-            # get custom attributes
-            for type_, attr, column in custom_attrs:
-                if column is not None and len(fields) > column:
-                    src.setAttribute(attr, type_(fields[column]))
-            # add to source list
-            srclist.append(src)
-            # check if it's the brightest
-            brightness = src.brightness()
-            if brightness > maxbright:
-                maxbright = brightness
-                brightest_name = src.name
-                radec0 = ra, dec
-        except:
-            dprintf(0, "%s:%d: %s, skipping\n", filename, linenum, str(sys.exc_info()[1]))
-            if verbose:
-                raise
-    dprintf(2, "imported %d sources from file %s\n", len(srclist), filename)
-    # create model
-    model = ModelClasses.SkyModel(*srclist)
-    if freq0 is not None:
-        model.setRefFreq(freq0)
-    # set model format
-    model.setAttribute("ASCII_Format", format_str)
-    # setup model center
-    if center_on_brightest and radec0:
-        dprintf(2, "brightest source is %s (%g Jy) at %f,%f\n", brightest_name, maxbright, *radec0)
-        model.setFieldCenter(*radec0)
-    # setup radial distances
-    projection = Coordinates.Projection.SinWCS(*model.fieldCenter())
-    for src in model.sources:
-        l, m = projection.lm(src.pos.ra, src.pos.dec)
-        src.setAttribute('r', math.sqrt(l * l + m * m))
-    return model
-
-
-def save(model, filename, sources=None, format=None, **kw):
-    """
-    Exports model to a text file
-    """
-    if sources is None:
-        sources = model.sources
-    dprintf(2, "writing %d model sources to text file %s\n", len(sources), filename)
-    # create catalog parser based on either specified format, or the model format, or the default format
-    format_str = format or getattr(model, 'ASCII_Format', DefaultDMSFormatString)
-    dprint(2, "format string is", format_str)
-    # convert this into format dict
-    fields = [[field, i] for i, field in enumerate(format_str.split())]
-    if not fields:
-        raise ValueError("illegal format string '%s'" % format)
-    # last fieldname can end with ... ("tags..."), so strip it
-    if fields[-1][0].endswith('...'):
-        fields[-1][0] = fields[-1][0][:-3]
-    # make format dict
-    format = dict(fields)
-    nfields = len(fields)
-    # get minimum necessary fields from format
-    name_field = format.get('name', None)
-    # main RA field
-    ra_rad_field, ra_d_field, ra_h_field, ra_m_field, ra_s_field = \
-        [format.get(x, None) for x in ('ra_rad', 'ra_d', 'ra_h', 'ra_m', 'ra_s')]
-    dec_rad_field, dec_d_field, dec_m_field, dec_s_field = \
-        [format.get(x, None) for x in ('dec_rad', 'dec_d', 'dec_m', 'dec_s')]
-    if ra_h_field is not None:
-        ra_scale = 15
-        ra_d_field = ra_h_field
-    else:
-        ra_scale = 1
-    # fields for reference freq and RM and SpI
-    freq0_field = format.get('freq0', None)
-    rm_field = format.get('rm', None)
-    spi_field = format.get('spi', None)
-    tags_field = format.get('tags', None)
-    # open file
-    ff = open(filename, mode="wt")
-    ff.write("#format: %s\n" % format_str)
-    # write sources
-    nsrc = 0
-    for src in sources:
-        # only write points and gaussians
-        if src.shape is not None and not isinstance(src.shape, ModelClasses.Gaussian):
-            dprint(3, "skipping source '%s': non-supported type '%s'" % (src.name, src.shape.typecode))
-            continue
-        # prepare field values
-        fval = ['0'] * nfields
-        # name
-        if name_field is not None:
-            fval[name_field] = src.name
-        # position: RA
-        ra, dec = src.pos.ra, src.pos.dec
-        # RA in radians
-        if ra_rad_field is not None:
-            fval[ra_rad_field] = repr(ra)
-        ra /= ra_scale
-        # RA in h/m/s or d/m/s
-        if ra_m_field is not None:
-            ra, ram, ras = src.pos.ra_hms_static(ra, scale=180, prec=1e-4)
-            fval[ra_m_field] = repr(ram)
-            if ra_s_field is not None:
-                fval[ra_s_field] = repr(ras)
-            if ra_d_field is not None:
-                fval[ra_d_field] = repr(ra)
-        elif ra_d_field is not None:
-            fval[ra_d_field] = repr(ra * 180 / math.pi)
-        # position: Dec
-        if dec_rad_field is not None:
-            fval[dec_rad_field] = repr(dec)
-        if dec_m_field is not None:
-            dsign, decd, decm, decs = src.pos.dec_sdms()
-            fval[dec_m_field] = repr(decm)
-            if dec_s_field is not None:
-                fval[dec_s_field] = repr(decs)
-            if dec_d_field is not None:
-                fval[dec_d_field] = dsign + repr(decd)
-        elif dec_d_field is not None:
-            fval[dec_d_field] = repr(dec * 180 / math.pi)
-        # fluxes
-        for stokes in "IQUV":
-            field = format.get(stokes.lower())
-            if field is not None:
-                fval[field] = repr(getattr(src.flux, stokes, 0))
-        # fractional polarization
-        if 'pol_frac' in format:
-            i, q, u = [getattr(src.flux, stokes, 0) for stokes in "IQU"]
-            fval[format['pol_frac']] = repr(math.sqrt(q * q + u * u) / i)
-            pa = math.atan2(u, q) / 2
-            for field, scale in ('pol_pa_rad', 1.), ('pol_pa_d', DEG):
-                ifield = format.get(field)
-                if ifield is not None:
-                    fval[ifield] = repr(pa / scale)
-        # shape
-        if src.shape:
-            for parm, sparm in ("emaj", "ex"), ("emin", "ey"), ("pa", "pa"):
-                for field, scale in (parm, 1.), (parm + '_rad', DEG), (parm + '_d', DEG), (parm + '_m', DEG / 60), (
-                parm + '_s', DEG / 3600):
-                    ifield = format.get(field.lower())
-                    if ifield is not None:
-                        fval[ifield] = repr(getattr(src.shape, sparm, 0) / scale)
-        # RM, spi, freq0
-        if freq0_field is not None:
-            freq0 = (src.spectrum and getattr(src.spectrum, 'freq0', None)) or getattr(src.flux, 'freq0', 0)
-            fval[freq0_field] = repr(freq0)
-        if rm_field is not None:
-            fval[rm_field] = repr(getattr(src.flux, 'rm', 0))
-        if spi_field is not None and hasattr(src, 'spectrum'):
-            fval[spi_field] = repr(getattr(src.spectrum, 'spi', 0))
-        # tags
-        if tags_field is not None:
-            outtags = []
-            for tag, value in src.getTags():
-                if isinstance(value, str):
-                    outtags.append("%s=\"%s\"" % (tag, value))
-                elif isinstance(value, bool):
-                    if value:
-                        outtags.append("+" + tag)
-                    else:
-                        outtags.append("-" + tag)
-                elif isinstance(value, (int, float)):
-                    outtags.append("%s=%s" % (tag, repr(value)))
-            fval[tags_field] = ",".join(outtags)
-        # write the line
-        ff.write(" ".join(fval) + "\n")
-        nsrc += 1
-
-    ff.close()
-    dprintf(1, "wrote %d sources to file %s\n", nsrc, filename)
-
-
-Tigger.Models.Formats.registerFormat("ASCII", load, "ASCII table", (".txt", ".lsm"), export_func=save)
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import math
+import re
+import sys
+import traceback
+
+import Tigger.Models.Formats
+from Tigger import Coordinates
+from Tigger.Models import ModelClasses
+from Tigger.Models import SkyModel
+from Tigger.Models.Formats import dprint, dprintf
+
+DefaultDMSFormat = dict(name=0,
+                        ra_h=1, ra_m=2, ra_s=3, dec_d=4, dec_m=5, dec_s=6,
+                        i=7, q=8, u=9, v=10, spi=11, rm=12, emaj_s=13, emin_s=14, pa_d=15,
+                        freq0=16, tags=slice(17, None))
+
+DefaultDMSFormatString = "name ra_h ra_m ra_s dec_d dec_m dec_s i q u v spi rm emaj_s emin_s pa_d freq0 tags..."
+
+FormatHelp = """
+ASCII files are treated as columns of whitespace-separated values. The order
+of the columns is determined by a format string, which can be specified in
+the first line of the file (prefixed by "#format:"), or supplied by the
+user.  Note that in subsequent lines the "#" character is treated as a
+comment delimiter, everything following a "#" is ignored.
+
+The format string contains a simple list of field names, such as "name ra_d
+dec_d i".  Fields with unrecognized names are simply ignored -- a good way
+to skip over unwanted columns is to use a name like 'dummy' or '-'.
+
+The following field names are recognized. Note that only a subset of these
+needs to be present (as a minimum, coordinates and I flux needs to be
+supplied, but the rest is optional):
+
+name:             source name
+ra_{rad,d,h,m,s}: RA or RA component,
+                  (in radians, degrees, hours, minutes or seconds)
+ra_err_{rad,d,h,m,s}: error on RA (in appropriate units)
+dec_{rad,d,m,s}:  declination or declination component
+dec_sign:         declination sign (+ or -)
+dec_err_{rad,d,m,s}: error on dec (in appropriate units)
+i,q,u,v:          IQUV fluxes
+{i,q,u,v}_err:    errors on fluxes
+pol_frac:         linear polarization fraction
+                  (will interpret both "0.1" and "10%" correctly)
+pol_pa_{rad,d}:   linear polarization angle
+rm:               rotation measure (freq0 must be supplied as well)
+rm_err:           error on rotation measures
+spi:              spectral index (freq0 must be supplied as well)
+spi2,3,4...:      spectral curvature
+spi_err,spi2_err,...: error on spectral index and curvature
+freq0:            reference frequency, for rm and/or spi
+emaj_{rad,d,m,s}: source extent, major axis (for Gaussian sources)
+emin_{rad,d,m,s}: source extent, minor axis (for Gaussian sources)
+{emin,emaj}_err_{rad,d,m,s}:  error on source extent
+pa_{rad,d}:       position angle (for Gaussian sources)
+pa_err_{ra,d}:    error on position angle
+tags:             comma-separated source tags
+tags...:          absorb all remaining fields as source tags
+:TYPE:ATTR        custom attribute. Contents of field will be converted to Python TYPE
+                  (bool, int, float, complex, str) and associated with custom source atribute "ATTR"
+"""
+
+DEG = math.pi / 180
+
+# dict of angulr units with their scale in radians
+ANGULAR_UNITS = dict(rad=1, d=DEG, m=DEG / 60, s=DEG / 3600, h=DEG * 15)
+# subsets of angular units for leading RA or Dec column
+ANGULAR_UNITS_RA = dict(rad=1, d=DEG, h=DEG * 15)
+ANGULAR_UNITS_DEC = dict(rad=1, d=DEG)
+
+
+def load(filename, format=None, freq0=None, center_on_brightest=False, min_extent=0, verbose=0, **kw):
+    """Imports an ASCII table
+    The 'format' argument can be either a dict (such as the DefaultDMSFormat dict above), or a string such as DefaultDMSFormatString.
+    (Other possible field names are "ra_d", "ra_rad", "dec_rad", "dec_sign".)
+    If None is specified, DefaultDMSFormat is used.
+    The 'freq0' argument supplies a default reference frequency (if one is not contained in the file.)
+    If 'center_on_brightest' is True, the mpodel field center will be set to the brightest source.
+    'min_extent' is minimal source extent (in radians), above which a source will be treated as a Gaussian rather than a point component.
+    """
+    srclist = []
+    dprint(1, "importing ASCII DMS file", filename)
+    # brightest source and its coordinates
+    maxbright = 0
+    brightest_name = radec0 = None
+
+    # Get column number associated with field from format dict, as well as the error
+    # column number. Returns tuple of indices, with None index indicating no such column
+    def get_field(name):
+        return format.get(name, None), format.get(name + "_err", None)
+
+    # Get column number associated with field from format dict, as well as the error
+    # column number. Field is an angle thus will be suffixed with _{rad,d,h,m,s}.
+    # Returns tuple of
+    #     column,scale,err_column,err_scale
+    # with None index indicating no such column. Scale is scaling factor to convert
+    # quantity in column to radians
+    def get_ang_field(name, units=ANGULAR_UNITS):
+        column = err_column = colunit = errunit = None
+        units = units or ANGULAR_UNITS
+        for unit, scale in list(units.items()):
+            if column is None:
+                column = format.get("%s_%s" % (name, unit))
+                if column is not None:
+                    colunit = scale
+            if err_column is None:
+                err_column = format.get("%s_err_%s" % (name, unit))
+                if err_column is not None:
+                    errunit = scale
+        return column, colunit, err_column, errunit
+
+    # helper function: returns element #num from the fields list, multiplied by scale, or None if no such field
+    def getval(num, scale=1):
+        return None if (num is None or len(fields) <= num) else float(fields[num]) * scale
+
+    # now process file line-by-line
+    linenum = 0
+    format_str = ''
+    for line in open(filename):
+        # for the first line, figure out the file format
+        if not linenum:
+            if not format and line.startswith("#format:"):
+                format = line[len("#format:"):].strip()
+                dprint(1, "file contains format header:", format)
+            # set default format
+            if format is None:
+                format = DefaultDMSFormatString
+            # is the format a string rather than a dict? Turn it into a dict then
+            if isinstance(format, str):
+                format_str = format
+                # make list of fieldname,fieldnumber tuples
+                fields = [(field, i) for i, field in enumerate(format.split())]
+                if not fields:
+                    raise ValueError("illegal format string in file: '%s'" % format)
+                # last fieldname can end with ... to indicate that it absorbs the rest of the line
+                if fields[-1][0].endswith('...'):
+                    fields[-1] = (fields[-1][0][:-3], slice(fields[-1][1], None))
+                # make format dict
+                format = dict(fields)
+            elif not isinstance(format, dict):
+                raise TypeError("invalid 'format' argument of type %s" % (type(format)))
+                # nf = max(format.itervalues())+1
+                # fields = ['---']*nf
+                # for field,number in format.iteritems():
+                #   fields[number] = field
+                # format_str = " ".join(fields)
+            # get list of custom attributes from format
+            custom_attrs = []
+            for name, col in list(format.items()):
+                if name.startswith(":"):
+                    m = re.match("^:(bool|int|float|complex|str):([\w]+)$", name)
+                    if not m:
+                        raise TypeError("invalid field specification '%s' in format string" % name)
+                    custom_attrs.append((eval(m.group(1)), m.group(2), col))
+            # get minimum necessary fields from format
+            name_field = format.get('name', None)
+            # flux
+            i_field, i_err_field = get_field("i")
+            if i_field is None:
+                raise ValueError("ASCII format specification lacks mandatory flux field ('i')")
+            # main RA field
+            ra_field, ra_scale, ra_err_field, ra_err_scale = get_ang_field('ra', ANGULAR_UNITS_RA)
+            if ra_field is None:
+                raise ValueError("ASCII format specification lacks mandatory Right Ascension field ('ra_h', 'ra_d' or 'ra_rad')")
+            # main Dec field
+            dec_field, dec_scale, dec_err_field, dec_err_scale = get_ang_field('dec', ANGULAR_UNITS_DEC)
+            if dec_field is None:
+                raise ValueError("ASCII format specification lacks mandatory Declination field ('dec_d' or 'dec_rad')")
+            # polarization as QUV
+            quv_fields = [get_field(x) for x in ['q', 'u', 'v']]
+            # linear polarization as fraction and angle
+            polfrac_field = format.get('pol_frac', None)
+            if polfrac_field is not None:
+                polpa_field, polpa_scale = format.get('pol_pa_d', None), (math.pi / 180)
+                if not polpa_field is not None:
+                    polpa_field, polpa_scale = format.get('pol_pa_rad', None), 1
+            # fields for extent parameters
+            extent_fields = [get_ang_field(x, ANGULAR_UNITS) for x in ('emaj', 'emin', 'pa')]
+            # all three must be present, else ignore
+            if any([x[0] is None for x in extent_fields]):
+                extent_fields = None
+            # fields for reference freq and RM and SpI
+            freq0_field = format.get('freq0', None)
+            rm_field, rm_err_field = get_field('rm')
+            spi_fields = [get_field('spi')] + [get_field('spi%d' % i) for i in range(2, 10)]
+            tags_slice = format.get('tags', None)
+        # now go on to process the line
+        linenum += 1
+        try:
+            # strip whitespace
+            line = line.strip()
+            dprintf(4, "%s:%d: read line '%s'\n", filename, linenum, line)
+            # skip empty or commented lines
+            if not line or line[0] == '#':
+                continue
+            # split (at whitespace) into fields
+            fields = line.split()
+            # get  name
+            name = fields[name_field] if name_field is not None else str(len(srclist) + 1)
+            i = getval(i_field)
+            i_err = getval(i_err_field)
+            # get position: RA
+            ra = getval(ra_field)
+            ra_err = getval(ra_err_field, ra_scale)
+            if 'ra_m' in format:
+                ra += float(fields[format['ra_m']]) / 60.
+            if 'ra_s' in format:
+                ra += float(fields[format['ra_s']]) / 3600.
+            ra *= ra_scale
+            # position: Dec. Separate treatment of sign
+            dec = abs(getval(dec_field))
+            dec_err = getval(dec_err_field, dec_scale)
+            if 'dec_m' in format:
+                dec += float(fields[format['dec_m']]) / 60.
+            if 'dec_s' in format:
+                dec += float(fields[format['dec_s']]) / 3600.
+            if fields[format.get('dec_sign', dec_field)][0] == '-':
+                dec = -dec
+            dec *= dec_scale
+            # for up position object
+            pos = ModelClasses.Position(ra, dec, ra_err=ra_err, dec_err=dec_err)
+            # see if we have freq0
+
+            # Use explicitly provided reference frequency for this source if available
+            f0 = None
+            if freq0_field is not None:
+                try:
+                    f0 = float(fields[freq0_field])
+                    # If no default reference frequency for the model was supplied,
+                    # initialise from first source with a reference frequency
+                    if freq0 is None:
+                        freq0 = f0
+                        dprint(0, "Set default freq0 to %s "
+                                  "from source on line %s." % (f0, linenum))
+
+                except IndexError:
+                    f0 = None
+
+            # Otherwise use default reference frequency (derived from args
+            # or first reference frequency found in source)
+            if f0 is None and freq0 is not None:
+                f0 = freq0
+
+            # see if we have Q/U/V
+            (q, q_err), (u, u_err), (v, v_err) = [(getval(x), getval(x_err)) for x, x_err in quv_fields]
+            if polfrac_field is not None:
+                pf = fields[polfrac_field]
+                pf = float(pf[:-1]) / 100 if pf.endswith("%") else float(pf)
+                ppa = float(fields[polpa_field]) * polpa_scale if polpa_field is not None else 0
+                q = i * pf * math.cos(2 * ppa)
+                u = i * pf * math.sin(2 * ppa)
+                v = 0
+            # see if we have RM as well. Create flux object (unpolarized, polarized, polarized w/RM)
+            rm, rm_err = getval(rm_field), getval(rm_err_field)
+            if q is None:
+                flux = ModelClasses.Polarization(i, 0, 0, 0, I_err=i_err)
+            elif f0 is None or rm is None:
+                flux = ModelClasses.Polarization(i, q, u, v, I_err=i_err, Q_err=q_err, U_err=u_err, V_err=v_err)
+            else:
+                flux = ModelClasses.PolarizationWithRM(i, q, u, v, rm, f0, I_err=i_err, Q_err=q_err, U_err=u_err,
+                                                       V_err=v_err, rm_err=rm_err)
+            # see if we have a spectral index
+            if f0 is None:
+                spectrum = None
+            else:
+                spi = [getval(x) for x, xerr in spi_fields]
+                spi_err = [getval(xerr) for x, xerr in spi_fields]
+                dprint(4, name, "spi is", spi, "err is", spi_err)
+                # if any higher-order spectral terms are specified, include them here but trim off all trailing zeroes
+                while spi and not spi[-1]:
+                    del spi[-1]
+                    del spi_err[-1]
+                if not spi:
+                    spectrum = None
+                elif len(spi) == 1:
+                    spectrum = ModelClasses.SpectralIndex(spi[0], f0)
+                    if spi_err[0] is not None:
+                        spectrum.spi_err = spi_err[0]
+                else:
+                    spectrum = ModelClasses.SpectralIndex(spi, f0)
+                    if any([x is not None for x in spi_err]):
+                        spectrum.spi_err = spi_err
+            # see if we have extent parameters
+            ex = ey = pa = 0
+            if extent_fields:
+                ex, ey, pa = [(getval(x[0], x[1]) or 0) for x in extent_fields]
+                extent_errors = [getval(x[2], x[3]) for x in extent_fields]
+            # form up shape object
+            if (ex or ey) and max(ex, ey) >= min_extent:
+                shape = ModelClasses.Gaussian(ex, ey, pa)
+                for ifield, field in enumerate(['ex', 'ey', 'pa']):
+                    if extent_errors[ifield] is not None:
+                        shape.setAttribute(field + "_err", extent_errors[ifield])
+            else:
+                shape = None
+            # get tags
+            tagdict = {}
+            if tags_slice:
+                try:
+                    tags = fields[tags_slice]
+                except IndexError:
+                    pass
+                for tagstr1 in tags:
+                    for tagstr in tagstr1.split(","):
+                        if tagstr[0] == "+":
+                            tagname, value = tagstr[1:], True
+                        elif tagstr[0] == "-":
+                            tagname, value = tagstr[1:], False
+                        elif "=" in tagstr:
+                            tagname, value = tagstr.split("=", 1)
+                            if value[0] in "'\"" and value[-1] in "'\"":
+                                value = value[1:-1]
+                            else:
+                                try:
+                                    value = float(value)
+                                except:
+                                    continue
+                        else:
+                            tagname, value = tagstr, True
+                        tagdict[tagname] = value
+            # OK, now form up the source object
+            # now create a source object
+            dprint(3, name, ra, dec, i, q, u, v)
+            src = SkyModel.Source(name, pos, flux, shape=shape, spectrum=spectrum, **tagdict)
+            # get custom attributes
+            for type_, attr, column in custom_attrs:
+                if column is not None and len(fields) > column:
+                    src.setAttribute(attr, type_(fields[column]))
+            # add to source list
+            srclist.append(src)
+            # check if it's the brightest
+            brightness = src.brightness()
+            if brightness > maxbright:
+                maxbright = brightness
+                brightest_name = src.name
+                radec0 = ra, dec
+        except:
+            dprintf(0, "%s:%d: %s, skipping\n", filename, linenum, str(sys.exc_info()[1]))
+            if verbose:
+                raise
+    dprintf(2, "imported %d sources from file %s\n", len(srclist), filename)
+    # create model
+    model = ModelClasses.SkyModel(*srclist)
+    if freq0 is not None:
+        model.setRefFreq(freq0)
+    # set model format
+    model.setAttribute("ASCII_Format", format_str)
+    # setup model center
+    if center_on_brightest and radec0:
+        dprintf(2, "brightest source is %s (%g Jy) at %f,%f\n", brightest_name, maxbright, *radec0)
+        model.setFieldCenter(*radec0)
+    # setup radial distances
+    projection = Coordinates.Projection.SinWCS(*model.fieldCenter())
+    for src in model.sources:
+        l, m = projection.lm(src.pos.ra, src.pos.dec)
+        src.setAttribute('r', math.sqrt(l * l + m * m))
+    return model
+
+
+def save(model, filename, sources=None, format=None, **kw):
+    """
+    Exports model to a text file
+    """
+    if sources is None:
+        sources = model.sources
+    dprintf(2, "writing %d model sources to text file %s\n", len(sources), filename)
+    # create catalog parser based on either specified format, or the model format, or the default format
+    format_str = format or getattr(model, 'ASCII_Format', DefaultDMSFormatString)
+    dprint(2, "format string is", format_str)
+    # convert this into format dict
+    fields = [[field, i] for i, field in enumerate(format_str.split())]
+    if not fields:
+        raise ValueError("illegal format string '%s'" % format)
+    # last fieldname can end with ... ("tags..."), so strip it
+    if fields[-1][0].endswith('...'):
+        fields[-1][0] = fields[-1][0][:-3]
+    # make format dict
+    format = dict(fields)
+    nfields = len(fields)
+    # get minimum necessary fields from format
+    name_field = format.get('name', None)
+    # main RA field
+    ra_rad_field, ra_d_field, ra_h_field, ra_m_field, ra_s_field = \
+        [format.get(x, None) for x in ('ra_rad', 'ra_d', 'ra_h', 'ra_m', 'ra_s')]
+    dec_rad_field, dec_d_field, dec_m_field, dec_s_field = \
+        [format.get(x, None) for x in ('dec_rad', 'dec_d', 'dec_m', 'dec_s')]
+    if ra_h_field is not None:
+        ra_scale = 15
+        ra_d_field = ra_h_field
+    else:
+        ra_scale = 1
+    # fields for reference freq and RM and SpI
+    freq0_field = format.get('freq0', None)
+    rm_field = format.get('rm', None)
+    spi_field = format.get('spi', None)
+    tags_field = format.get('tags', None)
+    # open file
+    ff = open(filename, mode="wt")
+    ff.write("#format: %s\n" % format_str)
+    # write sources
+    nsrc = 0
+    for src in sources:
+        # only write points and gaussians
+        if src.shape is not None and not isinstance(src.shape, ModelClasses.Gaussian):
+            dprint(3, "skipping source '%s': non-supported type '%s'" % (src.name, src.shape.typecode))
+            continue
+        # prepare field values
+        fval = ['0'] * nfields
+        # name
+        if name_field is not None:
+            fval[name_field] = src.name
+        # position: RA
+        ra, dec = src.pos.ra, src.pos.dec
+        # RA in radians
+        if ra_rad_field is not None:
+            fval[ra_rad_field] = repr(ra)
+        ra /= ra_scale
+        # RA in h/m/s or d/m/s
+        if ra_m_field is not None:
+            ra, ram, ras = src.pos.ra_hms_static(ra, scale=180, prec=1e-4)
+            fval[ra_m_field] = repr(ram)
+            if ra_s_field is not None:
+                fval[ra_s_field] = repr(ras)
+            if ra_d_field is not None:
+                fval[ra_d_field] = repr(ra)
+        elif ra_d_field is not None:
+            fval[ra_d_field] = repr(ra * 180 / math.pi)
+        # position: Dec
+        if dec_rad_field is not None:
+            fval[dec_rad_field] = repr(dec)
+        if dec_m_field is not None:
+            dsign, decd, decm, decs = src.pos.dec_sdms()
+            fval[dec_m_field] = repr(decm)
+            if dec_s_field is not None:
+                fval[dec_s_field] = repr(decs)
+            if dec_d_field is not None:
+                fval[dec_d_field] = dsign + repr(decd)
+        elif dec_d_field is not None:
+            fval[dec_d_field] = repr(dec * 180 / math.pi)
+        # fluxes
+        for stokes in "IQUV":
+            field = format.get(stokes.lower())
+            if field is not None:
+                fval[field] = repr(getattr(src.flux, stokes, 0))
+        # fractional polarization
+        if 'pol_frac' in format:
+            i, q, u = [getattr(src.flux, stokes, 0) for stokes in "IQU"]
+            fval[format['pol_frac']] = repr(math.sqrt(q * q + u * u) / i)
+            pa = math.atan2(u, q) / 2
+            for field, scale in ('pol_pa_rad', 1.), ('pol_pa_d', DEG):
+                ifield = format.get(field)
+                if ifield is not None:
+                    fval[ifield] = repr(pa / scale)
+        # shape
+        if src.shape:
+            for parm, sparm in ("emaj", "ex"), ("emin", "ey"), ("pa", "pa"):
+                for field, scale in (parm, 1.), (parm + '_rad', DEG), (parm + '_d', DEG), (parm + '_m', DEG / 60), (
+                parm + '_s', DEG / 3600):
+                    ifield = format.get(field.lower())
+                    if ifield is not None:
+                        fval[ifield] = repr(getattr(src.shape, sparm, 0) / scale)
+        # RM, spi, freq0
+        if freq0_field is not None:
+            freq0 = (src.spectrum and getattr(src.spectrum, 'freq0', None)) or getattr(src.flux, 'freq0', 0)
+            fval[freq0_field] = repr(freq0)
+        if rm_field is not None:
+            fval[rm_field] = repr(getattr(src.flux, 'rm', 0))
+        if spi_field is not None and hasattr(src, 'spectrum'):
+            fval[spi_field] = repr(getattr(src.spectrum, 'spi', 0))
+        # tags
+        if tags_field is not None:
+            outtags = []
+            for tag, value in src.getTags():
+                if isinstance(value, str):
+                    outtags.append("%s=\"%s\"" % (tag, value))
+                elif isinstance(value, bool):
+                    if value:
+                        outtags.append("+" + tag)
+                    else:
+                        outtags.append("-" + tag)
+                elif isinstance(value, (int, float)):
+                    outtags.append("%s=%s" % (tag, repr(value)))
+            fval[tags_field] = ",".join(outtags)
+        # write the line
+        ff.write(" ".join(fval) + "\n")
+        nsrc += 1
+
+    ff.close()
+    dprintf(1, "wrote %d sources to file %s\n", nsrc, filename)
+
+
+Tigger.Models.Formats.registerFormat("ASCII", load, "ASCII table", (".txt", ".lsm"), export_func=save)
--- tigger-lsm-1.7.0.orig/Tigger/Models/Formats/BBS.py
+++ tigger-lsm-1.7.0/Tigger/Models/Formats/BBS.py
@@ -1,400 +1,400 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import math
-import re
-import sys
-
-import Tigger.Models.Formats
-from Tigger import Coordinates
-from Tigger.Models import ModelClasses
-from Tigger.Models import SkyModel
-from Tigger.Models.Formats import dprint, dprintf
-
-"""
-The BBS sky model catalog file (*.cat, or *.catalog) is a human-readable text
-file that contains a list of sources. The file should be in the `makesourcedb'
-format. For details, please refer to
-http://www.lofar.org/operations/doku.php?id=engineering:software:tools:makesourcedb#format_string
-or
-http://www.lofar.org/operations/doku.php?id=engineering:software:tools:bbs#creating_a_catalog_file
-"""
-
-
-class CatalogLine(object):
-    """A CatalogLine turns one catalog file line into an object whose attributes correspond to the fields.
-    """
-
-    def __init__(self, parser, fields=None):
-        """Creates a catalog line. If fields!=None, then this contains a list of fields already filled in"""
-        self._parser = parser
-        self._fields = fields
-        if fields:
-            # parse fields
-            for field, number in list(parser.field_number.items()):
-                fval = fields[number].strip() if number < len(fields) else ''
-                if not fval:
-                    fval = parser.field_default.get(field, '')
-                setattr(self, field, fval)
-            # make directions
-            self.ra_rad = parser.getAngle(self, 'Ra', 'rah', 'rad', 'ram', 'ras')
-            self.dec_rad = parser.getAngle(self, 'Dec', 'dech', 'decd', 'decm', 'decs')
-        else:
-            # else make empty line
-            for field in list(parser.field_number.keys()):
-                setattr(self, field, '')
-
-    def setPosition(self, ra, dec):
-        """Sets the position ra/dec in radians: fills in fields according to the parser format"""
-        self.ra_rad, self.dec_rad = ra, dec
-        self._parser.putAngle(self, ra, 'Ra', 'rah', 'rad', 'ram', 'ras')
-        self._parser.putAngle(self, dec, 'Dec', 'dech', 'decd', 'decm', 'decs')
-
-    def makeStr(self):
-        """Converts into a string using the designated parser"""
-        # build up dict of valid fields
-        fields = {}
-        for field, num in list(self._parser.field_number.items()):
-            value = getattr(self, field, None)
-            if value:
-                fields[num] = value
-        # output
-        output = ""
-        nfields = max(fields.keys()) + 1
-        for i in range(nfields):
-            sep = self._parser.separators[i] if i < nfields - 1 else ''
-            output += "%s%s" % (fields.get(i, ''), sep)
-        return output
-
-
-class CatalogParser(object):
-    def __init__(self, format):
-        # figure out fields and their separators
-        fields = []
-        self.separators = []
-        while True:
-            match = re.match("(\w[\w:]*(=(fixed)?'[^']*')?)(([^\w]+)(\w.*))?$", format)
-            if not match:
-                break
-            fields.append(match.group(1))
-            # if no group 4, then we've reached the last field
-            if not match.group(4):
-                break
-            self.separators.append(match.group(5))
-            format = match.group(6)
-        # now parse the format specification
-        # this is a dict of field name -> field index
-        self.field_number = {}
-        # this is a dict of field name -> default value
-        self.field_default = dict(Category='2', I='1')
-        # fill up the dicts
-        for num_field, field in enumerate(fields):
-            # is a default value given?
-            match = re.match("(.+)='(.*)'$", field)
-            if match:
-                field = match.group(1)
-                self.field_default[field] = match.group(2)
-            self.field_number[field] = num_field
-        dprint(2, "fields are", self.field_number)
-        dprint(2, "default values are", self.field_default)
-        dprint(2, "separators are", self.separators)
-
-    def defines(self, field):
-        return field in self.field_number
-
-    def parse(self, line, linenum=0):
-        """Parses one line. Returns None for empty or commented lines, else returns a CatalogLine object"""
-        # strip whitespace
-        line = line.strip()
-        dprintf(3, "read line %d: %s\n", linenum, line)
-        # skip empty or commented lines
-        if not line or line[0] == '#':
-            return None
-        # split using separators, quit when no more separators
-        fields = []
-        for sep in self.separators:
-            ff = line.split(sep, 1)
-            if len(ff) < 2:
-                break
-            fields.append(ff[0])
-            line = ff[1]
-        fields.append(line)
-        dprint(4, "line %d: " % linenum, fields)
-        return CatalogLine(self, fields)
-
-    def newline(self):
-        return CatalogLine(self)
-
-    def getAngle(self, catline, field, fh, fd, fm, fs):
-        """Helper function: given a CatalogLine, and a set of field indentifiers, turns this
-        into an angle (in radians)."""
-        scale = 1
-        if self.defines(field):
-            fstr = getattr(catline, field, None)
-            match = re.match('([+-]?\s*\d+)[h:](\d+)[m:]([\d.]*)s?$', fstr)
-            if match:
-                scale = 15
-            else:
-                match = re.match('([+-]?\s*\d+).(\d+).(.*)$', fstr)
-                if not match:
-                    raise ValueError("invalid direction '%s'" % fstr)
-            d, m, s = match.groups()
-        else:
-            if self.defines(fh):
-                scale = 15
-                d = getattr(catline, fh)
-            else:
-                d = getattr(catline, fd, '0')
-            m = getattr(catline, fm, '0')
-            s = getattr(catline, fs, '0')
-        # now, d,m,s are strings
-        if d.startswith('-'):
-            scale = -scale
-            d = d[1:]
-        # convert to degrees
-        return scale * (float(d) + float(m) / 60 + float(s) / 3600) * math.pi / 180
-
-    def putAngle(self, catline, angle, field, fh, fd, fm, fs, prec=1e-6):
-        """Helper function: inverse of getAngle."""
-        # decompose angle into sign,d,m,s
-        if angle < 0:
-            sign = "-"
-            angle = -angle
-        else:
-            sign = "+" if field == "Dec" else ""
-        angle *= 12 / math.pi if not self.defines(field) and self.defines(fh) else 180 / math.pi
-        mins, secs = divmod(round(angle * 3600 / prec) * prec, 60)
-        mins = int(mins)
-        degs, mins = divmod(mins, 60)
-        # generate output
-        if self.defines(field):
-            setattr(catline, field, "%s%d.%d.%.4f" % (sign, degs, mins, secs))
-        else:
-            setattr(catline, fh if self.defines(fh) else fd, "%s%d" % (sign, degs))
-            setattr(catline, fm, "%d" % mins)
-            setattr(catline, fs, "%.4f" % secs)
-
-
-def load(filename, freq0=None, center_on_brightest=False, **kw):
-    """Imports an BBS catalog file
-    The 'format' argument can be either a dict (such as the DefaultDMSFormat dict above), or a string such as DefaultDMSFormatString.
-    (Other possible field names are "ra_d", "ra_rad", "dec_rad", "dec_sign".)
-    If None is specified, DefaultDMSFormat is used.
-    The 'freq0' argument supplies a default reference frequency (if one is not contained in the file.)
-    If 'center_on_brightest' is True, the mpodel field center will be set to the brightest source,
-    else to the center of the first patch.
-    """
-    srclist = []
-    dprint(1, "importing BBS source table", filename)
-    # read file
-    ff = open(filename)
-    # first line must be a format string: extract it
-    line0 = ff.readline().strip()
-    match = re.match("#\s*\((.+)\)\s*=\s*format", line0)
-    if not match:
-        raise ValueError("line 1 is not a valid format specification")
-    format_str = match.group(1)
-    # create format parser from this string
-    parser = CatalogParser(format_str)
-
-    # check for mandatory fields
-    for field in "Name", "Type":
-        if not parser.defines(field):
-            raise ValueError("Table lacks mandatory field '%s'" % field)
-
-    maxbright = 0
-    patches = []
-    ref_freq = freq0
-
-    # now process file line-by-line
-    linenum = 1
-    for line in ff:
-        linenum += 1
-        try:
-            # parse one line
-            dprint(4, "read line:", line)
-            catline = parser.parse(line, linenum)
-            if not catline:
-                continue
-            dprint(5, "line %d: " % linenum, catline.__dict__)
-            # is it a patch record?
-            patchname = getattr(catline, 'Patch', '')
-            if not catline.Name:
-                dprintf(2, "%s:%d: patch %s\n", filename, linenum, patchname)
-                patches.append((patchname, catline.ra_rad, catline.dec_rad))
-                continue
-            # form up name
-            name = "%s:%s" % (patchname, catline.Name) if patchname else catline.Name
-            # check source type
-            stype = catline.Type.upper()
-            if stype not in ("POINT", "GAUSSIAN"):
-                raise ValueError("unsupported source type %s" % stype)
-            # see if we have freq0
-            if freq0:
-                f0 = freq0
-            elif hasattr(catline, 'ReferenceFrequency'):
-                f0 = float(catline.ReferenceFrequency or '0')
-            else:
-                f0 = None
-            # set model refrence frequency
-            if f0 is not None and ref_freq is None:
-                ref_freq = f0
-            # see if we have Q/U/V
-            i, q, u, v = [float(getattr(catline, stokes, '0') or '0') for stokes in "IQUV"]
-            # see if we have RM as well. Create flux object (unpolarized, polarized, polarized w/RM)
-            if f0 is not None and hasattr(catline, 'RotationMeasure'):
-                flux = ModelClasses.PolarizationWithRM(i, q, u, v, float(catline.RotationMeasure or '0'), f0)
-            else:
-                flux = ModelClasses.Polarization(i, q, u, v)
-            # see if we have a spectral index
-            if f0 is not None and hasattr(catline, 'SpectralIndex:0'):
-                spectrum = ModelClasses.SpectralIndex(float(getattr(catline, 'SpectralIndex:0') or '0'), f0)
-            else:
-                spectrum = None
-            # see if we have extent parameters
-            if stype == "GAUSSIAN":
-                ex = float(getattr(catline, "MajorAxis", "0") or "0")
-                ey = float(getattr(catline, "MinorAxis", "0") or "0")
-                pa = float(getattr(catline, "Orientation", "0") or "0")
-                shape = ModelClasses.Gaussian(ex, ey, pa)
-            else:
-                shape = None
-            # create tags
-            tags = {}
-            for field in "Patch", "Category":
-                if hasattr(catline, field):
-                    tags['BBS_%s' % field] = getattr(catline, field)
-            # OK, now form up the source object
-            # position
-            pos = ModelClasses.Position(catline.ra_rad, catline.dec_rad)
-            # now create a source object
-            src = SkyModel.Source(name, pos, flux, shape=shape, spectrum=spectrum, **tags)
-            srclist.append(src)
-            # check if it's the brightest
-            brightness = src.brightness()
-            if brightness > maxbright:
-                maxbright = brightness
-                brightest_name = src.name
-                radec0 = catline.ra_rad, catline.dec_rad
-        except:
-            dprintf(0, "%s:%d: %s, skipping\n", filename, linenum, str(sys.exc_info()[1]))
-    dprintf(2, "imported %d sources from file %s\n", len(srclist), filename)
-    # create model
-    model = ModelClasses.SkyModel(*srclist)
-    if ref_freq is not None:
-        model.setRefFreq(ref_freq)
-    # setup model center
-    if center_on_brightest and radec0:
-        dprintf(2, "setting model centre to brightest source %s (%g Jy) at %f,%f\n", brightest_name, maxbright,
-                *radec0)
-        model.setFieldCenter(*radec0)
-    elif patches:
-        name, ra, dec = patches[0]
-        dprintf(2, "setting model centre to first patch %s at %f,%f\n", name, ra, dec)
-        model.setFieldCenter(ra, dec)
-    # map patches to model tags
-    model.setAttribute("BBS_Patches", patches)
-    model.setAttribute("BBS_Format", format_str)
-    # setup radial distances
-    projection = Coordinates.Projection.SinWCS(*model.fieldCenter())
-    for src in model.sources:
-        l, m = projection.lm(src.pos.ra, src.pos.dec)
-        src.setAttribute('r', math.sqrt(l * l + m * m))
-    return model
-
-
-def save(model, filename, sources=None, format=None, **kw):
-    """Exports model to a BBS catalog file"""
-    if sources is None:
-        sources = model.sources
-    dprintf(2, "writing %d model sources to BBS file %s\n", len(sources), filename)
-    # create catalog parser based on either specified format, or the model format, or the default format
-    format = format or getattr(model, 'BBS_Format',
-                               "Name, Type, Patch, Ra, Dec, I, Q, U, V, ReferenceFrequency, SpectralIndexDegree='0', SpectralIndex:0='0.0', MajorAxis, MinorAxis, Orientation")
-    dprint(2, "format string is", format)
-    parser = CatalogParser(format)
-    # check for mandatory fields
-    for field in "Name", "Type":
-        if not parser.defines(field):
-            raise ValueError("Output format lacks mandatory field '%s'" % field)
-    # open file
-    ff = open(filename, mode="wt")
-    ff.write("# (%s) = format\n# The above line defines the field order and is required.\n\n" % format)
-    # write patches
-    for name, ra, dec in getattr(model, "BBS_Patches", []):
-        catline = parser.newline()
-        catline.Patch = name
-        catline.setPosition(ra, dec)
-        ff.write(catline.makeStr() + "\n")
-    ff.write("\n")
-    # write sources
-    nsrc = 0
-    for src in sources:
-        catline = parser.newline()
-        # type
-        if src.shape is None:
-            catline.Type = "POINT"
-        elif isinstance(src.shape, ModelClasses.Gaussian):
-            catline.Type = "GAUSSIAN"
-        else:
-            dprint(3, "skipping source '%s': non-supported type '%s'" % (src.name, src.shape.typecode))
-            continue
-        # name and patch
-        name = src.name
-        patch = getattr(src, 'BBS_Patch', '')
-        if patch and name.startswith(patch + ':'):
-            name = name[(len(patch) + 1):]
-        catline.Name = name
-        setattr(catline, 'Patch', patch)
-        # position
-        catline.setPosition(src.pos.ra, src.pos.dec)
-        # fluxes
-        for stokes in "IQUV":
-            setattr(catline, stokes, str(getattr(src.flux, stokes, 0.)))
-        # reference freq
-        freq0 = (src.spectrum and getattr(src.spectrum, 'freq0', None)) or getattr(src.flux, 'freq0', None)
-        if freq0 is not None:
-            setattr(catline, 'ReferenceFrequency', str(freq0))
-        # RM, spi
-        if isinstance(src.spectrum, ModelClasses.SpectralIndex):
-            setattr(catline, 'SpectralIndexDegree', '0')
-            setattr(catline, 'SpectralIndex:0', str(src.spectrum.spi))
-        if isinstance(src.flux, ModelClasses.PolarizationWithRM):
-            setattr(catline, 'RotationMeasure', str(src.flux.rm))
-        # shape
-        if isinstance(src.shape, ModelClasses.Gaussian):
-            setattr(catline, 'MajorAxis', src.shape.ex)
-            setattr(catline, 'MinorAxis', src.shape.ey)
-            setattr(catline, 'Orientation', src.shape.pa)
-        # write line
-        ff.write(catline.makeStr() + "\n")
-        nsrc += 1
-
-    ff.close()
-    dprintf(1, "wrote %d sources to file %s\n", nsrc, filename)
-
-
-Tigger.Models.Formats.registerFormat("BBS", load, "BBS source catalog", (".cat", ".catalog"), export_func=save)
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import math
+import re
+import sys
+
+import Tigger.Models.Formats
+from Tigger import Coordinates
+from Tigger.Models import ModelClasses
+from Tigger.Models import SkyModel
+from Tigger.Models.Formats import dprint, dprintf
+
+"""
+The BBS sky model catalog file (*.cat, or *.catalog) is a human-readable text
+file that contains a list of sources. The file should be in the `makesourcedb'
+format. For details, please refer to
+http://www.lofar.org/operations/doku.php?id=engineering:software:tools:makesourcedb#format_string
+or
+http://www.lofar.org/operations/doku.php?id=engineering:software:tools:bbs#creating_a_catalog_file
+"""
+
+
+class CatalogLine(object):
+    """A CatalogLine turns one catalog file line into an object whose attributes correspond to the fields.
+    """
+
+    def __init__(self, parser, fields=None):
+        """Creates a catalog line. If fields!=None, then this contains a list of fields already filled in"""
+        self._parser = parser
+        self._fields = fields
+        if fields:
+            # parse fields
+            for field, number in list(parser.field_number.items()):
+                fval = fields[number].strip() if number < len(fields) else ''
+                if not fval:
+                    fval = parser.field_default.get(field, '')
+                setattr(self, field, fval)
+            # make directions
+            self.ra_rad = parser.getAngle(self, 'Ra', 'rah', 'rad', 'ram', 'ras')
+            self.dec_rad = parser.getAngle(self, 'Dec', 'dech', 'decd', 'decm', 'decs')
+        else:
+            # else make empty line
+            for field in list(parser.field_number.keys()):
+                setattr(self, field, '')
+
+    def setPosition(self, ra, dec):
+        """Sets the position ra/dec in radians: fills in fields according to the parser format"""
+        self.ra_rad, self.dec_rad = ra, dec
+        self._parser.putAngle(self, ra, 'Ra', 'rah', 'rad', 'ram', 'ras')
+        self._parser.putAngle(self, dec, 'Dec', 'dech', 'decd', 'decm', 'decs')
+
+    def makeStr(self):
+        """Converts into a string using the designated parser"""
+        # build up dict of valid fields
+        fields = {}
+        for field, num in list(self._parser.field_number.items()):
+            value = getattr(self, field, None)
+            if value:
+                fields[num] = value
+        # output
+        output = ""
+        nfields = max(fields.keys()) + 1
+        for i in range(nfields):
+            sep = self._parser.separators[i] if i < nfields - 1 else ''
+            output += "%s%s" % (fields.get(i, ''), sep)
+        return output
+
+
+class CatalogParser(object):
+    def __init__(self, format):
+        # figure out fields and their separators
+        fields = []
+        self.separators = []
+        while True:
+            match = re.match("(\w[\w:]*(=(fixed)?'[^']*')?)(([^\w]+)(\w.*))?$", format)
+            if not match:
+                break
+            fields.append(match.group(1))
+            # if no group 4, then we've reached the last field
+            if not match.group(4):
+                break
+            self.separators.append(match.group(5))
+            format = match.group(6)
+        # now parse the format specification
+        # this is a dict of field name -> field index
+        self.field_number = {}
+        # this is a dict of field name -> default value
+        self.field_default = dict(Category='2', I='1')
+        # fill up the dicts
+        for num_field, field in enumerate(fields):
+            # is a default value given?
+            match = re.match("(.+)='(.*)'$", field)
+            if match:
+                field = match.group(1)
+                self.field_default[field] = match.group(2)
+            self.field_number[field] = num_field
+        dprint(2, "fields are", self.field_number)
+        dprint(2, "default values are", self.field_default)
+        dprint(2, "separators are", self.separators)
+
+    def defines(self, field):
+        return field in self.field_number
+
+    def parse(self, line, linenum=0):
+        """Parses one line. Returns None for empty or commented lines, else returns a CatalogLine object"""
+        # strip whitespace
+        line = line.strip()
+        dprintf(3, "read line %d: %s\n", linenum, line)
+        # skip empty or commented lines
+        if not line or line[0] == '#':
+            return None
+        # split using separators, quit when no more separators
+        fields = []
+        for sep in self.separators:
+            ff = line.split(sep, 1)
+            if len(ff) < 2:
+                break
+            fields.append(ff[0])
+            line = ff[1]
+        fields.append(line)
+        dprint(4, "line %d: " % linenum, fields)
+        return CatalogLine(self, fields)
+
+    def newline(self):
+        return CatalogLine(self)
+
+    def getAngle(self, catline, field, fh, fd, fm, fs):
+        """Helper function: given a CatalogLine, and a set of field indentifiers, turns this
+        into an angle (in radians)."""
+        scale = 1
+        if self.defines(field):
+            fstr = getattr(catline, field, None)
+            match = re.match('([+-]?\s*\d+)[h:](\d+)[m:]([\d.]*)s?$', fstr)
+            if match:
+                scale = 15
+            else:
+                match = re.match('([+-]?\s*\d+).(\d+).(.*)$', fstr)
+                if not match:
+                    raise ValueError("invalid direction '%s'" % fstr)
+            d, m, s = match.groups()
+        else:
+            if self.defines(fh):
+                scale = 15
+                d = getattr(catline, fh)
+            else:
+                d = getattr(catline, fd, '0')
+            m = getattr(catline, fm, '0')
+            s = getattr(catline, fs, '0')
+        # now, d,m,s are strings
+        if d.startswith('-'):
+            scale = -scale
+            d = d[1:]
+        # convert to degrees
+        return scale * (float(d) + float(m) / 60 + float(s) / 3600) * math.pi / 180
+
+    def putAngle(self, catline, angle, field, fh, fd, fm, fs, prec=1e-6):
+        """Helper function: inverse of getAngle."""
+        # decompose angle into sign,d,m,s
+        if angle < 0:
+            sign = "-"
+            angle = -angle
+        else:
+            sign = "+" if field == "Dec" else ""
+        angle *= 12 / math.pi if not self.defines(field) and self.defines(fh) else 180 / math.pi
+        mins, secs = divmod(round(angle * 3600 / prec) * prec, 60)
+        mins = int(mins)
+        degs, mins = divmod(mins, 60)
+        # generate output
+        if self.defines(field):
+            setattr(catline, field, "%s%d.%d.%.4f" % (sign, degs, mins, secs))
+        else:
+            setattr(catline, fh if self.defines(fh) else fd, "%s%d" % (sign, degs))
+            setattr(catline, fm, "%d" % mins)
+            setattr(catline, fs, "%.4f" % secs)
+
+
+def load(filename, freq0=None, center_on_brightest=False, **kw):
+    """Imports an BBS catalog file
+    The 'format' argument can be either a dict (such as the DefaultDMSFormat dict above), or a string such as DefaultDMSFormatString.
+    (Other possible field names are "ra_d", "ra_rad", "dec_rad", "dec_sign".)
+    If None is specified, DefaultDMSFormat is used.
+    The 'freq0' argument supplies a default reference frequency (if one is not contained in the file.)
+    If 'center_on_brightest' is True, the mpodel field center will be set to the brightest source,
+    else to the center of the first patch.
+    """
+    srclist = []
+    dprint(1, "importing BBS source table", filename)
+    # read file
+    ff = open(filename)
+    # first line must be a format string: extract it
+    line0 = ff.readline().strip()
+    match = re.match("#\s*\((.+)\)\s*=\s*format", line0)
+    if not match:
+        raise ValueError("line 1 is not a valid format specification")
+    format_str = match.group(1)
+    # create format parser from this string
+    parser = CatalogParser(format_str)
+
+    # check for mandatory fields
+    for field in "Name", "Type":
+        if not parser.defines(field):
+            raise ValueError("Table lacks mandatory field '%s'" % field)
+
+    maxbright = 0
+    patches = []
+    ref_freq = freq0
+
+    # now process file line-by-line
+    linenum = 1
+    for line in ff:
+        linenum += 1
+        try:
+            # parse one line
+            dprint(4, "read line:", line)
+            catline = parser.parse(line, linenum)
+            if not catline:
+                continue
+            dprint(5, "line %d: " % linenum, catline.__dict__)
+            # is it a patch record?
+            patchname = getattr(catline, 'Patch', '')
+            if not catline.Name:
+                dprintf(2, "%s:%d: patch %s\n", filename, linenum, patchname)
+                patches.append((patchname, catline.ra_rad, catline.dec_rad))
+                continue
+            # form up name
+            name = "%s:%s" % (patchname, catline.Name) if patchname else catline.Name
+            # check source type
+            stype = catline.Type.upper()
+            if stype not in ("POINT", "GAUSSIAN"):
+                raise ValueError("unsupported source type %s" % stype)
+            # see if we have freq0
+            if freq0:
+                f0 = freq0
+            elif hasattr(catline, 'ReferenceFrequency'):
+                f0 = float(catline.ReferenceFrequency or '0')
+            else:
+                f0 = None
+            # set model refrence frequency
+            if f0 is not None and ref_freq is None:
+                ref_freq = f0
+            # see if we have Q/U/V
+            i, q, u, v = [float(getattr(catline, stokes, '0') or '0') for stokes in "IQUV"]
+            # see if we have RM as well. Create flux object (unpolarized, polarized, polarized w/RM)
+            if f0 is not None and hasattr(catline, 'RotationMeasure'):
+                flux = ModelClasses.PolarizationWithRM(i, q, u, v, float(catline.RotationMeasure or '0'), f0)
+            else:
+                flux = ModelClasses.Polarization(i, q, u, v)
+            # see if we have a spectral index
+            if f0 is not None and hasattr(catline, 'SpectralIndex:0'):
+                spectrum = ModelClasses.SpectralIndex(float(getattr(catline, 'SpectralIndex:0') or '0'), f0)
+            else:
+                spectrum = None
+            # see if we have extent parameters
+            if stype == "GAUSSIAN":
+                ex = float(getattr(catline, "MajorAxis", "0") or "0")
+                ey = float(getattr(catline, "MinorAxis", "0") or "0")
+                pa = float(getattr(catline, "Orientation", "0") or "0")
+                shape = ModelClasses.Gaussian(ex, ey, pa)
+            else:
+                shape = None
+            # create tags
+            tags = {}
+            for field in "Patch", "Category":
+                if hasattr(catline, field):
+                    tags['BBS_%s' % field] = getattr(catline, field)
+            # OK, now form up the source object
+            # position
+            pos = ModelClasses.Position(catline.ra_rad, catline.dec_rad)
+            # now create a source object
+            src = SkyModel.Source(name, pos, flux, shape=shape, spectrum=spectrum, **tags)
+            srclist.append(src)
+            # check if it's the brightest
+            brightness = src.brightness()
+            if brightness > maxbright:
+                maxbright = brightness
+                brightest_name = src.name
+                radec0 = catline.ra_rad, catline.dec_rad
+        except:
+            dprintf(0, "%s:%d: %s, skipping\n", filename, linenum, str(sys.exc_info()[1]))
+    dprintf(2, "imported %d sources from file %s\n", len(srclist), filename)
+    # create model
+    model = ModelClasses.SkyModel(*srclist)
+    if ref_freq is not None:
+        model.setRefFreq(ref_freq)
+    # setup model center
+    if center_on_brightest and radec0:
+        dprintf(2, "setting model centre to brightest source %s (%g Jy) at %f,%f\n", brightest_name, maxbright,
+                *radec0)
+        model.setFieldCenter(*radec0)
+    elif patches:
+        name, ra, dec = patches[0]
+        dprintf(2, "setting model centre to first patch %s at %f,%f\n", name, ra, dec)
+        model.setFieldCenter(ra, dec)
+    # map patches to model tags
+    model.setAttribute("BBS_Patches", patches)
+    model.setAttribute("BBS_Format", format_str)
+    # setup radial distances
+    projection = Coordinates.Projection.SinWCS(*model.fieldCenter())
+    for src in model.sources:
+        l, m = projection.lm(src.pos.ra, src.pos.dec)
+        src.setAttribute('r', math.sqrt(l * l + m * m))
+    return model
+
+
+def save(model, filename, sources=None, format=None, **kw):
+    """Exports model to a BBS catalog file"""
+    if sources is None:
+        sources = model.sources
+    dprintf(2, "writing %d model sources to BBS file %s\n", len(sources), filename)
+    # create catalog parser based on either specified format, or the model format, or the default format
+    format = format or getattr(model, 'BBS_Format',
+                               "Name, Type, Patch, Ra, Dec, I, Q, U, V, ReferenceFrequency, SpectralIndexDegree='0', SpectralIndex:0='0.0', MajorAxis, MinorAxis, Orientation")
+    dprint(2, "format string is", format)
+    parser = CatalogParser(format)
+    # check for mandatory fields
+    for field in "Name", "Type":
+        if not parser.defines(field):
+            raise ValueError("Output format lacks mandatory field '%s'" % field)
+    # open file
+    ff = open(filename, mode="wt")
+    ff.write("# (%s) = format\n# The above line defines the field order and is required.\n\n" % format)
+    # write patches
+    for name, ra, dec in getattr(model, "BBS_Patches", []):
+        catline = parser.newline()
+        catline.Patch = name
+        catline.setPosition(ra, dec)
+        ff.write(catline.makeStr() + "\n")
+    ff.write("\n")
+    # write sources
+    nsrc = 0
+    for src in sources:
+        catline = parser.newline()
+        # type
+        if src.shape is None:
+            catline.Type = "POINT"
+        elif isinstance(src.shape, ModelClasses.Gaussian):
+            catline.Type = "GAUSSIAN"
+        else:
+            dprint(3, "skipping source '%s': non-supported type '%s'" % (src.name, src.shape.typecode))
+            continue
+        # name and patch
+        name = src.name
+        patch = getattr(src, 'BBS_Patch', '')
+        if patch and name.startswith(patch + ':'):
+            name = name[(len(patch) + 1):]
+        catline.Name = name
+        setattr(catline, 'Patch', patch)
+        # position
+        catline.setPosition(src.pos.ra, src.pos.dec)
+        # fluxes
+        for stokes in "IQUV":
+            setattr(catline, stokes, str(getattr(src.flux, stokes, 0.)))
+        # reference freq
+        freq0 = (src.spectrum and getattr(src.spectrum, 'freq0', None)) or getattr(src.flux, 'freq0', None)
+        if freq0 is not None:
+            setattr(catline, 'ReferenceFrequency', str(freq0))
+        # RM, spi
+        if isinstance(src.spectrum, ModelClasses.SpectralIndex):
+            setattr(catline, 'SpectralIndexDegree', '0')
+            setattr(catline, 'SpectralIndex:0', str(src.spectrum.spi))
+        if isinstance(src.flux, ModelClasses.PolarizationWithRM):
+            setattr(catline, 'RotationMeasure', str(src.flux.rm))
+        # shape
+        if isinstance(src.shape, ModelClasses.Gaussian):
+            setattr(catline, 'MajorAxis', src.shape.ex)
+            setattr(catline, 'MinorAxis', src.shape.ey)
+            setattr(catline, 'Orientation', src.shape.pa)
+        # write line
+        ff.write(catline.makeStr() + "\n")
+        nsrc += 1
+
+    ff.close()
+    dprintf(1, "wrote %d sources to file %s\n", nsrc, filename)
+
+
+Tigger.Models.Formats.registerFormat("BBS", load, "BBS source catalog", (".cat", ".catalog"), export_func=save)
--- tigger-lsm-1.7.0.orig/Tigger/Models/Formats/ModelHTML.py
+++ tigger-lsm-1.7.0/Tigger/Models/Formats/ModelHTML.py
@@ -1,196 +1,196 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import time
-import traceback
-from html.parser import HTMLParser
-
-import Kittens.utils
-
-_verbosity = Kittens.utils.verbosity(name="lsmhtml")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-from Tigger.Models import ModelClasses
-
-DefaultExtension = "lsm.html"
-
-
-def save(model, filename, sources=None, **kw):
-    if sources is None:
-        sources = model.sources
-    fobj = open(filename, 'w')
-    fobj.write("""<HTML><BODY mdltype=SkyModel>\n""")
-    if model.name is not None:
-        fobj.write(model.renderAttrMarkup('name', model.name, tags='TITLE', verbose="Sky model: "))
-        fobj.write("\n")
-    # write list of sources
-    fobj.write("""<H1>Source list</H1>\n<TABLE BORDER=1 FRAME=box RULES=all CELLPADDING=5>\n""")
-    for src in sources:
-        fobj.write(src.renderMarkup(tags=["TR\n", "TD"]))
-        fobj.write("\n")
-    fobj.write("""</TABLE>\n""")
-    # plot styles
-    if model.plotstyles is not None:
-        fobj.write("""<H1>Plot styles</H1>\n<TABLE BORDER=1 FRAME=box RULES=all CELLPADDING=5>\n""")
-        fobj.write(model.renderAttrMarkup('plotstyles', model.plotstyles, tags=['A', 'TR\n', 'TD'], verbose=""))
-        fobj.write("""</TABLE>\n""")
-    # other attributes
-    fobj.write("\n")
-    fobj.write("""<H1>Other properties</H1>\n""")
-    if model.pbexp is not None:
-        fobj.write("<P>")
-        fobj.write(model.renderAttrMarkup('pbexp', model.pbexp, tags='A', verbose="Primary beam expression: "))
-        fobj.write("</P>\n")
-    if model.freq0 is not None:
-        fobj.write("<P>")
-        fobj.write(model.renderAttrMarkup('freq0', model.freq0, tags='A', verbose="Reference frequency, Hz: "))
-        fobj.write("</P>\n")
-    if model.ra0 is not None or model.dec0 is not None:
-        fobj.write("<P>")
-        fobj.write(model.renderAttrMarkup('ra0', model.ra0, tags='A', verbose="Field centre ra: "))
-        fobj.write(model.renderAttrMarkup('dec0', model.dec0, tags='A', verbose="dec: "))
-        fobj.write("</P>\n")
-    for attr, value in model.getExtraAttributes():
-        if attr not in ("pbexp", "freq0", "ra0", "dec0"):
-            fobj.write("<P>")
-            fobj.write(model.renderAttrMarkup(attr, value, tags='A'))
-            fobj.write("</P>\n")
-    fobj.write("""</BODY></HTML>\n""")
-
-
-def load(filename, **kw):
-    parser = ModelIndexParser()
-    parser.reset()
-    for line in open(filename):
-        parser.feed(line)
-    parser.close()
-    if not parser.toplevel_objects:
-        raise RuntimeError("failed to load sky model from file %s" % filename)
-    return parser.toplevel_objects[0]
-
-
-class ModelIndexParser(HTMLParser):
-    def reset(self):
-        HTMLParser.reset(self)
-        self.objstack = []
-        self.tagstack = []
-        self.toplevel_objects = []
-
-    def end(self):
-        dprintf(4, "end")
-
-    def handle_starttag(self, tag, attrs):
-        dprint(4, "start tag", tag, attrs)
-        attrs = dict(attrs)
-        # append tag to tag stack. Second element in tuple indicates whether
-        # tag is associated with the start of an object definition
-        self.tagstack.append([tag, None])
-        # see if attributes describe an LSM object
-        # 'type' is an object class
-        mdltype = attrs.get('mdltype')
-        if not mdltype:
-            return
-        # 'attr' is an attribute name. If this is set, then the object is an attribute
-        # of the parent-level class
-        mdlattr = attrs.get('mdlattr')
-        # 'value' is a value. If this is set, then the object can be created from a string
-        mdlval = attrs.get('mdlval')
-        dprintf(3, "model item type %s, attribute %s, inline value %s\n", mdltype, mdlattr, mdlval)
-        if mdlattr and not self.objstack:
-            dprintf(3, "WARNING: attribute %s at top level, ignoring\n", mdlattr)
-            return
-        # Now look up the class in our globals, or in ModelClasses
-        typeobj = ModelClasses.AtomicTypes.get(mdltype) or ModelClasses.__dict__.get(mdltype)
-        if not callable(typeobj):
-            dprintf(3, "WARNING: unknown object type %s, ignoring\n", mdltype)
-            return
-        # see if object value is inlined
-        if mdlval is not None:
-            try:
-                obj = typeobj(eval(mdlval))
-            except:
-                traceback.print_exc()
-                dprintf(3, "WARNING: failed to create object of type %s from string value '%s', ignoring\n", mdltype,
-                        mdlval)
-                return
-            self.add_object(mdlattr, obj)
-        # else add object to stack and start accumulating attributes
-        else:
-            # change entry on tagstack to indicate that this tag started an object
-            self.tagstack[-1][1] = len(self.objstack)
-            # append object entry to stack -- we'll create the object when a corresponding end-tag
-            # is encountered.
-            self.objstack.append([mdlattr, typeobj, [], {}])
-
-    def handle_endtag(self, endtag):
-        dprint(4, "end tag", endtag)
-        # close all tags from top of stack, until we hit this one's start tag
-        while self.tagstack:
-            tag, nobj = self.tagstack.pop(-1)
-            dprint(4, "closing tag", tag)
-            # if tag corresponds to an object, create object
-            if nobj is not None:
-                self.close_stack_object()
-            if tag == endtag:
-                break
-
-    def add_object(self, attr, obj):
-        """Adds object to model."""
-        # if no object stack, then object is a top-level container
-        if not self.objstack:
-            if attr:
-                dprintf(0, "WARNING: attribute %s at top level, ignoring\n", attr)
-                return
-            self.toplevel_objects.append(obj)
-        # else  add object as attribute or argument of top container in the stack
-        else:
-            if attr:
-                self.objstack[-1][3][attr] = obj
-            else:
-                self.objstack[-1][2].append(obj)
-
-    def close_stack_object(self):
-        """This function is called when an object from the top of the stack needs to be created.
-        Stops accumulating attributes and calls the object constructor."""
-        mdlattr, typeobj, args, kws = self.objstack.pop(-1)
-        # create object
-        try:
-            if typeobj in (list, tuple):
-                obj = typeobj(args)
-            else:
-                obj = typeobj(*args, **kws)
-        except:
-            traceback.print_exc()
-            dprintf(0, "WARNING: failed to create object of type %s for attribute %s, ignoring\n", typeobj, mdlattr)
-            return
-        # add the object to model
-        self.add_object(mdlattr, obj)
-
-
-import Tigger.Models.Formats
-
-Tigger.Models.Formats.registerFormat("Tigger", load, "Tigger sky model", (".lsm.html",), export_func=save)
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import time
+import traceback
+from html.parser import HTMLParser
+
+import Kittens.utils
+
+_verbosity = Kittens.utils.verbosity(name="lsmhtml")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+from Tigger.Models import ModelClasses
+
+DefaultExtension = "lsm.html"
+
+
+def save(model, filename, sources=None, **kw):
+    if sources is None:
+        sources = model.sources
+    fobj = open(filename, 'w')
+    fobj.write("""<HTML><BODY mdltype=SkyModel>\n""")
+    if model.name is not None:
+        fobj.write(model.renderAttrMarkup('name', model.name, tags='TITLE', verbose="Sky model: "))
+        fobj.write("\n")
+    # write list of sources
+    fobj.write("""<H1>Source list</H1>\n<TABLE BORDER=1 FRAME=box RULES=all CELLPADDING=5>\n""")
+    for src in sources:
+        fobj.write(src.renderMarkup(tags=["TR\n", "TD"]))
+        fobj.write("\n")
+    fobj.write("""</TABLE>\n""")
+    # plot styles
+    if model.plotstyles is not None:
+        fobj.write("""<H1>Plot styles</H1>\n<TABLE BORDER=1 FRAME=box RULES=all CELLPADDING=5>\n""")
+        fobj.write(model.renderAttrMarkup('plotstyles', model.plotstyles, tags=['A', 'TR\n', 'TD'], verbose=""))
+        fobj.write("""</TABLE>\n""")
+    # other attributes
+    fobj.write("\n")
+    fobj.write("""<H1>Other properties</H1>\n""")
+    if model.pbexp is not None:
+        fobj.write("<P>")
+        fobj.write(model.renderAttrMarkup('pbexp', model.pbexp, tags='A', verbose="Primary beam expression: "))
+        fobj.write("</P>\n")
+    if model.freq0 is not None:
+        fobj.write("<P>")
+        fobj.write(model.renderAttrMarkup('freq0', model.freq0, tags='A', verbose="Reference frequency, Hz: "))
+        fobj.write("</P>\n")
+    if model.ra0 is not None or model.dec0 is not None:
+        fobj.write("<P>")
+        fobj.write(model.renderAttrMarkup('ra0', model.ra0, tags='A', verbose="Field centre ra: "))
+        fobj.write(model.renderAttrMarkup('dec0', model.dec0, tags='A', verbose="dec: "))
+        fobj.write("</P>\n")
+    for attr, value in model.getExtraAttributes():
+        if attr not in ("pbexp", "freq0", "ra0", "dec0"):
+            fobj.write("<P>")
+            fobj.write(model.renderAttrMarkup(attr, value, tags='A'))
+            fobj.write("</P>\n")
+    fobj.write("""</BODY></HTML>\n""")
+
+
+def load(filename, **kw):
+    parser = ModelIndexParser()
+    parser.reset()
+    for line in open(filename):
+        parser.feed(line)
+    parser.close()
+    if not parser.toplevel_objects:
+        raise RuntimeError("failed to load sky model from file %s" % filename)
+    return parser.toplevel_objects[0]
+
+
+class ModelIndexParser(HTMLParser):
+    def reset(self):
+        HTMLParser.reset(self)
+        self.objstack = []
+        self.tagstack = []
+        self.toplevel_objects = []
+
+    def end(self):
+        dprintf(4, "end")
+
+    def handle_starttag(self, tag, attrs):
+        dprint(4, "start tag", tag, attrs)
+        attrs = dict(attrs)
+        # append tag to tag stack. Second element in tuple indicates whether
+        # tag is associated with the start of an object definition
+        self.tagstack.append([tag, None])
+        # see if attributes describe an LSM object
+        # 'type' is an object class
+        mdltype = attrs.get('mdltype')
+        if not mdltype:
+            return
+        # 'attr' is an attribute name. If this is set, then the object is an attribute
+        # of the parent-level class
+        mdlattr = attrs.get('mdlattr')
+        # 'value' is a value. If this is set, then the object can be created from a string
+        mdlval = attrs.get('mdlval')
+        dprintf(3, "model item type %s, attribute %s, inline value %s\n", mdltype, mdlattr, mdlval)
+        if mdlattr and not self.objstack:
+            dprintf(3, "WARNING: attribute %s at top level, ignoring\n", mdlattr)
+            return
+        # Now look up the class in our globals, or in ModelClasses
+        typeobj = ModelClasses.AtomicTypes.get(mdltype) or ModelClasses.__dict__.get(mdltype)
+        if not callable(typeobj):
+            dprintf(3, "WARNING: unknown object type %s, ignoring\n", mdltype)
+            return
+        # see if object value is inlined
+        if mdlval is not None:
+            try:
+                obj = typeobj(eval(mdlval))
+            except:
+                traceback.print_exc()
+                dprintf(3, "WARNING: failed to create object of type %s from string value '%s', ignoring\n", mdltype,
+                        mdlval)
+                return
+            self.add_object(mdlattr, obj)
+        # else add object to stack and start accumulating attributes
+        else:
+            # change entry on tagstack to indicate that this tag started an object
+            self.tagstack[-1][1] = len(self.objstack)
+            # append object entry to stack -- we'll create the object when a corresponding end-tag
+            # is encountered.
+            self.objstack.append([mdlattr, typeobj, [], {}])
+
+    def handle_endtag(self, endtag):
+        dprint(4, "end tag", endtag)
+        # close all tags from top of stack, until we hit this one's start tag
+        while self.tagstack:
+            tag, nobj = self.tagstack.pop(-1)
+            dprint(4, "closing tag", tag)
+            # if tag corresponds to an object, create object
+            if nobj is not None:
+                self.close_stack_object()
+            if tag == endtag:
+                break
+
+    def add_object(self, attr, obj):
+        """Adds object to model."""
+        # if no object stack, then object is a top-level container
+        if not self.objstack:
+            if attr:
+                dprintf(0, "WARNING: attribute %s at top level, ignoring\n", attr)
+                return
+            self.toplevel_objects.append(obj)
+        # else  add object as attribute or argument of top container in the stack
+        else:
+            if attr:
+                self.objstack[-1][3][attr] = obj
+            else:
+                self.objstack[-1][2].append(obj)
+
+    def close_stack_object(self):
+        """This function is called when an object from the top of the stack needs to be created.
+        Stops accumulating attributes and calls the object constructor."""
+        mdlattr, typeobj, args, kws = self.objstack.pop(-1)
+        # create object
+        try:
+            if typeobj in (list, tuple):
+                obj = typeobj(args)
+            else:
+                obj = typeobj(*args, **kws)
+        except:
+            traceback.print_exc()
+            dprintf(0, "WARNING: failed to create object of type %s for attribute %s, ignoring\n", typeobj, mdlattr)
+            return
+        # add the object to model
+        self.add_object(mdlattr, obj)
+
+
+import Tigger.Models.Formats
+
+Tigger.Models.Formats.registerFormat("Tigger", load, "Tigger sky model", (".lsm.html",), export_func=save)
--- tigger-lsm-1.7.0.orig/Tigger/Models/Formats/NEWSTAR.py
+++ tigger-lsm-1.7.0/Tigger/Models/Formats/NEWSTAR.py
@@ -1,348 +1,348 @@
-# -*- coding: utf-8 -*-
-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-from __future__ import print_function, division, absolute_import
-import math
-import struct
-import sys
-import time
-import traceback
-
-import numpy
-import os.path
-
-import Tigger.Models.Formats
-from Tigger.Models import ModelClasses
-from Tigger.Models import SkyModel
-from Tigger.Models.Formats import dprint, dprintf
-
-
-def lm_ncp_to_radec(ra0, dec0, l, m):
-    """Converts coordinates in l,m (NCP) relative to ra0,dec0 into ra,dec."""
-    sind0 = math.sin(dec0)
-    cosd0 = math.cos(dec0)
-    dl = l
-    dm = m
-    d0 = dm * dm * sind0 * sind0 + dl * dl - 2 * dm * cosd0 * sind0
-    sind = math.sqrt(abs(sind0 * sind0 - d0))
-    cosd = math.sqrt(abs(cosd0 * cosd0 + d0))
-    if sind0 > 0:
-        sind = abs(sind)
-    else:
-        sind = -abs(sind)
-    dec = math.atan2(sind, cosd)
-    if l != 0:
-        ra = math.atan2(-dl, (cosd0 - dm * sind0)) + ra0
-    else:
-        ra = math.atan2((1e-10), (cosd0 - dm * sind0)) + ra0
-    return ra, dec
-
-
-def radec_to_lm_ncp(ra0, dec0, ra, dec):
-    """Converts coordinates in l,m (NCP) relative to ra0,dec0 into ra,dec."""
-    l = -math.sin(ra - ra0) * math.cos(dec)
-    sind0 = math.sin(dec0)
-    if sind0 != 0:
-        m = -(math.cos(ra - ra0) * math.cos(dec) - math.cos(dec0)) / math.sin(dec0)
-    else:
-        m = 0
-    return (l, m)
-
-
-def parseGFH(gfh):
-    """Parses the GFH (general file header?) structure at the beginning of the file"""
-    ## type
-    ftype = gfh[0:4].tostring()
-    ## length & version
-    fhlen, fver = struct.unpack('ii', gfh[4:12])
-    ### creation date
-    crdate = gfh[12:23].tostring()
-    ### creation time
-    crtime = gfh[23:28].tostring()
-    ### revision date
-    rrdate = gfh[28:39].tostring()
-    ### revision time
-    rrtime = gfh[39:44].tostring()
-    ### revision count
-    rcount = struct.unpack('i', gfh[44:48])
-    rcount = rcount[0]
-    ### node name
-    nname = gfh[48:128].tostring()
-    ### types
-    dattp = struct.unpack('B', gfh[128:129])[0]
-    link1, link2 = struct.unpack('ii', gfh[152:160])
-    ### the remaining info is not needed
-    dprint(1,
-           "read header type=%s, length=%d, version=%d, created=%s@%s, updated=%s@%s x %d, node name=%s, dattp=%d, link=%d,%d" %
-           (ftype, fhlen, fver, crdate, crtime, rrdate, rrtime, rcount, nname, dattp, link1, link2))
-    return (ftype, fhlen, fver, crdate, crtime, rrdate, rrtime, rcount, nname)
-
-
-def parseMDH(mdh):
-    """Parses the MDH (model file header?) structure"""
-    maxlin, modptr, nsources, mtype = struct.unpack('iiii', mdh[12:28])
-    mepoch = struct.unpack('f', mdh[28:32])[0]
-    ra0, dec0, freq0 = struct.unpack('ddd', mdh[32:56])
-    ### Max. # of lines in model or disk version
-    ### pointer to model ???
-    ### no of sources in model
-    ### model type(0: no ra,dec, 1=app, 2=epoch)
-    ### Epoch (e.g. 1950) if TYP=2 (float) : 4 bytes
-    ###  Model centre RA (circles) : double
-    ra0 *= math.pi * 2
-    dec0 *= math.pi * 2
-    ### Model centre FRQ (MHz)
-    freq0 *= 1e6
-    ### the remaining is not needed
-    dprint(1,
-           "read model header maxlines=%d, pointer=%d, sources=%d, type=%d, epoch=%f RA=%f, DEC=%f (rad) Freq=%f Hz" %
-           (maxlin, modptr, nsources, mtype, mepoch, ra0, dec0, freq0))
-    return (maxlin, modptr, nsources, mtype, mepoch, ra0, dec0, freq0)
-
-
-def load(filename, import_src=True, import_cc=True, min_extent=0, **kw):
-    """Imports a NEWSTAR MDL file.
-    min_extent is minimal source extent (in radians), above which a source will be treated as a Gaussian rather than a point component.
-    import_src=False causes source components to be omitted
-    import_cc=False causes clean components to be omitted
-    """
-    srclist = []
-    dprint(1, "importing NEWSTAR file", filename)
-    # build the LSM from a NewStar .MDL model file
-    # if only_cleancomp=True, only clean components are used to build the LSM
-    # if no_cleancomp=True, no clean components are used to build the LSM
-    ff = open(filename, mode="rb")
-
-    ### read GFH and MDH headers -- 512 bytes
-    try:
-        gfh = numpy.fromfile(ff, dtype=numpy.uint8, count=512)
-        mdh = numpy.fromfile(ff, dtype=numpy.uint8, count=64)
-        # parse headers
-        ftype, fhlen, fver, crdate, crtime, rrdate, rrtime, rcount, nname = parseGFH(gfh)
-        if ftype != ".MDL":
-            raise TypeError
-        maxlin, modptr, nsources, mtype, mepoch, ra0, dec0, freq0 = parseMDH(mdh)
-
-        beam_const = 65 * 1e-9 * freq0
-
-        ## temp dict to hold unique nodenames
-        unamedict = {}
-        ### Models -- 56 bytes
-        for ii in range(0, nsources):
-            mdl = numpy.fromfile(ff, dtype=numpy.uint8, count=56)
-
-            ### source parameters
-            sI, ll, mm, id, sQ, sU, sV, eX, eY, eP, SI, RM = struct.unpack('fffiffffffff', mdl[0:48])
-            ### type bits
-            bit1, bit2 = struct.unpack('BB', mdl[52:54])
-
-            # convert fluxes
-            sI *= 0.005  # convert from WU to Jy (1WU=5mJy)
-            sQ *= sI
-            sU *= sI
-            sV *= sI
-
-            # Interpret bitflags 1: bit 0= extended; bit 1= Q|U|V <>0 and no longer used according to Wim
-            fl_ext = bit1 & 1
-            # Interpret bitflags 2: bit 0= clean component; bit 3= beamed
-            fl_cc = bit2 & 1
-            fl_beamed = bit2 & 8
-
-            ### extended source params: in arcsec, so multiply by ???
-            if fl_ext:
-                ## the procedure is NMOEXT in nscan/nmoext.for
-                if eP == 0 and eX == eY:
-                    r0 = 0
-                else:
-                    r0 = .5 * math.atan2(-eP, eY - eX)
-                r1 = math.sqrt(eP * eP + (eX - eY) * (eX - eY))
-                r2 = eX + eY
-                eX = 2 * math.sqrt(abs(0.5 * (r2 + r1)))
-                eY = 2 * math.sqrt(abs(0.5 * (r2 - r1)))
-                eP = r0
-
-            # NEWSTAR MDL lists might have same source twice if they are
-            # clean components, so make a unique name for them
-            bname = 'N' + str(id)
-            if bname in unamedict:
-                uniqname = bname + '_' + str(unamedict[bname])
-                unamedict[bname] += 1
-            else:
-                uniqname = bname
-                unamedict[bname] = 1
-            # compose source information
-            pos = ModelClasses.Position(*lm_ncp_to_radec(ra0, dec0, ll, mm))
-            flux = ModelClasses.PolarizationWithRM(sI, sQ, sU, sV, RM, freq0)
-            spectrum = ModelClasses.SpectralIndex(SI, freq0)
-            tags = {}
-            # work out beam gain and apparent flux
-            tags['_lm_ncp'] = (ll, mm)
-            tags['_newstar_r'] = tags['r'] = r = math.sqrt(ll * ll + mm * mm)
-            tags['newstar_beamgain'] = bg = max(math.cos(beam_const * r) ** 6, .01)
-            tags['newstar_id'] = id
-            if fl_beamed:
-                tags['Iapp'] = sI * bg
-                tags['newstar_beamed'] = True
-                tags['flux_intrinsic'] = True
-            else:
-                tags['flux_apparent'] = True
-            # make some tags based on model flags
-            if fl_cc:
-                tags['newstar_cc'] = True
-            # make shape if extended
-            if fl_ext and max(eX, eY) >= min_extent:
-                shape = ModelClasses.Gaussian(eX, eY, eP)
-            else:
-                shape = None
-            # compute apparent flux
-            src = SkyModel.Source(uniqname, pos, flux, shape=shape, spectrum=spectrum, **tags)
-            srclist.append(src)
-    except:
-        traceback.print_exc()
-        raise TypeError("%s does not appear to be a valid NEWSTAR MDL file" % filename)
-
-    dprintf(2, "imported %d sources from file %s\n", len(srclist), filename)
-    return ModelClasses.SkyModel(ra0=ra0, dec0=dec0, freq0=freq0, pbexp='max(cos(65*1e-9*fq*r)**6,.01)', *srclist)
-
-
-def save(model, filename, freq0=None, sources=None, **kw):
-    """Saves model to a NEWSTAR MDL file.
-    The MDL file must exist, since the existing header is reused.
-    'sources' is a list of sources to write, if None, then model.sources is used.
-    """
-    if sources is None:
-        sources = model.sources
-    dprintf(2, "writing %s model sources to NEWSTAR file\n", len(sources), filename)
-
-    ra0, dec0 = model.fieldCenter()
-    freq0 = freq0 or model.refFreq()
-    # if freq0 is not specified, scan sources
-    if freq0 is None:
-        for src in sources:
-            freq0 = (src.spectrum and getattr(src.spectrum, 'freq0', None)) or getattr(src.flux, 'freq0', None)
-            if freq0:
-                break
-        else:
-            raise ValueError("unable to determine NEWSTAR model reference frequency, please specify one explicitly.")
-
-    ff = open(filename, mode="wb")
-
-    ### create GFH header
-    gfh = numpy.zeros(512, dtype=numpy.uint8)
-    datestr = time.strftime("%d-%m-%Y")
-    timestr = time.strftime("%H:%M")
-    struct.pack_into("4sii11s5s11s5si80sB", gfh, 0, ".MDL", 512, 1,
-                     datestr, timestr, datestr, timestr, 0,
-                     os.path.splitext(os.path.basename(filename))[0], 6);  # 6=datatype
-    # link1/link2 gives the header size actually
-    struct.pack_into("ii", gfh, 152, 512, 512)
-    gfh.tofile(ff)
-
-    # create MDH header
-    mdh = numpy.zeros(64, dtype=numpy.uint8)
-    struct.pack_into('iiii', mdh, 12, 1, 576, 0, 2);  # maxlin,pointer,num_sources,mtype
-    struct.pack_into('f', mdh, 28, getattr(model, 'epoch', 2000))
-    struct.pack_into('ddd', mdh, 32, ra0 / (2 * math.pi), dec0 / (2 * math.pi), freq0 * 1e-6)
-    mdh.tofile(ff)
-
-    # get the max ID, if specified
-    max_id = max([getattr(src, 'newstar_id', 0) for src in sources])
-    # now loop over model sources
-    # count how many are written out -- only point sources and gaussians are actually written out, the rest are skipped
-    nsrc = 0
-    for src in sources:
-        # create empty newstar source structure
-        mdl = numpy.zeros(56, dtype=numpy.uint8)
-
-        if src.shape and not isinstance(src.shape, ModelClasses.Gaussian):
-            dprint(3, "skipping source '%s': non-supported type '%s'" % (src.name, src.shape.typecode))
-            continue
-
-        stI = src.flux.I
-        # get l,m NCP position -- either from tag, or compute
-        lm = getattr(src, '_lm_ncp', None)
-        if lm:
-            if isinstance(lm, (tuple, list)) and len(lm) == 2:
-                l, m = lm
-            else:
-                dprint(0,
-                       "warning: skipping source '%s' because its _lm_ncp attribute is malformed (tuple of 2 values expected)" % src.name)
-                continue
-        else:
-            l, m = radec_to_lm_ncp(ra0, dec0, src.pos.ra, src.pos.dec)
-
-        # update source count
-        nsrc += 1
-        # generate source id
-        src_id = getattr(src, 'newstar_id', None)
-        if src_id is None:
-            src_id = max_id = max_id + 1
-
-        # encode position, flux, identifier -- also, convert flux from Jy to WU to Jy (1WU=5mJy)
-        struct.pack_into('fffi', mdl, 0, stI / 0.005, l, m, src_id)
-
-        # encode fractional polarization
-        struct.pack_into('fff', mdl, 16, *[getattr(src.flux, stokes, 0.0) / stI for stokes in "QUV"])
-
-        ## encode flag & type bits
-        ## Flag: bit 0= extended; bit 1= Q|U|V <>0 and no longer used according to Wim
-        ## Type: bit 0= clean component; bit 3= beamed
-        beamed = getattr(src, 'flux_intrinsic', False) or getattr(src, 'newstar_beamed', False)
-        struct.pack_into('BB', mdl, 52,
-                         1 if src.shape else 0,
-                         (1 if getattr(src, 'newstar_cc', False) else 0) | (8 if beamed else 0))
-
-        ### extended source parameters
-        if src.shape:
-            ## the procedure is NMOEXF in nscan/nmoext.for
-            R0 = math.cos(src.shape.pa)
-            R1 = -math.sin(src.shape.pa)
-            R2 = (.5 * src.shape.ex) ** 2
-            R3 = (.5 * src.shape.ey) ** 2
-            ex = R2 * R1 * R1 + R3 * R0 * R0
-            ey = R2 * R0 * R0 + R3 * R1 * R1
-            pa = 2 * (R2 - R3) * R0 * R1
-            struct.pack_into('fff', mdl, 28, ex, ey, pa)
-
-        ### spectral index
-        if isinstance(src.spectrum, ModelClasses.SpectralIndex):
-            struct.pack_into('f', mdl, 40, src.spectrum.spi)
-
-        if isinstance(src.flux, ModelClasses.PolarizationWithRM):
-            struct.pack_into('f', mdl, 44, src.flux.rm)
-
-        mdl.tofile(ff)
-
-    # update MDH header with the new number of sources
-    struct.pack_into('i', mdh, 20, nsrc)
-    ff.seek(512)
-    mdh.tofile(ff)
-    ff.close()
-    dprintf(1, "wrote %d sources to file %s\n", nsrc, filename)
-
-
-Tigger.Models.Formats.registerFormat("NEWSTAR", load, "NEWSTAR model file", (".mdl", ".MDL"), export_func=save)
+# -*- coding: utf-8 -*-
+
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+from __future__ import print_function, division, absolute_import
+import math
+import struct
+import sys
+import time
+import traceback
+
+import numpy
+import os.path
+
+import Tigger.Models.Formats
+from Tigger.Models import ModelClasses
+from Tigger.Models import SkyModel
+from Tigger.Models.Formats import dprint, dprintf
+
+
+def lm_ncp_to_radec(ra0, dec0, l, m):
+    """Converts coordinates in l,m (NCP) relative to ra0,dec0 into ra,dec."""
+    sind0 = math.sin(dec0)
+    cosd0 = math.cos(dec0)
+    dl = l
+    dm = m
+    d0 = dm * dm * sind0 * sind0 + dl * dl - 2 * dm * cosd0 * sind0
+    sind = math.sqrt(abs(sind0 * sind0 - d0))
+    cosd = math.sqrt(abs(cosd0 * cosd0 + d0))
+    if sind0 > 0:
+        sind = abs(sind)
+    else:
+        sind = -abs(sind)
+    dec = math.atan2(sind, cosd)
+    if l != 0:
+        ra = math.atan2(-dl, (cosd0 - dm * sind0)) + ra0
+    else:
+        ra = math.atan2((1e-10), (cosd0 - dm * sind0)) + ra0
+    return ra, dec
+
+
+def radec_to_lm_ncp(ra0, dec0, ra, dec):
+    """Converts coordinates in l,m (NCP) relative to ra0,dec0 into ra,dec."""
+    l = -math.sin(ra - ra0) * math.cos(dec)
+    sind0 = math.sin(dec0)
+    if sind0 != 0:
+        m = -(math.cos(ra - ra0) * math.cos(dec) - math.cos(dec0)) / math.sin(dec0)
+    else:
+        m = 0
+    return (l, m)
+
+
+def parseGFH(gfh):
+    """Parses the GFH (general file header?) structure at the beginning of the file"""
+    ## type
+    ftype = gfh[0:4].tostring()
+    ## length & version
+    fhlen, fver = struct.unpack('ii', gfh[4:12])
+    ### creation date
+    crdate = gfh[12:23].tostring()
+    ### creation time
+    crtime = gfh[23:28].tostring()
+    ### revision date
+    rrdate = gfh[28:39].tostring()
+    ### revision time
+    rrtime = gfh[39:44].tostring()
+    ### revision count
+    rcount = struct.unpack('i', gfh[44:48])
+    rcount = rcount[0]
+    ### node name
+    nname = gfh[48:128].tostring()
+    ### types
+    dattp = struct.unpack('B', gfh[128:129])[0]
+    link1, link2 = struct.unpack('ii', gfh[152:160])
+    ### the remaining info is not needed
+    dprint(1,
+           "read header type=%s, length=%d, version=%d, created=%s@%s, updated=%s@%s x %d, node name=%s, dattp=%d, link=%d,%d" %
+           (ftype, fhlen, fver, crdate, crtime, rrdate, rrtime, rcount, nname, dattp, link1, link2))
+    return (ftype, fhlen, fver, crdate, crtime, rrdate, rrtime, rcount, nname)
+
+
+def parseMDH(mdh):
+    """Parses the MDH (model file header?) structure"""
+    maxlin, modptr, nsources, mtype = struct.unpack('iiii', mdh[12:28])
+    mepoch = struct.unpack('f', mdh[28:32])[0]
+    ra0, dec0, freq0 = struct.unpack('ddd', mdh[32:56])
+    ### Max. # of lines in model or disk version
+    ### pointer to model ???
+    ### no of sources in model
+    ### model type(0: no ra,dec, 1=app, 2=epoch)
+    ### Epoch (e.g. 1950) if TYP=2 (float) : 4 bytes
+    ###  Model centre RA (circles) : double
+    ra0 *= math.pi * 2
+    dec0 *= math.pi * 2
+    ### Model centre FRQ (MHz)
+    freq0 *= 1e6
+    ### the remaining is not needed
+    dprint(1,
+           "read model header maxlines=%d, pointer=%d, sources=%d, type=%d, epoch=%f RA=%f, DEC=%f (rad) Freq=%f Hz" %
+           (maxlin, modptr, nsources, mtype, mepoch, ra0, dec0, freq0))
+    return (maxlin, modptr, nsources, mtype, mepoch, ra0, dec0, freq0)
+
+
+def load(filename, import_src=True, import_cc=True, min_extent=0, **kw):
+    """Imports a NEWSTAR MDL file.
+    min_extent is minimal source extent (in radians), above which a source will be treated as a Gaussian rather than a point component.
+    import_src=False causes source components to be omitted
+    import_cc=False causes clean components to be omitted
+    """
+    srclist = []
+    dprint(1, "importing NEWSTAR file", filename)
+    # build the LSM from a NewStar .MDL model file
+    # if only_cleancomp=True, only clean components are used to build the LSM
+    # if no_cleancomp=True, no clean components are used to build the LSM
+    ff = open(filename, mode="rb")
+
+    ### read GFH and MDH headers -- 512 bytes
+    try:
+        gfh = numpy.fromfile(ff, dtype=numpy.uint8, count=512)
+        mdh = numpy.fromfile(ff, dtype=numpy.uint8, count=64)
+        # parse headers
+        ftype, fhlen, fver, crdate, crtime, rrdate, rrtime, rcount, nname = parseGFH(gfh)
+        if ftype != ".MDL":
+            raise TypeError
+        maxlin, modptr, nsources, mtype, mepoch, ra0, dec0, freq0 = parseMDH(mdh)
+
+        beam_const = 65 * 1e-9 * freq0
+
+        ## temp dict to hold unique nodenames
+        unamedict = {}
+        ### Models -- 56 bytes
+        for ii in range(0, nsources):
+            mdl = numpy.fromfile(ff, dtype=numpy.uint8, count=56)
+
+            ### source parameters
+            sI, ll, mm, id, sQ, sU, sV, eX, eY, eP, SI, RM = struct.unpack('fffiffffffff', mdl[0:48])
+            ### type bits
+            bit1, bit2 = struct.unpack('BB', mdl[52:54])
+
+            # convert fluxes
+            sI *= 0.005  # convert from WU to Jy (1WU=5mJy)
+            sQ *= sI
+            sU *= sI
+            sV *= sI
+
+            # Interpret bitflags 1: bit 0= extended; bit 1= Q|U|V <>0 and no longer used according to Wim
+            fl_ext = bit1 & 1
+            # Interpret bitflags 2: bit 0= clean component; bit 3= beamed
+            fl_cc = bit2 & 1
+            fl_beamed = bit2 & 8
+
+            ### extended source params: in arcsec, so multiply by ???
+            if fl_ext:
+                ## the procedure is NMOEXT in nscan/nmoext.for
+                if eP == 0 and eX == eY:
+                    r0 = 0
+                else:
+                    r0 = .5 * math.atan2(-eP, eY - eX)
+                r1 = math.sqrt(eP * eP + (eX - eY) * (eX - eY))
+                r2 = eX + eY
+                eX = 2 * math.sqrt(abs(0.5 * (r2 + r1)))
+                eY = 2 * math.sqrt(abs(0.5 * (r2 - r1)))
+                eP = r0
+
+            # NEWSTAR MDL lists might have same source twice if they are
+            # clean components, so make a unique name for them
+            bname = 'N' + str(id)
+            if bname in unamedict:
+                uniqname = bname + '_' + str(unamedict[bname])
+                unamedict[bname] += 1
+            else:
+                uniqname = bname
+                unamedict[bname] = 1
+            # compose source information
+            pos = ModelClasses.Position(*lm_ncp_to_radec(ra0, dec0, ll, mm))
+            flux = ModelClasses.PolarizationWithRM(sI, sQ, sU, sV, RM, freq0)
+            spectrum = ModelClasses.SpectralIndex(SI, freq0)
+            tags = {}
+            # work out beam gain and apparent flux
+            tags['_lm_ncp'] = (ll, mm)
+            tags['_newstar_r'] = tags['r'] = r = math.sqrt(ll * ll + mm * mm)
+            tags['newstar_beamgain'] = bg = max(math.cos(beam_const * r) ** 6, .01)
+            tags['newstar_id'] = id
+            if fl_beamed:
+                tags['Iapp'] = sI * bg
+                tags['newstar_beamed'] = True
+                tags['flux_intrinsic'] = True
+            else:
+                tags['flux_apparent'] = True
+            # make some tags based on model flags
+            if fl_cc:
+                tags['newstar_cc'] = True
+            # make shape if extended
+            if fl_ext and max(eX, eY) >= min_extent:
+                shape = ModelClasses.Gaussian(eX, eY, eP)
+            else:
+                shape = None
+            # compute apparent flux
+            src = SkyModel.Source(uniqname, pos, flux, shape=shape, spectrum=spectrum, **tags)
+            srclist.append(src)
+    except:
+        traceback.print_exc()
+        raise TypeError("%s does not appear to be a valid NEWSTAR MDL file" % filename)
+
+    dprintf(2, "imported %d sources from file %s\n", len(srclist), filename)
+    return ModelClasses.SkyModel(ra0=ra0, dec0=dec0, freq0=freq0, pbexp='max(cos(65*1e-9*fq*r)**6,.01)', *srclist)
+
+
+def save(model, filename, freq0=None, sources=None, **kw):
+    """Saves model to a NEWSTAR MDL file.
+    The MDL file must exist, since the existing header is reused.
+    'sources' is a list of sources to write, if None, then model.sources is used.
+    """
+    if sources is None:
+        sources = model.sources
+    dprintf(2, "writing %s model sources to NEWSTAR file\n", len(sources), filename)
+
+    ra0, dec0 = model.fieldCenter()
+    freq0 = freq0 or model.refFreq()
+    # if freq0 is not specified, scan sources
+    if freq0 is None:
+        for src in sources:
+            freq0 = (src.spectrum and getattr(src.spectrum, 'freq0', None)) or getattr(src.flux, 'freq0', None)
+            if freq0:
+                break
+        else:
+            raise ValueError("unable to determine NEWSTAR model reference frequency, please specify one explicitly.")
+
+    ff = open(filename, mode="wb")
+
+    ### create GFH header
+    gfh = numpy.zeros(512, dtype=numpy.uint8)
+    datestr = time.strftime("%d-%m-%Y")
+    timestr = time.strftime("%H:%M")
+    struct.pack_into("4sii11s5s11s5si80sB", gfh, 0, ".MDL", 512, 1,
+                     datestr, timestr, datestr, timestr, 0,
+                     os.path.splitext(os.path.basename(filename))[0], 6);  # 6=datatype
+    # link1/link2 gives the header size actually
+    struct.pack_into("ii", gfh, 152, 512, 512)
+    gfh.tofile(ff)
+
+    # create MDH header
+    mdh = numpy.zeros(64, dtype=numpy.uint8)
+    struct.pack_into('iiii', mdh, 12, 1, 576, 0, 2);  # maxlin,pointer,num_sources,mtype
+    struct.pack_into('f', mdh, 28, getattr(model, 'epoch', 2000))
+    struct.pack_into('ddd', mdh, 32, ra0 / (2 * math.pi), dec0 / (2 * math.pi), freq0 * 1e-6)
+    mdh.tofile(ff)
+
+    # get the max ID, if specified
+    max_id = max([getattr(src, 'newstar_id', 0) for src in sources])
+    # now loop over model sources
+    # count how many are written out -- only point sources and gaussians are actually written out, the rest are skipped
+    nsrc = 0
+    for src in sources:
+        # create empty newstar source structure
+        mdl = numpy.zeros(56, dtype=numpy.uint8)
+
+        if src.shape and not isinstance(src.shape, ModelClasses.Gaussian):
+            dprint(3, "skipping source '%s': non-supported type '%s'" % (src.name, src.shape.typecode))
+            continue
+
+        stI = src.flux.I
+        # get l,m NCP position -- either from tag, or compute
+        lm = getattr(src, '_lm_ncp', None)
+        if lm:
+            if isinstance(lm, (tuple, list)) and len(lm) == 2:
+                l, m = lm
+            else:
+                dprint(0,
+                       "warning: skipping source '%s' because its _lm_ncp attribute is malformed (tuple of 2 values expected)" % src.name)
+                continue
+        else:
+            l, m = radec_to_lm_ncp(ra0, dec0, src.pos.ra, src.pos.dec)
+
+        # update source count
+        nsrc += 1
+        # generate source id
+        src_id = getattr(src, 'newstar_id', None)
+        if src_id is None:
+            src_id = max_id = max_id + 1
+
+        # encode position, flux, identifier -- also, convert flux from Jy to WU to Jy (1WU=5mJy)
+        struct.pack_into('fffi', mdl, 0, stI / 0.005, l, m, src_id)
+
+        # encode fractional polarization
+        struct.pack_into('fff', mdl, 16, *[getattr(src.flux, stokes, 0.0) / stI for stokes in "QUV"])
+
+        ## encode flag & type bits
+        ## Flag: bit 0= extended; bit 1= Q|U|V <>0 and no longer used according to Wim
+        ## Type: bit 0= clean component; bit 3= beamed
+        beamed = getattr(src, 'flux_intrinsic', False) or getattr(src, 'newstar_beamed', False)
+        struct.pack_into('BB', mdl, 52,
+                         1 if src.shape else 0,
+                         (1 if getattr(src, 'newstar_cc', False) else 0) | (8 if beamed else 0))
+
+        ### extended source parameters
+        if src.shape:
+            ## the procedure is NMOEXF in nscan/nmoext.for
+            R0 = math.cos(src.shape.pa)
+            R1 = -math.sin(src.shape.pa)
+            R2 = (.5 * src.shape.ex) ** 2
+            R3 = (.5 * src.shape.ey) ** 2
+            ex = R2 * R1 * R1 + R3 * R0 * R0
+            ey = R2 * R0 * R0 + R3 * R1 * R1
+            pa = 2 * (R2 - R3) * R0 * R1
+            struct.pack_into('fff', mdl, 28, ex, ey, pa)
+
+        ### spectral index
+        if isinstance(src.spectrum, ModelClasses.SpectralIndex):
+            struct.pack_into('f', mdl, 40, src.spectrum.spi)
+
+        if isinstance(src.flux, ModelClasses.PolarizationWithRM):
+            struct.pack_into('f', mdl, 44, src.flux.rm)
+
+        mdl.tofile(ff)
+
+    # update MDH header with the new number of sources
+    struct.pack_into('i', mdh, 20, nsrc)
+    ff.seek(512)
+    mdh.tofile(ff)
+    ff.close()
+    dprintf(1, "wrote %d sources to file %s\n", nsrc, filename)
+
+
+Tigger.Models.Formats.registerFormat("NEWSTAR", load, "NEWSTAR model file", (".mdl", ".MDL"), export_func=save)
--- tigger-lsm-1.7.0.orig/Tigger/Models/Formats/PyBDSMGaul.py
+++ tigger-lsm-1.7.0/Tigger/Models/Formats/PyBDSMGaul.py
@@ -1,94 +1,94 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import re
-import sys
-
-import Tigger.Models.Formats
-from Tigger.Models.Formats import dprint, ASCII
-
-"""Loads a PyBDSM-format .gaul file. Gaul files are essentially ASCII tables with a very specific naming convention."""
-
-# Gaus_id Isl_id Source_id Wave_id RA E_RA DEC E_DEC Total_flux
-# E_Total_flux Peak_flux E_Peak_flux Xposn E_Xposn Yposn E_Yposn Maj E_Maj Min
-# E_Min PA E_PA DC_Maj E_DC_Maj DC_Min E_DC_Min DC_PA E_DC_PA Isl_Total_flux
-# E_Isl_Total_flux Isl_rms Isl_mean Resid_Isl_rms Resid_Isl_mean S_Code
-
-format_mapping = dict(
-    Gaus_id="name",
-    RA="ra_d", E_RA="ra_err_d", DEC="dec_d", E_DEC="dec_err_d",
-    Total_flux="i", E_Total_flux="i_err",
-    Total_Q="q", E_Total_Q="q_err",
-    Total_U="u", E_Total_U="u_err",
-    Total_V="v", E_Total_V="v_err",
-    DC_Maj="emaj_d", DC_Min="emin_d", DC_PA="pa_d",
-    E_DC_Maj="emaj_err_d", E_DC_Min="emin_err_d", E_DC_PA="pa_err_d",
-    SpI="spi", Spec_Indx="spi", E_Spec_Indx="spi_err",
-    S_Code=":str:_pybdsm_S_Code"
-)
-
-
-def load(filename, freq0=None, **kw):
-    """Imports a gaul table
-    The 'freq0' argument supplies a default reference frequency (if one is not contained in the file.)
-    If 'center_on_brightest' is True, the mpodel field center will be set to the brightest source.
-    'min_extent' is minimal source extent (in radians), above which a source will be treated as a Gaussian rather than a point component.
-    """
-    srclist = []
-    id = None
-    dprint(1, "importing PyBDSM gaul/srl file", filename)
-    format = {}
-    extension = filename.split(".")[-1]
-    if extension == "srl":
-        format_mapping['Source_id'] = format_mapping.pop('Gaus_id')
-        id = "Source_id"
-    # look for format string and reference freq, and build up format dict
-    for line in open(filename):
-        m = re.match("# Reference frequency .*?([0-9.eE+-]+)\s*Hz", line)
-        if m:
-            freq0 = kw['freq0'] = freq0 or float(m.group(1))
-            dprint(2, "found reference frequency %g" % freq0)
-        elif re.match("#(\s*[\w:]+\s+)+", line) and line.find(id if id else "Gaus_id") > 0:
-            dprint(2, "found format string", line)
-            fields = dict([(name, i) for i, name in enumerate(line[1:].split())])
-            # map known fields to their ASCII equivalents, the rest copy as custom float attributes with
-            # a "pybdsm_" prefix
-            for i, name in enumerate(line[1:].split()):
-                if name in format_mapping:
-                    dprint(2, "Field", format_mapping[name], name, "is column", i)
-                    format[format_mapping[name]] = i
-                else:
-                    format[":float:_pybdsm_%s" % name] = i
-        if format and freq0:
-            break
-    if not format:
-        raise ValueError("this .gaul file does not appear to contain a format string")
-    # call ASCII.load() function now that we have the format dict
-    kw['format'] = format
-    return ASCII.load(filename, **kw)
-
-
-Tigger.Models.Formats.registerFormat("Gaul", load, "PyBDSM .gaul/.srl file", (".gaul", ".srl",))
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import re
+import sys
+
+import Tigger.Models.Formats
+from Tigger.Models.Formats import dprint, ASCII
+
+"""Loads a PyBDSM-format .gaul file. Gaul files are essentially ASCII tables with a very specific naming convention."""
+
+# Gaus_id Isl_id Source_id Wave_id RA E_RA DEC E_DEC Total_flux
+# E_Total_flux Peak_flux E_Peak_flux Xposn E_Xposn Yposn E_Yposn Maj E_Maj Min
+# E_Min PA E_PA DC_Maj E_DC_Maj DC_Min E_DC_Min DC_PA E_DC_PA Isl_Total_flux
+# E_Isl_Total_flux Isl_rms Isl_mean Resid_Isl_rms Resid_Isl_mean S_Code
+
+format_mapping = dict(
+    Gaus_id="name",
+    RA="ra_d", E_RA="ra_err_d", DEC="dec_d", E_DEC="dec_err_d",
+    Total_flux="i", E_Total_flux="i_err",
+    Total_Q="q", E_Total_Q="q_err",
+    Total_U="u", E_Total_U="u_err",
+    Total_V="v", E_Total_V="v_err",
+    DC_Maj="emaj_d", DC_Min="emin_d", DC_PA="pa_d",
+    E_DC_Maj="emaj_err_d", E_DC_Min="emin_err_d", E_DC_PA="pa_err_d",
+    SpI="spi", Spec_Indx="spi", E_Spec_Indx="spi_err",
+    S_Code=":str:_pybdsm_S_Code"
+)
+
+
+def load(filename, freq0=None, **kw):
+    """Imports a gaul table
+    The 'freq0' argument supplies a default reference frequency (if one is not contained in the file.)
+    If 'center_on_brightest' is True, the mpodel field center will be set to the brightest source.
+    'min_extent' is minimal source extent (in radians), above which a source will be treated as a Gaussian rather than a point component.
+    """
+    srclist = []
+    id = None
+    dprint(1, "importing PyBDSM gaul/srl file", filename)
+    format = {}
+    extension = filename.split(".")[-1]
+    if extension == "srl":
+        format_mapping['Source_id'] = format_mapping.pop('Gaus_id')
+        id = "Source_id"
+    # look for format string and reference freq, and build up format dict
+    for line in open(filename):
+        m = re.match("# Reference frequency .*?([0-9.eE+-]+)\s*Hz", line)
+        if m:
+            freq0 = kw['freq0'] = freq0 or float(m.group(1))
+            dprint(2, "found reference frequency %g" % freq0)
+        elif re.match("#(\s*[\w:]+\s+)+", line) and line.find(id if id else "Gaus_id") > 0:
+            dprint(2, "found format string", line)
+            fields = dict([(name, i) for i, name in enumerate(line[1:].split())])
+            # map known fields to their ASCII equivalents, the rest copy as custom float attributes with
+            # a "pybdsm_" prefix
+            for i, name in enumerate(line[1:].split()):
+                if name in format_mapping:
+                    dprint(2, "Field", format_mapping[name], name, "is column", i)
+                    format[format_mapping[name]] = i
+                else:
+                    format[":float:_pybdsm_%s" % name] = i
+        if format and freq0:
+            break
+    if not format:
+        raise ValueError("this .gaul file does not appear to contain a format string")
+    # call ASCII.load() function now that we have the format dict
+    kw['format'] = format
+    return ASCII.load(filename, **kw)
+
+
+Tigger.Models.Formats.registerFormat("Gaul", load, "PyBDSM .gaul/.srl file", (".gaul", ".srl",))
--- tigger-lsm-1.7.0.orig/Tigger/Models/Formats/__init__.py
+++ tigger-lsm-1.7.0/Tigger/Models/Formats/__init__.py
@@ -1,130 +1,130 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import importlib
-import traceback
-
-import Kittens.utils
-
-_verbosity = Kittens.utils.verbosity(name="lsmformats")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-Formats = {}
-_FormatList = []
-_FormatsInitialized = False
-
-
-def _initFormats():
-    """Initializes all known formats by importing their modules"""
-    global _FormatsInitialized
-    if not _FormatsInitialized:
-        for format in ["ModelHTML", "ASCII", "BBS", "NEWSTAR", "AIPSCC", "AIPSCCFITS", "PyBDSMGaul"]:
-            try:
-                importlib.import_module("Tigger.Models.Formats." + format)
-            except:
-                traceback.print_exc()
-                print("Error loading support for format '%s', see above. Format will not be available." % format)
-        _FormatsInitialized = True
-
-
-def registerFormat(name, import_func, doc, extensions, export_func=None):
-    """Registers an external format, with an import function"""
-    global Formats
-    Formats[name] = (import_func, export_func, doc, extensions)
-    _FormatList.append(name)
-
-
-def getFormat(name):
-    """Gets file format by name. Returns name,import_func,export_func,docstring if found, None,None,None,None otherwise."""
-    _initFormats()
-    if name not in Formats:
-        return None, None, None, None
-    import_func, export_func, doc, extensions = Formats[name]
-    return name, import_func, export_func, doc
-
-
-def getFormatExtensions(name):
-    """Gets file format by name. Returns name,import_func,export_func,docstring if found, None,None,None,None otherwise."""
-    _initFormats()
-    if name not in Formats:
-        return None
-    import_func, export_func, doc, extensions = Formats[name]
-    return extensions
-
-
-def determineFormat(filename):
-    """Tries to determine file format by filename. Returns name,import_func,export_func,docstring if found, None,None,None,None otherwise."""
-    _initFormats()
-    for name, (import_func, export_func, doc, extensions) in list(Formats.items()):
-        for ext in extensions:
-            if filename.endswith(ext):
-                return name, import_func, export_func, doc
-    return None, None, None, None
-
-
-def listFormats():
-    _initFormats()
-    return _FormatList
-
-
-def listFormatsFull():
-    _initFormats()
-    return [(name, Formats[name]) for name in _FormatList]
-
-
-def resolveFormat(filename, format):
-    """Helper function, resolves format/filename arguments to a format tuple"""
-    _initFormats()
-    if format:
-        name, import_func, export_func, doc = getFormat(format)
-        if not import_func:
-            raise TypeError("Unknown model format '%s'" % format)
-    else:
-        name, import_func, export_func, doc = determineFormat(filename)
-        if not import_func:
-            raise TypeError("Cannot determine model format from filename '%s'" % filename)
-    return name, import_func, export_func, doc
-
-
-# provide some convenience methods
-
-def load(filename, format=None, verbose=True):
-    """Loads a sky model."""
-    name, import_func, export_func, doc = resolveFormat(filename, format)
-    if not import_func:
-        raise TypeError("Unknown model format '%s'" % format)
-    if verbose:
-        print("Loading %s: %s" % (filename, doc))
-    return import_func(filename)
-
-
-def save(model, filename, format=None, verbose=True):
-    """Saves a sky model."""
-    name, import_func, export_func, doc = resolveFormat(filename, format)
-    if verbose:
-        print("Saving %s: %s" % (filename, doc))
-    return export_func(model, filename)
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import importlib
+import traceback
+
+import Kittens.utils
+
+_verbosity = Kittens.utils.verbosity(name="lsmformats")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+Formats = {}
+_FormatList = []
+_FormatsInitialized = False
+
+
+def _initFormats():
+    """Initializes all known formats by importing their modules"""
+    global _FormatsInitialized
+    if not _FormatsInitialized:
+        for format in ["ModelHTML", "ASCII", "BBS", "NEWSTAR", "AIPSCC", "AIPSCCFITS", "PyBDSMGaul"]:
+            try:
+                importlib.import_module("Tigger.Models.Formats." + format)
+            except:
+                traceback.print_exc()
+                print("Error loading support for format '%s', see above. Format will not be available." % format)
+        _FormatsInitialized = True
+
+
+def registerFormat(name, import_func, doc, extensions, export_func=None):
+    """Registers an external format, with an import function"""
+    global Formats
+    Formats[name] = (import_func, export_func, doc, extensions)
+    _FormatList.append(name)
+
+
+def getFormat(name):
+    """Gets file format by name. Returns name,import_func,export_func,docstring if found, None,None,None,None otherwise."""
+    _initFormats()
+    if name not in Formats:
+        return None, None, None, None
+    import_func, export_func, doc, extensions = Formats[name]
+    return name, import_func, export_func, doc
+
+
+def getFormatExtensions(name):
+    """Gets file format by name. Returns name,import_func,export_func,docstring if found, None,None,None,None otherwise."""
+    _initFormats()
+    if name not in Formats:
+        return None
+    import_func, export_func, doc, extensions = Formats[name]
+    return extensions
+
+
+def determineFormat(filename):
+    """Tries to determine file format by filename. Returns name,import_func,export_func,docstring if found, None,None,None,None otherwise."""
+    _initFormats()
+    for name, (import_func, export_func, doc, extensions) in list(Formats.items()):
+        for ext in extensions:
+            if filename.endswith(ext):
+                return name, import_func, export_func, doc
+    return None, None, None, None
+
+
+def listFormats():
+    _initFormats()
+    return _FormatList
+
+
+def listFormatsFull():
+    _initFormats()
+    return [(name, Formats[name]) for name in _FormatList]
+
+
+def resolveFormat(filename, format):
+    """Helper function, resolves format/filename arguments to a format tuple"""
+    _initFormats()
+    if format:
+        name, import_func, export_func, doc = getFormat(format)
+        if not import_func:
+            raise TypeError("Unknown model format '%s'" % format)
+    else:
+        name, import_func, export_func, doc = determineFormat(filename)
+        if not import_func:
+            raise TypeError("Cannot determine model format from filename '%s'" % filename)
+    return name, import_func, export_func, doc
+
+
+# provide some convenience methods
+
+def load(filename, format=None, verbose=True):
+    """Loads a sky model."""
+    name, import_func, export_func, doc = resolveFormat(filename, format)
+    if not import_func:
+        raise TypeError("Unknown model format '%s'" % format)
+    if verbose:
+        print("Loading %s: %s" % (filename, doc))
+    return import_func(filename)
+
+
+def save(model, filename, format=None, verbose=True):
+    """Saves a sky model."""
+    name, import_func, export_func, doc = resolveFormat(filename, format)
+    if verbose:
+        print("Saving %s: %s" % (filename, doc))
+    return export_func(model, filename)
--- tigger-lsm-1.7.0.orig/Tigger/Models/ModelClasses.py
+++ tigger-lsm-1.7.0/Tigger/Models/ModelClasses.py
@@ -1,508 +1,508 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import copy
-import math
-
-import numpy
-import os.path
-
-try:
-    from PyQt5.Qt import QObject
-    from PyQt5.Qt import pyqtSignal
-except ImportError:
-    qt_available = False
-    pass
-else:
-    qt_available = True
-
-from Tigger import startup_dprint
-
-startup_dprint(1, "starting ModelClasses")
-
-DEG = 180 / math.pi
-
-AtomicTypes = dict(bool=bool, int=int, float=float, complex=complex, str=str, list=list, tuple=tuple, dict=dict,
-                   NoneType=lambda x: None)
-
-
-if qt_available:
-    class ModelItemSignals(QObject):
-        """ModelItemSignals is a connecting object for adding pyqtSignals to ModelItem.
-        The signals are compatible with PyQt 5 and Tigger v1.6.0
-        """
-
-        updated = pyqtSignal(int, object)
-        changeCurrentSource = pyqtSignal(object, object, object)
-        selected = pyqtSignal(object, object)
-        changeGroupingStyle = pyqtSignal(object, object)
-        changeGroupingVisibility = pyqtSignal(object, object)
-
-        def __init__(self):
-            QObject.__init__(self)
-
-
-class ModelItem(object):
-    """ModelItem is a base class for all model items. ModelItem provides functions
-    for saving, loading, and initializing items, using class attributes that describe the
-    item's structure.
-    A ModelItem has a number of named attributes (both mandatory and optional), which are
-      sufficient to fully describe the item.
-    A ModelItem is constructed by specifying its attribute values. Mandatory attributes are
-      passed as positional arguments to the constructor, while optional attributes are passed
-      as keyword arguments.
-    'mandatory_attrs' is a class data member that provides a list of mandatory attributes.
-    'optional_attrs' is a class data member that provides a dict of optional attributes and their
-        default values (i.e. their value when missing). Subclasses are expected to redefine these
-        attributes.
-    """
-
-    # list of mandatory item attributes
-    mandatory_attrs = []
-    # dict of optional item attributes (key is name, value is default value)
-    optional_attrs = {}
-    # True is arbitrary extra attributes are allowed
-    allow_extra_attrs = False
-    # dict of rendertags for attributes. Default is to render ModelItems with the "A" tag,
-    # and atomic attributes with the "TD" tag
-    attr_rendertag = {}
-    # dict of verbosities for attributes. If an entry is present for a given attribute, then
-    # the attribute's text representation will be rendered within its tags
-    attr_verbose = {}
-
-    def __init__(self, *args, **kws):
-        """The default ModelItem constructor treats its positional arguments as a list of
-        mandatory attributes, and its keyword arguments as optional attributes"""
-        # check for argument errors
-        if len(args) < len(self.mandatory_attrs):
-            raise TypeError("too few arguments in constructor of " + self.__class__.__name__)
-        if len(args) > len(self.mandatory_attrs):
-            raise TypeError("too many arguments in constructor of " + self.__class__.__name__)
-        # set mandatory attributes from argument list
-        for attr, value in zip(self.mandatory_attrs, args):
-            if not isinstance(value, AllowedTypesTuple):
-                raise TypeError("invalid type %s for attribute %s (class %s)" % (
-                    type(value).__name__, attr, self.__class__.__name__))
-            setattr(self, attr, value)
-        # set optional attributes from keywords
-        for kw, default in list(self.optional_attrs.items()):
-            value = kws.pop(kw, default)
-            if not isinstance(value, AllowedTypesTuple):
-                raise TypeError("invalid type %s for attribute %s (class %s)" % (
-                    type(value).__name__, kw, self.__class__.__name__))
-            setattr(self, kw, value)
-        # set extra attributes, if any are left
-        self._extra_attrs = set()
-        if self.allow_extra_attrs:
-            for kw, value in list(kws.items()):
-                if not isinstance(value, AllowedTypesTuple):
-                    raise TypeError("invalid type %s for attribute %s (class %s)" % (
-                        type(value).__name__, kw, self.__class__.__name__))
-                self.setAttribute(kw, value)
-        elif kws:
-            raise TypeError("unknown parameters %s in constructor of %s" % (
-                ','.join(list(kws.keys())), self.__class__.__name__))
-        # other init
-        self._signaller = None
-        self._connections = set()
-
-    def enableSignals(self):
-        """Enables Qt signals for this object."""
-        if qt_available:
-            self._signaller = ModelItemSignals()
-
-    def signalsEnabled(self):
-        return bool(self._signaller)
-
-    def connect(self, signal_name, receiver, reconnect=False):
-        """Connects SIGNAL from object to specified receiver slot. If reconnect is True, allows duplicate connections."""
-        if not self._signaller:
-            raise RuntimeError("ModelItem.connect() called before enableSignals()")
-        if reconnect or (signal_name, receiver) not in self._connections:
-            self._connections.add((signal_name, receiver))
-            if signal_name == 'updated':
-                self._signaller.updated.connect(receiver)
-            elif signal_name == 'changeCurrentSource':
-                self._signaller.changeCurrentSource.connect(receiver)
-            elif signal_name == 'selected':
-                self._signaller.selected.connect(receiver)
-            elif signal_name == 'changeGroupingStyle':
-                self._signaller.changeGroupingStyle.connect(receiver)
-            elif signal_name == 'changeGroupingVisibility':
-                self._signaller.changeGroupingVisibility.connect(receiver)
-
-    def emit(self, signal_name, *args):
-        """Emits named SIGNAL from this object ."""
-        if not self._signaller:
-            raise RuntimeError("ModelItem.emit() called before enableSignals()")
-        if signal_name == 'updated':
-            self._signaller.updated.emit(*args)
-        elif signal_name == 'changeCurrentSource':
-            self._signaller.changeCurrentSource.emit(*args)
-        elif signal_name == 'selected':
-            self._signaller.selected.emit(*args)
-        elif signal_name == 'changeGroupingStyle':
-            self._signaller.changeGroupingStyle.emit(*args)
-        elif signal_name == 'changeGroupingVisibility':
-            self._signaller.changeGroupingVisibility.emit(*args)
-
-    def registerClass(classobj):
-        if not isinstance(classobj, type):
-            raise TypeError("registering invalid class object: %s" % classobj)
-        globals()[classobj.__name__] = classobj
-        AllowedTypes[classobj.__name__] = classobj
-        AllowedTypesTuple = tuple(AllowedTypes.values())
-
-    registerClass = classmethod(registerClass)
-
-    def setAttribute(self, attr, value):
-        if attr not in self.mandatory_attrs and attr not in self.optional_attrs:
-            self._extra_attrs.add(attr)
-        setattr(self, attr, value)
-
-    def removeAttribute(self, attr):
-        if hasattr(self, attr):
-            delattr(self, attr)
-        self._extra_attrs.discard(attr)
-
-    def getExtraAttributes(self):
-        """Returns list of extra attributes, as (attr,value) tuples"""
-        return [(attr, getattr(self, attr)) for attr in self._extra_attrs]
-
-    def getAttributes(self):
-        """Returns list of all attributes (mandatory+optional+extra), as (attr,value) tuples"""
-        attrs = [(attr, getattr(self, attr)) for attr in self.mandatory_attrs]
-        for attr, default in list(self.optional_attrs.items()):
-            val = getattr(self, attr, default)
-            if val != default:
-                attrs.append((attr, val))
-        attrs += [(attr, getattr(self, attr)) for attr in self._extra_attrs]
-        return attrs
-
-    def __copy__(self):
-        """Returns copy of object. Copies all attributes."""
-        attrs = self.optional_attrs.copy()
-        attrs.update(self.getExtraAttributes())
-        return self.__class__(*[getattr(self, attr) for attr in self.mandatory_attrs], **attrs)
-
-    def __deepcopy__(self, memodict):
-        """Returns copy of object. Copies all attributes."""
-        attrs = self.optional_attrs.copy()
-        attrs.update(self.getExtraAttributes())
-        attrs = copy.deepcopy(attrs, memodict)
-        return self.__class__(*[copy.deepcopy(getattr(self, attr), memodict) for attr in self.mandatory_attrs],
-                              **attrs)
-
-    def copy(self, deep=True):
-        if deep:
-            return copy.deepcopy(self)
-        else:
-            return self.__copy__()
-
-    def strAttributes(self, sep=",", label=True,
-                      float_format="%.2g", complex_format="%.2g%+.2gj"):
-        """Renders attributes as string. Child classes may redefine this to make a better string representation.
-        If label=True, uses "attrname=value", else uses "value".
-        'sep' specifies a separator.
-        """
-        fields = []
-        for attr, val in self.getAttributes():
-            ss = (label and "%s=" % attr) or ""
-            if isinstance(val, (float, int)):
-                ss += float_format % val
-            elif isinstance(val, complex):
-                ss += complex_format % val
-            else:
-                ss += str(val)
-            fields.append(ss)
-        return sep.join(fields)
-
-    def strDesc(self, **kw):
-        """Returns string describing the object, used in GUIs and such. Default implementation calls strAttributes()."""
-        return self.strAttributes(**kw)
-
-    def _resolveTags(self, tags, attr=None):
-        """helper function called from renderMarkup() and renderAttrMarkup() below to
-        figure out which HTML tags to enclose a value in. Return value is tuple of (tag,endtag,rem_tags), where
-        tag is the HTML tag to use (or None for default, usually "A"), endtag is the closing tag (including <> and whitespace, if any),
-        and rem_tags is to be passed to child items' resolveMarkup() """
-        # figure out enclosing tag
-        if not tags:
-            tag, tags = None, None  # use default
-        elif isinstance(tags, str):
-            tag, tags = tags, None  # one tag supplied, use that here and use defaults for sub-items
-        elif isinstance(tags, (list, tuple)):
-            tag, tags = tags[0], tags[1:]  # stack of tags supplied: use first here, pass rest to sub-items
-        else:
-            raise ValueError("invalid 'tags' parameter of type " + str(type(tags)))
-        # if tag is None, use default
-        tag = tag or self.attr_rendertag.get(attr, None) or "A"
-        if tag.endswith('\n'):
-            tag = tag[:-1]
-            endtag = "</%s>\n" % tag
-        else:
-            endtag = "</%s> " % tag
-        return tag, endtag, tags
-
-    def renderMarkup(self, tags=None, attrname=None):
-        """Makes a markup string corresponding to the model item.
-        'tags' is the HTML tag to use.
-        If 'verbose' is not None, a text representation of the item (using str()) will be included
-        as HTML text between the opening and closing tags.
-        """
-        tag, endtag, tags = self._resolveTags(tags, attrname)
-        # opening tag
-        markup = "<%s mdltype=%s " % (tag, type(self).__name__)
-        if attrname is not None:
-            markup += "mdlattr=\"%s\" " % attrname
-        markup += ">"
-        # render attrname as comment
-        if attrname:
-            if tag == "TR":
-                markup += "<TD bgcolor=yellow>%s</TD>" % attrname
-            else:
-                markup += "<A>%s:</A> " % attrname
-        # write mandatory attributes
-        for attr in self.mandatory_attrs:
-            markup += self.renderAttrMarkup(attr, getattr(self, attr), tags=tags, mandatory=True)
-        # write optional attributes only wheh non-default
-        for attr, default in sorted(self.optional_attrs.items()):
-            val = getattr(self, attr, default)
-            if val != default:
-                markup += self.renderAttrMarkup(attr, val, tags=tags)
-        # write extra attributes
-        for attr in self._extra_attrs:
-            markup += self.renderAttrMarkup(attr, getattr(self, attr), tags=tags)
-        # closing tag
-        markup += endtag
-        return markup
-
-    numpy_int_types = tuple([
-        getattr(numpy, "%s%d" % (t, d)) for t in ("int", "uint") for d in (8, 16, 32, 64)
-        if hasattr(numpy, "%s%d" % (t, d))
-    ])
-    numpy_float_types = tuple([
-        getattr(numpy, "float%d" % d) for d in (32, 64, 96, 128)
-        if hasattr(numpy, "float%d" % d)
-    ])
-
-    def renderAttrMarkup(self, attr, value, tags=None, verbose=None, mandatory=False):
-        # render ModelItems recursively via renderMarkup() above
-        if isinstance(value, ModelItem):
-            return value.renderMarkup(tags, attrname=(not mandatory and attr) or None)
-        # figure out enclosing tags
-        tag, endtag, tags = self._resolveTags(tags, attr)
-        # convert numpy types to float or complexes
-        if isinstance(value, self.numpy_int_types):
-            value = int(value)
-        elif isinstance(value, self.numpy_float_types):
-            value = float(value)
-        elif numpy.iscomplexobj(value):
-            value = complex(value)
-        # render opening tags
-        markup = "<%s mdltype=%s " % (tag, type(value).__name__)
-        if not mandatory:
-            markup += "mdlattr=\"%s\" " % attr
-        # if rendering table row, use TD to render comments
-        if verbose is None:
-            verbose = attr  # and self.attr_verbose.get(attr)
-        if tag == "TR":
-            comment = "<TD bgcolor=yellow>%s</TD>"
-        else:
-            comment = "<A>%s</A> "
-        # render lists or tuples iteratively
-        if isinstance(value, (list, tuple)):
-            markup += ">"
-            if verbose:
-                markup += comment % (verbose + ":")
-            for i, item in enumerate(value):
-                markup += self.renderAttrMarkup(str(i), item, mandatory=True, tags=tags)
-        # render dicts iteratively
-        elif isinstance(value, dict):
-            markup += ">"
-            if verbose:
-                markup += comment % (verbose + ":")
-            for key, item in sorted(value.items()):
-                markup += self.renderAttrMarkup(key, item, tags=tags)
-        # render everything else inline
-        else:
-            if isinstance(value, str):
-                markup += "mdlval=\"'%s'\">" % value.replace("\"", "\\\"").replace("'", "\\'")
-            else:
-                markup += "mdlval=\"%s\">" % repr(value)
-            if verbose is attr:
-                markup += comment % ':'.join((attr, str(value)))
-            else:
-                markup += comment % ''.join((verbose, str(value)))
-        markup += endtag
-        return markup
-
-
-def _deg_to_dms(x, prec=0.01):
-    """Converts x (in degrees) into d,m,s tuple, where d and m are ints.
-    prec gives the precision, in arcseconds."""
-    mins, secs = divmod(round(x * 3600 / prec) * prec, 60)
-    mins = int(mins)
-    degs, mins = divmod(mins, 60)
-    return degs, mins, secs
-
-
-class Position(ModelItem):
-    mandatory_attrs = ["ra", "dec"]
-    optional_attrs = dict(ra_err=None, dec_err=None)
-
-    @staticmethod
-    def ra_hms_static(rad, scale=12, prec=0.01):
-        """Returns RA as tuple of (h,m,s)"""
-        # convert negative values
-        while rad < 0:
-            rad += 2 * math.pi
-        # convert to hours
-        rad *= scale / math.pi
-        return _deg_to_dms(rad, prec)
-
-    def ra_hms(self, prec=0.01):
-        return self.ra_hms_static(self.ra, scale=12, prec=prec)
-
-    def ra_dms(self, prec=0.01):
-        return self.ra_hms_static(self.ra, scale=180, prec=prec)
-
-    @staticmethod
-    def dec_dms_static(rad, prec=0.01):
-        return Position.dec_sdms_static(rad, prec)[1:]
-
-    @staticmethod
-    def dec_sdms_static(rad, prec=0.01):
-        """Returns Dec as tuple of (sign,d,m,s). Sign is "+" or "-"."""
-        sign = "-" if rad < 0 else "+"
-        d, m, s = _deg_to_dms(abs(rad) * DEG, prec)
-        return (sign, d, m, s)
-
-    def dec_sdms(self, prec=0.01):
-        return self.dec_sdms_static(self.dec, prec)
-
-
-class Flux(ModelItem):
-    mandatory_attrs = ["I"]
-    optional_attrs = dict(I_err=None)
-
-    def rescale(self, scale):
-        self.I *= scale
-
-
-class Polarization(Flux):
-    mandatory_attrs = Flux.mandatory_attrs + ["Q", "U", "V"]
-    optional_attrs = dict(I_err=None, Q_err=None, U_err=None, V_err=None)
-
-    def rescale(self, scale):
-        for stokes in "IQUV":
-            setattr(self, stokes, getattr(self, stokes) * scale)
-
-
-class PolarizationWithRM(Polarization):
-    mandatory_attrs = Polarization.mandatory_attrs + ["rm", "freq0"]
-    optional_attrs = dict(Polarization.optional_attrs, rm_err=None)
-
-
-class Spectrum(ModelItem):
-    """The Spectrum class is an abstract representation of spectral information. The base implementation corresponds
-    to a flat spectrum.
-    """
-
-    def normalized_intensity(self, freq):
-        """Returns the normalized intensity for a given frequency,normalized to unity at the reference frequency (if any)"""
-        return 1
-
-
-class SpectralIndex(Spectrum):
-    mandatory_attrs = ["spi", "freq0"]
-    optional_attrs = dict(spi_err=None)
-
-    def normalized_intensity(self, freq):
-        """Returns the normalized intensity for a given frequency, normalized to unity at the reference frequency (if any)"""
-        if isinstance(self.spi, (list, tuple)):
-            spi = self.spi[0]
-            logfreq = numpy.log(freq / self.freq0)
-            for i, x in enumerate(self.spi[1:]):
-                spi = spi + x * (logfreq ** (i + 1))
-        else:
-            spi = self.spi
-        return (freq / self.freq0) ** spi
-
-
-class Shape(ModelItem):
-    """Abstract base class for a source's brightness distribution.
-    The ex/ey/pa attributes give the overall shape of the source."""
-    mandatory_attrs = ["ex", "ey", "pa"]
-    optional_attrs = dict(ex_err=None, ey_err=None, pa_err=None)
-
-    def getShape(self):
-        return self.ex, self.ey, self.pa
-
-    def getShapeErr(self):
-        err = [getattr(self, a + '_err', None) for a in self.mandatory_attrs]
-        if all([a is None for a in err]):
-            return None
-        return tuple(err)
-
-
-class Gaussian(Shape):
-    typecode = "Gau"
-
-    def strDesc(self, delimiters=('"', "x", "@", "deg"), **kw):
-        return """%.2g%s%s%.2g%s%s%d%s""" % (
-            self.ex * DEG * 3600, delimiters[0], delimiters[1], self.ey * DEG * 3600, delimiters[0],
-            delimiters[2], round(self.pa * DEG), delimiters[3])
-
-    def strDescErr(self, delimiters=('"', "x", "@", "deg"), **kw):
-        err = self.getShapeErr()
-        return err and """%.2g%s%s%.2g%s%s%d%s""" % (
-            err[0] * DEG * 3600, delimiters[0], delimiters[1], err[1] * DEG * 3600, delimiters[0],
-            delimiters[2], round(err[2] * DEG), delimiters[3])
-
-
-class FITSImage(Shape):
-    typecode = "FITS"
-    mandatory_attrs = Shape.mandatory_attrs + ["filename", "nx", "ny"]
-    optional_attrs = dict(pad=2)
-
-    def strDesc(self, **kw):
-        return """%s %dx%d""" % (os.path.basename(self.filename), self.nx, self.ny)
-
-
-startup_dprint(1, "end of class defs")
-
-# populate dict of AllowedTypes with all classes defined so far
-globs = list(globals().items())
-
-AllowedTypes = dict(iter(list(AtomicTypes.items())))
-AllowedTypes['NoneType'] = type(None)  # this must be a type, otherwise isinstance() doesn't work
-for name, val in globs:
-    if isinstance(val, type):
-        AllowedTypes[name] = val
-AllowedTypesTuple = tuple(AllowedTypes.values())
-
-startup_dprint(1, "end of ModelClasses")
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import copy
+import math
+
+import numpy
+import os.path
+
+try:
+    from PyQt5.Qt import QObject
+    from PyQt5.Qt import pyqtSignal
+except ImportError:
+    qt_available = False
+    pass
+else:
+    qt_available = True
+
+from Tigger import startup_dprint
+
+startup_dprint(1, "starting ModelClasses")
+
+DEG = 180 / math.pi
+
+AtomicTypes = dict(bool=bool, int=int, float=float, complex=complex, str=str, list=list, tuple=tuple, dict=dict,
+                   NoneType=lambda x: None)
+
+
+if qt_available:
+    class ModelItemSignals(QObject):
+        """ModelItemSignals is a connecting object for adding pyqtSignals to ModelItem.
+        The signals are compatible with PyQt 5 and Tigger v1.6.0
+        """
+
+        updated = pyqtSignal(int, object)
+        changeCurrentSource = pyqtSignal(object, object, object)
+        selected = pyqtSignal(object, object)
+        changeGroupingStyle = pyqtSignal(object, object)
+        changeGroupingVisibility = pyqtSignal(object, object)
+
+        def __init__(self):
+            QObject.__init__(self)
+
+
+class ModelItem(object):
+    """ModelItem is a base class for all model items. ModelItem provides functions
+    for saving, loading, and initializing items, using class attributes that describe the
+    item's structure.
+    A ModelItem has a number of named attributes (both mandatory and optional), which are
+      sufficient to fully describe the item.
+    A ModelItem is constructed by specifying its attribute values. Mandatory attributes are
+      passed as positional arguments to the constructor, while optional attributes are passed
+      as keyword arguments.
+    'mandatory_attrs' is a class data member that provides a list of mandatory attributes.
+    'optional_attrs' is a class data member that provides a dict of optional attributes and their
+        default values (i.e. their value when missing). Subclasses are expected to redefine these
+        attributes.
+    """
+
+    # list of mandatory item attributes
+    mandatory_attrs = []
+    # dict of optional item attributes (key is name, value is default value)
+    optional_attrs = {}
+    # True is arbitrary extra attributes are allowed
+    allow_extra_attrs = False
+    # dict of rendertags for attributes. Default is to render ModelItems with the "A" tag,
+    # and atomic attributes with the "TD" tag
+    attr_rendertag = {}
+    # dict of verbosities for attributes. If an entry is present for a given attribute, then
+    # the attribute's text representation will be rendered within its tags
+    attr_verbose = {}
+
+    def __init__(self, *args, **kws):
+        """The default ModelItem constructor treats its positional arguments as a list of
+        mandatory attributes, and its keyword arguments as optional attributes"""
+        # check for argument errors
+        if len(args) < len(self.mandatory_attrs):
+            raise TypeError("too few arguments in constructor of " + self.__class__.__name__)
+        if len(args) > len(self.mandatory_attrs):
+            raise TypeError("too many arguments in constructor of " + self.__class__.__name__)
+        # set mandatory attributes from argument list
+        for attr, value in zip(self.mandatory_attrs, args):
+            if not isinstance(value, AllowedTypesTuple):
+                raise TypeError("invalid type %s for attribute %s (class %s)" % (
+                    type(value).__name__, attr, self.__class__.__name__))
+            setattr(self, attr, value)
+        # set optional attributes from keywords
+        for kw, default in list(self.optional_attrs.items()):
+            value = kws.pop(kw, default)
+            if not isinstance(value, AllowedTypesTuple):
+                raise TypeError("invalid type %s for attribute %s (class %s)" % (
+                    type(value).__name__, kw, self.__class__.__name__))
+            setattr(self, kw, value)
+        # set extra attributes, if any are left
+        self._extra_attrs = set()
+        if self.allow_extra_attrs:
+            for kw, value in list(kws.items()):
+                if not isinstance(value, AllowedTypesTuple):
+                    raise TypeError("invalid type %s for attribute %s (class %s)" % (
+                        type(value).__name__, kw, self.__class__.__name__))
+                self.setAttribute(kw, value)
+        elif kws:
+            raise TypeError("unknown parameters %s in constructor of %s" % (
+                ','.join(list(kws.keys())), self.__class__.__name__))
+        # other init
+        self._signaller = None
+        self._connections = set()
+
+    def enableSignals(self):
+        """Enables Qt signals for this object."""
+        if qt_available:
+            self._signaller = ModelItemSignals()
+
+    def signalsEnabled(self):
+        return bool(self._signaller)
+
+    def connect(self, signal_name, receiver, reconnect=False):
+        """Connects SIGNAL from object to specified receiver slot. If reconnect is True, allows duplicate connections."""
+        if not self._signaller:
+            raise RuntimeError("ModelItem.connect() called before enableSignals()")
+        if reconnect or (signal_name, receiver) not in self._connections:
+            self._connections.add((signal_name, receiver))
+            if signal_name == 'updated':
+                self._signaller.updated.connect(receiver)
+            elif signal_name == 'changeCurrentSource':
+                self._signaller.changeCurrentSource.connect(receiver)
+            elif signal_name == 'selected':
+                self._signaller.selected.connect(receiver)
+            elif signal_name == 'changeGroupingStyle':
+                self._signaller.changeGroupingStyle.connect(receiver)
+            elif signal_name == 'changeGroupingVisibility':
+                self._signaller.changeGroupingVisibility.connect(receiver)
+
+    def emit(self, signal_name, *args):
+        """Emits named SIGNAL from this object ."""
+        if not self._signaller:
+            raise RuntimeError("ModelItem.emit() called before enableSignals()")
+        if signal_name == 'updated':
+            self._signaller.updated.emit(*args)
+        elif signal_name == 'changeCurrentSource':
+            self._signaller.changeCurrentSource.emit(*args)
+        elif signal_name == 'selected':
+            self._signaller.selected.emit(*args)
+        elif signal_name == 'changeGroupingStyle':
+            self._signaller.changeGroupingStyle.emit(*args)
+        elif signal_name == 'changeGroupingVisibility':
+            self._signaller.changeGroupingVisibility.emit(*args)
+
+    def registerClass(classobj):
+        if not isinstance(classobj, type):
+            raise TypeError("registering invalid class object: %s" % classobj)
+        globals()[classobj.__name__] = classobj
+        AllowedTypes[classobj.__name__] = classobj
+        AllowedTypesTuple = tuple(AllowedTypes.values())
+
+    registerClass = classmethod(registerClass)
+
+    def setAttribute(self, attr, value):
+        if attr not in self.mandatory_attrs and attr not in self.optional_attrs:
+            self._extra_attrs.add(attr)
+        setattr(self, attr, value)
+
+    def removeAttribute(self, attr):
+        if hasattr(self, attr):
+            delattr(self, attr)
+        self._extra_attrs.discard(attr)
+
+    def getExtraAttributes(self):
+        """Returns list of extra attributes, as (attr,value) tuples"""
+        return [(attr, getattr(self, attr)) for attr in self._extra_attrs]
+
+    def getAttributes(self):
+        """Returns list of all attributes (mandatory+optional+extra), as (attr,value) tuples"""
+        attrs = [(attr, getattr(self, attr)) for attr in self.mandatory_attrs]
+        for attr, default in list(self.optional_attrs.items()):
+            val = getattr(self, attr, default)
+            if val != default:
+                attrs.append((attr, val))
+        attrs += [(attr, getattr(self, attr)) for attr in self._extra_attrs]
+        return attrs
+
+    def __copy__(self):
+        """Returns copy of object. Copies all attributes."""
+        attrs = self.optional_attrs.copy()
+        attrs.update(self.getExtraAttributes())
+        return self.__class__(*[getattr(self, attr) for attr in self.mandatory_attrs], **attrs)
+
+    def __deepcopy__(self, memodict):
+        """Returns copy of object. Copies all attributes."""
+        attrs = self.optional_attrs.copy()
+        attrs.update(self.getExtraAttributes())
+        attrs = copy.deepcopy(attrs, memodict)
+        return self.__class__(*[copy.deepcopy(getattr(self, attr), memodict) for attr in self.mandatory_attrs],
+                              **attrs)
+
+    def copy(self, deep=True):
+        if deep:
+            return copy.deepcopy(self)
+        else:
+            return self.__copy__()
+
+    def strAttributes(self, sep=",", label=True,
+                      float_format="%.2g", complex_format="%.2g%+.2gj"):
+        """Renders attributes as string. Child classes may redefine this to make a better string representation.
+        If label=True, uses "attrname=value", else uses "value".
+        'sep' specifies a separator.
+        """
+        fields = []
+        for attr, val in self.getAttributes():
+            ss = (label and "%s=" % attr) or ""
+            if isinstance(val, (float, int)):
+                ss += float_format % val
+            elif isinstance(val, complex):
+                ss += complex_format % val
+            else:
+                ss += str(val)
+            fields.append(ss)
+        return sep.join(fields)
+
+    def strDesc(self, **kw):
+        """Returns string describing the object, used in GUIs and such. Default implementation calls strAttributes()."""
+        return self.strAttributes(**kw)
+
+    def _resolveTags(self, tags, attr=None):
+        """helper function called from renderMarkup() and renderAttrMarkup() below to
+        figure out which HTML tags to enclose a value in. Return value is tuple of (tag,endtag,rem_tags), where
+        tag is the HTML tag to use (or None for default, usually "A"), endtag is the closing tag (including <> and whitespace, if any),
+        and rem_tags is to be passed to child items' resolveMarkup() """
+        # figure out enclosing tag
+        if not tags:
+            tag, tags = None, None  # use default
+        elif isinstance(tags, str):
+            tag, tags = tags, None  # one tag supplied, use that here and use defaults for sub-items
+        elif isinstance(tags, (list, tuple)):
+            tag, tags = tags[0], tags[1:]  # stack of tags supplied: use first here, pass rest to sub-items
+        else:
+            raise ValueError("invalid 'tags' parameter of type " + str(type(tags)))
+        # if tag is None, use default
+        tag = tag or self.attr_rendertag.get(attr, None) or "A"
+        if tag.endswith('\n'):
+            tag = tag[:-1]
+            endtag = "</%s>\n" % tag
+        else:
+            endtag = "</%s> " % tag
+        return tag, endtag, tags
+
+    def renderMarkup(self, tags=None, attrname=None):
+        """Makes a markup string corresponding to the model item.
+        'tags' is the HTML tag to use.
+        If 'verbose' is not None, a text representation of the item (using str()) will be included
+        as HTML text between the opening and closing tags.
+        """
+        tag, endtag, tags = self._resolveTags(tags, attrname)
+        # opening tag
+        markup = "<%s mdltype=%s " % (tag, type(self).__name__)
+        if attrname is not None:
+            markup += "mdlattr=\"%s\" " % attrname
+        markup += ">"
+        # render attrname as comment
+        if attrname:
+            if tag == "TR":
+                markup += "<TD bgcolor=yellow>%s</TD>" % attrname
+            else:
+                markup += "<A>%s:</A> " % attrname
+        # write mandatory attributes
+        for attr in self.mandatory_attrs:
+            markup += self.renderAttrMarkup(attr, getattr(self, attr), tags=tags, mandatory=True)
+        # write optional attributes only wheh non-default
+        for attr, default in sorted(self.optional_attrs.items()):
+            val = getattr(self, attr, default)
+            if val != default:
+                markup += self.renderAttrMarkup(attr, val, tags=tags)
+        # write extra attributes
+        for attr in self._extra_attrs:
+            markup += self.renderAttrMarkup(attr, getattr(self, attr), tags=tags)
+        # closing tag
+        markup += endtag
+        return markup
+
+    numpy_int_types = tuple([
+        getattr(numpy, "%s%d" % (t, d)) for t in ("int", "uint") for d in (8, 16, 32, 64)
+        if hasattr(numpy, "%s%d" % (t, d))
+    ])
+    numpy_float_types = tuple([
+        getattr(numpy, "float%d" % d) for d in (32, 64, 96, 128)
+        if hasattr(numpy, "float%d" % d)
+    ])
+
+    def renderAttrMarkup(self, attr, value, tags=None, verbose=None, mandatory=False):
+        # render ModelItems recursively via renderMarkup() above
+        if isinstance(value, ModelItem):
+            return value.renderMarkup(tags, attrname=(not mandatory and attr) or None)
+        # figure out enclosing tags
+        tag, endtag, tags = self._resolveTags(tags, attr)
+        # convert numpy types to float or complexes
+        if isinstance(value, self.numpy_int_types):
+            value = int(value)
+        elif isinstance(value, self.numpy_float_types):
+            value = float(value)
+        elif numpy.iscomplexobj(value):
+            value = complex(value)
+        # render opening tags
+        markup = "<%s mdltype=%s " % (tag, type(value).__name__)
+        if not mandatory:
+            markup += "mdlattr=\"%s\" " % attr
+        # if rendering table row, use TD to render comments
+        if verbose is None:
+            verbose = attr  # and self.attr_verbose.get(attr)
+        if tag == "TR":
+            comment = "<TD bgcolor=yellow>%s</TD>"
+        else:
+            comment = "<A>%s</A> "
+        # render lists or tuples iteratively
+        if isinstance(value, (list, tuple)):
+            markup += ">"
+            if verbose:
+                markup += comment % (verbose + ":")
+            for i, item in enumerate(value):
+                markup += self.renderAttrMarkup(str(i), item, mandatory=True, tags=tags)
+        # render dicts iteratively
+        elif isinstance(value, dict):
+            markup += ">"
+            if verbose:
+                markup += comment % (verbose + ":")
+            for key, item in sorted(value.items()):
+                markup += self.renderAttrMarkup(key, item, tags=tags)
+        # render everything else inline
+        else:
+            if isinstance(value, str):
+                markup += "mdlval=\"'%s'\">" % value.replace("\"", "\\\"").replace("'", "\\'")
+            else:
+                markup += "mdlval=\"%s\">" % repr(value)
+            if verbose is attr:
+                markup += comment % ':'.join((attr, str(value)))
+            else:
+                markup += comment % ''.join((verbose, str(value)))
+        markup += endtag
+        return markup
+
+
+def _deg_to_dms(x, prec=0.01):
+    """Converts x (in degrees) into d,m,s tuple, where d and m are ints.
+    prec gives the precision, in arcseconds."""
+    mins, secs = divmod(round(x * 3600 / prec) * prec, 60)
+    mins = int(mins)
+    degs, mins = divmod(mins, 60)
+    return degs, mins, secs
+
+
+class Position(ModelItem):
+    mandatory_attrs = ["ra", "dec"]
+    optional_attrs = dict(ra_err=None, dec_err=None)
+
+    @staticmethod
+    def ra_hms_static(rad, scale=12, prec=0.01):
+        """Returns RA as tuple of (h,m,s)"""
+        # convert negative values
+        while rad < 0:
+            rad += 2 * math.pi
+        # convert to hours
+        rad *= scale / math.pi
+        return _deg_to_dms(rad, prec)
+
+    def ra_hms(self, prec=0.01):
+        return self.ra_hms_static(self.ra, scale=12, prec=prec)
+
+    def ra_dms(self, prec=0.01):
+        return self.ra_hms_static(self.ra, scale=180, prec=prec)
+
+    @staticmethod
+    def dec_dms_static(rad, prec=0.01):
+        return Position.dec_sdms_static(rad, prec)[1:]
+
+    @staticmethod
+    def dec_sdms_static(rad, prec=0.01):
+        """Returns Dec as tuple of (sign,d,m,s). Sign is "+" or "-"."""
+        sign = "-" if rad < 0 else "+"
+        d, m, s = _deg_to_dms(abs(rad) * DEG, prec)
+        return (sign, d, m, s)
+
+    def dec_sdms(self, prec=0.01):
+        return self.dec_sdms_static(self.dec, prec)
+
+
+class Flux(ModelItem):
+    mandatory_attrs = ["I"]
+    optional_attrs = dict(I_err=None)
+
+    def rescale(self, scale):
+        self.I *= scale
+
+
+class Polarization(Flux):
+    mandatory_attrs = Flux.mandatory_attrs + ["Q", "U", "V"]
+    optional_attrs = dict(I_err=None, Q_err=None, U_err=None, V_err=None)
+
+    def rescale(self, scale):
+        for stokes in "IQUV":
+            setattr(self, stokes, getattr(self, stokes) * scale)
+
+
+class PolarizationWithRM(Polarization):
+    mandatory_attrs = Polarization.mandatory_attrs + ["rm", "freq0"]
+    optional_attrs = dict(Polarization.optional_attrs, rm_err=None)
+
+
+class Spectrum(ModelItem):
+    """The Spectrum class is an abstract representation of spectral information. The base implementation corresponds
+    to a flat spectrum.
+    """
+
+    def normalized_intensity(self, freq):
+        """Returns the normalized intensity for a given frequency,normalized to unity at the reference frequency (if any)"""
+        return 1
+
+
+class SpectralIndex(Spectrum):
+    mandatory_attrs = ["spi", "freq0"]
+    optional_attrs = dict(spi_err=None)
+
+    def normalized_intensity(self, freq):
+        """Returns the normalized intensity for a given frequency, normalized to unity at the reference frequency (if any)"""
+        if isinstance(self.spi, (list, tuple)):
+            spi = self.spi[0]
+            logfreq = numpy.log(freq / self.freq0)
+            for i, x in enumerate(self.spi[1:]):
+                spi = spi + x * (logfreq ** (i + 1))
+        else:
+            spi = self.spi
+        return (freq / self.freq0) ** spi
+
+
+class Shape(ModelItem):
+    """Abstract base class for a source's brightness distribution.
+    The ex/ey/pa attributes give the overall shape of the source."""
+    mandatory_attrs = ["ex", "ey", "pa"]
+    optional_attrs = dict(ex_err=None, ey_err=None, pa_err=None)
+
+    def getShape(self):
+        return self.ex, self.ey, self.pa
+
+    def getShapeErr(self):
+        err = [getattr(self, a + '_err', None) for a in self.mandatory_attrs]
+        if all([a is None for a in err]):
+            return None
+        return tuple(err)
+
+
+class Gaussian(Shape):
+    typecode = "Gau"
+
+    def strDesc(self, delimiters=('"', "x", "@", "deg"), **kw):
+        return """%.2g%s%s%.2g%s%s%d%s""" % (
+            self.ex * DEG * 3600, delimiters[0], delimiters[1], self.ey * DEG * 3600, delimiters[0],
+            delimiters[2], round(self.pa * DEG), delimiters[3])
+
+    def strDescErr(self, delimiters=('"', "x", "@", "deg"), **kw):
+        err = self.getShapeErr()
+        return err and """%.2g%s%s%.2g%s%s%d%s""" % (
+            err[0] * DEG * 3600, delimiters[0], delimiters[1], err[1] * DEG * 3600, delimiters[0],
+            delimiters[2], round(err[2] * DEG), delimiters[3])
+
+
+class FITSImage(Shape):
+    typecode = "FITS"
+    mandatory_attrs = Shape.mandatory_attrs + ["filename", "nx", "ny"]
+    optional_attrs = dict(pad=2)
+
+    def strDesc(self, **kw):
+        return """%s %dx%d""" % (os.path.basename(self.filename), self.nx, self.ny)
+
+
+startup_dprint(1, "end of class defs")
+
+# populate dict of AllowedTypes with all classes defined so far
+globs = list(globals().items())
+
+AllowedTypes = dict(iter(list(AtomicTypes.items())))
+AllowedTypes['NoneType'] = type(None)  # this must be a type, otherwise isinstance() doesn't work
+for name, val in globs:
+    if isinstance(val, type):
+        AllowedTypes[name] = val
+AllowedTypesTuple = tuple(AllowedTypes.values())
+
+startup_dprint(1, "end of ModelClasses")
--- tigger-lsm-1.7.0.orig/Tigger/Models/PlotStyles.py
+++ tigger-lsm-1.7.0/Tigger/Models/PlotStyles.py
@@ -1,137 +1,137 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import math
-
-from . import ModelClasses
-
-# string used to indicate default value of an attribute
-DefaultValue = "default"
-# string used to indicate "none" value of an attribute
-NoneValue = "none"
-
-# definitive list of style attributes
-StyleAttributes = ["symbol", "symbol_color", "symbol_size", "symbol_linewidth", "label", "label_color", "label_size"]
-
-# dict of attribute labels (i.e. for menus, column headings and such)
-StyleAttributeLabels = dict(symbol="symbol", symbol_color="color", symbol_size="size", symbol_linewidth="line width",
-                            label="label", label_color="color", label_size="size")
-# dict of attribute types. Any attribute not in this dict is of type str.
-StyleAttributeTypes = dict(symbol_size=int, symbol_linewidth=int, label_size=int)
-
-# list of known colors
-ColorList = ["black", "blue", "lightblue", "green", "lightgreen", "cyan", "red", "orange red", "purple", "magenta",
-             "yellow", "white"]
-DefaultColor = "black"
-
-# dict and method to pick a contrasting color (i.e. suitable as background for specified color)
-ContrastColor = dict(white="#404040", yellow="#404040")
-DefaultContrastColor = "#B0B0B0"
-
-
-def getContrastColor(color):
-    return ContrastColor.get(color, DefaultContrastColor)
-
-
-# dict of possible user settings for each attribute
-StyleAttributeOptions = dict(
-    symbol=[DefaultValue, NoneValue, "cross", "plus", "dot", "circle", "square", "diamond"],
-    symbol_color=[DefaultValue] + ColorList,
-    label=[DefaultValue, NoneValue, "%N", "%N %BJy", "%N %BJy r=%R'"],
-    label_color=[DefaultValue] + ColorList,
-    label_size=[DefaultValue, 6, 8, 10, 12, 14],
-)
-
-# constants for the show_list and show_plot attributes
-ShowNot = 0
-ShowDefault = 1
-ShowAlways = 2
-
-DefaultPlotAttrs = dict(symbol=None, symbol_color=DefaultColor, symbol_size=5, symbol_linewidth=0,
-                        label=None, label_color=DefaultColor, label_size=10,
-                        show_list=ShowDefault, show_plot=ShowDefault, apply=0)
-
-
-class PlotStyle(ModelClasses.ModelItem):
-    optional_attrs = DefaultPlotAttrs
-
-    def copy(self):
-        return PlotStyle(
-            **dict([(attr, getattr(self, attr, default)) for attr, default in list(DefaultPlotAttrs.items())]))
-
-    def update(self, other):
-        for attr in list(DefaultPlotAttrs.keys()):
-            val = getattr(other, attr, None)
-            if val is not None and val != DefaultValue:
-                setattr(self, attr, val)
-
-
-PlotStyle.registerClass()
-
-# Default plot style. This must define everything! (I.e. no DefaultValue elements allowed.)
-BaselinePlotStyle = PlotStyle(symbol="plus", symbol_color="yellow", symbol_size=2, symbol_linewidth=0,
-                              label=NoneValue, label_color="blue", label_size=6,
-                              show_list=ShowAlways, show_plot=ShowAlways, apply=1000)
-
-SelectionPlotStyle = PlotStyle(symbol=DefaultValue, symbol_color="cyan", symbol_size=DefaultValue,
-                               symbol_linewidth=DefaultValue,
-                               label="%N", label_color="green", label_size=DefaultValue,
-                               show_list=ShowAlways, show_plot=ShowAlways, apply=-1)
-
-HighlightPlotStyle = PlotStyle(symbol=DefaultValue, symbol_color="red", symbol_size=DefaultValue,
-                               symbol_linewidth=DefaultValue,
-                               label="%N %BJy", label_color="red", label_size=12,
-                               show_list=ShowAlways, show_plot=ShowAlways, apply=-2)
-
-DefaultPlotStyle = PlotStyle(symbol=DefaultValue, symbol_color=DefaultValue, symbol_size=DefaultValue,
-                             symbol_linewidth=DefaultValue,
-                             label=DefaultValue, label_color=DefaultValue, label_size=DefaultValue,
-                             show_list=ShowDefault, show_plot=ShowDefault, apply=1000)
-
-# cache of precompiled labels
-_compiled_labels = {}
-
-# label replacements
-_label_keys = {"%N": lambda src: src.name,
-               "%B": lambda src: "%.2g" % src.brightness(),
-               "%R": lambda src: (hasattr(src, 'r') and "%.2g" % (src.r / math.pi * 180 * 60)) or "",
-               "%T": lambda src: src.typecode,
-               "%I": lambda src: "%.2g" % getattr(src.flux, 'I', 0),
-               "%Q": lambda src: "%.2g" % getattr(src.flux, 'Q', 0),
-               "%U": lambda src: "%.2g" % getattr(src.flux, 'U', 0),
-               "%V": lambda src: "%.2g" % getattr(src.flux, 'V', 0),
-               }
-
-
-def makeSourceLabel(label, src):
-    if label == NoneValue or label is None:
-        return ""
-    global _label_keys
-    lbl = label
-    for key, func in list(_label_keys.items()):
-        if lbl.find(key) >= 0:
-            lbl = lbl.replace(key, func(src))
-    return lbl
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import math
+
+from . import ModelClasses
+
+# string used to indicate default value of an attribute
+DefaultValue = "default"
+# string used to indicate "none" value of an attribute
+NoneValue = "none"
+
+# definitive list of style attributes
+StyleAttributes = ["symbol", "symbol_color", "symbol_size", "symbol_linewidth", "label", "label_color", "label_size"]
+
+# dict of attribute labels (i.e. for menus, column headings and such)
+StyleAttributeLabels = dict(symbol="symbol", symbol_color="color", symbol_size="size", symbol_linewidth="line width",
+                            label="label", label_color="color", label_size="size")
+# dict of attribute types. Any attribute not in this dict is of type str.
+StyleAttributeTypes = dict(symbol_size=int, symbol_linewidth=int, label_size=int)
+
+# list of known colors
+ColorList = ["black", "blue", "lightblue", "green", "lightgreen", "cyan", "red", "orange red", "purple", "magenta",
+             "yellow", "white"]
+DefaultColor = "black"
+
+# dict and method to pick a contrasting color (i.e. suitable as background for specified color)
+ContrastColor = dict(white="#404040", yellow="#404040")
+DefaultContrastColor = "#B0B0B0"
+
+
+def getContrastColor(color):
+    return ContrastColor.get(color, DefaultContrastColor)
+
+
+# dict of possible user settings for each attribute
+StyleAttributeOptions = dict(
+    symbol=[DefaultValue, NoneValue, "cross", "plus", "dot", "circle", "square", "diamond"],
+    symbol_color=[DefaultValue] + ColorList,
+    label=[DefaultValue, NoneValue, "%N", "%N %BJy", "%N %BJy r=%R'"],
+    label_color=[DefaultValue] + ColorList,
+    label_size=[DefaultValue, 6, 8, 10, 12, 14],
+)
+
+# constants for the show_list and show_plot attributes
+ShowNot = 0
+ShowDefault = 1
+ShowAlways = 2
+
+DefaultPlotAttrs = dict(symbol=None, symbol_color=DefaultColor, symbol_size=5, symbol_linewidth=0,
+                        label=None, label_color=DefaultColor, label_size=10,
+                        show_list=ShowDefault, show_plot=ShowDefault, apply=0)
+
+
+class PlotStyle(ModelClasses.ModelItem):
+    optional_attrs = DefaultPlotAttrs
+
+    def copy(self):
+        return PlotStyle(
+            **dict([(attr, getattr(self, attr, default)) for attr, default in list(DefaultPlotAttrs.items())]))
+
+    def update(self, other):
+        for attr in list(DefaultPlotAttrs.keys()):
+            val = getattr(other, attr, None)
+            if val is not None and val != DefaultValue:
+                setattr(self, attr, val)
+
+
+PlotStyle.registerClass()
+
+# Default plot style. This must define everything! (I.e. no DefaultValue elements allowed.)
+BaselinePlotStyle = PlotStyle(symbol="plus", symbol_color="yellow", symbol_size=2, symbol_linewidth=0,
+                              label=NoneValue, label_color="blue", label_size=6,
+                              show_list=ShowAlways, show_plot=ShowAlways, apply=1000)
+
+SelectionPlotStyle = PlotStyle(symbol=DefaultValue, symbol_color="cyan", symbol_size=DefaultValue,
+                               symbol_linewidth=DefaultValue,
+                               label="%N", label_color="green", label_size=DefaultValue,
+                               show_list=ShowAlways, show_plot=ShowAlways, apply=-1)
+
+HighlightPlotStyle = PlotStyle(symbol=DefaultValue, symbol_color="red", symbol_size=DefaultValue,
+                               symbol_linewidth=DefaultValue,
+                               label="%N %BJy", label_color="red", label_size=12,
+                               show_list=ShowAlways, show_plot=ShowAlways, apply=-2)
+
+DefaultPlotStyle = PlotStyle(symbol=DefaultValue, symbol_color=DefaultValue, symbol_size=DefaultValue,
+                             symbol_linewidth=DefaultValue,
+                             label=DefaultValue, label_color=DefaultValue, label_size=DefaultValue,
+                             show_list=ShowDefault, show_plot=ShowDefault, apply=1000)
+
+# cache of precompiled labels
+_compiled_labels = {}
+
+# label replacements
+_label_keys = {"%N": lambda src: src.name,
+               "%B": lambda src: "%.2g" % src.brightness(),
+               "%R": lambda src: (hasattr(src, 'r') and "%.2g" % (src.r / math.pi * 180 * 60)) or "",
+               "%T": lambda src: src.typecode,
+               "%I": lambda src: "%.2g" % getattr(src.flux, 'I', 0),
+               "%Q": lambda src: "%.2g" % getattr(src.flux, 'Q', 0),
+               "%U": lambda src: "%.2g" % getattr(src.flux, 'U', 0),
+               "%V": lambda src: "%.2g" % getattr(src.flux, 'V', 0),
+               }
+
+
+def makeSourceLabel(label, src):
+    if label == NoneValue or label is None:
+        return ""
+    global _label_keys
+    lbl = label
+    for key, func in list(_label_keys.items()):
+        if lbl.find(key) >= 0:
+            lbl = lbl.replace(key, func(src))
+    return lbl
--- tigger-lsm-1.7.0.orig/Tigger/Models/SkyModel.py
+++ tigger-lsm-1.7.0/Tigger/Models/SkyModel.py
@@ -1,465 +1,465 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import re
-
-from . import PlotStyles
-from .ModelClasses import ModelItem
-from Tigger.Coordinates import angular_dist_pos_angle, DEG
-from functools import reduce
-import functools
-
-
-class ModelTag(ModelItem):
-    mandatory_attrs = ["name"]
-    optional_attrs = dict([(attr, None) for attr in PlotStyles.StyleAttributes])
-
-
-ModelTag.registerClass()
-
-
-class ModelTagSet(ModelItem):
-    def __init__(self, *tags, **kws):
-        ModelItem.__init__(self, **kws)
-        self.tags = dict([(tag.name, tag) for tag in tags])
-
-    def add(self, tag):
-        """Adds a ModelTag object to the tag set"""
-        self.tags[tag.name] = tag
-
-    def get(self, tagname):
-        """Returns ModelTag object associated with tag name, inserting a new one if not found"""
-        return self.tags.setdefault(tagname, ModelTag(tagname))
-
-    def getAll(self):
-        all = list(self.tags.values())
-        from past.builtins import cmp
-        from functools import cmp_to_key
-        all.sort(key=cmp_to_key(lambda a, b: cmp(a.name(), b.name())))
-        return all
-
-    def addNames(self, names):
-        """Ensures that ModelTag objects are initialized for all tagnames in names"""
-        for name in names:
-            self.tags.setdefault(name, ModelTag(name))
-
-    def renderMarkup(self, tag="A", attrname=None):
-        """Makes a markup string corresponding to the model item.
-        'tags' is the HTML tag to use.
-        """
-        # opening tag
-        markup = "<%s mdltype=ModelTagList " % tag
-        if attrname is not None:
-            markup += "mdlattr=%s " % attrname
-        markup += ">"
-        # write mandatory attributes
-        for name, tt in list(self.tags.items()):
-            markup += self.renderAttrMarkup(name, tt, tags="TR", mandatory=True)
-        # closing tag
-        markup += "</%s>" % tag
-        return markup
-
-
-ModelTagSet.registerClass()
-
-
-class Source(ModelItem):
-    """Source represents a model source.
-    Each source has mandatory name (class str), pos (class Position) and flux (class Flux) model attributes.
-    There are optional spectrum (class Spectrum) and shape (class Shape) model attributes.
-
-    Standard Python attributes of a Source object are:
-      selected: if the source is selected (e.g. in a selection widget)
-      typecode: a type code. This is "pnt" if no shape is set (i.e.for a delta-function), otherwise it's the shape's typecode.
-    """
-    mandatory_attrs = ["name", "pos", "flux"]
-    optional_attrs = dict(spectrum=None, shape=None)
-    allow_extra_attrs = True
-
-    def __init__(self, *args, **kw):
-        ModelItem.__init__(self, *args, **kw)
-        self.typecode = (self.shape and self.shape.typecode) or "pnt"
-        self.selected = False
-
-    def select(self, sel=True):
-        self.selected = sel
-
-    def brightness(self):
-        iapp = getattr(self, 'Iapp', None)
-        if iapp is not None:
-            return iapp
-        else:
-            return getattr(self.flux, 'I', 0.)
-
-    def get_attr(self, attr, default=None):
-        return getattr(self, attr, default)
-
-    def getTagNames(self):
-        return [attr for attr, val in self.getExtraAttributes() if attr[0] != "_"]
-
-    def getTags(self):
-        return [(attr, val) for attr, val in self.getExtraAttributes() if attr[0] != "_"]
-
-    getTag = get_attr
-    setTag = ModelItem.setAttribute
-
-    class Grouping(object):
-        # show_plot settings
-        NoPlot = 0
-        Default = 1
-        Plot = 2
-
-        def __init__(self, name, func, style=PlotStyles.DefaultPlotStyle, sources=None):
-            self.name = name
-            self.style = style
-            self.func = func
-            self.total = 0
-            if sources:
-                self.computeTotal(sources)
-
-        def computeTotal(self, sources):
-            self.total = len(list(filter(self.func, sources)))
-            return self.total
-
-
-Source.registerClass()
-
-
-class SkyModel(ModelItem):
-    optional_attrs = dict(name=None, plotstyles={}, pbexp=None, ra0=None, dec0=None, freq0=None)
-    allow_extra_attrs = True
-
-    def __init__(self, *sources, **kws):
-        ModelItem.__init__(self, **kws)
-        # "current" source (grouping "current" below is defined as that one source)
-        self._current_source = None
-        self._filename = None
-        # list of loaded images associated with this model
-        self._images = []
-        # setup source list
-        self.setSources(sources)
-
-    def copy(self):
-        return SkyModel(*self.sources, **dict(self.getAttributes()))
-
-    def images(self):
-        """Returns list of images associated with this model"""
-        return self._images
-
-    def setFilename(self, filename):
-        self._filename = filename
-
-    def filename(self):
-        return self._filename
-
-    def setCurrentSource(self, src, origin=None):
-        """Changes the current source. If it has indeed changed, emits a currentSourceChanged signal. Arguments passed with the signal:
-        src: the new current source.
-        src0: the previously current source.
-        origin: originator of changes.
-        """
-        if self._current_source is not src:
-            src0 = self._current_source
-            self._current_source = src
-            if self.signalsEnabled():
-                self.emit("changeCurrentSource", src, src0, origin)
-
-    def currentSource(self):
-        return self._current_source
-
-    # Bitflags for the 'what' argument of the updated() signal below.
-    # These indicate what exactly has been updated:
-    UpdateSourceList = 1  # source list changed
-    UpdateSourceContent = 2  # source attributes have changed
-    UpdateTags = 4  # tags have been changed
-    UpdateGroupVis = 8  # visibility of a grouping (group.style.show_list attribute) has changed
-    UpdateGroupStyle = 16  # plot style of a grouping has changed
-    UpdateSelectionOnly = 32  # (in combination with UpdateSourceContent): update only affects currently selected sources
-    UpdateAll = UpdateSourceList + UpdateSourceContent + UpdateTags + UpdateGroupVis + UpdateGroupStyle
-
-    def emitUpdate(self, what=UpdateSourceContent, origin=None):
-        """emits an updated() signal, indicating that the model has changed. Arguments passed through with the signal:
-        what: what is updated. A combination of flags above.
-        origin: originator of changes.
-        """
-        if self.signalsEnabled():
-            self.emit("updated", what, origin)
-
-    def emitSelection(self, origin=None):
-        """emits an selected() signal, indicating that the selection has changed. Arguments passed through with the signal:
-        num: number of selected sources.
-        origin: originator of changes.
-        """
-        self.selgroup.computeTotal(self.sources)
-        if self.signalsEnabled():
-            self.emit("selected", self.selgroup.total, origin)
-
-    def emitChangeGroupingVisibility(self, group, origin=None):
-        if self.signalsEnabled():
-            self.emit("changeGroupingVisibility", group, origin)
-            self.emitUpdate(SkyModel.UpdateGroupVis, origin)
-
-    def emitChangeGroupingStyle(self, group, origin=None):
-        if self.signalsEnabled():
-            self.emit("changeGroupingStyle", group, origin)
-            self.emitUpdate(SkyModel.UpdateGroupStyle, origin)
-
-    def findSource(self, name):
-        return self._src_by_name[name]
-
-    def setSources(self, sources, origin=None, recompute_r=False):
-        # if recompute_r is True, recomputes the 'r' attribute for all sources
-        self.sources = list(sources)
-        self._src_by_name = dict([(src.name, src) for src in self.sources])
-        if recompute_r:
-            self.recomputeRadialDistance()
-        self.scanTags()
-        self.initGroupings()
-
-    def addSources(self, sources, recompute_r=True):
-        # if recompute_r is True, recomputes the 'r' attribute for new sources
-        if recompute_r:
-            self.recomputeRadialDistance(sources)
-        self.setSources(list(self.sources) + list(sources))
-
-    def __len__(self):
-        return len(self.sources)
-
-    def __getitem__(self, key):
-        if isinstance(key, (int, slice)):
-            return self.sources[key]
-        elif isinstance(key, str):
-            return self.findSource(key)
-        else:
-            raise TypeError("cannot index SkyModel with key of type %s" % str(type(key)))
-
-    def __setitem__(self, key, value):
-        raise TypeError("cannot assign to items of SkyModel, use the setSources() method instead")
-
-    def __iter__(self):
-        return iter(self.sources)
-
-    def recomputeRadialDistance(self, sources=None):
-        # refreshes the radial distance for a group of sources, or all sources in the model
-        if (self.ra0 and self.dec0) is not None:
-            for src in (sources or self.sources):
-                r, pa = angular_dist_pos_angle(src.pos.ra, src.pos.dec, self.ra0, self.dec0)
-                src.setAttribute('r', r)
-
-    def scanTags(self, sources=None):
-        """Populates self.tagnames with a list of tags present in sources"""
-        sources = sources or self.sources
-        tagnames = set()
-        for src in sources:
-            tagnames.update(src.getTagNames())
-        self.tagnames = list(tagnames)
-        self.tagnames.sort()
-
-    def initGroupings(self):
-        # init default and "selected" groupings
-        # For the default style, make sure all style fields are initialied to proper values, so that some style setting is always guaranteed.
-        # Do this by sarting with the Baseline style, and applying the specified default style to it as an update.
-        if 'default' in self.plotstyles:
-            defstyle = PlotStyles.BaselinePlotStyle.copy()
-            defstyle.update(self.plotstyles['default'])
-            defstyle.apply = 1000  # apply at lowest priority
-        else:
-            defstyle = self.plotstyles['default'] = PlotStyles.BaselinePlotStyle
-        self.defgroup = Source.Grouping("all sources", func=lambda src: True, sources=self.sources, style=defstyle)
-        self.curgroup = Source.Grouping("current source", func=lambda src: self.currentSource() is src,
-                                        sources=self.sources,
-                                        style=self.plotstyles.setdefault('current', PlotStyles.HighlightPlotStyle))
-        self.selgroup = Source.Grouping("selected sources", func=lambda src: getattr(src, 'selected', False),
-                                        sources=self.sources,
-                                        style=self.plotstyles.setdefault('selected', PlotStyles.SelectionPlotStyle))
-        # and make ordered list of groupings
-        self.groupings = [self.defgroup, self.curgroup, self.selgroup]
-        # make groupings from available source types
-        self._typegroups = {}
-        typecodes = list(set([src.typecode for src in self.sources]))
-        typecodes.sort()
-        if len(typecodes) > 1:
-            for code in typecodes:
-                self._typegroups[code] = group = Source.Grouping("type: %s" % code,
-                                                                 lambda src, code=code: src.typecode == code,
-                                                                 sources=self.sources,
-                                                                 style=self.plotstyles.setdefault('type:%s' % code,
-                                                                                                  PlotStyles.DefaultPlotStyle))
-                self.groupings.append(group)
-        # make groupings from source tags
-        self._taggroups = {}
-        for tag in self.tagnames:
-            self._taggroups[tag] = group = Source.Grouping("tag: %s" % tag,
-                                                           lambda src, tag=tag: getattr(src, tag, None) not in [None,
-                                                                                                                False],
-                                                           sources=self.sources,
-                                                           style=self.plotstyles.setdefault('tag:%s' % tag,
-                                                                                            PlotStyles.DefaultPlotStyle))
-            self.groupings.append(group)
-
-    def _remakeGroupList(self):
-        self.groupings = [self.defgroup, self.curgroup, self.selgroup]
-        typenames = list(self._typegroups.keys())
-        typenames.sort()
-        self.groupings += [self._typegroups[name] for name in typenames]
-        self.groupings += [self._taggroups[name] for name in self.tagnames]
-
-    def getTagGrouping(self, tag):
-        return self._taggroups[tag]
-
-    def getTypeGrouping(self, typename):
-        return self._typegroups[typename]
-
-    def getSourcePlotStyle(self, src):
-        """Returns PlotStyle object for given source, using the styles in the model grouping.
-        Returns tuple of plotstyle,label, or None,None if no source is to be plotted.
-        """
-        # get list of styles from  groupings to which this source belongs
-        styles = [group.style for group in self.groupings if group.func(src)]
-        # sort in order of priority (high apply to low apply)
-        from past.builtins import cmp
-        from functools import cmp_to_key
-        styles.sort(key=cmp_to_key(lambda a, b: cmp(b.apply, a.apply)))
-        # "show_plot" attribute: if at least one group is showing explicitly, show
-        # else if at least one group is hiding explicitly, hide
-        # else use default setting
-        show = [st.show_plot for st in styles]
-        if show and max(show) == PlotStyles.ShowAlways:
-            show = True
-        elif show and min(show) == PlotStyles.ShowNot:
-            show = False
-        else:
-            show = True
-        if not show:
-            return None, None
-        # sort styles
-        # Override attributes in style object with non-default attributes found in each matching grouping
-        # Go in reverse, so 'current' overrides 'selected' overrides types overrides tags
-        style = None
-        for st in styles:
-            if st.apply:
-                # make copy-on-write, so we don't overwrite the original style object
-                if style is None:
-                    style = st.copy()
-                else:
-                    style.update(st)
-        return style, PlotStyles.makeSourceLabel(style.label, src)
-
-    def addTag(self, tag):
-        if tag in self.tagnames:
-            return False
-        # tags beginning with "_" are internal, not added to tagname list
-        if tag[0] == "_":
-            return False
-        # add to list
-        self.tagnames.append(tag)
-        self.tagnames.sort()
-        # add to groupings
-        self._taggroups[tag] = Source.Grouping("tag: %s" % tag,
-                                               lambda src, tag=tag: getattr(src, tag, None) not in [None, False],
-                                               sources=self.sources,
-                                               style=self.plotstyles.setdefault('tag:%s' % tag,
-                                                                                PlotStyles.DefaultPlotStyle))
-        # reform grouping list
-        self._remakeGroupList()
-        return True
-
-    def setFieldCenter(self, ra0, dec0):
-        self.ra0, self.dec0 = ra0, dec0
-
-    def setPrimaryBeam(self, pbexp):
-        self.pbexp = pbexp
-
-    def primaryBeam(self):
-        return getattr(self, 'pbexp', None)
-
-    def setRefFreq(self, freq0):
-        self.freq0 = freq0
-
-    def refFreq(self):
-        return self.freq0
-
-    def hasFieldCenter(self):
-        return self.ra0 is not None and self.dec0 is not None
-
-    def fieldCenter(self):
-        """Returns center of field. If this is not explicitly specified in the model, uses the average position of all sources."""
-        if self.ra0 is None:
-            self.ra0 = reduce(lambda x, y: x + y, [src.pos.ra for src in self.sources]) / len(
-                self.sources) if self.sources else 0
-        if self.dec0 is None:
-            self.dec0 = reduce(lambda x, y: x + y, [src.pos.dec for src in self.sources]) / len(
-                self.sources) if self.sources else 0
-        return self.ra0, self.dec0
-
-    def save(self, filename, format=None, verbose=True):
-        """Convenience function, saves model to file. Format may be specified explicitly, or determined from filename."""
-        from . import Formats
-        Formats.save(self, filename, format=format, verbose=verbose)
-
-    _re_bynumber = re.compile("^([!-])?(\\d+)?:(\\d+)?$")
-
-    def getSourcesNear(self, ra, dec, tolerance=DEG / 60):
-        return [src for src in self.sources if angular_dist_pos_angle(src.pos.ra, src.pos.dec, ra, dec)[0] < tolerance]
-
-    def getSourceSubset(self, selection=None):
-        """Gets list of sources matching the given selection string (if None, then all sources are returned.)"""
-        if not selection or selection.lower() == "all":
-            return self.sources
-        # sort by brightness
-        from past.builtins import cmp
-        from functools import cmp_to_key
-        srclist0 = sorted(self.sources, key=cmp_to_key(lambda a, b: cmp(b.brightness(), a.brightness())))
-        all = set([src.name for src in srclist0])
-        srcs = set()
-        for ispec, spec in enumerate(re.split("\s+|,", selection)):
-            spec = spec.strip()
-            if spec:
-                # if first spec is a negation, then implictly select all sources first
-                if not ispec and spec[0] in "!-":
-                    srcs = all
-                if spec.lower() == "all":
-                    srcs = all
-                elif self._re_bynumber.match(spec):
-                    negate, start, end = self._re_bynumber.match(spec).groups()
-                    sl = slice(int(start) if start else None, int(end) if end else None)
-                    if negate:
-                        srcs.difference_update([src.name for src in srclist0[sl]])
-                    else:
-                        srcs.update([src.name for src in srclist0[sl]])
-                elif spec.startswith("-=") or spec.startswith("!="):
-                    srcs.difference_update([src.name for src in srclist0 if getattr(src, spec[2:], None)])
-                elif spec.startswith("="):
-                    srcs.update([src.name for src in srclist0 if getattr(src, spec[1:], None)])
-                elif spec.startswith("-") or spec.startswith("!"):
-                    srcs.discard(spec[1:])
-                else:
-                    srcs.add(spec)
-        # make list
-        return [src for src in srclist0 if src.name in srcs]
-
-
-SkyModel.registerClass()
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import re
+
+from . import PlotStyles
+from .ModelClasses import ModelItem
+from Tigger.Coordinates import angular_dist_pos_angle, DEG
+from functools import reduce
+import functools
+
+
+class ModelTag(ModelItem):
+    mandatory_attrs = ["name"]
+    optional_attrs = dict([(attr, None) for attr in PlotStyles.StyleAttributes])
+
+
+ModelTag.registerClass()
+
+
+class ModelTagSet(ModelItem):
+    def __init__(self, *tags, **kws):
+        ModelItem.__init__(self, **kws)
+        self.tags = dict([(tag.name, tag) for tag in tags])
+
+    def add(self, tag):
+        """Adds a ModelTag object to the tag set"""
+        self.tags[tag.name] = tag
+
+    def get(self, tagname):
+        """Returns ModelTag object associated with tag name, inserting a new one if not found"""
+        return self.tags.setdefault(tagname, ModelTag(tagname))
+
+    def getAll(self):
+        all = list(self.tags.values())
+        from past.builtins import cmp
+        from functools import cmp_to_key
+        all.sort(key=cmp_to_key(lambda a, b: cmp(a.name(), b.name())))
+        return all
+
+    def addNames(self, names):
+        """Ensures that ModelTag objects are initialized for all tagnames in names"""
+        for name in names:
+            self.tags.setdefault(name, ModelTag(name))
+
+    def renderMarkup(self, tag="A", attrname=None):
+        """Makes a markup string corresponding to the model item.
+        'tags' is the HTML tag to use.
+        """
+        # opening tag
+        markup = "<%s mdltype=ModelTagList " % tag
+        if attrname is not None:
+            markup += "mdlattr=%s " % attrname
+        markup += ">"
+        # write mandatory attributes
+        for name, tt in list(self.tags.items()):
+            markup += self.renderAttrMarkup(name, tt, tags="TR", mandatory=True)
+        # closing tag
+        markup += "</%s>" % tag
+        return markup
+
+
+ModelTagSet.registerClass()
+
+
+class Source(ModelItem):
+    """Source represents a model source.
+    Each source has mandatory name (class str), pos (class Position) and flux (class Flux) model attributes.
+    There are optional spectrum (class Spectrum) and shape (class Shape) model attributes.
+
+    Standard Python attributes of a Source object are:
+      selected: if the source is selected (e.g. in a selection widget)
+      typecode: a type code. This is "pnt" if no shape is set (i.e.for a delta-function), otherwise it's the shape's typecode.
+    """
+    mandatory_attrs = ["name", "pos", "flux"]
+    optional_attrs = dict(spectrum=None, shape=None)
+    allow_extra_attrs = True
+
+    def __init__(self, *args, **kw):
+        ModelItem.__init__(self, *args, **kw)
+        self.typecode = (self.shape and self.shape.typecode) or "pnt"
+        self.selected = False
+
+    def select(self, sel=True):
+        self.selected = sel
+
+    def brightness(self):
+        iapp = getattr(self, 'Iapp', None)
+        if iapp is not None:
+            return iapp
+        else:
+            return getattr(self.flux, 'I', 0.)
+
+    def get_attr(self, attr, default=None):
+        return getattr(self, attr, default)
+
+    def getTagNames(self):
+        return [attr for attr, val in self.getExtraAttributes() if attr[0] != "_"]
+
+    def getTags(self):
+        return [(attr, val) for attr, val in self.getExtraAttributes() if attr[0] != "_"]
+
+    getTag = get_attr
+    setTag = ModelItem.setAttribute
+
+    class Grouping(object):
+        # show_plot settings
+        NoPlot = 0
+        Default = 1
+        Plot = 2
+
+        def __init__(self, name, func, style=PlotStyles.DefaultPlotStyle, sources=None):
+            self.name = name
+            self.style = style
+            self.func = func
+            self.total = 0
+            if sources:
+                self.computeTotal(sources)
+
+        def computeTotal(self, sources):
+            self.total = len(list(filter(self.func, sources)))
+            return self.total
+
+
+Source.registerClass()
+
+
+class SkyModel(ModelItem):
+    optional_attrs = dict(name=None, plotstyles={}, pbexp=None, ra0=None, dec0=None, freq0=None)
+    allow_extra_attrs = True
+
+    def __init__(self, *sources, **kws):
+        ModelItem.__init__(self, **kws)
+        # "current" source (grouping "current" below is defined as that one source)
+        self._current_source = None
+        self._filename = None
+        # list of loaded images associated with this model
+        self._images = []
+        # setup source list
+        self.setSources(sources)
+
+    def copy(self):
+        return SkyModel(*self.sources, **dict(self.getAttributes()))
+
+    def images(self):
+        """Returns list of images associated with this model"""
+        return self._images
+
+    def setFilename(self, filename):
+        self._filename = filename
+
+    def filename(self):
+        return self._filename
+
+    def setCurrentSource(self, src, origin=None):
+        """Changes the current source. If it has indeed changed, emits a currentSourceChanged signal. Arguments passed with the signal:
+        src: the new current source.
+        src0: the previously current source.
+        origin: originator of changes.
+        """
+        if self._current_source is not src:
+            src0 = self._current_source
+            self._current_source = src
+            if self.signalsEnabled():
+                self.emit("changeCurrentSource", src, src0, origin)
+
+    def currentSource(self):
+        return self._current_source
+
+    # Bitflags for the 'what' argument of the updated() signal below.
+    # These indicate what exactly has been updated:
+    UpdateSourceList = 1  # source list changed
+    UpdateSourceContent = 2  # source attributes have changed
+    UpdateTags = 4  # tags have been changed
+    UpdateGroupVis = 8  # visibility of a grouping (group.style.show_list attribute) has changed
+    UpdateGroupStyle = 16  # plot style of a grouping has changed
+    UpdateSelectionOnly = 32  # (in combination with UpdateSourceContent): update only affects currently selected sources
+    UpdateAll = UpdateSourceList + UpdateSourceContent + UpdateTags + UpdateGroupVis + UpdateGroupStyle
+
+    def emitUpdate(self, what=UpdateSourceContent, origin=None):
+        """emits an updated() signal, indicating that the model has changed. Arguments passed through with the signal:
+        what: what is updated. A combination of flags above.
+        origin: originator of changes.
+        """
+        if self.signalsEnabled():
+            self.emit("updated", what, origin)
+
+    def emitSelection(self, origin=None):
+        """emits an selected() signal, indicating that the selection has changed. Arguments passed through with the signal:
+        num: number of selected sources.
+        origin: originator of changes.
+        """
+        self.selgroup.computeTotal(self.sources)
+        if self.signalsEnabled():
+            self.emit("selected", self.selgroup.total, origin)
+
+    def emitChangeGroupingVisibility(self, group, origin=None):
+        if self.signalsEnabled():
+            self.emit("changeGroupingVisibility", group, origin)
+            self.emitUpdate(SkyModel.UpdateGroupVis, origin)
+
+    def emitChangeGroupingStyle(self, group, origin=None):
+        if self.signalsEnabled():
+            self.emit("changeGroupingStyle", group, origin)
+            self.emitUpdate(SkyModel.UpdateGroupStyle, origin)
+
+    def findSource(self, name):
+        return self._src_by_name[name]
+
+    def setSources(self, sources, origin=None, recompute_r=False):
+        # if recompute_r is True, recomputes the 'r' attribute for all sources
+        self.sources = list(sources)
+        self._src_by_name = dict([(src.name, src) for src in self.sources])
+        if recompute_r:
+            self.recomputeRadialDistance()
+        self.scanTags()
+        self.initGroupings()
+
+    def addSources(self, sources, recompute_r=True):
+        # if recompute_r is True, recomputes the 'r' attribute for new sources
+        if recompute_r:
+            self.recomputeRadialDistance(sources)
+        self.setSources(list(self.sources) + list(sources))
+
+    def __len__(self):
+        return len(self.sources)
+
+    def __getitem__(self, key):
+        if isinstance(key, (int, slice)):
+            return self.sources[key]
+        elif isinstance(key, str):
+            return self.findSource(key)
+        else:
+            raise TypeError("cannot index SkyModel with key of type %s" % str(type(key)))
+
+    def __setitem__(self, key, value):
+        raise TypeError("cannot assign to items of SkyModel, use the setSources() method instead")
+
+    def __iter__(self):
+        return iter(self.sources)
+
+    def recomputeRadialDistance(self, sources=None):
+        # refreshes the radial distance for a group of sources, or all sources in the model
+        if (self.ra0 and self.dec0) is not None:
+            for src in (sources or self.sources):
+                r, pa = angular_dist_pos_angle(src.pos.ra, src.pos.dec, self.ra0, self.dec0)
+                src.setAttribute('r', r)
+
+    def scanTags(self, sources=None):
+        """Populates self.tagnames with a list of tags present in sources"""
+        sources = sources or self.sources
+        tagnames = set()
+        for src in sources:
+            tagnames.update(src.getTagNames())
+        self.tagnames = list(tagnames)
+        self.tagnames.sort()
+
+    def initGroupings(self):
+        # init default and "selected" groupings
+        # For the default style, make sure all style fields are initialied to proper values, so that some style setting is always guaranteed.
+        # Do this by sarting with the Baseline style, and applying the specified default style to it as an update.
+        if 'default' in self.plotstyles:
+            defstyle = PlotStyles.BaselinePlotStyle.copy()
+            defstyle.update(self.plotstyles['default'])
+            defstyle.apply = 1000  # apply at lowest priority
+        else:
+            defstyle = self.plotstyles['default'] = PlotStyles.BaselinePlotStyle
+        self.defgroup = Source.Grouping("all sources", func=lambda src: True, sources=self.sources, style=defstyle)
+        self.curgroup = Source.Grouping("current source", func=lambda src: self.currentSource() is src,
+                                        sources=self.sources,
+                                        style=self.plotstyles.setdefault('current', PlotStyles.HighlightPlotStyle))
+        self.selgroup = Source.Grouping("selected sources", func=lambda src: getattr(src, 'selected', False),
+                                        sources=self.sources,
+                                        style=self.plotstyles.setdefault('selected', PlotStyles.SelectionPlotStyle))
+        # and make ordered list of groupings
+        self.groupings = [self.defgroup, self.curgroup, self.selgroup]
+        # make groupings from available source types
+        self._typegroups = {}
+        typecodes = list(set([src.typecode for src in self.sources]))
+        typecodes.sort()
+        if len(typecodes) > 1:
+            for code in typecodes:
+                self._typegroups[code] = group = Source.Grouping("type: %s" % code,
+                                                                 lambda src, code=code: src.typecode == code,
+                                                                 sources=self.sources,
+                                                                 style=self.plotstyles.setdefault('type:%s' % code,
+                                                                                                  PlotStyles.DefaultPlotStyle))
+                self.groupings.append(group)
+        # make groupings from source tags
+        self._taggroups = {}
+        for tag in self.tagnames:
+            self._taggroups[tag] = group = Source.Grouping("tag: %s" % tag,
+                                                           lambda src, tag=tag: getattr(src, tag, None) not in [None,
+                                                                                                                False],
+                                                           sources=self.sources,
+                                                           style=self.plotstyles.setdefault('tag:%s' % tag,
+                                                                                            PlotStyles.DefaultPlotStyle))
+            self.groupings.append(group)
+
+    def _remakeGroupList(self):
+        self.groupings = [self.defgroup, self.curgroup, self.selgroup]
+        typenames = list(self._typegroups.keys())
+        typenames.sort()
+        self.groupings += [self._typegroups[name] for name in typenames]
+        self.groupings += [self._taggroups[name] for name in self.tagnames]
+
+    def getTagGrouping(self, tag):
+        return self._taggroups[tag]
+
+    def getTypeGrouping(self, typename):
+        return self._typegroups[typename]
+
+    def getSourcePlotStyle(self, src):
+        """Returns PlotStyle object for given source, using the styles in the model grouping.
+        Returns tuple of plotstyle,label, or None,None if no source is to be plotted.
+        """
+        # get list of styles from  groupings to which this source belongs
+        styles = [group.style for group in self.groupings if group.func(src)]
+        # sort in order of priority (high apply to low apply)
+        from past.builtins import cmp
+        from functools import cmp_to_key
+        styles.sort(key=cmp_to_key(lambda a, b: cmp(b.apply, a.apply)))
+        # "show_plot" attribute: if at least one group is showing explicitly, show
+        # else if at least one group is hiding explicitly, hide
+        # else use default setting
+        show = [st.show_plot for st in styles]
+        if show and max(show) == PlotStyles.ShowAlways:
+            show = True
+        elif show and min(show) == PlotStyles.ShowNot:
+            show = False
+        else:
+            show = True
+        if not show:
+            return None, None
+        # sort styles
+        # Override attributes in style object with non-default attributes found in each matching grouping
+        # Go in reverse, so 'current' overrides 'selected' overrides types overrides tags
+        style = None
+        for st in styles:
+            if st.apply:
+                # make copy-on-write, so we don't overwrite the original style object
+                if style is None:
+                    style = st.copy()
+                else:
+                    style.update(st)
+        return style, PlotStyles.makeSourceLabel(style.label, src)
+
+    def addTag(self, tag):
+        if tag in self.tagnames:
+            return False
+        # tags beginning with "_" are internal, not added to tagname list
+        if tag[0] == "_":
+            return False
+        # add to list
+        self.tagnames.append(tag)
+        self.tagnames.sort()
+        # add to groupings
+        self._taggroups[tag] = Source.Grouping("tag: %s" % tag,
+                                               lambda src, tag=tag: getattr(src, tag, None) not in [None, False],
+                                               sources=self.sources,
+                                               style=self.plotstyles.setdefault('tag:%s' % tag,
+                                                                                PlotStyles.DefaultPlotStyle))
+        # reform grouping list
+        self._remakeGroupList()
+        return True
+
+    def setFieldCenter(self, ra0, dec0):
+        self.ra0, self.dec0 = ra0, dec0
+
+    def setPrimaryBeam(self, pbexp):
+        self.pbexp = pbexp
+
+    def primaryBeam(self):
+        return getattr(self, 'pbexp', None)
+
+    def setRefFreq(self, freq0):
+        self.freq0 = freq0
+
+    def refFreq(self):
+        return self.freq0
+
+    def hasFieldCenter(self):
+        return self.ra0 is not None and self.dec0 is not None
+
+    def fieldCenter(self):
+        """Returns center of field. If this is not explicitly specified in the model, uses the average position of all sources."""
+        if self.ra0 is None:
+            self.ra0 = reduce(lambda x, y: x + y, [src.pos.ra for src in self.sources]) / len(
+                self.sources) if self.sources else 0
+        if self.dec0 is None:
+            self.dec0 = reduce(lambda x, y: x + y, [src.pos.dec for src in self.sources]) / len(
+                self.sources) if self.sources else 0
+        return self.ra0, self.dec0
+
+    def save(self, filename, format=None, verbose=True):
+        """Convenience function, saves model to file. Format may be specified explicitly, or determined from filename."""
+        from . import Formats
+        Formats.save(self, filename, format=format, verbose=verbose)
+
+    _re_bynumber = re.compile("^([!-])?(\\d+)?:(\\d+)?$")
+
+    def getSourcesNear(self, ra, dec, tolerance=DEG / 60):
+        return [src for src in self.sources if angular_dist_pos_angle(src.pos.ra, src.pos.dec, ra, dec)[0] < tolerance]
+
+    def getSourceSubset(self, selection=None):
+        """Gets list of sources matching the given selection string (if None, then all sources are returned.)"""
+        if not selection or selection.lower() == "all":
+            return self.sources
+        # sort by brightness
+        from past.builtins import cmp
+        from functools import cmp_to_key
+        srclist0 = sorted(self.sources, key=cmp_to_key(lambda a, b: cmp(b.brightness(), a.brightness())))
+        all = set([src.name for src in srclist0])
+        srcs = set()
+        for ispec, spec in enumerate(re.split("\s+|,", selection)):
+            spec = spec.strip()
+            if spec:
+                # if first spec is a negation, then implictly select all sources first
+                if not ispec and spec[0] in "!-":
+                    srcs = all
+                if spec.lower() == "all":
+                    srcs = all
+                elif self._re_bynumber.match(spec):
+                    negate, start, end = self._re_bynumber.match(spec).groups()
+                    sl = slice(int(start) if start else None, int(end) if end else None)
+                    if negate:
+                        srcs.difference_update([src.name for src in srclist0[sl]])
+                    else:
+                        srcs.update([src.name for src in srclist0[sl]])
+                elif spec.startswith("-=") or spec.startswith("!="):
+                    srcs.difference_update([src.name for src in srclist0 if getattr(src, spec[2:], None)])
+                elif spec.startswith("="):
+                    srcs.update([src.name for src in srclist0 if getattr(src, spec[1:], None)])
+                elif spec.startswith("-") or spec.startswith("!"):
+                    srcs.discard(spec[1:])
+                else:
+                    srcs.add(spec)
+        # make list
+        return [src for src in srclist0 if src.name in srcs]
+
+
+SkyModel.registerClass()
--- tigger-lsm-1.7.0.orig/Tigger/Models/__init__.py
+++ tigger-lsm-1.7.0/Tigger/Models/__init__.py
@@ -1,24 +1,24 @@
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
--- tigger-lsm-1.7.0.orig/Tigger/SiameseInterface.py
+++ tigger-lsm-1.7.0/Tigger/SiameseInterface.py
@@ -1,286 +1,286 @@
-# -*- coding: utf-8 -*-
-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-
-
-## flake8 gives errors on "Meq.Parm", since it doesn't know about how TDL forces the name to exist
-# flake8: noqa
-
-from __future__ import absolute_import, division, print_function
-import math
-import sys
-
-# cattery has been appended to the path at this point
-import Meow
-
-import os.path
-from Cattery.Meow.MeqMaker import SourceSubsetSelector
-from Timba.TDL import TDLCompileOptions, TDLRuntimeOptions, TDLOption, TDLFileSelect, TDLMenu
-
-# find out where Tigger lives -- either it's in the path, or we add it
-try:
-    import Tigger
-except:
-    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
-    import Tigger
-
-from Tigger.Models import ModelClasses
-from Tigger.Models.Formats import ModelHTML
-from Tigger.Models.SkyModel import SkyModel
-
-# this dict determines how source attributes are grouped into "parameter subgroups"
-_Subgroups = dict(I="I", Q="Q", U="U", V="V",
-                  ra="pos", dec="pos", RM="RM", spi="spi",
-                  sx="shape", sy="shape", phi="shape")
-_SubgroupOrder = "I", "Q", "U", "V", "pos", "spi", "RM", "shape"
-
-
-class TiggerSkyModel(object):
-    """Interface to a Tigger-format sky model."""
-
-    def __init__(self, filename=None, include_options=False, tdloption_namespace='tiggerlsm'):
-        """Initializes a TiggerSkyModel object.
-        A filename and a format may be specified, although the actual file will
-        only be loaded on demand.
-        If include_options=True, immediately instantiates the options. If False, it is up to
-        the caller to include the options in his menus.
-        """
-        self.tdloption_namespace = tdloption_namespace
-        self._compile_opts = []
-        self._runtime_opts = []
-        self.filename = filename
-        self.lsm = None
-        # immediately include options, if needed
-        if include_options:
-            TDLCompileOptions(*self.compile_options())
-            TDLRuntimeOptions(*self.runtime_options())
-
-    def compile_options(self):
-        """Returns list of compile-time options"""
-        if not self._compile_opts:
-            self._compile_opts = [
-                TDLOption("filename", "Tigger LSM file",
-                                  TDLFileSelect("Tigger models (*." + ModelHTML.DefaultExtension + ");;All files (*)",
-                                                default=self.filename, exist=True),
-                                  namespace=self),
-                TDLOption('lsm_subset', "Source subset", ["all"], more=str, namespace=self,
-                          doc=SourceSubsetSelector.docstring),
-                TDLOption('null_subset', "Use nulls for subset", [None], more=str, namespace=self, doc=
-                """<P>If you wish, any subset of sources may be "nulled" by inserting a null
-                brightness for them. This is used in some advanced calibration scenarios; if
-                you're not sure about this option, just leave it set to "None".</P>
-                </P>""" + SourceSubsetSelector.docstring),
-                TDLMenu("Make solvable source parameters",
-                        TDLOption('lsm_solvable_tag', "Solvable source tag", [None, "solvable"], more=str,
-                                  namespace=self,
-                                  doc="""If you specify a tagname, only sources bearing that tag will be made solvable. Use 'None' to make all sources solvable."""),
-                        TDLOption('lsm_solve_group_tag', "Group independent solutions by tag", [None, "cluster"],
-                                  more=str, namespace=self,
-                                  doc="""If you specify a tagname, sources will be grouped by the value of the tag,
-                    and each group will be treated as an independent solution."""),
-                        TDLOption("solve_I", "I", False, namespace=self),
-                        TDLOption("solve_Q", "Q", False, namespace=self),
-                        TDLOption("solve_U", "U", False, namespace=self),
-                        TDLOption("solve_V", "V", False, namespace=self),
-                        TDLOption("solve_spi", "spectral index", False, namespace=self),
-                        TDLOption("solve_pos", "position", False, namespace=self),
-                        TDLOption("solve_RM", "rotation measure", False, namespace=self),
-                        TDLOption("solve_shape", "shape (for extended sources)", False, namespace=self),
-                        toggle='solvable_sources', namespace=self,
-                        )
-            ]
-        return self._compile_opts
-
-    def runtime_options(self):
-        """Makes and returns list of compile-time options"""
-        # no runtime options, for now
-        return self._runtime_opts
-
-    # helper function for use with SourceSubsetSelector below
-    @staticmethod
-    def _getTagValue(src, tag):
-        """Helper function: looks for the given tag in the source, or in its sub-objects"""
-        for obj in src, src.pos, src.flux, getattr(src, 'shape', None), getattr(src, 'spectrum', None):
-            if obj is not None and hasattr(obj, tag):
-                return getattr(obj, tag)
-        return None
-
-    def source_list(self, ns, max_sources=None, **kw):
-        """Reads LSM and returns a list of Meow objects.
-        ns is node scope in which they will be created.
-        Keyword arguments may be used to indicate which of the source attributes are to be
-        created as Parms, use e.g. I=Meow.Parm(tags="flux") for this.
-        The use_parms option may override this.
-        """
-        if self.filename is None:
-            return []
-        # load the sky model
-        if self.lsm is None:
-            self.lsm = Tigger.load(self.filename)
-        
-        # sort by brightness
-        import functools
-        from past.builtins import cmp
-        from functools import cmp_to_key
-        sources = sorted(self.lsm.sources, key=cmp_to_key(lambda a, b: cmp(b.brightness(), a.brightness())))
-
-        # extract subset, if specified
-        sources = SourceSubsetSelector.filter_subset(self.lsm_subset, sources, self._getTagValue)
-        # get nulls subset
-        if self.null_subset:
-            nulls = set([src.name for src in SourceSubsetSelector.filter_subset(self.null_subset, sources)])
-        else:
-            nulls = set()
-        parm = Meow.Parm(tags="source solvable")
-        # make copy of kw dict to be used for sources not in solvable set
-        kw_nonsolve = dict(kw)
-        # and update kw dict to be used for sources in solvable set
-        # this will be a dict of lists of solvable subgroups
-        parms = []
-        subgroups = {}
-        if self.solvable_sources:
-            subgroup_order = []
-            for sgname in _SubgroupOrder:
-                if getattr(self, 'solve_%s' % sgname):
-                    sg = subgroups[sgname] = []
-                    subgroup_order.append(sgname)
-
-        # make Meow list
-        source_model = []
-
-        for src in sources:
-            is_null = src.name in nulls
-            # this will be True if this source has solvable parms
-            solvable = self.solvable_sources and not is_null and (not self.lsm_solvable_tag
-                                                                  or getattr(src, self.lsm_solvable_tag, False))
-            if solvable:
-                # independent groups?
-                if self.lsm_solve_group_tag:
-                    independent_sg = sgname = "%s:%s" % (
-                    self.lsm_solve_group_tag, getattr(src, self.lsm_solve_group_tag, "unknown"))
-                else:
-                    independent_sg = ""
-                    sgname = 'source:%s' % src.name
-                if sgname in subgroups:
-                    sgsource = subgroups[sgname]
-                else:
-                    sgsource = subgroups[sgname] = []
-                    subgroup_order.append(sgname)
-            # make dict of source parametrs: for each parameter we have a value,subgroup pair
-            if is_null:
-                attrs = dict(ra=src.pos.ra, dec=src.pos.dec, I=0, Q=None, U=None, V=None, RM=None, spi=None,
-                             freq0=None)
-            else:
-                attrs = dict(
-                    ra=src.pos.ra,
-                    dec=src.pos.dec,
-                    I=src.flux.I,
-                    Q=getattr(src.flux, 'Q', None),
-                    U=getattr(src.flux, 'U', None),
-                    V=getattr(src.flux, 'V', None),
-                    RM=getattr(src.flux, 'rm', None),
-                    freq0=getattr(src.flux, 'freq0', None) or (src.spectrum and getattr(src.spectrum, 'freq0', None)),
-                    spi=src.spectrum and getattr(src.spectrum, 'spi', None)
-                )
-            if not is_null and isinstance(src.shape, ModelClasses.Gaussian):
-                attrs['lproj'] = src.shape.ex * math.sin(src.shape.pa)
-                attrs['mproj'] = src.shape.ex * math.cos(src.shape.pa)
-                attrs['ratio'] = src.shape.ey / src.shape.ex
-            # construct parms or constants for source attributes, depending on whether the source is solvable or not
-            # If source is solvable and this particular attribute is solvable, replace
-            # value in attrs dict with a Meq.Parm.
-            if solvable:
-                for parmname, value in list(attrs.items()):
-                    sgname = _Subgroups.get(parmname, None)
-                    if sgname in subgroups:
-                        solvable = True
-                        parm = attrs[parmname] = ns[src.name](parmname) << Meq.Parm(value or 0,
-                                                                                    tags=["solvable", sgname],
-                                                                                    solve_group=independent_sg)
-                        subgroups[sgname].append(parm)
-                        sgsource.append(parm)
-                        parms.append(parm)
-
-            # construct a direction
-            direction = Meow.Direction(ns, src.name, attrs['ra'], attrs['dec'],
-                                       static=not solvable or not self.solve_pos)
-
-            # construct a point source or gaussian or FITS image, depending on source shape class
-            if src.shape is None or is_null:
-                msrc = Meow.PointSource(ns, name=src.name,
-                                        I=attrs['I'], Q=attrs['Q'], U=attrs['U'], V=attrs['V'],
-                                        direction=direction,
-                                        spi=attrs['spi'], freq0=attrs['freq0'], RM=attrs['RM'])
-            elif isinstance(src.shape, ModelClasses.Gaussian):
-                msrc = Meow.GaussianSource(ns, name=src.name,
-                                           I=attrs['I'], Q=attrs['Q'], U=attrs['U'], V=attrs['V'],
-                                           direction=direction,
-                                           spi=attrs['spi'], freq0=attrs['freq0'],
-                                           lproj=attrs['lproj'], mproj=attrs['mproj'], ratio=attrs['ratio'])
-                if solvable and 'shape' in subgroups:
-                    subgroups['pos'] += direction.get_solvables()
-            elif isinstance(src.shape, ModelClasses.FITSImage):
-                msrc = Meow.FITSImageComponent(ns, name=src.name,
-                                               filename=src.shape.filename,
-                                               direction=direction)
-                msrc.set_options(fft_pad_factor=(src.shape.pad or 2))
-
-            msrc.solvable = solvable
-
-            # copy standard attributes from sub-objects
-            for subobj in src.flux, src.shape, src.spectrum:
-                if subobj:
-                    for attr, val in src.flux.getAttributes():
-                        msrc.set_attr(attr, val)
-            # copy all extra attrs from source object
-            for attr, val in src.getExtraAttributes():
-                msrc.set_attr(attr, val)
-
-            # make sure Iapp exists (init with I if it doesn't)
-            if msrc.get_attr('Iapp', None) is None:
-                msrc.set_attr('Iapp', src.flux.I)
-
-            source_model.append(msrc)
-
-        # if any solvable parms were made, make a parmgroup and solve job for them
-        if parms:
-            if os.path.isdir(self.filename):
-                table_name = os.path.join(self.filename, "sources.fmep")
-            else:
-                table_name = os.path.splitext(self.filename)[0] + ".fmep"
-            # make list of Subgroup objects for every non-empty subgroup
-            sgs = []
-            for sgname in subgroup_order:
-                sglist = subgroups.get(sgname, None)
-                if sglist:
-                    sgs.append(Meow.ParmGroup.Subgroup(sgname, sglist))
-            # make main parm group
-            pg_src = Meow.ParmGroup.ParmGroup("source parameters", parms,
-                                              subgroups=sgs,
-                                              table_name=table_name, table_in_ms=False, bookmark=True)
-            # now make a solvejobs for the source
-            Meow.ParmGroup.SolveJob("cal_source", "Solve for source parameters", pg_src)
-
-        return source_model
+# -*- coding: utf-8 -*-
+
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+
+## flake8 gives errors on "Meq.Parm", since it doesn't know about how TDL forces the name to exist
+# flake8: noqa
+
+from __future__ import absolute_import, division, print_function
+import math
+import sys
+
+# cattery has been appended to the path at this point
+import Meow
+
+import os.path
+from Cattery.Meow.MeqMaker import SourceSubsetSelector
+from Timba.TDL import TDLCompileOptions, TDLRuntimeOptions, TDLOption, TDLFileSelect, TDLMenu
+
+# find out where Tigger lives -- either it's in the path, or we add it
+try:
+    import Tigger
+except:
+    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
+    import Tigger
+
+from Tigger.Models import ModelClasses
+from Tigger.Models.Formats import ModelHTML
+from Tigger.Models.SkyModel import SkyModel
+
+# this dict determines how source attributes are grouped into "parameter subgroups"
+_Subgroups = dict(I="I", Q="Q", U="U", V="V",
+                  ra="pos", dec="pos", RM="RM", spi="spi",
+                  sx="shape", sy="shape", phi="shape")
+_SubgroupOrder = "I", "Q", "U", "V", "pos", "spi", "RM", "shape"
+
+
+class TiggerSkyModel(object):
+    """Interface to a Tigger-format sky model."""
+
+    def __init__(self, filename=None, include_options=False, tdloption_namespace='tiggerlsm'):
+        """Initializes a TiggerSkyModel object.
+        A filename and a format may be specified, although the actual file will
+        only be loaded on demand.
+        If include_options=True, immediately instantiates the options. If False, it is up to
+        the caller to include the options in his menus.
+        """
+        self.tdloption_namespace = tdloption_namespace
+        self._compile_opts = []
+        self._runtime_opts = []
+        self.filename = filename
+        self.lsm = None
+        # immediately include options, if needed
+        if include_options:
+            TDLCompileOptions(*self.compile_options())
+            TDLRuntimeOptions(*self.runtime_options())
+
+    def compile_options(self):
+        """Returns list of compile-time options"""
+        if not self._compile_opts:
+            self._compile_opts = [
+                TDLOption("filename", "Tigger LSM file",
+                                  TDLFileSelect("Tigger models (*." + ModelHTML.DefaultExtension + ");;All files (*)",
+                                                default=self.filename, exist=True),
+                                  namespace=self),
+                TDLOption('lsm_subset', "Source subset", ["all"], more=str, namespace=self,
+                          doc=SourceSubsetSelector.docstring),
+                TDLOption('null_subset', "Use nulls for subset", [None], more=str, namespace=self, doc=
+                """<P>If you wish, any subset of sources may be "nulled" by inserting a null
+                brightness for them. This is used in some advanced calibration scenarios; if
+                you're not sure about this option, just leave it set to "None".</P>
+                </P>""" + SourceSubsetSelector.docstring),
+                TDLMenu("Make solvable source parameters",
+                        TDLOption('lsm_solvable_tag', "Solvable source tag", [None, "solvable"], more=str,
+                                  namespace=self,
+                                  doc="""If you specify a tagname, only sources bearing that tag will be made solvable. Use 'None' to make all sources solvable."""),
+                        TDLOption('lsm_solve_group_tag', "Group independent solutions by tag", [None, "cluster"],
+                                  more=str, namespace=self,
+                                  doc="""If you specify a tagname, sources will be grouped by the value of the tag,
+                    and each group will be treated as an independent solution."""),
+                        TDLOption("solve_I", "I", False, namespace=self),
+                        TDLOption("solve_Q", "Q", False, namespace=self),
+                        TDLOption("solve_U", "U", False, namespace=self),
+                        TDLOption("solve_V", "V", False, namespace=self),
+                        TDLOption("solve_spi", "spectral index", False, namespace=self),
+                        TDLOption("solve_pos", "position", False, namespace=self),
+                        TDLOption("solve_RM", "rotation measure", False, namespace=self),
+                        TDLOption("solve_shape", "shape (for extended sources)", False, namespace=self),
+                        toggle='solvable_sources', namespace=self,
+                        )
+            ]
+        return self._compile_opts
+
+    def runtime_options(self):
+        """Makes and returns list of compile-time options"""
+        # no runtime options, for now
+        return self._runtime_opts
+
+    # helper function for use with SourceSubsetSelector below
+    @staticmethod
+    def _getTagValue(src, tag):
+        """Helper function: looks for the given tag in the source, or in its sub-objects"""
+        for obj in src, src.pos, src.flux, getattr(src, 'shape', None), getattr(src, 'spectrum', None):
+            if obj is not None and hasattr(obj, tag):
+                return getattr(obj, tag)
+        return None
+
+    def source_list(self, ns, max_sources=None, **kw):
+        """Reads LSM and returns a list of Meow objects.
+        ns is node scope in which they will be created.
+        Keyword arguments may be used to indicate which of the source attributes are to be
+        created as Parms, use e.g. I=Meow.Parm(tags="flux") for this.
+        The use_parms option may override this.
+        """
+        if self.filename is None:
+            return []
+        # load the sky model
+        if self.lsm is None:
+            self.lsm = Tigger.load(self.filename)
+        
+        # sort by brightness
+        import functools
+        from past.builtins import cmp
+        from functools import cmp_to_key
+        sources = sorted(self.lsm.sources, key=cmp_to_key(lambda a, b: cmp(b.brightness(), a.brightness())))
+
+        # extract subset, if specified
+        sources = SourceSubsetSelector.filter_subset(self.lsm_subset, sources, self._getTagValue)
+        # get nulls subset
+        if self.null_subset:
+            nulls = set([src.name for src in SourceSubsetSelector.filter_subset(self.null_subset, sources)])
+        else:
+            nulls = set()
+        parm = Meow.Parm(tags="source solvable")
+        # make copy of kw dict to be used for sources not in solvable set
+        kw_nonsolve = dict(kw)
+        # and update kw dict to be used for sources in solvable set
+        # this will be a dict of lists of solvable subgroups
+        parms = []
+        subgroups = {}
+        if self.solvable_sources:
+            subgroup_order = []
+            for sgname in _SubgroupOrder:
+                if getattr(self, 'solve_%s' % sgname):
+                    sg = subgroups[sgname] = []
+                    subgroup_order.append(sgname)
+
+        # make Meow list
+        source_model = []
+
+        for src in sources:
+            is_null = src.name in nulls
+            # this will be True if this source has solvable parms
+            solvable = self.solvable_sources and not is_null and (not self.lsm_solvable_tag
+                                                                  or getattr(src, self.lsm_solvable_tag, False))
+            if solvable:
+                # independent groups?
+                if self.lsm_solve_group_tag:
+                    independent_sg = sgname = "%s:%s" % (
+                    self.lsm_solve_group_tag, getattr(src, self.lsm_solve_group_tag, "unknown"))
+                else:
+                    independent_sg = ""
+                    sgname = 'source:%s' % src.name
+                if sgname in subgroups:
+                    sgsource = subgroups[sgname]
+                else:
+                    sgsource = subgroups[sgname] = []
+                    subgroup_order.append(sgname)
+            # make dict of source parametrs: for each parameter we have a value,subgroup pair
+            if is_null:
+                attrs = dict(ra=src.pos.ra, dec=src.pos.dec, I=0, Q=None, U=None, V=None, RM=None, spi=None,
+                             freq0=None)
+            else:
+                attrs = dict(
+                    ra=src.pos.ra,
+                    dec=src.pos.dec,
+                    I=src.flux.I,
+                    Q=getattr(src.flux, 'Q', None),
+                    U=getattr(src.flux, 'U', None),
+                    V=getattr(src.flux, 'V', None),
+                    RM=getattr(src.flux, 'rm', None),
+                    freq0=getattr(src.flux, 'freq0', None) or (src.spectrum and getattr(src.spectrum, 'freq0', None)),
+                    spi=src.spectrum and getattr(src.spectrum, 'spi', None)
+                )
+            if not is_null and isinstance(src.shape, ModelClasses.Gaussian):
+                attrs['lproj'] = src.shape.ex * math.sin(src.shape.pa)
+                attrs['mproj'] = src.shape.ex * math.cos(src.shape.pa)
+                attrs['ratio'] = src.shape.ey / src.shape.ex
+            # construct parms or constants for source attributes, depending on whether the source is solvable or not
+            # If source is solvable and this particular attribute is solvable, replace
+            # value in attrs dict with a Meq.Parm.
+            if solvable:
+                for parmname, value in list(attrs.items()):
+                    sgname = _Subgroups.get(parmname, None)
+                    if sgname in subgroups:
+                        solvable = True
+                        parm = attrs[parmname] = ns[src.name](parmname) << Meq.Parm(value or 0,
+                                                                                    tags=["solvable", sgname],
+                                                                                    solve_group=independent_sg)
+                        subgroups[sgname].append(parm)
+                        sgsource.append(parm)
+                        parms.append(parm)
+
+            # construct a direction
+            direction = Meow.Direction(ns, src.name, attrs['ra'], attrs['dec'],
+                                       static=not solvable or not self.solve_pos)
+
+            # construct a point source or gaussian or FITS image, depending on source shape class
+            if src.shape is None or is_null:
+                msrc = Meow.PointSource(ns, name=src.name,
+                                        I=attrs['I'], Q=attrs['Q'], U=attrs['U'], V=attrs['V'],
+                                        direction=direction,
+                                        spi=attrs['spi'], freq0=attrs['freq0'], RM=attrs['RM'])
+            elif isinstance(src.shape, ModelClasses.Gaussian):
+                msrc = Meow.GaussianSource(ns, name=src.name,
+                                           I=attrs['I'], Q=attrs['Q'], U=attrs['U'], V=attrs['V'],
+                                           direction=direction,
+                                           spi=attrs['spi'], freq0=attrs['freq0'],
+                                           lproj=attrs['lproj'], mproj=attrs['mproj'], ratio=attrs['ratio'])
+                if solvable and 'shape' in subgroups:
+                    subgroups['pos'] += direction.get_solvables()
+            elif isinstance(src.shape, ModelClasses.FITSImage):
+                msrc = Meow.FITSImageComponent(ns, name=src.name,
+                                               filename=src.shape.filename,
+                                               direction=direction)
+                msrc.set_options(fft_pad_factor=(src.shape.pad or 2))
+
+            msrc.solvable = solvable
+
+            # copy standard attributes from sub-objects
+            for subobj in src.flux, src.shape, src.spectrum:
+                if subobj:
+                    for attr, val in src.flux.getAttributes():
+                        msrc.set_attr(attr, val)
+            # copy all extra attrs from source object
+            for attr, val in src.getExtraAttributes():
+                msrc.set_attr(attr, val)
+
+            # make sure Iapp exists (init with I if it doesn't)
+            if msrc.get_attr('Iapp', None) is None:
+                msrc.set_attr('Iapp', src.flux.I)
+
+            source_model.append(msrc)
+
+        # if any solvable parms were made, make a parmgroup and solve job for them
+        if parms:
+            if os.path.isdir(self.filename):
+                table_name = os.path.join(self.filename, "sources.fmep")
+            else:
+                table_name = os.path.splitext(self.filename)[0] + ".fmep"
+            # make list of Subgroup objects for every non-empty subgroup
+            sgs = []
+            for sgname in subgroup_order:
+                sglist = subgroups.get(sgname, None)
+                if sglist:
+                    sgs.append(Meow.ParmGroup.Subgroup(sgname, sglist))
+            # make main parm group
+            pg_src = Meow.ParmGroup.ParmGroup("source parameters", parms,
+                                              subgroups=sgs,
+                                              table_name=table_name, table_in_ms=False, bookmark=True)
+            # now make a solvejobs for the source
+            Meow.ParmGroup.SolveJob("cal_source", "Solve for source parameters", pg_src)
+
+        return source_model
--- tigger-lsm-1.7.0.orig/Tigger/Tools/FITSHeaders.py
+++ tigger-lsm-1.7.0/Tigger/Tools/FITSHeaders.py
@@ -1,22 +1,22 @@
-# -*- coding: utf-8 -*-
-"""Defines various useful functions and constants for parsing FITS headers"""
-
-# Table of Stokes parameters corresponding to Stokes axis indices
-# Taken from Table 7, Greisen, E. W., and Calabretta, M. R., Astronomy & Astrophysics, 395, 1061-1075, 2002
-# (http://www.aanda.org/index.php?option=article&access=bibcode&bibcode=2002A%2526A...395.1061GFUL)
-# So StokesNames[1] == "I", StokesNames[-1] == "RR", StokesNames[-8] == "YX", etc.
-StokesNames = ["", "I", "Q", "U", "V", "YX", "XY", "YY", "XX", "LR", "RL", "LL", "RR"]
-# complex axis convention
-ComplexNames = ["", "real", "imag", "weight"]
-
-
-def isAxisTypeX(ctype):
-    """Checks if given CTYPE corresponds to the X axis"""
-    return any([ctype.startswith(prefix) for prefix in ("RA", "GLON", "ELON", "HLON", "SLON")]) or \
-           ctype in ("L", "X", "LL", "U", "UU")
-
-
-def isAxisTypeY(ctype):
-    """Checks if given CTYPE corresponds to the Y axis"""
-    return any([ctype.startswith(prefix) for prefix in ("DEC", "GLAT", "ELAT", "HLAT", "SLAT")]) or \
-           ctype in ("M", "Y", "MM", "V", "VV")
+# -*- coding: utf-8 -*-
+"""Defines various useful functions and constants for parsing FITS headers"""
+
+# Table of Stokes parameters corresponding to Stokes axis indices
+# Taken from Table 7, Greisen, E. W., and Calabretta, M. R., Astronomy & Astrophysics, 395, 1061-1075, 2002
+# (http://www.aanda.org/index.php?option=article&access=bibcode&bibcode=2002A%2526A...395.1061GFUL)
+# So StokesNames[1] == "I", StokesNames[-1] == "RR", StokesNames[-8] == "YX", etc.
+StokesNames = ["", "I", "Q", "U", "V", "YX", "XY", "YY", "XX", "LR", "RL", "LL", "RR"]
+# complex axis convention
+ComplexNames = ["", "real", "imag", "weight"]
+
+
+def isAxisTypeX(ctype):
+    """Checks if given CTYPE corresponds to the X axis"""
+    return any([ctype.startswith(prefix) for prefix in ("RA", "GLON", "ELON", "HLON", "SLON")]) or \
+           ctype in ("L", "X", "LL", "U", "UU")
+
+
+def isAxisTypeY(ctype):
+    """Checks if given CTYPE corresponds to the Y axis"""
+    return any([ctype.startswith(prefix) for prefix in ("DEC", "GLAT", "ELAT", "HLAT", "SLAT")]) or \
+           ctype in ("M", "Y", "MM", "V", "VV")
--- tigger-lsm-1.7.0.orig/Tigger/Tools/Imaging.py
+++ tigger-lsm-1.7.0/Tigger/Tools/Imaging.py
@@ -1,569 +1,569 @@
-# -*- coding: utf-8 -*-
-# -*- coding: utf-8 -*-
-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import math
-
-import Kittens.utils
-# init debug printing
-import Kittens.utils
-import astLib.astWCS
-import numpy
-from astropy.io import fits as pyfits
-from scipy.ndimage.filters import convolve
-from scipy.ndimage.interpolation import map_coordinates
-
-from . import FITSHeaders
-from Tigger.Coordinates import Projection
-
-_verbosity = Kittens.utils.verbosity(name="imaging")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-# conversion factors from radians
-DEG = 180 / math.pi
-ARCMIN = DEG * 60
-ARCSEC = ARCMIN * 60
-FWHM = math.sqrt(math.log(256))  # which is 2.3548
-
-
-def fitPsf(filename, cropsize=None):
-    """Fits a Gaussian PSF to the FITS file given by 'filename'.
-    If cropsize is specified, crops the central cropsize X cropsize pixels before fitting.
-    Else determines cropsize by looking for the first negative sidelobe from the centre outwards.
-    Returns maj_sigma,min_sigma,pa_NE (in radians)
-    """
-    # read PSF from file
-    psf = pyfits.open(filename)[0]
-    hdr = psf.header
-    psf = psf.data
-    dprintf(2, "Read PSF of shape %s from file %s\n", psf.shape, filename)
-    # remove stokes and freq axes
-    if len(psf.shape) == 4:
-        psf = psf[0, 0, :, :]
-    elif len(psf.shape) == 3:
-        psf = psf[0, :, :]
-    else:
-        raise RuntimeError("illegal PSF shape %s" + psf.shape)
-    nx, ny = psf.shape
-    # crop the central region
-    if cropsize:
-        size = cropsize
-        psf = psf[(nx - size) // 2:(nx + size) // 2, (ny - size) // 2:(ny + size) // 2]
-    # if size not specified, then auto-crop by looking for the first negative value starting from the center
-    # this will break on very extended diagonal PSFs, but that's a pathological case
-    else:
-        ix = numpy.where(psf[:, ny // 2] < 0)[0]
-        ix0 = max(ix[ix < nx // 2])
-        ix1 = min(ix[ix > nx // 2])
-        iy = numpy.where(psf[nx // 2, :] < 0)[0]
-        iy0 = max(iy[iy < ny // 2])
-        iy1 = min(iy[iy > ny // 2])
-        print(ix0, ix1, iy0, iy1)
-        psf = psf[ix0:ix1, iy0:iy1]
-    psf[psf < 0] = 0
-
-    # estimate gaussian parameters, then fit
-    from . import gaussfitter2
-    parms0 = gaussfitter2.moments(psf, circle=0, rotate=1, vheight=0)
-    print(parms0)
-    dprint(2, "Estimated parameters are", parms0)
-    parms = gaussfitter2.gaussfit(psf, None, parms0, autoderiv=1, return_all=0, circle=0, rotate=1, vheight=0)
-    dprint(0, "Fitted parameters are", parms)
-
-    # now swap x and y around, since our axes are in reverse order
-    ampl, y0, x0, sy, sx, rot = parms
-
-    # get pixel sizes in radians (by constructing a projection object)
-    proj = Projection.FITSWCSpix(hdr)
-
-    sx_rad = abs(sx * proj.xscale)
-    sy_rad = abs(sy * proj.yscale)
-    rot -= 90  # convert West through North PA into the conventional North through East
-    if sx_rad < sy_rad:
-        sx_rad, sy_rad = sy_rad, sx_rad
-        rot -= 90
-    rot %= 180
-
-    dprintf(1, "Fitted gaussian PSF FWHM of %f x %f pixels (%f x %f arcsec), PA %f deg\n", sx * FWHM, sy * FWHM,
-            sx_rad * FWHM * ARCSEC, sy_rad * FWHM * ARCSEC, rot)
-
-    return sx_rad, sy_rad, rot / DEG
-
-
-def convolveGaussian(x1, y1, p1, x2, y2, p2):
-    """convolves a Gaussian with extents x1,y1 and position angle p1
-    with another Gaussian given by x2,y2,p2, and returns the extents 
-    and angle of the resulting Gaussian."""
-    # convert to Fourier plane extents, FT transforms a -> pi^2/a
-    u1, v1, u2, v2 = [(math.pi ** 2) * 2 * a ** 2 for a in (x1, y1, x2, y2)]
-    #    print "uv coeffs",u1,v1,u2,v2
-    c1, s1 = math.cos(p1), math.sin(p1)
-    c2, s2 = math.cos(p2), math.sin(p2)
-    # in the FT, this is a product of two Gaussians, each of the form:
-    #   exp(-( u*(cx+sy)^2 + v*(cx-sy)^2))
-    # note how we rotate BACK through the position angle
-    # The product is necessarily a Gaussian itself, of the form
-    #   exp(-(a.u^2+2b.u.v+c.v^2))
-    # So we just need to collect the rotated Gaussian coefficients into a, b and c
-    a = u1 * c1 ** 2 + v1 * s1 ** 2 + u2 * c2 ** 2 + v2 * s2 ** 2
-    c = u1 * s1 ** 2 + v1 * c1 ** 2 + u2 * s2 ** 2 + v2 * c2 ** 2
-    b = c1 * s1 * (u1 - v1) + c2 * s2 * (u2 - v2)
-    #    print "a,b,c",a,b,c
-    # ok, find semi-major axes a1, b1 using the formula from http://mathworld.wolfram.com/Ellipse.html eq. 21-22
-    # to go from a general quadratic curve (with a,b,c given above, d=f=0, g=-1) to semi-axes a',b'
-    D = math.sqrt((a - c) ** 2 + 4 * b ** 2)
-    E = a + c
-    a1 = math.sqrt(2 / (E - D))
-    b1 = math.sqrt(2 / (E + D))
-    #    print "a',b'",a1,b1,"coeffs",1/(a1**2),1/(b1**2)
-    # and derive rotation angle
-    if b:
-        p1 = math.atan2(2 * b, a - c) / 2 + math.pi / 2
-    #        if a > c:
-    #          p1 += math.pi/2
-    else:
-        p1 = 0 if a <= c else math.pi / 2
-    #    print "rotation",p1/DEG
-    # ok, convert a1,b1 from uv-plane to image plane 
-    x1 = math.sqrt(1 / (2 * math.pi ** 2 * a1 ** 2))
-    y1 = math.sqrt(1 / (2 * math.pi ** 2 * b1 ** 2))
-    # note that because of reciprocality, y1 becomes the major axis and x1 the minor axis, so adjust for that
-    return y1, x1, (p1 - math.pi / 2) % math.pi
-
-
-def getImageCube(fitshdu, filename="", extra_axes=None):
-    """Converts a FITS HDU (consisting of a header and data) into a 4+-dim numpy array where the
-    first two axes are x and y, the third is Stokes (possibly of length 1, if missing in the
-    original image), and the rest are either as found in the FITS header (if extra_axes=None),
-    or in the order specified by CTYPE in extra_axes (if present, else a dummy axis of size 1 is inserted),
-    with axes not present in extra_axes removed by taking the 0-th plane along each.
-    Returns tuple of
-      array,stokes_list,extra_axes_ctype_list,removed_axes_ctype_list
-    e.g. array,("I","Q"),("FREQ--FOO","TIME--BAR")
-    """
-    hdr = fitshdu.header
-    data = fitshdu.data
-    # recognized axes
-    ix = iy = istokes = None
-    naxis = len(data.shape)
-    # other axes which will be returned
-    other_axes = []
-    other_axes_ctype = []
-    remove_axes = []
-    remove_axes_ctype = []
-
-    # match axis ctype
-    # this makes FREQ equivalent to FELO*
-    def match_ctype(ctype, ctype_list):
-        for i, ct in enumerate(ctype_list):
-            if ct == ctype or (ct == "FREQ" and ctype.startswith("FELO")) or (
-                    ctype == "FREQ" and ct.startswith("FELO")):
-                return i
-        return None
-
-    # identify X, Y and stokes axes
-    for n in range(naxis):
-        iax = naxis - 1 - n
-        axs = str(n + 1)
-        ctype = hdr.get('CTYPE' + axs).strip().upper()
-        if ix is None and FITSHeaders.isAxisTypeX(ctype):
-            ix = iax  # in numpy order, axes are reversed
-        elif iy is None and FITSHeaders.isAxisTypeY(ctype):
-            iy = iax
-        elif ctype == 'STOKES':
-            if istokes is not None:
-                raise ValueError("duplicate STOKES axis in FITS file %s" % filename)
-            istokes = iax
-            crval = hdr.get('CRVAL' + axs, 0)
-            cdelt = hdr.get('CDELT' + axs, 1)
-            crpix = hdr.get('CRPIX' + axs, 1) - 1
-            values = list(map(int, list(crval + (numpy.arange(data.shape[iax]) - crpix) * cdelt)))
-            stokes_names = [(FITSHeaders.StokesNames[i]
-                             if i > 0 and i < len(FITSHeaders.StokesNames) else "%d" % i) for i in values]
-        else:
-            other_axes.append(iax)
-            other_axes_ctype.append(ctype)
-    # not found?
-    if ix is None or iy is None:
-        raise ValueError("FITS file %s does not appear to contain an X and/or Y axis" % filename)
-    # form up shape of resulting image, and order of axes for transpose
-    shape = [data.shape[ix], data.shape[iy]]
-    axes = [ix, iy]
-    # add stokes axis
-    if istokes is None:
-        shape.append(1)
-        stokes_names = ("I",)
-    else:
-        shape.append(data.shape[istokes])
-        axes.append(istokes)
-    if extra_axes:
-        # if a fixed order for the extra axes is specified, add the ones we found
-        for ctype in extra_axes:
-            i = match_ctype(ctype, other_axes_ctype)
-            if i is not None:
-                iax = other_axes[i]
-                axes.append(iax)
-                shape.append(data.shape[iax])
-            else:
-                shape.append(1)
-        # add the ones that were not found into the remove list
-        for iaxis, ctype in zip(other_axes, other_axes_ctype):
-            if match_ctype(ctype, extra_axes) is None:
-                axes.append(iaxis)
-                remove_axes.append(iaxis)
-                remove_axes_ctype.append(ctype)
-    # return all extra axes found in header
-    else:
-        shape += [data.shape[i] for i in other_axes]
-        axes += other_axes
-        extra_axes = other_axes_ctype
-    # tranpose
-    data = data.transpose(axes)
-    # trim off axes which are to be removed, if we have any
-    if remove_axes:
-        data = data[[Ellipsis] + [0] * len(remove_axes)]
-    # reshape and return
-    return data.reshape(shape), stokes_names, extra_axes, remove_axes_ctype
-
-
-class ImageResampler(object):
-    """This class resamples images from one projection ("source") to another ("target")."""
-
-    def __init__(self, sproj, tproj, sl, sm, tl, tm):
-        """Creates resampler.
-        sproj,tproj are the source and target Projection objects.
-        sl,sm is a (sorted, ascending) list of l,m coordinates in the source image
-        tl,tm is a (sorted, ascending) list of l,m coordinates in the target image
-        """
-        # convert tl,tm to to source coordinates
-        # find the overlap region first, to keeps the number of coordinate conversions to a minimum
-        overlap = astLib.astWCS.findWCSOverlap(sproj.wcs, tproj.wcs)
-        tx2, tx1, ty1, ty2 = overlap['wcs2Pix']
-        # no overlap? stop then
-        if tx1 > tl[-1] or tx2 < tl[0] or ty1 > tm[-1] or ty2 < tm[0]:
-            self._target_slice = None, None
-            return
-        tx1 = max(0, int(math.floor(tx1)))
-        tx2 = min(len(tl), int(math.floor(tx2 + 1)))
-        ty1 = max(0, int(math.floor(ty1)))
-        ty2 = min(len(tm), int(math.floor(ty2 + 1)))
-        tl = tl[tx1:tx2]
-        tm = tm[ty1:ty2]
-        dprint(4, "overlap target pixels are %d:%d and %d:%d" % (tx1, tx2, ty1, ty2))
-
-        #### The code below works but can be very slow  (~minutes) when doing large images, because of WCS
-        ## make target lm matrix
-        # tmat = numpy.zeros((2,len(tl),len(tm)))
-        # tmat[0,...] = tl[:,numpy.newaxis]
-        # tmat[1,...] = tm[numpy.newaxis,:]
-        ## convert this to radec. Go through list since that's what Projection expects
-        # dprint(4,"converting %d target l/m pixel coordinates to radec"%(len(tl)*len(tm)))
-        # ra,dec = tproj.radec(tmat[0,...].ravel(),tmat[1,...].ravel())
-        # dprint(4,"converting radec to source l/m")
-        # tls,tms = sproj.lm(ra,dec)
-        # tmat[0,...] = tls.reshape((len(tl),len(tm)))
-        # tmat[1,...] = tms.reshape((len(tl),len(tm)))
-
-        #### my alternative conversion code
-        ## source to target is always an affine transform (one image projected into the plane of another, right?), so
-        ## use WCS to map the corners, and figure out a linear transform from there
-
-        # this maps three corners
-        t00 = sproj.lm(*tproj.radec(tl[0], tm[0]))
-        t1x = sproj.lm(*tproj.radec(tl[-1], tm[0]))
-        t1y = sproj.lm(*tproj.radec(tl[0], tm[-1]))
-
-        tmat = numpy.zeros((2, len(tl), len(tm)))
-        tlnorm = (tl - tl[0]) / (tl[-1] - tl[0])
-        tmnorm = (tm - tm[0]) / (tm[-1] - tm[0])
-        tmat[0, ...] = t00[0] + (tlnorm * (t1x[0] - t00[0]))[:, numpy.newaxis] + (tmnorm * (t1y[0] - t00[0]))[
-                                                                                 numpy.newaxis, :]
-        tmat[1, ...] = t00[1] + (tmnorm * (t1y[1] - t00[1]))[numpy.newaxis, :] + (tlnorm * (t1x[1] - t00[1]))[:,
-                                                                                 numpy.newaxis]
-
-        dprint(4, "setting up slices")
-        # ok, now find pixels in tmat that are within the source image extent
-        tmask = (sl[0] <= tmat[0, ...]) & (tmat[0, ...] <= sl[-1]) & (sm[0] <= tmat[1, ...]) & (tmat[1, ...] <= sm[-1])
-        # find extents along target's l and m axis
-        # tmask_l/m is true for each target column/row that has pixels within the source image
-        tmask_l = numpy.where(tmask.sum(1) > 0)[0]
-        tmask_m = numpy.where(tmask.sum(0) > 0)[0]
-        # check if there's no overlap at all -- return then
-        if not len(tmask_l) or not len(tmask_m):
-            self._target_slice = None, None
-            return
-        # ok, now we know over which pixels of the target image need to be interpolated
-        ix0, ix1 = tmask_l[0], tmask_l[-1] + 1
-        iy0, iy1 = tmask_m[0], tmask_m[-1] + 1
-        self._target_slice = slice(ix0 + tx1, ix1 + tx1), slice(iy0 + ty1, iy1 + ty1)
-        dprint(4, "slices are", ix0, ix1, iy0, iy1)
-        # make [2,nx,ny] array of interpolation coordinates
-        self._target_coords = tmat[:, ix0:ix1, iy0:iy1]
-
-    def targetSlice(self):
-        return self._target_slice
-
-    def __call__(self, image):
-        if self._target_slice[0] is None:
-            return 0
-        else:
-            return map_coordinates(image, self._target_coords)
-
-
-def restoreSources(fits_hdu, sources, gmaj, gmin=None, grot=0, freq=None, primary_beam=None, apply_beamgain=False,
-                   ignore_nobeam=False):
-    """Restores sources (into the given FITSHDU) using a Gaussian PSF given by gmaj/gmin/grot, in radians.
-    gmaj/gmin is major/minor sigma parameter; grot is PA in the North thru East convention (PA=0 is N).
-
-    If gmaj=0, uses delta functions instead.
-    If freq is specified, converts flux to the specified frequency.
-    If primary_beam is specified, uses it to apply a PB gain to each source. This must be a function of two arguments:
-    r and freq, returning the power beam gain.
-    If apply_beamgain is true, applies beamgain atribute instead, if this exists.
-    Source tagged 'nobeam' will not have the PB gain applied, unless ignore_nobeam=True
-    """
-    hdr = fits_hdu.header
-    data, stokes, extra_data_axes, dum = getImageCube(fits_hdu)
-    # create projection object, using pixel coordinates
-    proj = Projection.FITSWCSpix(hdr)
-    naxis = len(data.shape)
-    nx = data.shape[0]
-    ny = data.shape[1]
-    dprintf(1, "Read image of shape %s\n", data.shape)
-
-    # Now we make "indexer" tuples. These use the numpy.newarray index to turn elementary vectors into
-    # full arrays of the same number of dimensions as 'data' (data can be 2-, 3- or 4-dimensional, so we need
-    # a general solution.)
-    # For e.g. a nfreq x nstokes x ny x nx array, the following objects are created:
-    #   x_indexer    turns n-vector vx into a _,_,_,n array
-    #   y_indexer    turns m-vector vy into a _,_,m,_ array
-    #   stokes_indexer turns the stokes vector into a _,nst,_,_ array
-    # ...where "_" is numpy.newaxis.
-    # The happy result of all this is that we can add a Gaussian into the data array at i1:i2,j1:j2 as follows:
-    #  1. form up vectors of world coordinates (vx,vy) corresponding to pixel coordinates i1:i2 and j1:j2
-    #  2. form up vector of Stokes parameters
-    #  3. g = Gauss(vx[x_indexer],vy[y_indexer])*stokes[stokes_indexer]
-    #  4. Just say data[j1:j2,i1:2,...] += g
-    # This automatically expands all array dimensions as needed.
-
-    # This is a helper function, returns an naxis-sized tuple, with slice(None) in the Nth
-    # position, and elem_index elsewhere.
-    def make_axis_indexer(n, elem_index=numpy.newaxis):
-        indexer = [elem_index] * naxis
-        indexer[n] = slice(None)
-        return tuple(indexer)
-
-    x_indexer = make_axis_indexer(0)
-    y_indexer = make_axis_indexer(1)
-    # figure out stokes
-    nstokes = len(stokes)
-    stokes_vec = numpy.zeros((nstokes,))
-    stokes_indexer = make_axis_indexer(2)
-    dprint(2, "Stokes are", stokes)
-    dprint(2, "Stokes indexing vector is", stokes_indexer)
-    # get pixel sizes, in radians
-    # gmaj != 0: use gaussian. Estimate PSF box size. We want a +/-5 sigma box
-    if gmaj > 0:
-        # convert grot from N-E to W-N (which is the more conventional mathematical definition of these things), so X is major axis
-        grot += math.pi / 2
-        if gmin == 0:
-            gmin = gmaj
-        cos_rot = math.cos(grot)
-        sin_rot = math.sin(-grot)  # rotation is N->E, so swap the sign
-    else:
-        gmaj = gmin = grot = 0
-    conv_kernels = {}
-    # loop over sources in model
-    for src in sources:
-        # get normalized intensity, if spectral info is available
-        if freq is not None and getattr(src, 'spectrum', None):
-            ni = src.spectrum.normalized_intensity(freq)
-            dprintf(3, "Source %s: normalized spectral intensity is %f\n", src.name, ni)
-        else:
-            ni = 1
-        #  multiply that by PB gain, if given
-        if ignore_nobeam or not getattr(src, 'nobeam', False):
-            if apply_beamgain and hasattr(src, 'beamgain'):
-                ni *= getattr(src, 'beamgain')
-            elif primary_beam:
-                r = getattr(src, 'r', None)
-                if r is not None:
-                    pb = primary_beam(r, freq)
-                    ni *= pb
-                dprintf(3, "Source %s: r=%g pb=%f, normalized intensity is %f\n", src.name, r, pb, ni)
-        # process point sources
-        if src.typecode in ('pnt', 'Gau'):
-            # pixel coordinates of source
-            xsrc, ysrc = proj.lm(src.pos.ra, src.pos.dec)
-            # form up stokes vector
-            for i, st in enumerate(stokes):
-                stokes_vec[i] = getattr(src.flux, st, 0) * ni
-            dprintf(3, "Source %s, %s Jy, at pixel %f,%f\n", src.name, stokes_vec, xsrc, ysrc)
-            # for gaussian sources, convolve with beam
-            if src.typecode == 'Gau':
-                pa0 = src.shape.pa + math.pi / 2  # convert PA from N->E to conventional W->N
-                ex0, ey0 = src.shape.ex / FWHM, src.shape.ey / FWHM  # convert extents from FWHM to sigmas, since gmaj/gmin is in same scale
-                if gmaj > 0:
-                    ex, ey, pa = convolveGaussian(ex0, ey0, pa0, gmaj, gmin, grot)
-                    # normalize flux by beam/extent ratio
-                    stokes_vec *= (gmaj * gmin) / (ex * ey)
-                    # print "%3dx%-3d@%3d * %3dx%-3d@%3d -> %3dx%-3d@%3d"%(
-                    # ex0 *FWHM*ARCSEC,ey0 *FWHM*ARCSEC,(pa0-math.pi/2)*DEG,
-                    # gmaj*FWHM*ARCSEC,gmin*FWHM*ARCSEC,(grot-math.pi/2)*DEG,
-                    # ex  *FWHM*ARCSEC,ey  *FWHM*ARCSEC,(pa-math.pi/2)*DEG)
-                else:
-                    # normalize flux by pixel/extent ratio
-                    ex, ey, pa = ex0, ey0, pa0
-                    stokes_vec *= (abs(proj.xscale * proj.yscale)) / (ex * ey)
-            else:
-                ex, ey, pa = gmaj, gmin, grot
-            # gmaj != 0: use gaussian.
-            if ex > 0 or ey > 0:
-                # work out restoring box
-                box_radius = 5 * (max(ex, ey)) / min(abs(proj.xscale), abs(proj.yscale))
-                dprintf(2, "Will use a box of radius %f pixels for restoration\n", box_radius)
-                cos_pa = math.cos(pa)
-                sin_pa = math.sin(-pa)  # rotation is N->E, so swap the sign
-                # pixel coordinates of box around source in which we evaluate the gaussian
-                i1 = max(0, int(math.floor(xsrc - box_radius)))
-                i2 = min(nx, int(math.ceil(xsrc + box_radius)))
-                j1 = max(0, int(math.floor(ysrc - box_radius)))
-                j2 = min(ny, int(math.ceil(ysrc + box_radius)))
-                # skip sources if box doesn't overlap image
-                if i1 >= i2 or j1 >= j2:
-                    continue
-                # now we convert pixel indices within the box into world coordinates, relative to source position
-                xi = (numpy.arange(i1, i2) - xsrc) * proj.xscale
-                yj = (numpy.arange(j1, j2) - ysrc) * proj.yscale
-                # work out rotated coordinates
-                xi1 = (xi * cos_pa)[x_indexer] - (yj * sin_pa)[y_indexer]
-                yj1 = (xi * sin_pa)[x_indexer] + (yj * cos_pa)[y_indexer]
-                # evaluate gaussian at these, scale up by stokes vector
-                gg = stokes_vec[stokes_indexer] * numpy.exp(-((xi1 / ex) ** 2 + (yj1 / ey) ** 2) / 2.)
-                # add into data
-                data[i1:i2, j1:j2, ...] += gg
-            # else gmaj=0: use delta functions
-            else:
-                xsrc = int(round(xsrc))
-                ysrc = int(round(ysrc))
-                # skip sources outside image
-                if xsrc < 0 or xsrc >= nx or ysrc < 0 or ysrc >= ny:
-                    continue
-                xdum = numpy.array([1])
-                ydum = numpy.array([1])
-                data[xsrc:xsrc + 1, ysrc:ysrc + 1, ...] += stokes_vec[stokes_indexer] * xdum[x_indexer] * ydum[
-                    y_indexer]
-        # process model images -- convolve with PSF and add to data
-        elif src.typecode == "FITS":
-            modelff = pyfits.open(src.shape.filename)
-            model, model_stokes, extra_model_axes, removed_model_axes = \
-                getImageCube(modelff[0], src.shape.filename, extra_axes=extra_data_axes)
-            modelproj = Projection.FITSWCSpix(modelff[0].header)
-            # map Stokes planes: at least the first one ("I", presumably) must be present
-            # The rest are represented by indices in model_stp. Thus e.g. for an IQUV data image and an IV model,
-            # model_stp will be [0,-1,-1,1]
-            model_stp = [(model_stokes.index(st) if st in model_stokes else -1) for st in stokes]
-            if model_stp[0] < 0:
-                print("Warning: model image %s lacks Stokes %s, skipping." % (src.shape.filename, model_stokes[0]))
-                continue
-            # figure out whether the images overlap at all
-            # in the trivial case, both images have the same WCS, so no resampling is needed
-            if model.shape[:2] == data.shape[:2] and modelproj == proj:
-                model_resampler = lambda x: x
-                data_x_slice = data_y_slice = slice(None)
-                dprintf(3, "Source %s: same resolution as output, no interpolation needed\n", src.shape.filename)
-            # else make a resampler engine
-            else:
-                model_resampler = ImageResampler(modelproj, proj,
-                                                 numpy.arange(model.shape[0], dtype=float),
-                                                 numpy.arange(model.shape[1], dtype=float),
-                                                 numpy.arange(data.shape[0], dtype=float),
-                                                 numpy.arange(data.shape[1], dtype=float))
-                data_x_slice, data_y_slice = model_resampler.targetSlice()
-                dprintf(3, "Source %s: resampling into image at %s, %s\n", src.shape.filename, data_x_slice,
-                        data_y_slice)
-                # skip this source if no overlap
-                if data_x_slice is None or data_y_slice is None:
-                    continue
-            # warn about ignored model axes (e.g. when model has frequency and our output doesn't)
-            if removed_model_axes:
-                print("Warning: model image %s has one or more axes that are not present in the output image:" % src.shape.filename)
-                print("  taking the first plane along (%s)." % (",".join(removed_model_axes)))
-            # evaluate convolution kernel for this model scale, if not already cached
-            conv_kernel = conv_kernels.get((modelproj.xscale, modelproj.yscale), None)
-            if conv_kernel is None:
-                box_radius = 5 * (max(gmaj, gmin)) / min(abs(modelproj.xscale), abs(modelproj.yscale))
-                radius = int(round(box_radius))
-                # convert pixel coordinates into world coordinates relative to 0
-                xi = numpy.arange(-radius, radius + 1) * modelproj.xscale
-                yj = numpy.arange(-radius, radius + 1) * modelproj.yscale
-                # work out rotated coordinates
-                xi1 = (xi * cos_rot)[:, numpy.newaxis] - (yj * sin_rot)[numpy.newaxis, :]
-                yj1 = (xi * sin_rot)[:, numpy.newaxis] + (yj * cos_rot)[numpy.newaxis, :]
-                # evaluate convolution kernel
-                conv_kernel = numpy.exp(-((xi1 / gmaj) ** 2 + (yj1 / gmin) ** 2) / 2.)
-                conv_kernels[modelproj.xscale, modelproj.yscale] = conv_kernel
-            # Work out data slices that we need to loop over.
-            # For every 2D slice in the data image cube (assuming other axes besides x/y), we need to apply a
-            # convolution to the corresponding model slice, and add it in to the data slice. The complication
-            # is that any extra axis may be of length 1 in the model and of length N in the data (e.g. frequency axis),
-            # in which case we need to add the same model slice to all N data slices. The loop below puts together a series
-            # of index tuples representing each per-slice operation.
-            # These two initial slices correspond to the x/y axes. Additional indices will be appended to these in a loop
-            slices0 = [([data_x_slice, data_y_slice], [slice(None), slice(None)])]
-            # work out Stokes axis
-            sd0 = [data_x_slice, data_y_slice]
-            sm0 = [slice(None), slice(None)]
-            slices = []
-            slices = [(sd0 + [dst], sm0 + [mst]) for dst, mst in enumerate(model_stp) if mst >= 0]
-            # for dst,mst in enumerate(model_stp):
-            # if mst >= 0:
-            # slices = [ (sd0+[dst],sm0+[mst]) for sd0,sm0 in slices ]
-            # now loop over extra axes
-            for axis in range(3, len(extra_data_axes) + 3):
-                # list of data image indices to iterate over for this axis, 0...N-1
-                indices = [[x] for x in range(data.shape[axis])]
-                # list of model image indices to iterate over
-                if model.shape[axis] == 1:
-                    model_indices = [[0]] * len(indices)
-                # shape-n: must be same as data, in which case 0..N-1 is assigned to 0..N-1
-                elif model.shape[axis] == data.shape[axis]:
-                    model_indices = indices
-                # else error
-                else:
-                    raise RuntimeError("axis %s of model image %s doesn't match that of output image" % \
-                                        (extra_data_axes[axis - 3], src.shape.filename))
-                # update list of slices
-                slices = [(sd0 + sd, si0 + si) for sd0, si0 in slices for sd, si in zip(indices, model_indices)]
-            # now loop over slices and assign
-            for sd, si in slices:
-                conv = convolve(model[tuple(si)], conv_kernel)
-                data[tuple(sd)] += model_resampler(conv)
-                ## for debugging these are handy:
-                # data[0:conv.shape[0],0:conv.shape[1],0,0] = conv
-                # data[0:conv_kernel.shape[0],-conv_kernel.shape[1]:,0,0] = conv_kernel
+# -*- coding: utf-8 -*-
+# -*- coding: utf-8 -*-
+
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import math
+
+import Kittens.utils
+# init debug printing
+import Kittens.utils
+import astLib.astWCS
+import numpy
+from astropy.io import fits as pyfits
+from scipy.ndimage.filters import convolve
+from scipy.ndimage.interpolation import map_coordinates
+
+from . import FITSHeaders
+from Tigger.Coordinates import Projection
+
+_verbosity = Kittens.utils.verbosity(name="imaging")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+# conversion factors from radians
+DEG = 180 / math.pi
+ARCMIN = DEG * 60
+ARCSEC = ARCMIN * 60
+FWHM = math.sqrt(math.log(256))  # which is 2.3548
+
+
+def fitPsf(filename, cropsize=None):
+    """Fits a Gaussian PSF to the FITS file given by 'filename'.
+    If cropsize is specified, crops the central cropsize X cropsize pixels before fitting.
+    Else determines cropsize by looking for the first negative sidelobe from the centre outwards.
+    Returns maj_sigma,min_sigma,pa_NE (in radians)
+    """
+    # read PSF from file
+    psf = pyfits.open(filename)[0]
+    hdr = psf.header
+    psf = psf.data
+    dprintf(2, "Read PSF of shape %s from file %s\n", psf.shape, filename)
+    # remove stokes and freq axes
+    if len(psf.shape) == 4:
+        psf = psf[0, 0, :, :]
+    elif len(psf.shape) == 3:
+        psf = psf[0, :, :]
+    else:
+        raise RuntimeError("illegal PSF shape %s" + psf.shape)
+    nx, ny = psf.shape
+    # crop the central region
+    if cropsize:
+        size = cropsize
+        psf = psf[(nx - size) // 2:(nx + size) // 2, (ny - size) // 2:(ny + size) // 2]
+    # if size not specified, then auto-crop by looking for the first negative value starting from the center
+    # this will break on very extended diagonal PSFs, but that's a pathological case
+    else:
+        ix = numpy.where(psf[:, ny // 2] < 0)[0]
+        ix0 = max(ix[ix < nx // 2])
+        ix1 = min(ix[ix > nx // 2])
+        iy = numpy.where(psf[nx // 2, :] < 0)[0]
+        iy0 = max(iy[iy < ny // 2])
+        iy1 = min(iy[iy > ny // 2])
+        print(ix0, ix1, iy0, iy1)
+        psf = psf[ix0:ix1, iy0:iy1]
+    psf[psf < 0] = 0
+
+    # estimate gaussian parameters, then fit
+    from . import gaussfitter2
+    parms0 = gaussfitter2.moments(psf, circle=0, rotate=1, vheight=0)
+    print(parms0)
+    dprint(2, "Estimated parameters are", parms0)
+    parms = gaussfitter2.gaussfit(psf, None, parms0, autoderiv=1, return_all=0, circle=0, rotate=1, vheight=0)
+    dprint(0, "Fitted parameters are", parms)
+
+    # now swap x and y around, since our axes are in reverse order
+    ampl, y0, x0, sy, sx, rot = parms
+
+    # get pixel sizes in radians (by constructing a projection object)
+    proj = Projection.FITSWCSpix(hdr)
+
+    sx_rad = abs(sx * proj.xscale)
+    sy_rad = abs(sy * proj.yscale)
+    rot -= 90  # convert West through North PA into the conventional North through East
+    if sx_rad < sy_rad:
+        sx_rad, sy_rad = sy_rad, sx_rad
+        rot -= 90
+    rot %= 180
+
+    dprintf(1, "Fitted gaussian PSF FWHM of %f x %f pixels (%f x %f arcsec), PA %f deg\n", sx * FWHM, sy * FWHM,
+            sx_rad * FWHM * ARCSEC, sy_rad * FWHM * ARCSEC, rot)
+
+    return sx_rad, sy_rad, rot / DEG
+
+
+def convolveGaussian(x1, y1, p1, x2, y2, p2):
+    """convolves a Gaussian with extents x1,y1 and position angle p1
+    with another Gaussian given by x2,y2,p2, and returns the extents 
+    and angle of the resulting Gaussian."""
+    # convert to Fourier plane extents, FT transforms a -> pi^2/a
+    u1, v1, u2, v2 = [(math.pi ** 2) * 2 * a ** 2 for a in (x1, y1, x2, y2)]
+    #    print "uv coeffs",u1,v1,u2,v2
+    c1, s1 = math.cos(p1), math.sin(p1)
+    c2, s2 = math.cos(p2), math.sin(p2)
+    # in the FT, this is a product of two Gaussians, each of the form:
+    #   exp(-( u*(cx+sy)^2 + v*(cx-sy)^2))
+    # note how we rotate BACK through the position angle
+    # The product is necessarily a Gaussian itself, of the form
+    #   exp(-(a.u^2+2b.u.v+c.v^2))
+    # So we just need to collect the rotated Gaussian coefficients into a, b and c
+    a = u1 * c1 ** 2 + v1 * s1 ** 2 + u2 * c2 ** 2 + v2 * s2 ** 2
+    c = u1 * s1 ** 2 + v1 * c1 ** 2 + u2 * s2 ** 2 + v2 * c2 ** 2
+    b = c1 * s1 * (u1 - v1) + c2 * s2 * (u2 - v2)
+    #    print "a,b,c",a,b,c
+    # ok, find semi-major axes a1, b1 using the formula from http://mathworld.wolfram.com/Ellipse.html eq. 21-22
+    # to go from a general quadratic curve (with a,b,c given above, d=f=0, g=-1) to semi-axes a',b'
+    D = math.sqrt((a - c) ** 2 + 4 * b ** 2)
+    E = a + c
+    a1 = math.sqrt(2 / (E - D))
+    b1 = math.sqrt(2 / (E + D))
+    #    print "a',b'",a1,b1,"coeffs",1/(a1**2),1/(b1**2)
+    # and derive rotation angle
+    if b:
+        p1 = math.atan2(2 * b, a - c) / 2 + math.pi / 2
+    #        if a > c:
+    #          p1 += math.pi/2
+    else:
+        p1 = 0 if a <= c else math.pi / 2
+    #    print "rotation",p1/DEG
+    # ok, convert a1,b1 from uv-plane to image plane 
+    x1 = math.sqrt(1 / (2 * math.pi ** 2 * a1 ** 2))
+    y1 = math.sqrt(1 / (2 * math.pi ** 2 * b1 ** 2))
+    # note that because of reciprocality, y1 becomes the major axis and x1 the minor axis, so adjust for that
+    return y1, x1, (p1 - math.pi / 2) % math.pi
+
+
+def getImageCube(fitshdu, filename="", extra_axes=None):
+    """Converts a FITS HDU (consisting of a header and data) into a 4+-dim numpy array where the
+    first two axes are x and y, the third is Stokes (possibly of length 1, if missing in the
+    original image), and the rest are either as found in the FITS header (if extra_axes=None),
+    or in the order specified by CTYPE in extra_axes (if present, else a dummy axis of size 1 is inserted),
+    with axes not present in extra_axes removed by taking the 0-th plane along each.
+    Returns tuple of
+      array,stokes_list,extra_axes_ctype_list,removed_axes_ctype_list
+    e.g. array,("I","Q"),("FREQ--FOO","TIME--BAR")
+    """
+    hdr = fitshdu.header
+    data = fitshdu.data
+    # recognized axes
+    ix = iy = istokes = None
+    naxis = len(data.shape)
+    # other axes which will be returned
+    other_axes = []
+    other_axes_ctype = []
+    remove_axes = []
+    remove_axes_ctype = []
+
+    # match axis ctype
+    # this makes FREQ equivalent to FELO*
+    def match_ctype(ctype, ctype_list):
+        for i, ct in enumerate(ctype_list):
+            if ct == ctype or (ct == "FREQ" and ctype.startswith("FELO")) or (
+                    ctype == "FREQ" and ct.startswith("FELO")):
+                return i
+        return None
+
+    # identify X, Y and stokes axes
+    for n in range(naxis):
+        iax = naxis - 1 - n
+        axs = str(n + 1)
+        ctype = hdr.get('CTYPE' + axs).strip().upper()
+        if ix is None and FITSHeaders.isAxisTypeX(ctype):
+            ix = iax  # in numpy order, axes are reversed
+        elif iy is None and FITSHeaders.isAxisTypeY(ctype):
+            iy = iax
+        elif ctype == 'STOKES':
+            if istokes is not None:
+                raise ValueError("duplicate STOKES axis in FITS file %s" % filename)
+            istokes = iax
+            crval = hdr.get('CRVAL' + axs, 0)
+            cdelt = hdr.get('CDELT' + axs, 1)
+            crpix = hdr.get('CRPIX' + axs, 1) - 1
+            values = list(map(int, list(crval + (numpy.arange(data.shape[iax]) - crpix) * cdelt)))
+            stokes_names = [(FITSHeaders.StokesNames[i]
+                             if i > 0 and i < len(FITSHeaders.StokesNames) else "%d" % i) for i in values]
+        else:
+            other_axes.append(iax)
+            other_axes_ctype.append(ctype)
+    # not found?
+    if ix is None or iy is None:
+        raise ValueError("FITS file %s does not appear to contain an X and/or Y axis" % filename)
+    # form up shape of resulting image, and order of axes for transpose
+    shape = [data.shape[ix], data.shape[iy]]
+    axes = [ix, iy]
+    # add stokes axis
+    if istokes is None:
+        shape.append(1)
+        stokes_names = ("I",)
+    else:
+        shape.append(data.shape[istokes])
+        axes.append(istokes)
+    if extra_axes:
+        # if a fixed order for the extra axes is specified, add the ones we found
+        for ctype in extra_axes:
+            i = match_ctype(ctype, other_axes_ctype)
+            if i is not None:
+                iax = other_axes[i]
+                axes.append(iax)
+                shape.append(data.shape[iax])
+            else:
+                shape.append(1)
+        # add the ones that were not found into the remove list
+        for iaxis, ctype in zip(other_axes, other_axes_ctype):
+            if match_ctype(ctype, extra_axes) is None:
+                axes.append(iaxis)
+                remove_axes.append(iaxis)
+                remove_axes_ctype.append(ctype)
+    # return all extra axes found in header
+    else:
+        shape += [data.shape[i] for i in other_axes]
+        axes += other_axes
+        extra_axes = other_axes_ctype
+    # tranpose
+    data = data.transpose(axes)
+    # trim off axes which are to be removed, if we have any
+    if remove_axes:
+        data = data[[Ellipsis] + [0] * len(remove_axes)]
+    # reshape and return
+    return data.reshape(shape), stokes_names, extra_axes, remove_axes_ctype
+
+
+class ImageResampler(object):
+    """This class resamples images from one projection ("source") to another ("target")."""
+
+    def __init__(self, sproj, tproj, sl, sm, tl, tm):
+        """Creates resampler.
+        sproj,tproj are the source and target Projection objects.
+        sl,sm is a (sorted, ascending) list of l,m coordinates in the source image
+        tl,tm is a (sorted, ascending) list of l,m coordinates in the target image
+        """
+        # convert tl,tm to to source coordinates
+        # find the overlap region first, to keeps the number of coordinate conversions to a minimum
+        overlap = astLib.astWCS.findWCSOverlap(sproj.wcs, tproj.wcs)
+        tx2, tx1, ty1, ty2 = overlap['wcs2Pix']
+        # no overlap? stop then
+        if tx1 > tl[-1] or tx2 < tl[0] or ty1 > tm[-1] or ty2 < tm[0]:
+            self._target_slice = None, None
+            return
+        tx1 = max(0, int(math.floor(tx1)))
+        tx2 = min(len(tl), int(math.floor(tx2 + 1)))
+        ty1 = max(0, int(math.floor(ty1)))
+        ty2 = min(len(tm), int(math.floor(ty2 + 1)))
+        tl = tl[tx1:tx2]
+        tm = tm[ty1:ty2]
+        dprint(4, "overlap target pixels are %d:%d and %d:%d" % (tx1, tx2, ty1, ty2))
+
+        #### The code below works but can be very slow  (~minutes) when doing large images, because of WCS
+        ## make target lm matrix
+        # tmat = numpy.zeros((2,len(tl),len(tm)))
+        # tmat[0,...] = tl[:,numpy.newaxis]
+        # tmat[1,...] = tm[numpy.newaxis,:]
+        ## convert this to radec. Go through list since that's what Projection expects
+        # dprint(4,"converting %d target l/m pixel coordinates to radec"%(len(tl)*len(tm)))
+        # ra,dec = tproj.radec(tmat[0,...].ravel(),tmat[1,...].ravel())
+        # dprint(4,"converting radec to source l/m")
+        # tls,tms = sproj.lm(ra,dec)
+        # tmat[0,...] = tls.reshape((len(tl),len(tm)))
+        # tmat[1,...] = tms.reshape((len(tl),len(tm)))
+
+        #### my alternative conversion code
+        ## source to target is always an affine transform (one image projected into the plane of another, right?), so
+        ## use WCS to map the corners, and figure out a linear transform from there
+
+        # this maps three corners
+        t00 = sproj.lm(*tproj.radec(tl[0], tm[0]))
+        t1x = sproj.lm(*tproj.radec(tl[-1], tm[0]))
+        t1y = sproj.lm(*tproj.radec(tl[0], tm[-1]))
+
+        tmat = numpy.zeros((2, len(tl), len(tm)))
+        tlnorm = (tl - tl[0]) / (tl[-1] - tl[0])
+        tmnorm = (tm - tm[0]) / (tm[-1] - tm[0])
+        tmat[0, ...] = t00[0] + (tlnorm * (t1x[0] - t00[0]))[:, numpy.newaxis] + (tmnorm * (t1y[0] - t00[0]))[
+                                                                                 numpy.newaxis, :]
+        tmat[1, ...] = t00[1] + (tmnorm * (t1y[1] - t00[1]))[numpy.newaxis, :] + (tlnorm * (t1x[1] - t00[1]))[:,
+                                                                                 numpy.newaxis]
+
+        dprint(4, "setting up slices")
+        # ok, now find pixels in tmat that are within the source image extent
+        tmask = (sl[0] <= tmat[0, ...]) & (tmat[0, ...] <= sl[-1]) & (sm[0] <= tmat[1, ...]) & (tmat[1, ...] <= sm[-1])
+        # find extents along target's l and m axis
+        # tmask_l/m is true for each target column/row that has pixels within the source image
+        tmask_l = numpy.where(tmask.sum(1) > 0)[0]
+        tmask_m = numpy.where(tmask.sum(0) > 0)[0]
+        # check if there's no overlap at all -- return then
+        if not len(tmask_l) or not len(tmask_m):
+            self._target_slice = None, None
+            return
+        # ok, now we know over which pixels of the target image need to be interpolated
+        ix0, ix1 = tmask_l[0], tmask_l[-1] + 1
+        iy0, iy1 = tmask_m[0], tmask_m[-1] + 1
+        self._target_slice = slice(ix0 + tx1, ix1 + tx1), slice(iy0 + ty1, iy1 + ty1)
+        dprint(4, "slices are", ix0, ix1, iy0, iy1)
+        # make [2,nx,ny] array of interpolation coordinates
+        self._target_coords = tmat[:, ix0:ix1, iy0:iy1]
+
+    def targetSlice(self):
+        return self._target_slice
+
+    def __call__(self, image):
+        if self._target_slice[0] is None:
+            return 0
+        else:
+            return map_coordinates(image, self._target_coords)
+
+
+def restoreSources(fits_hdu, sources, gmaj, gmin=None, grot=0, freq=None, primary_beam=None, apply_beamgain=False,
+                   ignore_nobeam=False):
+    """Restores sources (into the given FITSHDU) using a Gaussian PSF given by gmaj/gmin/grot, in radians.
+    gmaj/gmin is major/minor sigma parameter; grot is PA in the North thru East convention (PA=0 is N).
+
+    If gmaj=0, uses delta functions instead.
+    If freq is specified, converts flux to the specified frequency.
+    If primary_beam is specified, uses it to apply a PB gain to each source. This must be a function of two arguments:
+    r and freq, returning the power beam gain.
+    If apply_beamgain is true, applies beamgain atribute instead, if this exists.
+    Source tagged 'nobeam' will not have the PB gain applied, unless ignore_nobeam=True
+    """
+    hdr = fits_hdu.header
+    data, stokes, extra_data_axes, dum = getImageCube(fits_hdu)
+    # create projection object, using pixel coordinates
+    proj = Projection.FITSWCSpix(hdr)
+    naxis = len(data.shape)
+    nx = data.shape[0]
+    ny = data.shape[1]
+    dprintf(1, "Read image of shape %s\n", data.shape)
+
+    # Now we make "indexer" tuples. These use the numpy.newarray index to turn elementary vectors into
+    # full arrays of the same number of dimensions as 'data' (data can be 2-, 3- or 4-dimensional, so we need
+    # a general solution.)
+    # For e.g. a nfreq x nstokes x ny x nx array, the following objects are created:
+    #   x_indexer    turns n-vector vx into a _,_,_,n array
+    #   y_indexer    turns m-vector vy into a _,_,m,_ array
+    #   stokes_indexer turns the stokes vector into a _,nst,_,_ array
+    # ...where "_" is numpy.newaxis.
+    # The happy result of all this is that we can add a Gaussian into the data array at i1:i2,j1:j2 as follows:
+    #  1. form up vectors of world coordinates (vx,vy) corresponding to pixel coordinates i1:i2 and j1:j2
+    #  2. form up vector of Stokes parameters
+    #  3. g = Gauss(vx[x_indexer],vy[y_indexer])*stokes[stokes_indexer]
+    #  4. Just say data[j1:j2,i1:2,...] += g
+    # This automatically expands all array dimensions as needed.
+
+    # This is a helper function, returns an naxis-sized tuple, with slice(None) in the Nth
+    # position, and elem_index elsewhere.
+    def make_axis_indexer(n, elem_index=numpy.newaxis):
+        indexer = [elem_index] * naxis
+        indexer[n] = slice(None)
+        return tuple(indexer)
+
+    x_indexer = make_axis_indexer(0)
+    y_indexer = make_axis_indexer(1)
+    # figure out stokes
+    nstokes = len(stokes)
+    stokes_vec = numpy.zeros((nstokes,))
+    stokes_indexer = make_axis_indexer(2)
+    dprint(2, "Stokes are", stokes)
+    dprint(2, "Stokes indexing vector is", stokes_indexer)
+    # get pixel sizes, in radians
+    # gmaj != 0: use gaussian. Estimate PSF box size. We want a +/-5 sigma box
+    if gmaj > 0:
+        # convert grot from N-E to W-N (which is the more conventional mathematical definition of these things), so X is major axis
+        grot += math.pi / 2
+        if gmin == 0:
+            gmin = gmaj
+        cos_rot = math.cos(grot)
+        sin_rot = math.sin(-grot)  # rotation is N->E, so swap the sign
+    else:
+        gmaj = gmin = grot = 0
+    conv_kernels = {}
+    # loop over sources in model
+    for src in sources:
+        # get normalized intensity, if spectral info is available
+        if freq is not None and getattr(src, 'spectrum', None):
+            ni = src.spectrum.normalized_intensity(freq)
+            dprintf(3, "Source %s: normalized spectral intensity is %f\n", src.name, ni)
+        else:
+            ni = 1
+        #  multiply that by PB gain, if given
+        if ignore_nobeam or not getattr(src, 'nobeam', False):
+            if apply_beamgain and hasattr(src, 'beamgain'):
+                ni *= getattr(src, 'beamgain')
+            elif primary_beam:
+                r = getattr(src, 'r', None)
+                if r is not None:
+                    pb = primary_beam(r, freq)
+                    ni *= pb
+                dprintf(3, "Source %s: r=%g pb=%f, normalized intensity is %f\n", src.name, r, pb, ni)
+        # process point sources
+        if src.typecode in ('pnt', 'Gau'):
+            # pixel coordinates of source
+            xsrc, ysrc = proj.lm(src.pos.ra, src.pos.dec)
+            # form up stokes vector
+            for i, st in enumerate(stokes):
+                stokes_vec[i] = getattr(src.flux, st, 0) * ni
+            dprintf(3, "Source %s, %s Jy, at pixel %f,%f\n", src.name, stokes_vec, xsrc, ysrc)
+            # for gaussian sources, convolve with beam
+            if src.typecode == 'Gau':
+                pa0 = src.shape.pa + math.pi / 2  # convert PA from N->E to conventional W->N
+                ex0, ey0 = src.shape.ex / FWHM, src.shape.ey / FWHM  # convert extents from FWHM to sigmas, since gmaj/gmin is in same scale
+                if gmaj > 0:
+                    ex, ey, pa = convolveGaussian(ex0, ey0, pa0, gmaj, gmin, grot)
+                    # normalize flux by beam/extent ratio
+                    stokes_vec *= (gmaj * gmin) / (ex * ey)
+                    # print "%3dx%-3d@%3d * %3dx%-3d@%3d -> %3dx%-3d@%3d"%(
+                    # ex0 *FWHM*ARCSEC,ey0 *FWHM*ARCSEC,(pa0-math.pi/2)*DEG,
+                    # gmaj*FWHM*ARCSEC,gmin*FWHM*ARCSEC,(grot-math.pi/2)*DEG,
+                    # ex  *FWHM*ARCSEC,ey  *FWHM*ARCSEC,(pa-math.pi/2)*DEG)
+                else:
+                    # normalize flux by pixel/extent ratio
+                    ex, ey, pa = ex0, ey0, pa0
+                    stokes_vec *= (abs(proj.xscale * proj.yscale)) / (ex * ey)
+            else:
+                ex, ey, pa = gmaj, gmin, grot
+            # gmaj != 0: use gaussian.
+            if ex > 0 or ey > 0:
+                # work out restoring box
+                box_radius = 5 * (max(ex, ey)) / min(abs(proj.xscale), abs(proj.yscale))
+                dprintf(2, "Will use a box of radius %f pixels for restoration\n", box_radius)
+                cos_pa = math.cos(pa)
+                sin_pa = math.sin(-pa)  # rotation is N->E, so swap the sign
+                # pixel coordinates of box around source in which we evaluate the gaussian
+                i1 = max(0, int(math.floor(xsrc - box_radius)))
+                i2 = min(nx, int(math.ceil(xsrc + box_radius)))
+                j1 = max(0, int(math.floor(ysrc - box_radius)))
+                j2 = min(ny, int(math.ceil(ysrc + box_radius)))
+                # skip sources if box doesn't overlap image
+                if i1 >= i2 or j1 >= j2:
+                    continue
+                # now we convert pixel indices within the box into world coordinates, relative to source position
+                xi = (numpy.arange(i1, i2) - xsrc) * proj.xscale
+                yj = (numpy.arange(j1, j2) - ysrc) * proj.yscale
+                # work out rotated coordinates
+                xi1 = (xi * cos_pa)[x_indexer] - (yj * sin_pa)[y_indexer]
+                yj1 = (xi * sin_pa)[x_indexer] + (yj * cos_pa)[y_indexer]
+                # evaluate gaussian at these, scale up by stokes vector
+                gg = stokes_vec[stokes_indexer] * numpy.exp(-((xi1 / ex) ** 2 + (yj1 / ey) ** 2) / 2.)
+                # add into data
+                data[i1:i2, j1:j2, ...] += gg
+            # else gmaj=0: use delta functions
+            else:
+                xsrc = int(round(xsrc))
+                ysrc = int(round(ysrc))
+                # skip sources outside image
+                if xsrc < 0 or xsrc >= nx or ysrc < 0 or ysrc >= ny:
+                    continue
+                xdum = numpy.array([1])
+                ydum = numpy.array([1])
+                data[xsrc:xsrc + 1, ysrc:ysrc + 1, ...] += stokes_vec[stokes_indexer] * xdum[x_indexer] * ydum[
+                    y_indexer]
+        # process model images -- convolve with PSF and add to data
+        elif src.typecode == "FITS":
+            modelff = pyfits.open(src.shape.filename)
+            model, model_stokes, extra_model_axes, removed_model_axes = \
+                getImageCube(modelff[0], src.shape.filename, extra_axes=extra_data_axes)
+            modelproj = Projection.FITSWCSpix(modelff[0].header)
+            # map Stokes planes: at least the first one ("I", presumably) must be present
+            # The rest are represented by indices in model_stp. Thus e.g. for an IQUV data image and an IV model,
+            # model_stp will be [0,-1,-1,1]
+            model_stp = [(model_stokes.index(st) if st in model_stokes else -1) for st in stokes]
+            if model_stp[0] < 0:
+                print("Warning: model image %s lacks Stokes %s, skipping." % (src.shape.filename, model_stokes[0]))
+                continue
+            # figure out whether the images overlap at all
+            # in the trivial case, both images have the same WCS, so no resampling is needed
+            if model.shape[:2] == data.shape[:2] and modelproj == proj:
+                model_resampler = lambda x: x
+                data_x_slice = data_y_slice = slice(None)
+                dprintf(3, "Source %s: same resolution as output, no interpolation needed\n", src.shape.filename)
+            # else make a resampler engine
+            else:
+                model_resampler = ImageResampler(modelproj, proj,
+                                                 numpy.arange(model.shape[0], dtype=float),
+                                                 numpy.arange(model.shape[1], dtype=float),
+                                                 numpy.arange(data.shape[0], dtype=float),
+                                                 numpy.arange(data.shape[1], dtype=float))
+                data_x_slice, data_y_slice = model_resampler.targetSlice()
+                dprintf(3, "Source %s: resampling into image at %s, %s\n", src.shape.filename, data_x_slice,
+                        data_y_slice)
+                # skip this source if no overlap
+                if data_x_slice is None or data_y_slice is None:
+                    continue
+            # warn about ignored model axes (e.g. when model has frequency and our output doesn't)
+            if removed_model_axes:
+                print("Warning: model image %s has one or more axes that are not present in the output image:" % src.shape.filename)
+                print("  taking the first plane along (%s)." % (",".join(removed_model_axes)))
+            # evaluate convolution kernel for this model scale, if not already cached
+            conv_kernel = conv_kernels.get((modelproj.xscale, modelproj.yscale), None)
+            if conv_kernel is None:
+                box_radius = 5 * (max(gmaj, gmin)) / min(abs(modelproj.xscale), abs(modelproj.yscale))
+                radius = int(round(box_radius))
+                # convert pixel coordinates into world coordinates relative to 0
+                xi = numpy.arange(-radius, radius + 1) * modelproj.xscale
+                yj = numpy.arange(-radius, radius + 1) * modelproj.yscale
+                # work out rotated coordinates
+                xi1 = (xi * cos_rot)[:, numpy.newaxis] - (yj * sin_rot)[numpy.newaxis, :]
+                yj1 = (xi * sin_rot)[:, numpy.newaxis] + (yj * cos_rot)[numpy.newaxis, :]
+                # evaluate convolution kernel
+                conv_kernel = numpy.exp(-((xi1 / gmaj) ** 2 + (yj1 / gmin) ** 2) / 2.)
+                conv_kernels[modelproj.xscale, modelproj.yscale] = conv_kernel
+            # Work out data slices that we need to loop over.
+            # For every 2D slice in the data image cube (assuming other axes besides x/y), we need to apply a
+            # convolution to the corresponding model slice, and add it in to the data slice. The complication
+            # is that any extra axis may be of length 1 in the model and of length N in the data (e.g. frequency axis),
+            # in which case we need to add the same model slice to all N data slices. The loop below puts together a series
+            # of index tuples representing each per-slice operation.
+            # These two initial slices correspond to the x/y axes. Additional indices will be appended to these in a loop
+            slices0 = [([data_x_slice, data_y_slice], [slice(None), slice(None)])]
+            # work out Stokes axis
+            sd0 = [data_x_slice, data_y_slice]
+            sm0 = [slice(None), slice(None)]
+            slices = []
+            slices = [(sd0 + [dst], sm0 + [mst]) for dst, mst in enumerate(model_stp) if mst >= 0]
+            # for dst,mst in enumerate(model_stp):
+            # if mst >= 0:
+            # slices = [ (sd0+[dst],sm0+[mst]) for sd0,sm0 in slices ]
+            # now loop over extra axes
+            for axis in range(3, len(extra_data_axes) + 3):
+                # list of data image indices to iterate over for this axis, 0...N-1
+                indices = [[x] for x in range(data.shape[axis])]
+                # list of model image indices to iterate over
+                if model.shape[axis] == 1:
+                    model_indices = [[0]] * len(indices)
+                # shape-n: must be same as data, in which case 0..N-1 is assigned to 0..N-1
+                elif model.shape[axis] == data.shape[axis]:
+                    model_indices = indices
+                # else error
+                else:
+                    raise RuntimeError("axis %s of model image %s doesn't match that of output image" % \
+                                        (extra_data_axes[axis - 3], src.shape.filename))
+                # update list of slices
+                slices = [(sd0 + sd, si0 + si) for sd0, si0 in slices for sd, si in zip(indices, model_indices)]
+            # now loop over slices and assign
+            for sd, si in slices:
+                conv = convolve(model[tuple(si)], conv_kernel)
+                data[tuple(sd)] += model_resampler(conv)
+                ## for debugging these are handy:
+                # data[0:conv.shape[0],0:conv.shape[1],0,0] = conv
+                # data[0:conv_kernel.shape[0],-conv_kernel.shape[1]:,0,0] = conv_kernel
--- tigger-lsm-1.7.0.orig/Tigger/Tools/__init__.py
+++ tigger-lsm-1.7.0/Tigger/Tools/__init__.py
@@ -1,24 +1,24 @@
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
--- tigger-lsm-1.7.0.orig/Tigger/Tools/gaussfitter2.py
+++ tigger-lsm-1.7.0/Tigger/Tools/gaussfitter2.py
@@ -1,178 +1,178 @@
-# -*- coding: utf-8 -*-
-# gaussfitter.py
-# created by Adam Ginsburg (adam.ginsburg@colorado.edu or keflavich@gmail.com) 3/17/08)
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import numpy as np
-from scipy import optimize
-from scipy import stats
-
-
-def moments(data, circle, rotate, vheight):
-    """Returns (height, amplitude, x, y, width_x, width_y, rotation angle)
-    the gaussian parameters of a 2D distribution by calculating its
-    moments.  Depending on the input parameters, will only output 
-    a subset of the above"""
-    total = data.sum()
-    X, Y = np.ndices(data.shape)
-    x = (X * data).sum() / total
-    y = (Y * data).sum() / total
-    col = data[:, int(y)]
-    width_x = np.sqrt(abs((np.arange(col.size) - y) ** 2 * col).sum() / col.sum())
-    row = data[int(x), :]
-    width_y = np.sqrt(abs((np.arange(row.size) - x) ** 2 * row).sum() / row.sum())
-    width = (width_x + width_y) / 2.
-    height = stats.mode(data.ravel())[0][0] if vheight else 0
-    amplitude = data.max() - height
-    mylist = [amplitude, x, y]
-    if vheight == 1:
-        mylist = [height] + mylist
-    if circle == 0:
-        mylist = mylist + [width_x, width_y]
-    else:
-        mylist = mylist + [width]
-    if rotate == 1:
-        mylist = mylist + [0.]  # rotation "moment" is just zero...
-    return tuple(mylist)
-
-
-def twodgaussian(inpars, circle, rotate, vheight):
-    """Returns a 2d gaussian function of the form:
-        x' = cos(rota) * x - sin(rota) * y
-        y' = sin(rota) * x + cos(rota) * y
-        (rota should be in degrees)
-        g = b + a exp ( - ( ((x-center_x)/width_x)**2 +
-        ((y-center_y)/width_y)**2 ) / 2 )
-
-        where x and y are the input parameters of the returned function,
-        and all other parameters are specified by this function
-
-        However, the above values are passed by list.  The list should be:
-        inpars = (height,amplitude,center_x,center_y,width_x,width_y,rota)
-
-        You can choose to ignore / neglect some of the above input parameters using the following options:
-            circle=0 - default is an elliptical gaussian (different x, y widths), but can reduce
-                the input by one parameter if it's a circular gaussian
-            rotate=1 - default allows rotation of the gaussian ellipse.  Can remove last parameter
-                by setting rotate=0
-            vheight=1 - default allows a variable height-above-zero, i.e. an additive constant
-                for the Gaussian function.  Can remove first parameter by setting this to 0
-        """
-    inpars_old = inpars
-    inpars = list(inpars)
-    if vheight == 1:
-        height = inpars.pop(0)
-        height = float(height)
-    else:
-        height = float(0)
-    amplitude, center_x, center_y = inpars.pop(0), inpars.pop(0), inpars.pop(0)
-    amplitude = float(amplitude)
-    center_x = float(center_x)
-    center_y = float(center_y)
-    if circle == 1:
-        width = inpars.pop(0)
-        width_x = float(width)
-        width_y = float(width)
-    else:
-        width_x, width_y = inpars.pop(0), inpars.pop(0)
-        width_x = float(width_x)
-        width_y = float(width_y)
-    if rotate == 1:
-        rota = inpars.pop(0)
-        rota = np.pi / 180. * float(rota)
-        rcen_x = center_x * np.cos(rota) - center_y * np.sin(rota)
-        rcen_y = center_x * np.sin(rota) + center_y * np.cos(rota)
-    else:
-        rcen_x = center_x
-        rcen_y = center_y
-    if len(inpars) > 0:
-        raise ValueError("There are still input parameters:" + str(inpars) + \
-                         " and you've input: " + str(inpars_old) + " circle=%d, rotate=%d, vheight=%d" % (
-                         circle, rotate, vheight))
-
-    def rotgauss(x, y):
-        if rotate == 1:
-            xp = x * np.cos(rota) - y * np.sin(rota)
-            yp = x * np.sin(rota) + y * np.cos(rota)
-        else:
-            xp = x
-            yp = y
-        g = height + amplitude * np.exp(
-            -(((rcen_x - xp) / width_x) ** 2 +
-              ((rcen_y - yp) / width_y) ** 2) / 2.)
-        return g
-
-    return rotgauss
-
-
-def gaussfit(data, err=None, params=[], autoderiv=1, return_all=0, circle=0, rotate=1, vheight=1):
-    """
-    Gaussian fitter with the ability to fit a variety of different forms of 2-dimensional gaussian.
-    
-    Input Parameters:
-        data - 2-dimensional data array
-        err=None - error array with same size as data array
-        params=[] - initial input parameters for Gaussian function.
-            (height, amplitude, x, y, width_x, width_y, rota)
-            if not input, these will be determined from the moments of the system, 
-            assuming no rotation
-        autoderiv=1 - use the autoderiv provided in the lmder.f function (the alternative
-            is to us an analytic derivative with lmdif.f: this method is less robust)
-        return_all=0 - Default is to return only the Gaussian parameters.  See below for
-            detail on output
-        circle=0 - default is an elliptical gaussian (different x, y widths), but can reduce
-            the input by one parameter if it's a circular gaussian
-        rotate=1 - default allows rotation of the gaussian ellipse.  Can remove last parameter
-            by setting rotate=0
-        vheight=1 - default allows a variable height-above-zero, i.e. an additive constant
-            for the Gaussian function.  Can remove first parameter by setting this to 0
-
-    Output:
-        Default output is a set of Gaussian parameters with the same shape as the input parameters
-        Can also output the covariance matrix, 'infodict' that contains a lot more detail about
-            the fit (see scipy.optimize.leastsq), and a message from leastsq telling what the exit
-            status of the fitting routine was
-
-        Warning: Does NOT necessarily output a rotation angle between 0 and 360 degrees.
-    """
-    if params == []:
-        params = (moments(data, circle, rotate, vheight))
-    if err == None:
-        errorfunction = lambda p: np.ravel((twodgaussian(p, circle, rotate, vheight)(*np.indices(data.shape)) - data))
-    else:
-        errorfunction = lambda p: np.ravel(
-            (twodgaussian(p, circle, rotate, vheight)(*np.indices(data.shape)) - data) / err)
-    if autoderiv == 0:
-        # the analytic derivative, while not terribly difficult, is less efficient and useful.  I only bothered
-        # putting it here because I was instructed to do so for a class project - please ask if you would like 
-        # this feature implemented
-        raise ValueError("I'm sorry, I haven't implemented this feature yet.")
-    else:
-        p, cov, infodict, errmsg, success = optimize.leastsq(errorfunction, params, full_output=1)
-    if return_all == 0:
-        return p
-    elif return_all == 1:
-        return p, cov, infodict, errmsg
+# -*- coding: utf-8 -*-
+# gaussfitter.py
+# created by Adam Ginsburg (adam.ginsburg@colorado.edu or keflavich@gmail.com) 3/17/08)
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import numpy as np
+from scipy import optimize
+from scipy import stats
+
+
+def moments(data, circle, rotate, vheight):
+    """Returns (height, amplitude, x, y, width_x, width_y, rotation angle)
+    the gaussian parameters of a 2D distribution by calculating its
+    moments.  Depending on the input parameters, will only output 
+    a subset of the above"""
+    total = data.sum()
+    X, Y = np.ndices(data.shape)
+    x = (X * data).sum() / total
+    y = (Y * data).sum() / total
+    col = data[:, int(y)]
+    width_x = np.sqrt(abs((np.arange(col.size) - y) ** 2 * col).sum() / col.sum())
+    row = data[int(x), :]
+    width_y = np.sqrt(abs((np.arange(row.size) - x) ** 2 * row).sum() / row.sum())
+    width = (width_x + width_y) / 2.
+    height = stats.mode(data.ravel())[0][0] if vheight else 0
+    amplitude = data.max() - height
+    mylist = [amplitude, x, y]
+    if vheight == 1:
+        mylist = [height] + mylist
+    if circle == 0:
+        mylist = mylist + [width_x, width_y]
+    else:
+        mylist = mylist + [width]
+    if rotate == 1:
+        mylist = mylist + [0.]  # rotation "moment" is just zero...
+    return tuple(mylist)
+
+
+def twodgaussian(inpars, circle, rotate, vheight):
+    """Returns a 2d gaussian function of the form:
+        x' = cos(rota) * x - sin(rota) * y
+        y' = sin(rota) * x + cos(rota) * y
+        (rota should be in degrees)
+        g = b + a exp ( - ( ((x-center_x)/width_x)**2 +
+        ((y-center_y)/width_y)**2 ) / 2 )
+
+        where x and y are the input parameters of the returned function,
+        and all other parameters are specified by this function
+
+        However, the above values are passed by list.  The list should be:
+        inpars = (height,amplitude,center_x,center_y,width_x,width_y,rota)
+
+        You can choose to ignore / neglect some of the above input parameters using the following options:
+            circle=0 - default is an elliptical gaussian (different x, y widths), but can reduce
+                the input by one parameter if it's a circular gaussian
+            rotate=1 - default allows rotation of the gaussian ellipse.  Can remove last parameter
+                by setting rotate=0
+            vheight=1 - default allows a variable height-above-zero, i.e. an additive constant
+                for the Gaussian function.  Can remove first parameter by setting this to 0
+        """
+    inpars_old = inpars
+    inpars = list(inpars)
+    if vheight == 1:
+        height = inpars.pop(0)
+        height = float(height)
+    else:
+        height = float(0)
+    amplitude, center_x, center_y = inpars.pop(0), inpars.pop(0), inpars.pop(0)
+    amplitude = float(amplitude)
+    center_x = float(center_x)
+    center_y = float(center_y)
+    if circle == 1:
+        width = inpars.pop(0)
+        width_x = float(width)
+        width_y = float(width)
+    else:
+        width_x, width_y = inpars.pop(0), inpars.pop(0)
+        width_x = float(width_x)
+        width_y = float(width_y)
+    if rotate == 1:
+        rota = inpars.pop(0)
+        rota = np.pi / 180. * float(rota)
+        rcen_x = center_x * np.cos(rota) - center_y * np.sin(rota)
+        rcen_y = center_x * np.sin(rota) + center_y * np.cos(rota)
+    else:
+        rcen_x = center_x
+        rcen_y = center_y
+    if len(inpars) > 0:
+        raise ValueError("There are still input parameters:" + str(inpars) + \
+                         " and you've input: " + str(inpars_old) + " circle=%d, rotate=%d, vheight=%d" % (
+                         circle, rotate, vheight))
+
+    def rotgauss(x, y):
+        if rotate == 1:
+            xp = x * np.cos(rota) - y * np.sin(rota)
+            yp = x * np.sin(rota) + y * np.cos(rota)
+        else:
+            xp = x
+            yp = y
+        g = height + amplitude * np.exp(
+            -(((rcen_x - xp) / width_x) ** 2 +
+              ((rcen_y - yp) / width_y) ** 2) / 2.)
+        return g
+
+    return rotgauss
+
+
+def gaussfit(data, err=None, params=[], autoderiv=1, return_all=0, circle=0, rotate=1, vheight=1):
+    """
+    Gaussian fitter with the ability to fit a variety of different forms of 2-dimensional gaussian.
+    
+    Input Parameters:
+        data - 2-dimensional data array
+        err=None - error array with same size as data array
+        params=[] - initial input parameters for Gaussian function.
+            (height, amplitude, x, y, width_x, width_y, rota)
+            if not input, these will be determined from the moments of the system, 
+            assuming no rotation
+        autoderiv=1 - use the autoderiv provided in the lmder.f function (the alternative
+            is to us an analytic derivative with lmdif.f: this method is less robust)
+        return_all=0 - Default is to return only the Gaussian parameters.  See below for
+            detail on output
+        circle=0 - default is an elliptical gaussian (different x, y widths), but can reduce
+            the input by one parameter if it's a circular gaussian
+        rotate=1 - default allows rotation of the gaussian ellipse.  Can remove last parameter
+            by setting rotate=0
+        vheight=1 - default allows a variable height-above-zero, i.e. an additive constant
+            for the Gaussian function.  Can remove first parameter by setting this to 0
+
+    Output:
+        Default output is a set of Gaussian parameters with the same shape as the input parameters
+        Can also output the covariance matrix, 'infodict' that contains a lot more detail about
+            the fit (see scipy.optimize.leastsq), and a message from leastsq telling what the exit
+            status of the fitting routine was
+
+        Warning: Does NOT necessarily output a rotation angle between 0 and 360 degrees.
+    """
+    if params == []:
+        params = (moments(data, circle, rotate, vheight))
+    if err == None:
+        errorfunction = lambda p: np.ravel((twodgaussian(p, circle, rotate, vheight)(*np.indices(data.shape)) - data))
+    else:
+        errorfunction = lambda p: np.ravel(
+            (twodgaussian(p, circle, rotate, vheight)(*np.indices(data.shape)) - data) / err)
+    if autoderiv == 0:
+        # the analytic derivative, while not terribly difficult, is less efficient and useful.  I only bothered
+        # putting it here because I was instructed to do so for a class project - please ask if you would like 
+        # this feature implemented
+        raise ValueError("I'm sorry, I haven't implemented this feature yet.")
+    else:
+        p, cov, infodict, errmsg, success = optimize.leastsq(errorfunction, params, full_output=1)
+    if return_all == 0:
+        return p
+    elif return_all == 1:
+        return p, cov, infodict, errmsg
--- tigger-lsm-1.7.0.orig/Tigger/__init__.py
+++ tigger-lsm-1.7.0/Tigger/__init__.py
@@ -1,71 +1,71 @@
-# -*- coding: utf-8 -*-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import sys
-
-import Kittens.config
-
-from Tigger.Models.Formats import load, save, listFormats
-
-__version__ = "1.7.0"
-
-release_string = __version__
-svn_revision_string = __version__
-svn_revision_html = __version__
-
-matplotlib_nuked = False
-
-startup_dprint = startup_dprintf = lambda *dum: None
-_verbosity = Kittens.utils.verbosity(name="tigger")
-dprint = _verbosity.dprint
-dprintf = _verbosity.dprintf
-
-
-def import_pyfits():
-    # leaving this here for backwards compatibility
-    from astropy.io import fits as pyfits
-    return pyfits
-
-
-def nuke_matplotlib():
-    """Some people think nothing of importing matplotlib at every opportunity, with no regard
-    to consequences. Tragically, some of these people also write Python code, and some of them
-    are responsible for astLib. Seriously man, if I just want to pull in WCS support, why the fuck
-    do I need the monstrous entirety of matplotlib to come along with it, especially since it
-    kills things like Qt outright?
-    This function prevents such perversitities from happening, by inserting dummy modules
-    into the sys.modules dict. Call nuke_matplotlib() once, and all further attempts to
-    import matplotlib by any other code will be cheerfully ignored.
-    """
-    global matplotlib_nuked
-    if 'pylab' not in sys.modules:
-        # replace the modules referenced by astLib by dummy_module objects, which return a dummy callable for every attribute
-        class dummy_module(object):
-            def __getattr__(self, name):
-                return 'nowhere' if name == '__file__' else (lambda *args, **kw: True)
-
-        sys.modules['pylab'] = sys.modules['matplotlib'] = sys.modules['matplotlib.patches'] = dummy_module()
-        matplotlib_nuked = True
+# -*- coding: utf-8 -*-
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import sys
+
+import Kittens.config
+
+from Tigger.Models.Formats import load, save, listFormats
+
+__version__ = "1.7.0"
+
+release_string = __version__
+svn_revision_string = __version__
+svn_revision_html = __version__
+
+matplotlib_nuked = False
+
+startup_dprint = startup_dprintf = lambda *dum: None
+_verbosity = Kittens.utils.verbosity(name="tigger")
+dprint = _verbosity.dprint
+dprintf = _verbosity.dprintf
+
+
+def import_pyfits():
+    # leaving this here for backwards compatibility
+    from astropy.io import fits as pyfits
+    return pyfits
+
+
+def nuke_matplotlib():
+    """Some people think nothing of importing matplotlib at every opportunity, with no regard
+    to consequences. Tragically, some of these people also write Python code, and some of them
+    are responsible for astLib. Seriously man, if I just want to pull in WCS support, why the fuck
+    do I need the monstrous entirety of matplotlib to come along with it, especially since it
+    kills things like Qt outright?
+    This function prevents such perversitities from happening, by inserting dummy modules
+    into the sys.modules dict. Call nuke_matplotlib() once, and all further attempts to
+    import matplotlib by any other code will be cheerfully ignored.
+    """
+    global matplotlib_nuked
+    if 'pylab' not in sys.modules:
+        # replace the modules referenced by astLib by dummy_module objects, which return a dummy callable for every attribute
+        class dummy_module(object):
+            def __getattr__(self, name):
+                return 'nowhere' if name == '__file__' else (lambda *args, **kw: True)
+
+        sys.modules['pylab'] = sys.modules['matplotlib'] = sys.modules['matplotlib.patches'] = dummy_module()
+        matplotlib_nuked = True
--- tigger-lsm-1.7.0.orig/Tigger/bin/tigger-convert
+++ tigger-lsm-1.7.0/Tigger/bin/tigger-convert
@@ -1,1078 +1,1078 @@
-#!/usr/bin/python
-# -*- coding: utf-8 -*-
-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import glob
-import math
-import re
-import sys
-import traceback
-
-import numpy
-import os.path
-
-DEG = math.pi / 180
-
-NATIVE = "Tigger"
-
-
-def Jones2Mueller_circular(J):
-    S = numpy.matrix([[1, 0, 0, 1], [0, 1, 1j, 0], [0, 1, -1j, 0], [1, 0, 0, -1]])
-    # Compute the Mueller matrix
-    MM = (S.I) * numpy.kron(J, J.H) * S
-    return numpy.real(MM)
-
-
-def Jones2Mueller_linear(J):
-    S = numpy.matrix([[1, 1, 0, 0], [0, 0, 1, 1j], [0, 0, 1, -1j], [1, -1, 0, 0]])
-    # Compute the Mueller matrix
-    MM = (S.I) * numpy.kron(J, J.H) * S
-    return numpy.real(MM)
-
-
-## Griffin's old version, for linear. Possibly the order is wrong
-#  A=numpy.matrix([[1,0,0,1],[1,0,0,-1],[0,1,1,0],[0,1j,-1j,0]])
-#  M=A*numpy.kron(J,J.conj())*numpy.linalg.inv(A)
-#  return numpy.real(M)
-
-def arc2lm(l0, m0, arclen=2. * numpy.pi, nsteps=360):
-    """Return cartesian positions that sample an arc of a circle (similar to numpy.linspace)
-    l0,m0: initial cartesian position to determine radius and starting point
-    arclen: angle, in radians, to sample, value should be between 0 and 2pi
-    nsteps: number of samples"""
-    r = numpy.sqrt(float(l0) ** 2. + float(m0) ** 2.)
-    angle = numpy.arctan2(m0, l0)
-    da = numpy.linspace(0., arclen, num=nsteps)
-    l = r * numpy.cos(angle + da)
-    m = r * numpy.sin(angle + da)
-    return l, m
-
-
-def rotatelm(l0, m0, rotangle):
-    """Rotate (l0,m0) to a new (l,m) based on angle"""
-    r = numpy.sqrt(float(l0) ** 2. + float(m0) ** 2.)
-    angle = numpy.arctan2(m0, l0)
-    l = r * numpy.cos(angle + rotangle)
-    m = r * numpy.sin(angle + rotangle)
-    return l, m
-
-
-if __name__ == '__main__':
-    import Kittens.utils
-
-    _verbosity = Kittens.utils.verbosity(name="convert-model")
-    dprint = _verbosity.dprint
-    dprintf = _verbosity.dprintf
-
-    # find Tigger
-    try:
-        import Tigger
-    except ImportError:
-        dirname = os.path.dirname(os.path.realpath(__file__))
-        # go up the directory tree looking for directory "Tigger"
-        while len(dirname) > 1:
-            if os.path.basename(dirname) == "Tigger":
-                break
-            dirname = os.path.dirname(dirname)
-        else:
-            print("Unable to locate the Tigger directory, it is not a parent of %s. Please check your installation"
-                    "and/or PYTHONPATH." % os.path.realpath( __file__))
-            sys.exit(1)
-        sys.path.append(os.path.dirname(dirname))
-        try:
-            import Tigger
-        except:
-            print("Unable to import the Tigger package from %s. Please check your installation and PYTHONPATH." %
-                    dirname)
-            sys.exit(1)
-
-    # some things can implicitly invoke matplotlib, which can cry when no X11 is around
-    # so to make sure thingfs work in pipelines, we explicitly disable this here, unless we're asked for plots
-    if not "--enable-plots" in sys.argv:
-        Tigger.nuke_matplotlib();  # don't let the door hit you in the ass, sucka
-
-    from Tigger import Coordinates
-    import Tigger.Models.Formats
-    import Tigger.Models.ModelClasses
-
-    AUTO = "auto"
-    full_formats = Tigger.Models.Formats.listFormatsFull()
-    input_formats = [name for name, (load, save, doc, extensions) in full_formats if load] + [AUTO]
-    output_formats = [name for name, (load, save, doc, extensions) in full_formats if save] + [AUTO]
-
-    from Tigger.Models.Formats import ASCII
-
-    # setup some standard command-line option parsing
-    #
-    from optparse import OptionParser, OptionGroup
-
-    parser = OptionParser(usage="""%prog: sky_model [output_model]""",
-                          description="""Converts sky models into Tigger format and/or applies various processing options.
-Input 'sky_model' may be any model format importable by Tigger, recognized by extension, or explicitly specified via an option switch.
-'output_model' is always a native Tigger model. If an output model is not specfied, the conversion is done in-place if the input model
-is a Tigger model (-f switch must be specified to allow overwriting), or else a new filename is generated.""")
-
-    group = OptionGroup(parser, "Input/output and conversion options")
-    parser.add_option_group(group)
-    group.add_option("-f", "--force", action="store_true",
-                     help="Forces overwrite of output model.")
-    group.add_option("-t", "--type", choices=input_formats,
-                     help="Input model type (%s). Default is %%default." % (", ".join(input_formats)))
-    group.add_option("-o", "--output-type", choices=output_formats, metavar="TYPE",
-                     help="Output model type (%s). Default is %%default." % (", ".join(output_formats)))
-    group.add_option("-a", "--append", metavar="FILENAME", action="append",
-                     help="Append another model to input model. May be given multiple times.")
-    group.add_option("--append-type", choices=input_formats, metavar="TYPE",
-                     help="Appended model type (%s). Default is %%default." % (", ".join(input_formats)))
-    group.add_option("--format", type="string",
-                     help="""Input format, for ASCII or BBS tables. For ASCII tables, default is "%s". For BBS tables, the default format is specified in the file header.""" % ASCII.DefaultDMSFormatString)
-    group.add_option("--append-format", type="string", default="",
-                     help="""Format of appended file, for ASCII or BBS tables. Default is to use --format.""")
-    group.add_option("--output-format", type="string", metavar="FORMAT",
-                     help="""Output format, for ASCII or BBS tables. If the model was originally imported from an ASCII or BBS table, the default output format will be the same as the original format.""")
-    group.add_option("--help-format", action="store_true",
-                     help="Prints help on format strings.")
-    group.add_option("--min-extent", type="float", metavar="ARCSEC",
-                     help="Minimal source extent, when importing NEWSTAR or ASCII files. Sources with a smaller extent will be treated as point sources. Default is %default.")
-
-    group = OptionGroup(parser, "Options to select a subset of the input")
-    parser.add_option_group(group)
-    group.add_option("-T", "--tags", type="string", action="append", metavar="TAG",
-                     help="Extract sources with the specified tags.")
-    group.add_option("--select", type="string", metavar='TAG<>VALUE', action="append",
-                     help="Selects a subset of sources by comparing the named TAG to a float VALUE. '<>' " +
-                          "represents the comparison operator, and can be one of == (or =),!=,<=,<,>,>=. Alternatively, " +
-                          "you may use the FORTRAN-style operators .eq.,.ne.,.le.,.lt.,.gt.,.ge. Multiple " +
-                          "select options may be given, in which case the effect is a logical-AND. Note that VALUE may be "
-                          "followed by one of the characters d, m or s, in which case it will be converted from degrees, "
-                          "minutes or seconds into radians. This is useful for selections such as \"r<5d\".")
-    group.add_option("--remove-nans", action="store_true",
-                     help="Removes the named source(s) from the model. NAME may contain * and ? wildcards.")
-
-    group = OptionGroup(parser, "Options to manipulate fluxes etc.")
-    parser.add_option_group(group)
-    group.add_option("--app-to-int", action="store_true",
-                     help="Treat fluxes as apparent, and rescale them into intrinsic using the " +
-                          "supplied primary beam model (see --primary-beam option).")
-    group.add_option("--int-to-app", action="store_true",
-                     help="Treat fluxes as intrinsic, and rescale them into apparent using the " +
-                          "supplied primary beam model (see --primary-beam option).")
-    group.add_option("--newstar-app-to-int", action="store_true",
-                     help="Convert NEWSTAR apparent fluxes in input model to intrinsic. Only works for NEWSTAR or NEWSTAR-derived input models.")
-    group.add_option("--newstar-int-to-app", action="store_true",
-                     help="Convert NEWSTAR intrinsic fluxes in input model to apparent. Only works for NEWSTAR or NEWSTAR-derived input models.")
-    group.add_option("--center", type="string", metavar='COORDINATES',
-                     help="Override coordinates of the nominal field center specified in the input model. Use the form " +
-                          "\"Xdeg,Ydeg\" or \"Xdeg,Yrad\" to specify RA,Dec in degrees or radians, or else a " +
-                          "a pyrap.measures direction string of the form " + \
-                          "REF,C1,C2, for example \"j2000,1h5m0.2s,+30d14m15s\". See the pyrap.measures documentation for more details.")
-    group.add_option("--refresh-r", action="store_true",
-                     help="Recompute the 'r' (radial distance from center) attribute of each source based on the current field center.")
-    group.add_option("--ref-freq", type="float", metavar="MHz",
-                     help="Set or change the reference frequency of the model.")
-
-    group = OptionGroup(parser, "Primary beam-related options")
-    parser.add_option_group(group)
-    group.add_option("--primary-beam", type="string", metavar="EXPR",
-                     help="""Apply a primary beam expression to estimate apparent fluxes. Any valid Python expression using the variables 'r' and 'fq' is accepted. Use "refresh" to re-estimate fluxes using the current expression.
-                    Example (for the WSRT-like 25m dish PB): "cos(min(65*fq*1e-9*r,1.0881))**6".
-                    OR: give a set of FITS primary beam patterns of the form e.g. FILENAME_$(xy)_$(reim).fits, these are the same FITS files used in MeqTrees pybeams_fits.""")
-    group.add_option("--linear-pol", action="store_true",
-                     help="Use XY basis correlations for beam filenames and Mueller matrices. Default is RL.")
-    group.add_option("--fits-l-axis", type="string", default="-X",
-                     help="CTYPE for L axis in the FITS PB file. Note that our internal L points East (increasing RA), if the "
-                          "FITS beam axis points the opposite way, prefix the CTYPE with a '-'' character.")
-    group.add_option("--fits-m-axis", type="string", default="Y",
-                     help="CTYPE for M axis in the FITS PB file. Note that our internal M points North (increasing Dec), if the "
-                          "FITS beam axis points the opposite way, prefix the CTYPE with a '-'' character.")
-    group.add_option("--beam-freq", type="float", metavar="MHz",
-                     help="use given frequency for primary beam model, rather than the model reference frequency")
-    group.add_option("--beam-clip", type="float", metavar="GAIN", default=0.001,
-                     help="when using a FITS beam, clip (power) beam gains at this level to keep intrinsic source fluxes from blowing up. Sources below this beamgain will be tagged 'nobeam'. Default: %default")
-    group.add_option("--beam-spi", type="float", metavar="MHz",
-                     help="perform a spectral index fit to each source based on a frequency dependent FITS beam, requires --primary-beam option to be used with a FITS file. " +
-                          "Apply this spectral index to LSM sources. " +
-                          "Must supply a band width (centred on --beam-freq) over which the beam spi is estimated")
-    group.add_option("--force-beam-spi-wo-spectrum", action="store_true",
-                     help="apply beam-derived spectral indices even to sources without an intrinsic spectrum. Default " +
-                          "is to only apply to sources that already have a spectrum."
-                     )
-    group.add_option("--beam-nopol", action="store_true",
-                     help="apply intensity beam model only, ignoring polarization. Default is to use polarization."
-                     )
-    group.add_option("--beam-diag", action="store_true",
-                     help="use diagonal Jones terms only for beam model. Default is to use all four terms if available."
-                     )
-    group.add_option("--pa", type="float", default=None,
-                     help="Rotate the primary beam pattern through a parallactic angle (in degrees).")
-    group.add_option("--pa-range", type="str", default=None, metavar="FROM,TO",
-                     help="Rotate the primary beam pattern through a range of parallactic angles (in degrees) and use the average value over PA.")
-    group.add_option("--pa-from-ms", type="str", default=None, metavar="MS1[:FIELD1],MS2:[FIELD2],...",
-                     help="Rotate the primary beam pattern through a range of parallactic angles as given by the MS and field ID (default 0), " +
-                          "and take the average over time. This is more accurate than --pa-range.")
-    group.add_option("--beam-average-jones", action="store_true",
-                     help="Correct approach to rotational averaging is to convert Jones(PA) to Mueller(PA), then average " +
-                          "over PA. Tigger versions<=1.3.3 took the incorrect approach of averaging Jones over PA, then converting " +
-                          "to Mueller. Use this option to mimic the old approach.")
-
-    group = OptionGroup(parser, "Options to cluster and rename sources")
-    parser.add_option_group(group)
-    group.add_option("--cluster-dist", type="float", metavar="ARCSEC",
-                     help="Distance parameter for source clustering, 0 to disable. Default is %default.")
-    group.add_option("--rename", action="store_true",
-                     help="Rename sources according to the COPART (cluster ordering, P.A., radial distance, type) scheme")
-    group.add_option("--radial-step", type="float", metavar="ARCMIN",
-                     help="Size of one step in radial distance for the COPART scheme. Default is %default'.")
-    group.add_option("--merge-clusters", type="string", metavar="TAG(S)",
-                     help="Merge source clusters bearing the specified tags, replacing them with a " + "single point source. Multiple tags may be given separated by commas. " +
-                          "Use 'ALL' to merge all clusters.")
-    group.add_option("--prefix", type="string",
-                     help="Prefix all source names with the given string")
-
-    group = OptionGroup(parser, "Other model manipulation options")
-    parser.add_option_group(group)
-    group.add_option("--remove-source", type="string", action="append",
-                     metavar="NAME",
-                     help="Removes the named source(s) from the model. NAME may contain * and ? wildcards.")
-    group.add_option("--add-brick", type="string", action="append",
-                     metavar="NAME:FILE[:PAD_FACTOR:[TAGS:...]]",
-                     help="Adds a uv-brick to the model. NAME is a source name, FILE is a " +
-                          "FITS file, PAD_FACTOR is set to 1 if not specified. TAGS is a list of boolean flags.")
-    group.add_option("--recenter", type="string", metavar='COORDINATES',
-                     help="Shift the sky model from the nominal center to a different field center. COORDINATES specified as per the --center option.")
-
-    group = OptionGroup(parser, "Debugging and verbosity options")
-    parser.add_option_group(group)
-    group.add_option("-v", "--verbose", action="count",
-                     help="increases verbosity.")
-    group.add_option("-d", "--debug", dest="debug", type="string", action="append", metavar="Context=Level",
-                     help="(for debugging Python code) sets verbosity level of the named Python context. May be used multiple times.")
-    group.add_option("--enable-plots", action="store_true",
-                     help="enables various diagnostic plots")
-
-    parser.set_defaults(cluster_dist=60, min_extent=0, format=None, type='auto', output_type='auto', radial_step=10,
-                        ref_freq=-1)
-
-    (options, rem_args) = parser.parse_args()
-    min_extent = (options.min_extent / 3600) * DEG
-
-    if options.help_format:
-        print(ASCII.FormatHelp)
-        sys.exit(0)
-
-    # get filenames
-    if len(rem_args) == 1:
-        skymodel = rem_args[0]
-        output = None
-    elif len(rem_args) == 2:
-        skymodel, output = rem_args
-    else:
-        parser.error("Incorrect number of arguments. Use -h for help.")
-
-    if options.app_to_int and options.int_to_app:
-        parser.error("Can't use --app-to-int and --int-to-app together.")
-    if options.newstar_app_to_int and options.newstar_int_to_app:
-        parser.error("Can't use --newstar-app-to-int and --newstar-int-to-app together.")
-
-    global measures_dmdq
-    measures_dmdq = None
-
-
-    def pyrap_dmdq():
-        """Helper function: imports pyrap.measures, and returns dm,dq objects"""
-        global measures_dmdq
-        if measures_dmdq is None:
-            try:
-                import pyrap.measures
-                import pyrap.quanta
-            except:
-                traceback.print_exc()
-                print("Failed to import pyrap.measures, which is required by one of the options you specified.")
-                print("You probably need to install the 'pyrap' package for this to work.")
-                sys.exit(1)
-            measures_dmdq = pyrap.measures.measures(), pyrap.quanta
-        return measures_dmdq
-
-
-    def convert_coordinates(coords):
-        """Converts a measures coordinate string into a ra,dec pair (radians at J2000)"""
-        match = re.match("^([\d.]+)(rad|deg|),([-]?[\d.]+)(rad|deg|)$", coords)
-        if match:
-            ra = float(match.group(1))
-            dec = float(match.group(3))
-            return ra * (DEG if match.group(2) == "deg" else 1), dec * (DEG if match.group(4) == "deg" else 1)
-        dm, dq = pyrap_dmdq()
-        try:
-            coord_dir = dm.direction(*(coords.split(',')))
-            coord_dir = dm.measure(coord_dir, 'j2000')
-            qq = dm.get_value(coord_dir)
-            return [q.get_value('rad') for q in qq]
-        except:
-            print("Error parsing or converting coordinate string '%s', see traceback:" % coords)
-            traceback.print_exc()
-            sys.exit(1)
-
-
-    # figure out center and recenter option
-    if options.recenter:
-        recenter_radec = convert_coordinates(options.recenter)
-    if options.center:
-        center_radec = convert_coordinates(options.center)
-        options.refresh_r = True
-    else:
-        center_radec = None
-
-    # check the 'select' option
-    select_predicates = {
-        '=': lambda x, y: x == y,
-        '==': lambda x, y: x == y,
-        '!=': lambda x, y: x != y,
-        '>=': lambda x, y: x >= y,
-        '<=': lambda x, y: x <= y,
-        '>': lambda x, y: x > y,
-        '<': lambda x, y: x < y,
-        '.eq.': lambda x, y: x == y,
-        '.ne.': lambda x, y: x != y,
-        '.ge.': lambda x, y: x >= y,
-        '.le.': lambda x, y: x <= y,
-        '.gt.': lambda x, y: x > y,
-        '.lt.': lambda x, y: x < y
-    }
-    select_units = dict(d=DEG, m=DEG / 60, s=DEG / 3600)
-
-    selections = []
-    for selstr in (options.select or []):
-        match = re.match("^(?i)([^=<>!.]+)(%s)([^dms]+)([dms])?" % "|".join(
-            [key.replace('.', '\.') for key in list(select_predicates.keys())]), selstr)
-        if not match:
-            parser.error("Malformed --select string '%s'." % selstr)
-        try:
-            value = float(match.group(3))
-        except:
-            parser.error("Malformed --select string '%s': right-hand side is not a number." % selstr)
-        scale = select_units.get(match.group(4), 1.)
-        selections.append((selstr, match.group(1), select_predicates[match.group(2).lower()], value * scale))
-
-    # figure out input type
-    try:
-        input_type, import_func, dum, input_doc = Tigger.Models.Formats.resolveFormat(skymodel,
-                                                                                      options.type if options.type != AUTO else None)
-    except:
-        print("Unable to determine model type for %s, please specify one explicitly with the -t/--type option." % skymodel)
-        sys.exit(1)
-
-    # figure out output type, if explicitly specified
-    output_type = None
-    if output is None and options.output_type == AUTO:
-        options.output_type = "Tigger"
-
-    if options.output_type != AUTO:
-        output_type, dum, export_func, output_doc = Tigger.Models.Formats.getFormat(options.output_type)
-        output_extensions = Tigger.Models.Formats.getFormatExtensions(options.output_type)
-        if not export_func:# or not extensions: #not defined @oms
-            print("Output model type '%s' is not supported." % options.output_type)
-            sys.exit(1)
-
-    # figure out output name, if not specified
-    if output is None:
-        if not output_type:
-            print("An output filename and/or an explicit output model type (-o/--output-type) must be specfified.")
-            sys.exit(1)
-        # get base input name
-        # if input extension is "lsm.html", then split off two extensions, not just one
-        basename = os.path.splitext(skymodel)[0]
-        if skymodel.endswith(".lsm.html"):
-            basename = os.path.splitext(basename)[0]
-        output = basename + output_extensions[0]
-    # else output name is specified, use this to determine format unless it is explicitly set
-    elif not output_type:
-        try:
-            output_type, dum, export_func, output_doc = Tigger.Models.Formats.resolveFormat(output, None)
-        except:
-            export_func = None
-        if not export_func:
-            print("Unable to determine model type for %s, please specify one explicitly with the -o/--output-type option." % output)
-            sys.exit(1)
-
-    # check if we need to overwrite
-    if os.path.exists(output) and not options.force:
-        print("Output file %s already exists. Use the -f switch to overwrite." % output)
-        sys.exit(1)
-
-    print("Reading %s (%s)" % (skymodel, input_doc))
-
-    # load the model
-    try:
-        model = import_func(skymodel, min_extent=min_extent, format=options.format, center=center_radec,
-                            verbose=options.verbose)
-    except Exception as exc:
-        if options.verbose:
-            traceback.print_exc()
-        print("Error loading model:", str(exc))
-        sys.exit(1)
-    sources = model.sources
-    if not sources:
-        print("Input model %s contains no sources" % skymodel)
-    else:
-        print("Model contains %d sources" % len(sources))
-
-    # append, if specified
-    if options.append:
-        for modelnum, filename in enumerate(options.append):
-            # figure out input type
-            try:
-                append_type, append_func, dum, append_doc = Tigger.Models.Formats.resolveFormat(filename,
-                                                                                                options.append_type if options.append_type != AUTO else None)
-            except:
-                print("Unable to determine model type for %s, please specify one explicitly with the --append-type option." % filename)
-                sys.exit(1)
-            print("Reading %s (%s)" % (filename, append_doc))
-            # read model to be appended
-            model2 = append_func(filename, min_extent=min_extent, format=options.append_format or options.format)
-            if model2.sources:
-                sources += model2.sources
-                for src in model2.sources:
-                    src.name = "M%d:%s" % (modelnum, src.name)
-                # recompute 'r' attribute (unless --center is in effect, in which case it's going to be done anyway below)
-                if options.refresh_r:
-                    for src in model2.sources:
-                        src.setAttribute('r', Coordinates.angular_dist_pos_angle(ra0, dec0, *model.fieldCenter())[0])
-            print("Appended %d sources from %s (%s)" % (len(model2.sources), filename, append_doc))
-
-    # apply center, if specified
-    if options.center:
-        print("Center of field set to %s" % options.center)
-        model.setFieldCenter(*center_radec)
-
-    # apply selection by tag
-    if options.tags:
-        tags = []
-        for ot in options.tags:
-            tags += ot.split(",")
-        for tag in tags:
-            sources = [src for src in sources if getattr(src, tag, False)]
-        if not sources:
-            print("No sources left after selection by tag (-T/--tag) has been applied.")
-            sys.exit(0)
-        print("Selection by tag (%s) reduces this to %d sources" % (", ".join(options.tags), len(sources)))
-
-    # apply selection by NaN
-    if options.remove_nans:
-        sources = [src for src in sources if not any([math.isnan(x)
-                                                      for x in (src.pos.ra, src.pos.dec, src.flux.I)])]
-        if not sources:
-            print("No sources left after applying --remove-nans.")
-            sys.exit(0)
-        print("Removing NaN positions and fluxes reduces this to %d sources" % len(sources))
-
-    # remove sources
-    if options.remove_source:
-        import fnmatch
-
-        remove_names = set()
-        for patt in options.remove_source:
-            if patt[0] == "'" and patt[-1] == "'":
-                patt = patt[1:-1]
-            match = fnmatch.filter([src.name for src in sources], patt.replace("\\", ""))
-            remove_names.update(match)
-            print("Removing sources: %s matches %s" % (patt, ",".join(sorted(match))))
-        sources = [src for src in sources if src.name not in remove_names]
-
-    # add brick
-    if options.add_brick:
-        for brickspec in options.add_brick:
-            # get names, check for uniqueness
-            try:
-                ff = brickspec.split(':')
-                srcname = ff[0]
-                fitsfile = ff[1]
-                pad = float(ff[2] or '1') if len(ff) > 2 else 1
-                tags = ff[3:] if len(ff) > 3 else []
-            except:
-                parser.error("Invalid --add-brick setting %s" % brickspec)
-            if [src.name for src in sources if src.name == name]:
-                print("Error: model already contains a source named '%s'" % name)
-            # add brick
-            from astropy.io import fits as pyfits
-            from astLib.astWCS import WCS
-
-            input_hdu = pyfits.open(fitsfile)[0]
-            hdr = input_hdu.header
-            max_flux = float(input_hdu.data.max())
-            wcs = WCS(hdr, mode='pyfits')
-            # Get reference pixel coordinates
-            # wcs.getCentreWCSCoords() doesn't work, as that gives us the middle of the image
-            # So scan the header to get the CRPIX values
-            ra0 = dec0 = 1
-            for iaxis in range(hdr['NAXIS']):
-                axs = str(iaxis + 1)
-                name = hdr.get('CTYPE' + axs, axs).upper()
-                if name.startswith("RA"):
-                    ra0 = hdr.get('CRPIX' + axs, 1) - 1
-                elif name.startswith("DEC"):
-                    dec0 = hdr.get('CRPIX' + axs, 1) - 1
-            # convert pixel to degrees
-            ra0, dec0 = wcs.pix2wcs(ra0, dec0)
-            ra0 *= DEG
-            dec0 *= DEG
-            sx, sy = wcs.getHalfSizeDeg()
-            sx *= DEG
-            sy *= DEG
-            nx, ny = input_hdu.data.shape[-1:-3:-1]
-            from Tigger.Models import ModelClasses, SkyModel
-
-            pos = ModelClasses.Position(ra0, dec0)
-            flux = ModelClasses.Flux(max_flux)
-            shape = ModelClasses.FITSImage(sx, sy, 0, fitsfile, nx, ny, pad=pad)
-            source = SkyModel.Source(srcname, pos, flux, shape=shape)
-            for tag in tags:
-                source.setAttribute(tag, True)
-            if not options.refresh_r:
-                source.setAttribute('r', Coordinates.angular_dist_pos_angle(ra0, dec0, *model.fieldCenter())[0])
-            sources.append(source)
-            print("Adding FITS source %s (%s,pad=%f) with tags %s" % (srcname, fitsfile, pad, tags))
-
-    # convert apparent flux to intrinsic using the NEWSTAR beam gain
-    if options.newstar_app_to_int:
-        nsrc = 0
-        for src in sources:
-            bg = getattr(src, 'newstar_beamgain', None)
-            if getattr(src, 'flux_apparent', None) and bg is not None:
-                src.setAttribute('Iapp', src.flux.I)
-                for pol in 'IQUV':
-                    if hasattr(src.flux, pol):
-                        setattr(src.flux, pol, getattr(src.flux, pol) / bg)
-                src.removeAttribute('flux_apparent')
-                src.setAttribute('flux_intrinsic', True)
-                nsrc += 1
-        print("Converted NEWSTAR apparent to intrinsic flux for %d model sources" % nsrc)
-        if len(sources) != nsrc:
-            print("  (%d sources were skipped for whatever reason.)" % (len(model.sources) - nsrc))
-    elif options.newstar_int_to_app:
-        nsrc = 0
-        for src in sources:
-            bg = getattr(src, 'newstar_beamgain', None)
-            if getattr(src, 'flux_intrinsic', None) and bg is not None:
-                src.setAttribute('Iapp', src.flux.I * bg)
-                for pol in 'IQUV':
-                    if hasattr(src.flux, pol):
-                        setattr(src.flux, pol, getattr(src.flux, pol) * bg)
-                src.removeAttribute('flux_intrinsic')
-                src.setAttribute('flux_apparent', True)
-                nsrc += 1
-        print("Converted NEWSTAR apparent to intrinsic flux for %d model sources" % nsrc)
-        if len(sources) != nsrc:
-            print("  (%d sources were skipped for whatever reason.)" % (len(model.sources) - nsrc))
-
-    # set refrence frequency
-    if options.ref_freq >= 0:
-        model.setRefFreq(options.ref_freq * 1e+6)
-        print("Setting reference frequency to %f MHz" % options.ref_freq)
-
-    # recenter
-    if options.recenter:
-        print("Shifting model to new center %s" % options.recenter)
-        ra0, dec0 = model.fieldCenter()
-        field_center = ra1, dec1 = recenter_radec
-        ddec = dec1 - dec0
-        cosd0, sind0 = math.cos(ddec), math.sin(ddec)
-        for src in sources:
-            ra, dec = src.pos.ra, src.pos.dec
-            x, y, z = math.cos(ra - ra0) * math.cos(dec), math.sin(ra - ra0) * math.cos(dec), math.sin(dec)
-            x1 = cosd0 * x - sind0 * z
-            y1 = y
-            z1 = sind0 * x + cosd0 * z
-            src.pos.ra = ra1 + (math.atan2(y1, x1) if (x1 or y1) else 0)
-            src.pos.dec = math.asin(z1)
-        # reset model center
-        model.setFieldCenter(ra1, dec1)
-
-    # recompute radial distance
-    if options.refresh_r:
-        print("Recomputing the 'r' attribute based on the field center")
-        model.recomputeRadialDistance()
-
-
-    # select
-    def getTagValue(src, tag):
-        """Helper function: looks for the given tag in the source, or in its sub-objects"""
-        for obj in src, src.pos, src.flux, getattr(src, 'shape', None), getattr(src, 'spectrum', None):
-            if obj is not None and hasattr(obj, tag):
-                return getattr(obj, tag)
-        return None
-
-
-    for selstr, tag, predicate, value in selections:
-        # get tag value
-        srctag = [(src, getTagValue(src, tag)) for src in model.sources]
-        sources = [src for src, tag in srctag if tag is not None and predicate(tag, value)]
-        print("Selection '%s' leaves %d out of %d sources" % (selstr, len(sources), len(model.sources)))
-        if len(sources) != len(model.sources):
-            model.setSources(sources)
-
-    # set PB expression and estimate apparent fluxes
-    pb = options.primary_beam
-    if pb == "refresh":
-        pb = model.primaryBeam()
-        if pb:
-            print("Recalculating apparent fluxes")
-        else:
-            print("No primary beam expression in model, ignoring '--primary-beam refresh' option")
-    if options.app_to_int or options.int_to_app:
-        pb = pb or model.primaryBeam()
-        if pb:
-            print("Converting apparent fluxes to intrinsic" if options.app_to_int else "Converting intrinsic fluxes to apparent")
-        else:
-            print("No primary beam expression in model and no --primary-beam option given, cannot convert between apparent and intrinsic.")
-            sys.exit(1)
-    if pb:
-        fitsBeam = False
-        if pb.lower().endswith('.fits'):  # if pb is a FITS file, load interpolator
-            fitsBeam = True
-
-            # Following code is nicked from Cattery/Siamese/OMS/pybeams_fits.py
-            CORRS_XY = "xx", "xy", "yx", "yy"
-            CORRS_RL = "rr", "rl", "lr", "ll"
-            REIM = "re", "im"
-            REALIMAG = dict(re="real", im="imag")
-
-            # get the Cattery
-            for varname in 'CATTERY_PATH', "MEQTREES_CATTERY_PATH":
-                if varname in os.environ:
-                    sys.path.append(os.environ[varname])
-
-            import Siamese.OMS.Utils as Utils
-
-
-            def make_beam_filename(filename_pattern, corr, reim):
-                """Makes beam filename for the given correlation and real/imaginary component (one of "re" or "im")"""
-                return Utils.substitute_pattern(filename_pattern,
-                                                corr=corr.lower(), xy=corr.lower(), CORR=corr.upper(), XY=corr.upper(),
-                                                reim=reim.lower(), REIM=reim.upper(), ReIm=reim.title(),
-                                                realimag=REALIMAG[reim].lower(), REALIMAG=REALIMAG[reim].upper(),
-                                                RealImag=REALIMAG[reim].title())
-
-
-            """Makes beam interpolator node for the given filename pattern."""
-            filename_real = []
-            filename_imag = []
-            # load beam interpolator
-            import Siamese.OMS.InterpolatedBeams as InterpolatedBeams
-
-            vbs = []
-            for icorr, corr in enumerate(CORRS_XY if options.linear_pol else CORRS_RL):
-                if icorr in (1, 2):
-                    print('  omitting %s beam due to --beam-diag' % corr)
-                    vbs.append(0)
-                else:
-                    # make FITS images or nulls for real and imaginary part
-                    filenames = [make_beam_filename(pb, corr, 're'), make_beam_filename(pb, corr, 'im')]
-                    print('Loading FITS Beams', filenames[0], filenames[1])
-                    vb = InterpolatedBeams.LMVoltageBeam(verbose=(options.verbose or 0) - 2, l_axis=options.fits_l_axis,
-                                                         m_axis=options.fits_m_axis)
-                    vb.read(*filenames)
-                    vbs.append(vb)
-
-            model.setPrimaryBeam(vbs)
-            # get frequency
-            # fq = model.refFreq() or 1.4e+9
-            beamRefFreq = (options.beam_freq or 0) * 1e+6 or model.refFreq() or 1424500000.12
-            print("Using FITS beams with reference frequency %f MHz" % (beamRefFreq * 1e-6))
-
-        else:  # else, assume pb is an expession
-            try:
-                pbexp = eval('lambda r,fq:' + pb)
-                dum = pbexp(0, 1e+9);  # evaluate at r=0 and 1 GHz as a test
-                if not isinstance(dum, float):
-                    raise TypeError("does not evaluate to a float")
-            except Exception as exc:
-                print("Bad primary beam expression '%s': %s" % (pb, str(exc)))
-                sys.exit(1)
-            model.setPrimaryBeam(pb)
-            # get frequency
-            # fq = model.refFreq() or 1.4e+9
-            fq = (options.beam_freq or 0) * 1e+6 or model.refFreq() or 1424500000.12
-            print("Using beam expression '%s' with reference frequency %f MHz" % (pb, fq * 1e-6))
-
-        nsrc = 0
-        # ensure that every source has an 'r' attribute
-        if not options.refresh_r:
-            for src in sources:
-                if not hasattr(src, 'r'):
-                    src.setAttribute('r',
-                                     Coordinates.angular_dist_pos_angle(src.pos.ra, src.pos.dec, *model.fieldCenter())[
-                                         0])
-        # evaluate sources
-        if not (options.app_to_int or options.int_to_app):
-            for src in sources:
-                r = getattr(src, 'r', None)
-                if r is not None:
-                    bg = pbexp(r, fq)
-                    src.setAttribute('beamgain', bg)
-                    src.setAttribute('Iapp', src.flux.I * bg)
-                    nsrc += 1
-            print("Applied primary beam expression to %d model sources" % nsrc)
-        else:
-            # precompute PAs if fitsBeams are used
-            if fitsBeam:
-                if options.pa_from_ms is not None:
-                    ms_strings = options.pa_from_ms.split(",")
-                    ms_field = []
-                    if len(ms_strings) > 1:
-                        for ms_string in ms_strings:
-                            match = re.match("^(.*?)(:[0-9]+)?$", ms_string)
-                            if match:
-                                msname, field = match.group(1), int(match.group(2)[1:]) if match.group(2) else 0
-                            else:
-                                msname, field = options.pa_from_ms, 0
-                            ms_field.append((msname, field))
-                    else:
-                        ms_string = ms_strings[0]
-                        match = re.match("^(.*?)(:[0-9]+)?$", ms_string)
-                        if match:
-                            msname, field = match.group(1), int(match.group(2)[1:]) if match.group(2) else 0
-                            if os.path.exists(msname + "/SUBMSS"):
-                                ms_field = [(ms, field) for ms in glob.glob(msname + "/SUBMSS/*") if os.path.isdir(ms)]
-                            else:
-                                ms_field = [[msname, 0]]
-                    from pyrap.tables import table
-
-                    dm, dq = pyrap_dmdq()
-                    pas = []
-                    zenith = dm.direction('AZEL', '0deg', '90deg')
-                    for ms, field in ms_field:
-                        print("Getting PA range from MS %s, field %d" % (ms, field))
-                        tab = table(ms)
-                        antpos = table(tab.getkeyword("ANTENNA")).getcol("POSITION")
-                        ra, dec = table(tab.getkeyword("FIELD")).getcol("PHASE_DIR", field, 1)[0][0]
-                        # make position measure from antenna 0
-                        pos0 = dm.position('itrf', *[dq.quantity(x, 'm') for x in antpos[0]])
-                        dm.do_frame(pos0)
-                        # make direction measure from field centre
-                        fld = dm.direction('J2000', dq.quantity(ra, "rad"), dq.quantity(dec, "rad"))
-                        tab = tab.query("FIELD_ID==%d" % field)
-                        # get unique times
-                        times = numpy.array(sorted(set(tab.getcol("TIME")[~tab.getcol("FLAG_ROW")])))
-                        pa1 = [(dm.do_frame(dm.epoch("UTC", dq.quantity(t, "s"))) and dm.posangle(fld,
-                                                                                                  zenith).get_value(
-                            "rad")) for t in times]
-                        pas += pa1
-                        pa1 = numpy.array(pa1) / DEG
-                        if options.enable_plots:
-                            import pylab
-
-                            pylab.plot((times - times[0]) / 3600, pa1)
-                            pylab.xlabel("Time since beginning of observation, hours")
-                            pylab.ylabel("PA, degrees")
-                            pylab.savefig(os.path.basename(ms) + ".parangle.png")
-                            print("Saved plot " + os.path.basename(ms) + ".parangle.png")
-                        print("MS %s, PA range is %fdeg to %fdeg" % (ms, pa1[0], pa1[-1]))
-                    # get lm's rotated through those ranges
-                    pa_range = numpy.array(pas)
-                elif options.pa_range is not None:
-                    try:
-                        ang0, ang1 = list(map(float, options.pa_range.split(",", 1)))
-                    except:
-                        parser.error("Incorrect --pa-range option. FROM,TO values expected.")
-                    pa_range = numpy.arange(ang0, ang1 + 1, 1) * DEG
-                elif options.pa is not None:
-                    pa_range = options.pa * DEG
-                else:
-                    pa_range = None
-                if options.verbose:
-                    print("PA (deg):", " ".join(["%f" % (x / DEG) for x in pa_range]) if numpy.iterable(
-                        pa_range) else pa_range)
-            if options.enable_plots:
-                import pylab
-
-                pylab.figure()
-            for src in sources:
-                r = getattr(src, 'r', None)
-                if r is not None:
-                    if fitsBeam:
-                        # this is where the interpolator is called to determine the beam gain
-                        # AIPS Memo 27 Sin Projection
-                        ra0, dec0 = model.fieldCenter()
-                        # ra0 = sources[0].pos.ra
-                        # dec0 = sources[0].pos.dec
-                        l = math.cos(src.pos.dec) * math.sin(src.pos.ra - ra0)
-                        m = math.sin(src.pos.dec) * math.cos(dec0) - math.cos(src.pos.dec) * math.sin(dec0) * math.cos(
-                            src.pos.ra - ra0)
-
-                        # rotate through (range of) PA value(s), if such option is supplied above
-                        if pa_range is not None:
-                            l, m = rotatelm(l, m, pa_range)
-
-                        Jones2Mueller = Jones2Mueller_linear if options.linear_pol else Jones2Mueller_circular
-
-                        jones = [vb.interpolate(l, m, freq=beamRefFreq) if vb else numpy.array(0) for vb in vbs]
-                        # incorrect old-style Jones averaging
-                        if options.beam_average_jones:
-                            a, b, c, d = [j.mean() for j in jones]
-                            mueller = Jones2Mueller(numpy.matrix([[a, b], [c, d]]))
-                            if options.verbose > 1:
-                                print("%s: jones11 mean %f std %f" % (src.name, abs(a), abs(jones[0]).std()))
-                                print("%s: jones22 mean %f std %f" % (src.name, abs(d), abs(jones[3]).std()))
-                            if options.enable_plots:
-                                pylab.plot(abs(jones[0]), label="|J11| " + src.name)
-                        # new-style averaging of Mueller matrix
-                        else:
-                            muellers = [Jones2Mueller(numpy.matrix([[a, b], [c, d]])) for a, b, c, d in
-                                        numpy.broadcast(*jones)]
-                            mueller = sum(muellers) / len(muellers)
-                            if options.enable_plots:
-                                pylab.plot([m[0, 0] for m in muellers], label='M11 ' + src.name)
-                            if options.verbose > 1:
-                                print("%s: jones11 mean %f std %f" % (
-                                    src.name, abs(jones[0].mean()), abs(jones[0]).std()))
-                                print("%s: jones22 mean %f std %f" % (
-                                    src.name, abs(jones[3].mean()), abs(jones[3]).std()))
-                                print("%s: mueller11 mean %f std %f" % (
-                                    src.name, mueller[0, 0], numpy.std([m[0, 0] for m in muellers])))
-                        bg = mueller[0, 0]
-                        ##          OMS 6/7/2015: let's do full inversion now to correct all four polarizations
-                        if options.app_to_int:
-                            if options.beam_nopol:
-                                mueller = 1 / bg
-                            else:
-                                mueller = numpy.linalg.inv(mueller)
-                        else:
-                            if options.beam_nopol:
-                                mueller = bg
-                        ##            #for now, ignore full Stokes and just use Stokes' I
-                        #            src.setAttribute('beamgain',bg)
-                        nobeam = (bg < options.beam_clip)
-                        spi = freqgrid = spiBg = None
-                        # if no beam gain at this position, set appropriate tag
-                        if nobeam:
-                            src.setAttribute('nobeam', True)
-                            src.setAttribute('Iapp', src.flux.I)
-                        else:
-                            src.removeAttribute('nobeam')
-                            src.setAttribute('beamgain', bg)
-                            iquv0 = numpy.matrix([[getattr(src.flux, stokes, 0.)] for stokes in "IQUV"])
-                            iquv = mueller * iquv0
-                            if options.verbose > 1:
-                                print("%s: from %s to %s" % (src.name, iquv0.T, iquv.T))
-                            if options.app_to_int and hasattr(src.flux, "I"):
-                                src.setAttribute("Iapp", src.flux.I)
-                            for i, stokes in enumerate("IQUV"):
-                                if hasattr(src.flux, stokes):
-                                    setattr(src.flux, stokes, iquv[i, 0])
-                                # add spectral index of position in the beam
-                            src_spectrum = getattr(src, 'spectrum', None)
-                            if options.beam_spi and (src_spectrum or options.force_beam_spi_wo_spectrum):
-                                # determine spectral index by determining bg across the freqs (using only Stokes' I)
-                                import scipy.optimize
-
-                                bw = options.beam_spi * 1e+6 / 2
-                                # make a frequency grid of 10 points across the band
-                                # freqgrid = numpy.arange(beamRefFreq-bw,beamRefFreq+bw,bw/5)
-                                freqgrid = numpy.arange(beamRefFreq - bw, beamRefFreq + bw * 1.01, bw / 5)
-                                gxx = vbs[0].interpolate(l, m, freq=freqgrid, freqaxis=2)
-                                gyy = vbs[3].interpolate(l, m, freq=freqgrid, freqaxis=2)
-                                spiBg = (gxx * gxx.conj() + gyy * gyy.conj()).real
-                                spiBg = spiBg[:, 0, :]
-                                # power law fit
-                                logbg1 = numpy.log10(spiBg)
-                                logbg = numpy.log10(spiBg.mean(axis=0))
-                                logfreq = numpy.log10(freqgrid)
-                                fitfunc = lambda p, x: p[0] + p[1] * x
-                                errfunc = lambda p, x, y: (y - fitfunc(p, x))
-                                pinit = [10 ** logbg[0], 0.]
-                                if numpy.isinf(logbg).sum() > 0:
-                                    spi = 0.
-                                    amp0 = spiBg[0, 0]
-                                else:
-                                    out = scipy.optimize.leastsq(errfunc, pinit, args=(logfreq, logbg))
-                                    spi = out[0][1]
-                                    amp0 = 10. ** out[0][0]
-
-                                # look for Spectral Index in spi attribute
-                                # if no spectrum: add a SpectralIndex class to the source
-                                # else: add spectral index from PB to SI (int-to-app), subtract (app-to-int)
-                                if src_spectrum is None:
-                                    setattr(src, 'spectrum', Tigger.Models.ModelClasses.SpectralIndex(spi, beamRefFreq))
-                                else:
-                                    ispiVal = getattr(src_spectrum, 'spi', None)
-                                    setattr(src, 'spectrum', Tigger.Models.ModelClasses.SpectralIndex(ispiVal - spi,
-                                                                                                      beamRefFreq) if options.app_to_int else Tigger.Models.ModelClasses.SpectralIndex(
-                                        ispiVal + spi, beamRefFreq))
-
-                        if options.verbose:
-                            print(("%s: beamgain" % src.name), bg, "spi", spi, "clipped" if nobeam else "")
-                        #            if spiBg is not None:
-                        #              print src.name,repr(freqgrid),repr(spiBg.mean(0))
-
-                    else:
-                        bg = pbexp(r, fq)
-                        src.setAttribute('beamgain', bg)
-                        if hasattr(src.flux, 'I'):
-                            src.setAttribute('Iapp', src.flux.I if options.app_to_int else src.flux.I * bg)
-                        for stokes in "IQUV":
-                            x = getattr(src.flux, stokes, None)
-                            if x is not None:
-                                setattr(src.flux, stokes, x / bg if options.app_to_int else x * bg)
-                    nsrc += 1
-            if options.enable_plots:
-                pylab.legend()
-                pylab.savefig("beamgains.png")
-                print("Saved plot beamgains.png")
-            print("Converted between apparent/intrinsic flux for %d model sources" % nsrc)
-        if len(model.sources) != nsrc:
-            print("  (%d sources were skipped for whatever reason, probably they didn't have an 'r' attribute)" % (
-                    len(model.sources) - nsrc))
-
-    # rename using COPART
-    if options.rename:
-        print("Renaming sources using the COPART convention")
-        typecodes = dict(Gau="G", FITS="F")
-        # sort sources by decreasing flux
-        from past.builtins import cmp
-        from functools import cmp_to_key
-        sources = sorted(sources, key=cmp_to_key(lambda a, b: cmp(b.brightness(), a.brightness())))
-        projection = Coordinates.Projection.SinWCS(*model.fieldCenter())
-        # work out source clusters
-        l = numpy.zeros(len(sources), float)
-        m = numpy.zeros(len(sources), float)
-        for i, src in enumerate(sources):
-            l[i], m[i] = projection.lm(src.pos.ra, src.pos.dec)
-        if options.cluster_dist:
-            # now, convert to dist[i,j]: distance between sources i and j
-            dist = numpy.sqrt(
-                (l[:, numpy.newaxis] - l[numpy.newaxis, :]) ** 2 + (m[:, numpy.newaxis] - m[numpy.newaxis, :]) ** 2)
-            # cluster[i] is (N,R), where N is cluster number for source #i, and R is rank of that source in the cluster
-            # place source 0 into cluster 0,#0
-            cluster = [(0, 0)]
-            clustersize = [1]
-            clusterflux = [sources[0].brightness()]
-            dist0 = options.cluster_dist * DEG / 3600
-            for i in range(1, len(sources)):
-                src = sources[i]
-                # find closest brighter source, and assign to its cluster if close enough
-                imin = dist[i, :i].argmin()
-                if dist[i, imin] <= dist0:
-                    iclust, rank = cluster[imin]
-                    cluster.append((iclust, clustersize[iclust]))
-                    clustersize[iclust] += 1
-                    clusterflux[iclust] += src.brightness()
-                # else start new cluster from source
-                else:
-                    cluster.append((len(clustersize), 0))
-                    clustersize.append(1)
-                    clusterflux.append(src.brightness())
-        else:
-            cluster = [(i, 0) for i, src in enumerate(sources)]
-        # now go over and rename the sources
-        # make array of source names
-        chars = [chr(x) for x in range(ord('a'), ord('z') + 1)]
-        names = morenames = list(chars)
-        while len(names) < len(sources):
-            morenames = [ch + name for ch in chars for name in morenames]
-            names += morenames
-        # make a second version where the single-char names are capitalized
-        Names = list(names)
-        Names[:26] = [n.upper() for n in chars]
-        # now go over and rename the sources
-        clustername = {}
-        for i, src in enumerate(sources):
-            iclust, rank = cluster[i]
-            # for up name of cluster based on rank-0 source
-            if not rank:
-                # lookup radius, in units of arcmin
-                rad_min = math.sqrt(l[i] ** 2 + m[i] ** 2) * (60 / DEG)
-                # divide by radial step
-                rad = min(int(rad_min / options.radial_step), 10)
-                radchr = '0123456789x'[rad]
-                if rad_min > options.radial_step * 0.01:
-                    # convert p.a. to tens of degrees
-                    pa = math.atan2(l[i], m[i])
-                    if pa < 0:
-                        pa += math.pi * 2
-                    pa = round(pa / (DEG * 10)) % 36
-                    # make clustername
-                    clusname = clustername[iclust] = "%s%02d%s" % (Names[iclust], pa, radchr)
-                else:
-                    clusname = clustername[iclust] = "%s0" % (Names[iclust])
-                src.name = "%s%s" % (clusname, typecodes.get(src.typecode, ''))
-                if options.cluster_dist:
-                    src.setAttribute('cluster_lead', True)
-            else:
-                clusname = clustername[iclust]
-                src.name = "%s%s%s" % (clusname, names[rank - 1], typecodes.get(src.typecode, ''))
-            if options.cluster_dist:
-                src.setAttribute('cluster', clusname)
-                src.setAttribute('cluster_size', clustersize[iclust])
-                src.setAttribute('cluster_flux', clusterflux[iclust])
-    # check for duplicate names (if renaming, duplicate names cannot happen anyway, unless the naming algorithm above is broken)
-    else:
-        names = dict()
-        sources0 = sources
-        sources = []
-        for i, src in enumerate(sources0):
-            if src.name in names:
-                print("Duplicate source '%s' at #%d (first found at #%d), removing" % (src.name, i, names[src.name]))
-            else:
-                names[src.name] = i
-                sources.append(src)
-    # assign prefix to source names
-    if options.prefix:
-        print("Prefixing source names with '%s'" % options.prefix)
-        for src in sources:
-            src.name = options.prefix + src.name
-    # merge clusters
-    if options.merge_clusters:
-        tags = set(options.merge_clusters.split(',')) if options.merge_clusters != "ALL" else None
-        # build up dict of clusters
-        clusters = dict()
-        for src in sources:
-            clusname = getattr(src, 'cluster', '')
-            clusters.setdefault(clusname, {})[src.name] = src
-        # unclustered sources copied over as-is
-        new_sources = list(clusters.pop('', {}).values())
-        # next, deal with each cluster
-        for clusname, srcdict in clusters.items():
-            # leading source has the same name as the cluster
-            src0 = srcdict.get(clusname)
-            # if no leading source, or leading source not tagged, or length 1, then copy cluster as-is
-            if not src0 or len(srcdict) < 2 or (tags is not None and
-                                                not any([getattr(src0, tag, None) for tag in tags])):
-                new_sources += list(srcdict.values())
-            else:
-                # sum fluxes
-                for x in 'IQUV':
-                    if hasattr(src0.flux, x):
-                        setattr(src0.flux, x, sum([getattr(s.flux, x, 0) for s in srcdict.values()]))
-                if hasattr(src0, 'Iapp'):
-                    src0.Iapp = sum([getattr(s, 'Iapp', 0) for s in srcdict.values()])
-                new_sources.append(src0)
-                print("Merged cluster %s (%d sources)" % (src0.name, len(srcdict)))
-        sources = new_sources
-        model.setSources(sources)
-    # save output
-    print("Saving model containing %d sources to %s (%s)" % (len(sources), output, output_doc))
-    export_func(model, output, sources=sources, format=options.output_format or None)
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import glob
+import math
+import re
+import sys
+import traceback
+
+import numpy
+import os.path
+
+DEG = math.pi / 180
+
+NATIVE = "Tigger"
+
+
+def Jones2Mueller_circular(J):
+    S = numpy.matrix([[1, 0, 0, 1], [0, 1, 1j, 0], [0, 1, -1j, 0], [1, 0, 0, -1]])
+    # Compute the Mueller matrix
+    MM = (S.I) * numpy.kron(J, J.H) * S
+    return numpy.real(MM)
+
+
+def Jones2Mueller_linear(J):
+    S = numpy.matrix([[1, 1, 0, 0], [0, 0, 1, 1j], [0, 0, 1, -1j], [1, -1, 0, 0]])
+    # Compute the Mueller matrix
+    MM = (S.I) * numpy.kron(J, J.H) * S
+    return numpy.real(MM)
+
+
+## Griffin's old version, for linear. Possibly the order is wrong
+#  A=numpy.matrix([[1,0,0,1],[1,0,0,-1],[0,1,1,0],[0,1j,-1j,0]])
+#  M=A*numpy.kron(J,J.conj())*numpy.linalg.inv(A)
+#  return numpy.real(M)
+
+def arc2lm(l0, m0, arclen=2. * numpy.pi, nsteps=360):
+    """Return cartesian positions that sample an arc of a circle (similar to numpy.linspace)
+    l0,m0: initial cartesian position to determine radius and starting point
+    arclen: angle, in radians, to sample, value should be between 0 and 2pi
+    nsteps: number of samples"""
+    r = numpy.sqrt(float(l0) ** 2. + float(m0) ** 2.)
+    angle = numpy.arctan2(m0, l0)
+    da = numpy.linspace(0., arclen, num=nsteps)
+    l = r * numpy.cos(angle + da)
+    m = r * numpy.sin(angle + da)
+    return l, m
+
+
+def rotatelm(l0, m0, rotangle):
+    """Rotate (l0,m0) to a new (l,m) based on angle"""
+    r = numpy.sqrt(float(l0) ** 2. + float(m0) ** 2.)
+    angle = numpy.arctan2(m0, l0)
+    l = r * numpy.cos(angle + rotangle)
+    m = r * numpy.sin(angle + rotangle)
+    return l, m
+
+
+if __name__ == '__main__':
+    import Kittens.utils
+
+    _verbosity = Kittens.utils.verbosity(name="convert-model")
+    dprint = _verbosity.dprint
+    dprintf = _verbosity.dprintf
+
+    # find Tigger
+    try:
+        import Tigger
+    except ImportError:
+        dirname = os.path.dirname(os.path.realpath(__file__))
+        # go up the directory tree looking for directory "Tigger"
+        while len(dirname) > 1:
+            if os.path.basename(dirname) == "Tigger":
+                break
+            dirname = os.path.dirname(dirname)
+        else:
+            print("Unable to locate the Tigger directory, it is not a parent of %s. Please check your installation"
+                    "and/or PYTHONPATH." % os.path.realpath( __file__))
+            sys.exit(1)
+        sys.path.append(os.path.dirname(dirname))
+        try:
+            import Tigger
+        except:
+            print("Unable to import the Tigger package from %s. Please check your installation and PYTHONPATH." %
+                    dirname)
+            sys.exit(1)
+
+    # some things can implicitly invoke matplotlib, which can cry when no X11 is around
+    # so to make sure thingfs work in pipelines, we explicitly disable this here, unless we're asked for plots
+    if not "--enable-plots" in sys.argv:
+        Tigger.nuke_matplotlib();  # don't let the door hit you in the ass, sucka
+
+    from Tigger import Coordinates
+    import Tigger.Models.Formats
+    import Tigger.Models.ModelClasses
+
+    AUTO = "auto"
+    full_formats = Tigger.Models.Formats.listFormatsFull()
+    input_formats = [name for name, (load, save, doc, extensions) in full_formats if load] + [AUTO]
+    output_formats = [name for name, (load, save, doc, extensions) in full_formats if save] + [AUTO]
+
+    from Tigger.Models.Formats import ASCII
+
+    # setup some standard command-line option parsing
+    #
+    from optparse import OptionParser, OptionGroup
+
+    parser = OptionParser(usage="""%prog: sky_model [output_model]""",
+                          description="""Converts sky models into Tigger format and/or applies various processing options.
+Input 'sky_model' may be any model format importable by Tigger, recognized by extension, or explicitly specified via an option switch.
+'output_model' is always a native Tigger model. If an output model is not specfied, the conversion is done in-place if the input model
+is a Tigger model (-f switch must be specified to allow overwriting), or else a new filename is generated.""")
+
+    group = OptionGroup(parser, "Input/output and conversion options")
+    parser.add_option_group(group)
+    group.add_option("-f", "--force", action="store_true",
+                     help="Forces overwrite of output model.")
+    group.add_option("-t", "--type", choices=input_formats,
+                     help="Input model type (%s). Default is %%default." % (", ".join(input_formats)))
+    group.add_option("-o", "--output-type", choices=output_formats, metavar="TYPE",
+                     help="Output model type (%s). Default is %%default." % (", ".join(output_formats)))
+    group.add_option("-a", "--append", metavar="FILENAME", action="append",
+                     help="Append another model to input model. May be given multiple times.")
+    group.add_option("--append-type", choices=input_formats, metavar="TYPE",
+                     help="Appended model type (%s). Default is %%default." % (", ".join(input_formats)))
+    group.add_option("--format", type="string",
+                     help="""Input format, for ASCII or BBS tables. For ASCII tables, default is "%s". For BBS tables, the default format is specified in the file header.""" % ASCII.DefaultDMSFormatString)
+    group.add_option("--append-format", type="string", default="",
+                     help="""Format of appended file, for ASCII or BBS tables. Default is to use --format.""")
+    group.add_option("--output-format", type="string", metavar="FORMAT",
+                     help="""Output format, for ASCII or BBS tables. If the model was originally imported from an ASCII or BBS table, the default output format will be the same as the original format.""")
+    group.add_option("--help-format", action="store_true",
+                     help="Prints help on format strings.")
+    group.add_option("--min-extent", type="float", metavar="ARCSEC",
+                     help="Minimal source extent, when importing NEWSTAR or ASCII files. Sources with a smaller extent will be treated as point sources. Default is %default.")
+
+    group = OptionGroup(parser, "Options to select a subset of the input")
+    parser.add_option_group(group)
+    group.add_option("-T", "--tags", type="string", action="append", metavar="TAG",
+                     help="Extract sources with the specified tags.")
+    group.add_option("--select", type="string", metavar='TAG<>VALUE', action="append",
+                     help="Selects a subset of sources by comparing the named TAG to a float VALUE. '<>' " +
+                          "represents the comparison operator, and can be one of == (or =),!=,<=,<,>,>=. Alternatively, " +
+                          "you may use the FORTRAN-style operators .eq.,.ne.,.le.,.lt.,.gt.,.ge. Multiple " +
+                          "select options may be given, in which case the effect is a logical-AND. Note that VALUE may be "
+                          "followed by one of the characters d, m or s, in which case it will be converted from degrees, "
+                          "minutes or seconds into radians. This is useful for selections such as \"r<5d\".")
+    group.add_option("--remove-nans", action="store_true",
+                     help="Removes the named source(s) from the model. NAME may contain * and ? wildcards.")
+
+    group = OptionGroup(parser, "Options to manipulate fluxes etc.")
+    parser.add_option_group(group)
+    group.add_option("--app-to-int", action="store_true",
+                     help="Treat fluxes as apparent, and rescale them into intrinsic using the " +
+                          "supplied primary beam model (see --primary-beam option).")
+    group.add_option("--int-to-app", action="store_true",
+                     help="Treat fluxes as intrinsic, and rescale them into apparent using the " +
+                          "supplied primary beam model (see --primary-beam option).")
+    group.add_option("--newstar-app-to-int", action="store_true",
+                     help="Convert NEWSTAR apparent fluxes in input model to intrinsic. Only works for NEWSTAR or NEWSTAR-derived input models.")
+    group.add_option("--newstar-int-to-app", action="store_true",
+                     help="Convert NEWSTAR intrinsic fluxes in input model to apparent. Only works for NEWSTAR or NEWSTAR-derived input models.")
+    group.add_option("--center", type="string", metavar='COORDINATES',
+                     help="Override coordinates of the nominal field center specified in the input model. Use the form " +
+                          "\"Xdeg,Ydeg\" or \"Xdeg,Yrad\" to specify RA,Dec in degrees or radians, or else a " +
+                          "a pyrap.measures direction string of the form " + \
+                          "REF,C1,C2, for example \"j2000,1h5m0.2s,+30d14m15s\". See the pyrap.measures documentation for more details.")
+    group.add_option("--refresh-r", action="store_true",
+                     help="Recompute the 'r' (radial distance from center) attribute of each source based on the current field center.")
+    group.add_option("--ref-freq", type="float", metavar="MHz",
+                     help="Set or change the reference frequency of the model.")
+
+    group = OptionGroup(parser, "Primary beam-related options")
+    parser.add_option_group(group)
+    group.add_option("--primary-beam", type="string", metavar="EXPR",
+                     help="""Apply a primary beam expression to estimate apparent fluxes. Any valid Python expression using the variables 'r' and 'fq' is accepted. Use "refresh" to re-estimate fluxes using the current expression.
+                    Example (for the WSRT-like 25m dish PB): "cos(min(65*fq*1e-9*r,1.0881))**6".
+                    OR: give a set of FITS primary beam patterns of the form e.g. FILENAME_$(xy)_$(reim).fits, these are the same FITS files used in MeqTrees pybeams_fits.""")
+    group.add_option("--linear-pol", action="store_true",
+                     help="Use XY basis correlations for beam filenames and Mueller matrices. Default is RL.")
+    group.add_option("--fits-l-axis", type="string", default="-X",
+                     help="CTYPE for L axis in the FITS PB file. Note that our internal L points East (increasing RA), if the "
+                          "FITS beam axis points the opposite way, prefix the CTYPE with a '-'' character.")
+    group.add_option("--fits-m-axis", type="string", default="Y",
+                     help="CTYPE for M axis in the FITS PB file. Note that our internal M points North (increasing Dec), if the "
+                          "FITS beam axis points the opposite way, prefix the CTYPE with a '-'' character.")
+    group.add_option("--beam-freq", type="float", metavar="MHz",
+                     help="use given frequency for primary beam model, rather than the model reference frequency")
+    group.add_option("--beam-clip", type="float", metavar="GAIN", default=0.001,
+                     help="when using a FITS beam, clip (power) beam gains at this level to keep intrinsic source fluxes from blowing up. Sources below this beamgain will be tagged 'nobeam'. Default: %default")
+    group.add_option("--beam-spi", type="float", metavar="MHz",
+                     help="perform a spectral index fit to each source based on a frequency dependent FITS beam, requires --primary-beam option to be used with a FITS file. " +
+                          "Apply this spectral index to LSM sources. " +
+                          "Must supply a band width (centred on --beam-freq) over which the beam spi is estimated")
+    group.add_option("--force-beam-spi-wo-spectrum", action="store_true",
+                     help="apply beam-derived spectral indices even to sources without an intrinsic spectrum. Default " +
+                          "is to only apply to sources that already have a spectrum."
+                     )
+    group.add_option("--beam-nopol", action="store_true",
+                     help="apply intensity beam model only, ignoring polarization. Default is to use polarization."
+                     )
+    group.add_option("--beam-diag", action="store_true",
+                     help="use diagonal Jones terms only for beam model. Default is to use all four terms if available."
+                     )
+    group.add_option("--pa", type="float", default=None,
+                     help="Rotate the primary beam pattern through a parallactic angle (in degrees).")
+    group.add_option("--pa-range", type="str", default=None, metavar="FROM,TO",
+                     help="Rotate the primary beam pattern through a range of parallactic angles (in degrees) and use the average value over PA.")
+    group.add_option("--pa-from-ms", type="str", default=None, metavar="MS1[:FIELD1],MS2:[FIELD2],...",
+                     help="Rotate the primary beam pattern through a range of parallactic angles as given by the MS and field ID (default 0), " +
+                          "and take the average over time. This is more accurate than --pa-range.")
+    group.add_option("--beam-average-jones", action="store_true",
+                     help="Correct approach to rotational averaging is to convert Jones(PA) to Mueller(PA), then average " +
+                          "over PA. Tigger versions<=1.3.3 took the incorrect approach of averaging Jones over PA, then converting " +
+                          "to Mueller. Use this option to mimic the old approach.")
+
+    group = OptionGroup(parser, "Options to cluster and rename sources")
+    parser.add_option_group(group)
+    group.add_option("--cluster-dist", type="float", metavar="ARCSEC",
+                     help="Distance parameter for source clustering, 0 to disable. Default is %default.")
+    group.add_option("--rename", action="store_true",
+                     help="Rename sources according to the COPART (cluster ordering, P.A., radial distance, type) scheme")
+    group.add_option("--radial-step", type="float", metavar="ARCMIN",
+                     help="Size of one step in radial distance for the COPART scheme. Default is %default'.")
+    group.add_option("--merge-clusters", type="string", metavar="TAG(S)",
+                     help="Merge source clusters bearing the specified tags, replacing them with a " + "single point source. Multiple tags may be given separated by commas. " +
+                          "Use 'ALL' to merge all clusters.")
+    group.add_option("--prefix", type="string",
+                     help="Prefix all source names with the given string")
+
+    group = OptionGroup(parser, "Other model manipulation options")
+    parser.add_option_group(group)
+    group.add_option("--remove-source", type="string", action="append",
+                     metavar="NAME",
+                     help="Removes the named source(s) from the model. NAME may contain * and ? wildcards.")
+    group.add_option("--add-brick", type="string", action="append",
+                     metavar="NAME:FILE[:PAD_FACTOR:[TAGS:...]]",
+                     help="Adds a uv-brick to the model. NAME is a source name, FILE is a " +
+                          "FITS file, PAD_FACTOR is set to 1 if not specified. TAGS is a list of boolean flags.")
+    group.add_option("--recenter", type="string", metavar='COORDINATES',
+                     help="Shift the sky model from the nominal center to a different field center. COORDINATES specified as per the --center option.")
+
+    group = OptionGroup(parser, "Debugging and verbosity options")
+    parser.add_option_group(group)
+    group.add_option("-v", "--verbose", action="count",
+                     help="increases verbosity.")
+    group.add_option("-d", "--debug", dest="debug", type="string", action="append", metavar="Context=Level",
+                     help="(for debugging Python code) sets verbosity level of the named Python context. May be used multiple times.")
+    group.add_option("--enable-plots", action="store_true",
+                     help="enables various diagnostic plots")
+
+    parser.set_defaults(cluster_dist=60, min_extent=0, format=None, type='auto', output_type='auto', radial_step=10,
+                        ref_freq=-1)
+
+    (options, rem_args) = parser.parse_args()
+    min_extent = (options.min_extent / 3600) * DEG
+
+    if options.help_format:
+        print(ASCII.FormatHelp)
+        sys.exit(0)
+
+    # get filenames
+    if len(rem_args) == 1:
+        skymodel = rem_args[0]
+        output = None
+    elif len(rem_args) == 2:
+        skymodel, output = rem_args
+    else:
+        parser.error("Incorrect number of arguments. Use -h for help.")
+
+    if options.app_to_int and options.int_to_app:
+        parser.error("Can't use --app-to-int and --int-to-app together.")
+    if options.newstar_app_to_int and options.newstar_int_to_app:
+        parser.error("Can't use --newstar-app-to-int and --newstar-int-to-app together.")
+
+    global measures_dmdq
+    measures_dmdq = None
+
+
+    def pyrap_dmdq():
+        """Helper function: imports pyrap.measures, and returns dm,dq objects"""
+        global measures_dmdq
+        if measures_dmdq is None:
+            try:
+                import pyrap.measures
+                import pyrap.quanta
+            except:
+                traceback.print_exc()
+                print("Failed to import pyrap.measures, which is required by one of the options you specified.")
+                print("You probably need to install the 'pyrap' package for this to work.")
+                sys.exit(1)
+            measures_dmdq = pyrap.measures.measures(), pyrap.quanta
+        return measures_dmdq
+
+
+    def convert_coordinates(coords):
+        """Converts a measures coordinate string into a ra,dec pair (radians at J2000)"""
+        match = re.match("^([\d.]+)(rad|deg|),([-]?[\d.]+)(rad|deg|)$", coords)
+        if match:
+            ra = float(match.group(1))
+            dec = float(match.group(3))
+            return ra * (DEG if match.group(2) == "deg" else 1), dec * (DEG if match.group(4) == "deg" else 1)
+        dm, dq = pyrap_dmdq()
+        try:
+            coord_dir = dm.direction(*(coords.split(',')))
+            coord_dir = dm.measure(coord_dir, 'j2000')
+            qq = dm.get_value(coord_dir)
+            return [q.get_value('rad') for q in qq]
+        except:
+            print("Error parsing or converting coordinate string '%s', see traceback:" % coords)
+            traceback.print_exc()
+            sys.exit(1)
+
+
+    # figure out center and recenter option
+    if options.recenter:
+        recenter_radec = convert_coordinates(options.recenter)
+    if options.center:
+        center_radec = convert_coordinates(options.center)
+        options.refresh_r = True
+    else:
+        center_radec = None
+
+    # check the 'select' option
+    select_predicates = {
+        '=': lambda x, y: x == y,
+        '==': lambda x, y: x == y,
+        '!=': lambda x, y: x != y,
+        '>=': lambda x, y: x >= y,
+        '<=': lambda x, y: x <= y,
+        '>': lambda x, y: x > y,
+        '<': lambda x, y: x < y,
+        '.eq.': lambda x, y: x == y,
+        '.ne.': lambda x, y: x != y,
+        '.ge.': lambda x, y: x >= y,
+        '.le.': lambda x, y: x <= y,
+        '.gt.': lambda x, y: x > y,
+        '.lt.': lambda x, y: x < y
+    }
+    select_units = dict(d=DEG, m=DEG / 60, s=DEG / 3600)
+
+    selections = []
+    for selstr in (options.select or []):
+        match = re.match("^(?i)([^=<>!.]+)(%s)([^dms]+)([dms])?" % "|".join(
+            [key.replace('.', '\.') for key in list(select_predicates.keys())]), selstr)
+        if not match:
+            parser.error("Malformed --select string '%s'." % selstr)
+        try:
+            value = float(match.group(3))
+        except:
+            parser.error("Malformed --select string '%s': right-hand side is not a number." % selstr)
+        scale = select_units.get(match.group(4), 1.)
+        selections.append((selstr, match.group(1), select_predicates[match.group(2).lower()], value * scale))
+
+    # figure out input type
+    try:
+        input_type, import_func, dum, input_doc = Tigger.Models.Formats.resolveFormat(skymodel,
+                                                                                      options.type if options.type != AUTO else None)
+    except:
+        print("Unable to determine model type for %s, please specify one explicitly with the -t/--type option." % skymodel)
+        sys.exit(1)
+
+    # figure out output type, if explicitly specified
+    output_type = None
+    if output is None and options.output_type == AUTO:
+        options.output_type = "Tigger"
+
+    if options.output_type != AUTO:
+        output_type, dum, export_func, output_doc = Tigger.Models.Formats.getFormat(options.output_type)
+        output_extensions = Tigger.Models.Formats.getFormatExtensions(options.output_type)
+        if not export_func:# or not extensions: #not defined @oms
+            print("Output model type '%s' is not supported." % options.output_type)
+            sys.exit(1)
+
+    # figure out output name, if not specified
+    if output is None:
+        if not output_type:
+            print("An output filename and/or an explicit output model type (-o/--output-type) must be specfified.")
+            sys.exit(1)
+        # get base input name
+        # if input extension is "lsm.html", then split off two extensions, not just one
+        basename = os.path.splitext(skymodel)[0]
+        if skymodel.endswith(".lsm.html"):
+            basename = os.path.splitext(basename)[0]
+        output = basename + output_extensions[0]
+    # else output name is specified, use this to determine format unless it is explicitly set
+    elif not output_type:
+        try:
+            output_type, dum, export_func, output_doc = Tigger.Models.Formats.resolveFormat(output, None)
+        except:
+            export_func = None
+        if not export_func:
+            print("Unable to determine model type for %s, please specify one explicitly with the -o/--output-type option." % output)
+            sys.exit(1)
+
+    # check if we need to overwrite
+    if os.path.exists(output) and not options.force:
+        print("Output file %s already exists. Use the -f switch to overwrite." % output)
+        sys.exit(1)
+
+    print("Reading %s (%s)" % (skymodel, input_doc))
+
+    # load the model
+    try:
+        model = import_func(skymodel, min_extent=min_extent, format=options.format, center=center_radec,
+                            verbose=options.verbose)
+    except Exception as exc:
+        if options.verbose:
+            traceback.print_exc()
+        print("Error loading model:", str(exc))
+        sys.exit(1)
+    sources = model.sources
+    if not sources:
+        print("Input model %s contains no sources" % skymodel)
+    else:
+        print("Model contains %d sources" % len(sources))
+
+    # append, if specified
+    if options.append:
+        for modelnum, filename in enumerate(options.append):
+            # figure out input type
+            try:
+                append_type, append_func, dum, append_doc = Tigger.Models.Formats.resolveFormat(filename,
+                                                                                                options.append_type if options.append_type != AUTO else None)
+            except:
+                print("Unable to determine model type for %s, please specify one explicitly with the --append-type option." % filename)
+                sys.exit(1)
+            print("Reading %s (%s)" % (filename, append_doc))
+            # read model to be appended
+            model2 = append_func(filename, min_extent=min_extent, format=options.append_format or options.format)
+            if model2.sources:
+                sources += model2.sources
+                for src in model2.sources:
+                    src.name = "M%d:%s" % (modelnum, src.name)
+                # recompute 'r' attribute (unless --center is in effect, in which case it's going to be done anyway below)
+                if options.refresh_r:
+                    for src in model2.sources:
+                        src.setAttribute('r', Coordinates.angular_dist_pos_angle(ra0, dec0, *model.fieldCenter())[0])
+            print("Appended %d sources from %s (%s)" % (len(model2.sources), filename, append_doc))
+
+    # apply center, if specified
+    if options.center:
+        print("Center of field set to %s" % options.center)
+        model.setFieldCenter(*center_radec)
+
+    # apply selection by tag
+    if options.tags:
+        tags = []
+        for ot in options.tags:
+            tags += ot.split(",")
+        for tag in tags:
+            sources = [src for src in sources if getattr(src, tag, False)]
+        if not sources:
+            print("No sources left after selection by tag (-T/--tag) has been applied.")
+            sys.exit(0)
+        print("Selection by tag (%s) reduces this to %d sources" % (", ".join(options.tags), len(sources)))
+
+    # apply selection by NaN
+    if options.remove_nans:
+        sources = [src for src in sources if not any([math.isnan(x)
+                                                      for x in (src.pos.ra, src.pos.dec, src.flux.I)])]
+        if not sources:
+            print("No sources left after applying --remove-nans.")
+            sys.exit(0)
+        print("Removing NaN positions and fluxes reduces this to %d sources" % len(sources))
+
+    # remove sources
+    if options.remove_source:
+        import fnmatch
+
+        remove_names = set()
+        for patt in options.remove_source:
+            if patt[0] == "'" and patt[-1] == "'":
+                patt = patt[1:-1]
+            match = fnmatch.filter([src.name for src in sources], patt.replace("\\", ""))
+            remove_names.update(match)
+            print("Removing sources: %s matches %s" % (patt, ",".join(sorted(match))))
+        sources = [src for src in sources if src.name not in remove_names]
+
+    # add brick
+    if options.add_brick:
+        for brickspec in options.add_brick:
+            # get names, check for uniqueness
+            try:
+                ff = brickspec.split(':')
+                srcname = ff[0]
+                fitsfile = ff[1]
+                pad = float(ff[2] or '1') if len(ff) > 2 else 1
+                tags = ff[3:] if len(ff) > 3 else []
+            except:
+                parser.error("Invalid --add-brick setting %s" % brickspec)
+            if [src.name for src in sources if src.name == name]:
+                print("Error: model already contains a source named '%s'" % name)
+            # add brick
+            from astropy.io import fits as pyfits
+            from astLib.astWCS import WCS
+
+            input_hdu = pyfits.open(fitsfile)[0]
+            hdr = input_hdu.header
+            max_flux = float(input_hdu.data.max())
+            wcs = WCS(hdr, mode='pyfits')
+            # Get reference pixel coordinates
+            # wcs.getCentreWCSCoords() doesn't work, as that gives us the middle of the image
+            # So scan the header to get the CRPIX values
+            ra0 = dec0 = 1
+            for iaxis in range(hdr['NAXIS']):
+                axs = str(iaxis + 1)
+                name = hdr.get('CTYPE' + axs, axs).upper()
+                if name.startswith("RA"):
+                    ra0 = hdr.get('CRPIX' + axs, 1) - 1
+                elif name.startswith("DEC"):
+                    dec0 = hdr.get('CRPIX' + axs, 1) - 1
+            # convert pixel to degrees
+            ra0, dec0 = wcs.pix2wcs(ra0, dec0)
+            ra0 *= DEG
+            dec0 *= DEG
+            sx, sy = wcs.getHalfSizeDeg()
+            sx *= DEG
+            sy *= DEG
+            nx, ny = input_hdu.data.shape[-1:-3:-1]
+            from Tigger.Models import ModelClasses, SkyModel
+
+            pos = ModelClasses.Position(ra0, dec0)
+            flux = ModelClasses.Flux(max_flux)
+            shape = ModelClasses.FITSImage(sx, sy, 0, fitsfile, nx, ny, pad=pad)
+            source = SkyModel.Source(srcname, pos, flux, shape=shape)
+            for tag in tags:
+                source.setAttribute(tag, True)
+            if not options.refresh_r:
+                source.setAttribute('r', Coordinates.angular_dist_pos_angle(ra0, dec0, *model.fieldCenter())[0])
+            sources.append(source)
+            print("Adding FITS source %s (%s,pad=%f) with tags %s" % (srcname, fitsfile, pad, tags))
+
+    # convert apparent flux to intrinsic using the NEWSTAR beam gain
+    if options.newstar_app_to_int:
+        nsrc = 0
+        for src in sources:
+            bg = getattr(src, 'newstar_beamgain', None)
+            if getattr(src, 'flux_apparent', None) and bg is not None:
+                src.setAttribute('Iapp', src.flux.I)
+                for pol in 'IQUV':
+                    if hasattr(src.flux, pol):
+                        setattr(src.flux, pol, getattr(src.flux, pol) / bg)
+                src.removeAttribute('flux_apparent')
+                src.setAttribute('flux_intrinsic', True)
+                nsrc += 1
+        print("Converted NEWSTAR apparent to intrinsic flux for %d model sources" % nsrc)
+        if len(sources) != nsrc:
+            print("  (%d sources were skipped for whatever reason.)" % (len(model.sources) - nsrc))
+    elif options.newstar_int_to_app:
+        nsrc = 0
+        for src in sources:
+            bg = getattr(src, 'newstar_beamgain', None)
+            if getattr(src, 'flux_intrinsic', None) and bg is not None:
+                src.setAttribute('Iapp', src.flux.I * bg)
+                for pol in 'IQUV':
+                    if hasattr(src.flux, pol):
+                        setattr(src.flux, pol, getattr(src.flux, pol) * bg)
+                src.removeAttribute('flux_intrinsic')
+                src.setAttribute('flux_apparent', True)
+                nsrc += 1
+        print("Converted NEWSTAR apparent to intrinsic flux for %d model sources" % nsrc)
+        if len(sources) != nsrc:
+            print("  (%d sources were skipped for whatever reason.)" % (len(model.sources) - nsrc))
+
+    # set refrence frequency
+    if options.ref_freq >= 0:
+        model.setRefFreq(options.ref_freq * 1e+6)
+        print("Setting reference frequency to %f MHz" % options.ref_freq)
+
+    # recenter
+    if options.recenter:
+        print("Shifting model to new center %s" % options.recenter)
+        ra0, dec0 = model.fieldCenter()
+        field_center = ra1, dec1 = recenter_radec
+        ddec = dec1 - dec0
+        cosd0, sind0 = math.cos(ddec), math.sin(ddec)
+        for src in sources:
+            ra, dec = src.pos.ra, src.pos.dec
+            x, y, z = math.cos(ra - ra0) * math.cos(dec), math.sin(ra - ra0) * math.cos(dec), math.sin(dec)
+            x1 = cosd0 * x - sind0 * z
+            y1 = y
+            z1 = sind0 * x + cosd0 * z
+            src.pos.ra = ra1 + (math.atan2(y1, x1) if (x1 or y1) else 0)
+            src.pos.dec = math.asin(z1)
+        # reset model center
+        model.setFieldCenter(ra1, dec1)
+
+    # recompute radial distance
+    if options.refresh_r:
+        print("Recomputing the 'r' attribute based on the field center")
+        model.recomputeRadialDistance()
+
+
+    # select
+    def getTagValue(src, tag):
+        """Helper function: looks for the given tag in the source, or in its sub-objects"""
+        for obj in src, src.pos, src.flux, getattr(src, 'shape', None), getattr(src, 'spectrum', None):
+            if obj is not None and hasattr(obj, tag):
+                return getattr(obj, tag)
+        return None
+
+
+    for selstr, tag, predicate, value in selections:
+        # get tag value
+        srctag = [(src, getTagValue(src, tag)) for src in model.sources]
+        sources = [src for src, tag in srctag if tag is not None and predicate(tag, value)]
+        print("Selection '%s' leaves %d out of %d sources" % (selstr, len(sources), len(model.sources)))
+        if len(sources) != len(model.sources):
+            model.setSources(sources)
+
+    # set PB expression and estimate apparent fluxes
+    pb = options.primary_beam
+    if pb == "refresh":
+        pb = model.primaryBeam()
+        if pb:
+            print("Recalculating apparent fluxes")
+        else:
+            print("No primary beam expression in model, ignoring '--primary-beam refresh' option")
+    if options.app_to_int or options.int_to_app:
+        pb = pb or model.primaryBeam()
+        if pb:
+            print("Converting apparent fluxes to intrinsic" if options.app_to_int else "Converting intrinsic fluxes to apparent")
+        else:
+            print("No primary beam expression in model and no --primary-beam option given, cannot convert between apparent and intrinsic.")
+            sys.exit(1)
+    if pb:
+        fitsBeam = False
+        if pb.lower().endswith('.fits'):  # if pb is a FITS file, load interpolator
+            fitsBeam = True
+
+            # Following code is nicked from Cattery/Siamese/OMS/pybeams_fits.py
+            CORRS_XY = "xx", "xy", "yx", "yy"
+            CORRS_RL = "rr", "rl", "lr", "ll"
+            REIM = "re", "im"
+            REALIMAG = dict(re="real", im="imag")
+
+            # get the Cattery
+            for varname in 'CATTERY_PATH', "MEQTREES_CATTERY_PATH":
+                if varname in os.environ:
+                    sys.path.append(os.environ[varname])
+
+            import Siamese.OMS.Utils as Utils
+
+
+            def make_beam_filename(filename_pattern, corr, reim):
+                """Makes beam filename for the given correlation and real/imaginary component (one of "re" or "im")"""
+                return Utils.substitute_pattern(filename_pattern,
+                                                corr=corr.lower(), xy=corr.lower(), CORR=corr.upper(), XY=corr.upper(),
+                                                reim=reim.lower(), REIM=reim.upper(), ReIm=reim.title(),
+                                                realimag=REALIMAG[reim].lower(), REALIMAG=REALIMAG[reim].upper(),
+                                                RealImag=REALIMAG[reim].title())
+
+
+            """Makes beam interpolator node for the given filename pattern."""
+            filename_real = []
+            filename_imag = []
+            # load beam interpolator
+            import Siamese.OMS.InterpolatedBeams as InterpolatedBeams
+
+            vbs = []
+            for icorr, corr in enumerate(CORRS_XY if options.linear_pol else CORRS_RL):
+                if icorr in (1, 2):
+                    print('  omitting %s beam due to --beam-diag' % corr)
+                    vbs.append(0)
+                else:
+                    # make FITS images or nulls for real and imaginary part
+                    filenames = [make_beam_filename(pb, corr, 're'), make_beam_filename(pb, corr, 'im')]
+                    print('Loading FITS Beams', filenames[0], filenames[1])
+                    vb = InterpolatedBeams.LMVoltageBeam(verbose=(options.verbose or 0) - 2, l_axis=options.fits_l_axis,
+                                                         m_axis=options.fits_m_axis)
+                    vb.read(*filenames)
+                    vbs.append(vb)
+
+            model.setPrimaryBeam(vbs)
+            # get frequency
+            # fq = model.refFreq() or 1.4e+9
+            beamRefFreq = (options.beam_freq or 0) * 1e+6 or model.refFreq() or 1424500000.12
+            print("Using FITS beams with reference frequency %f MHz" % (beamRefFreq * 1e-6))
+
+        else:  # else, assume pb is an expession
+            try:
+                pbexp = eval('lambda r,fq:' + pb)
+                dum = pbexp(0, 1e+9);  # evaluate at r=0 and 1 GHz as a test
+                if not isinstance(dum, float):
+                    raise TypeError("does not evaluate to a float")
+            except Exception as exc:
+                print("Bad primary beam expression '%s': %s" % (pb, str(exc)))
+                sys.exit(1)
+            model.setPrimaryBeam(pb)
+            # get frequency
+            # fq = model.refFreq() or 1.4e+9
+            fq = (options.beam_freq or 0) * 1e+6 or model.refFreq() or 1424500000.12
+            print("Using beam expression '%s' with reference frequency %f MHz" % (pb, fq * 1e-6))
+
+        nsrc = 0
+        # ensure that every source has an 'r' attribute
+        if not options.refresh_r:
+            for src in sources:
+                if not hasattr(src, 'r'):
+                    src.setAttribute('r',
+                                     Coordinates.angular_dist_pos_angle(src.pos.ra, src.pos.dec, *model.fieldCenter())[
+                                         0])
+        # evaluate sources
+        if not (options.app_to_int or options.int_to_app):
+            for src in sources:
+                r = getattr(src, 'r', None)
+                if r is not None:
+                    bg = pbexp(r, fq)
+                    src.setAttribute('beamgain', bg)
+                    src.setAttribute('Iapp', src.flux.I * bg)
+                    nsrc += 1
+            print("Applied primary beam expression to %d model sources" % nsrc)
+        else:
+            # precompute PAs if fitsBeams are used
+            if fitsBeam:
+                if options.pa_from_ms is not None:
+                    ms_strings = options.pa_from_ms.split(",")
+                    ms_field = []
+                    if len(ms_strings) > 1:
+                        for ms_string in ms_strings:
+                            match = re.match("^(.*?)(:[0-9]+)?$", ms_string)
+                            if match:
+                                msname, field = match.group(1), int(match.group(2)[1:]) if match.group(2) else 0
+                            else:
+                                msname, field = options.pa_from_ms, 0
+                            ms_field.append((msname, field))
+                    else:
+                        ms_string = ms_strings[0]
+                        match = re.match("^(.*?)(:[0-9]+)?$", ms_string)
+                        if match:
+                            msname, field = match.group(1), int(match.group(2)[1:]) if match.group(2) else 0
+                            if os.path.exists(msname + "/SUBMSS"):
+                                ms_field = [(ms, field) for ms in glob.glob(msname + "/SUBMSS/*") if os.path.isdir(ms)]
+                            else:
+                                ms_field = [[msname, 0]]
+                    from pyrap.tables import table
+
+                    dm, dq = pyrap_dmdq()
+                    pas = []
+                    zenith = dm.direction('AZEL', '0deg', '90deg')
+                    for ms, field in ms_field:
+                        print("Getting PA range from MS %s, field %d" % (ms, field))
+                        tab = table(ms)
+                        antpos = table(tab.getkeyword("ANTENNA")).getcol("POSITION")
+                        ra, dec = table(tab.getkeyword("FIELD")).getcol("PHASE_DIR", field, 1)[0][0]
+                        # make position measure from antenna 0
+                        pos0 = dm.position('itrf', *[dq.quantity(x, 'm') for x in antpos[0]])
+                        dm.do_frame(pos0)
+                        # make direction measure from field centre
+                        fld = dm.direction('J2000', dq.quantity(ra, "rad"), dq.quantity(dec, "rad"))
+                        tab = tab.query("FIELD_ID==%d" % field)
+                        # get unique times
+                        times = numpy.array(sorted(set(tab.getcol("TIME")[~tab.getcol("FLAG_ROW")])))
+                        pa1 = [(dm.do_frame(dm.epoch("UTC", dq.quantity(t, "s"))) and dm.posangle(fld,
+                                                                                                  zenith).get_value(
+                            "rad")) for t in times]
+                        pas += pa1
+                        pa1 = numpy.array(pa1) / DEG
+                        if options.enable_plots:
+                            import pylab
+
+                            pylab.plot((times - times[0]) / 3600, pa1)
+                            pylab.xlabel("Time since beginning of observation, hours")
+                            pylab.ylabel("PA, degrees")
+                            pylab.savefig(os.path.basename(ms) + ".parangle.png")
+                            print("Saved plot " + os.path.basename(ms) + ".parangle.png")
+                        print("MS %s, PA range is %fdeg to %fdeg" % (ms, pa1[0], pa1[-1]))
+                    # get lm's rotated through those ranges
+                    pa_range = numpy.array(pas)
+                elif options.pa_range is not None:
+                    try:
+                        ang0, ang1 = list(map(float, options.pa_range.split(",", 1)))
+                    except:
+                        parser.error("Incorrect --pa-range option. FROM,TO values expected.")
+                    pa_range = numpy.arange(ang0, ang1 + 1, 1) * DEG
+                elif options.pa is not None:
+                    pa_range = options.pa * DEG
+                else:
+                    pa_range = None
+                if options.verbose:
+                    print("PA (deg):", " ".join(["%f" % (x / DEG) for x in pa_range]) if numpy.iterable(
+                        pa_range) else pa_range)
+            if options.enable_plots:
+                import pylab
+
+                pylab.figure()
+            for src in sources:
+                r = getattr(src, 'r', None)
+                if r is not None:
+                    if fitsBeam:
+                        # this is where the interpolator is called to determine the beam gain
+                        # AIPS Memo 27 Sin Projection
+                        ra0, dec0 = model.fieldCenter()
+                        # ra0 = sources[0].pos.ra
+                        # dec0 = sources[0].pos.dec
+                        l = math.cos(src.pos.dec) * math.sin(src.pos.ra - ra0)
+                        m = math.sin(src.pos.dec) * math.cos(dec0) - math.cos(src.pos.dec) * math.sin(dec0) * math.cos(
+                            src.pos.ra - ra0)
+
+                        # rotate through (range of) PA value(s), if such option is supplied above
+                        if pa_range is not None:
+                            l, m = rotatelm(l, m, pa_range)
+
+                        Jones2Mueller = Jones2Mueller_linear if options.linear_pol else Jones2Mueller_circular
+
+                        jones = [vb.interpolate(l, m, freq=beamRefFreq) if vb else numpy.array(0) for vb in vbs]
+                        # incorrect old-style Jones averaging
+                        if options.beam_average_jones:
+                            a, b, c, d = [j.mean() for j in jones]
+                            mueller = Jones2Mueller(numpy.matrix([[a, b], [c, d]]))
+                            if options.verbose > 1:
+                                print("%s: jones11 mean %f std %f" % (src.name, abs(a), abs(jones[0]).std()))
+                                print("%s: jones22 mean %f std %f" % (src.name, abs(d), abs(jones[3]).std()))
+                            if options.enable_plots:
+                                pylab.plot(abs(jones[0]), label="|J11| " + src.name)
+                        # new-style averaging of Mueller matrix
+                        else:
+                            muellers = [Jones2Mueller(numpy.matrix([[a, b], [c, d]])) for a, b, c, d in
+                                        numpy.broadcast(*jones)]
+                            mueller = sum(muellers) / len(muellers)
+                            if options.enable_plots:
+                                pylab.plot([m[0, 0] for m in muellers], label='M11 ' + src.name)
+                            if options.verbose > 1:
+                                print("%s: jones11 mean %f std %f" % (
+                                    src.name, abs(jones[0].mean()), abs(jones[0]).std()))
+                                print("%s: jones22 mean %f std %f" % (
+                                    src.name, abs(jones[3].mean()), abs(jones[3]).std()))
+                                print("%s: mueller11 mean %f std %f" % (
+                                    src.name, mueller[0, 0], numpy.std([m[0, 0] for m in muellers])))
+                        bg = mueller[0, 0]
+                        ##          OMS 6/7/2015: let's do full inversion now to correct all four polarizations
+                        if options.app_to_int:
+                            if options.beam_nopol:
+                                mueller = 1 / bg
+                            else:
+                                mueller = numpy.linalg.inv(mueller)
+                        else:
+                            if options.beam_nopol:
+                                mueller = bg
+                        ##            #for now, ignore full Stokes and just use Stokes' I
+                        #            src.setAttribute('beamgain',bg)
+                        nobeam = (bg < options.beam_clip)
+                        spi = freqgrid = spiBg = None
+                        # if no beam gain at this position, set appropriate tag
+                        if nobeam:
+                            src.setAttribute('nobeam', True)
+                            src.setAttribute('Iapp', src.flux.I)
+                        else:
+                            src.removeAttribute('nobeam')
+                            src.setAttribute('beamgain', bg)
+                            iquv0 = numpy.matrix([[getattr(src.flux, stokes, 0.)] for stokes in "IQUV"])
+                            iquv = mueller * iquv0
+                            if options.verbose > 1:
+                                print("%s: from %s to %s" % (src.name, iquv0.T, iquv.T))
+                            if options.app_to_int and hasattr(src.flux, "I"):
+                                src.setAttribute("Iapp", src.flux.I)
+                            for i, stokes in enumerate("IQUV"):
+                                if hasattr(src.flux, stokes):
+                                    setattr(src.flux, stokes, iquv[i, 0])
+                                # add spectral index of position in the beam
+                            src_spectrum = getattr(src, 'spectrum', None)
+                            if options.beam_spi and (src_spectrum or options.force_beam_spi_wo_spectrum):
+                                # determine spectral index by determining bg across the freqs (using only Stokes' I)
+                                import scipy.optimize
+
+                                bw = options.beam_spi * 1e+6 / 2
+                                # make a frequency grid of 10 points across the band
+                                # freqgrid = numpy.arange(beamRefFreq-bw,beamRefFreq+bw,bw/5)
+                                freqgrid = numpy.arange(beamRefFreq - bw, beamRefFreq + bw * 1.01, bw / 5)
+                                gxx = vbs[0].interpolate(l, m, freq=freqgrid, freqaxis=2)
+                                gyy = vbs[3].interpolate(l, m, freq=freqgrid, freqaxis=2)
+                                spiBg = (gxx * gxx.conj() + gyy * gyy.conj()).real
+                                spiBg = spiBg[:, 0, :]
+                                # power law fit
+                                logbg1 = numpy.log10(spiBg)
+                                logbg = numpy.log10(spiBg.mean(axis=0))
+                                logfreq = numpy.log10(freqgrid)
+                                fitfunc = lambda p, x: p[0] + p[1] * x
+                                errfunc = lambda p, x, y: (y - fitfunc(p, x))
+                                pinit = [10 ** logbg[0], 0.]
+                                if numpy.isinf(logbg).sum() > 0:
+                                    spi = 0.
+                                    amp0 = spiBg[0, 0]
+                                else:
+                                    out = scipy.optimize.leastsq(errfunc, pinit, args=(logfreq, logbg))
+                                    spi = out[0][1]
+                                    amp0 = 10. ** out[0][0]
+
+                                # look for Spectral Index in spi attribute
+                                # if no spectrum: add a SpectralIndex class to the source
+                                # else: add spectral index from PB to SI (int-to-app), subtract (app-to-int)
+                                if src_spectrum is None:
+                                    setattr(src, 'spectrum', Tigger.Models.ModelClasses.SpectralIndex(spi, beamRefFreq))
+                                else:
+                                    ispiVal = getattr(src_spectrum, 'spi', None)
+                                    setattr(src, 'spectrum', Tigger.Models.ModelClasses.SpectralIndex(ispiVal - spi,
+                                                                                                      beamRefFreq) if options.app_to_int else Tigger.Models.ModelClasses.SpectralIndex(
+                                        ispiVal + spi, beamRefFreq))
+
+                        if options.verbose:
+                            print(("%s: beamgain" % src.name), bg, "spi", spi, "clipped" if nobeam else "")
+                        #            if spiBg is not None:
+                        #              print src.name,repr(freqgrid),repr(spiBg.mean(0))
+
+                    else:
+                        bg = pbexp(r, fq)
+                        src.setAttribute('beamgain', bg)
+                        if hasattr(src.flux, 'I'):
+                            src.setAttribute('Iapp', src.flux.I if options.app_to_int else src.flux.I * bg)
+                        for stokes in "IQUV":
+                            x = getattr(src.flux, stokes, None)
+                            if x is not None:
+                                setattr(src.flux, stokes, x / bg if options.app_to_int else x * bg)
+                    nsrc += 1
+            if options.enable_plots:
+                pylab.legend()
+                pylab.savefig("beamgains.png")
+                print("Saved plot beamgains.png")
+            print("Converted between apparent/intrinsic flux for %d model sources" % nsrc)
+        if len(model.sources) != nsrc:
+            print("  (%d sources were skipped for whatever reason, probably they didn't have an 'r' attribute)" % (
+                    len(model.sources) - nsrc))
+
+    # rename using COPART
+    if options.rename:
+        print("Renaming sources using the COPART convention")
+        typecodes = dict(Gau="G", FITS="F")
+        # sort sources by decreasing flux
+        from past.builtins import cmp
+        from functools import cmp_to_key
+        sources = sorted(sources, key=cmp_to_key(lambda a, b: cmp(b.brightness(), a.brightness())))
+        projection = Coordinates.Projection.SinWCS(*model.fieldCenter())
+        # work out source clusters
+        l = numpy.zeros(len(sources), float)
+        m = numpy.zeros(len(sources), float)
+        for i, src in enumerate(sources):
+            l[i], m[i] = projection.lm(src.pos.ra, src.pos.dec)
+        if options.cluster_dist:
+            # now, convert to dist[i,j]: distance between sources i and j
+            dist = numpy.sqrt(
+                (l[:, numpy.newaxis] - l[numpy.newaxis, :]) ** 2 + (m[:, numpy.newaxis] - m[numpy.newaxis, :]) ** 2)
+            # cluster[i] is (N,R), where N is cluster number for source #i, and R is rank of that source in the cluster
+            # place source 0 into cluster 0,#0
+            cluster = [(0, 0)]
+            clustersize = [1]
+            clusterflux = [sources[0].brightness()]
+            dist0 = options.cluster_dist * DEG / 3600
+            for i in range(1, len(sources)):
+                src = sources[i]
+                # find closest brighter source, and assign to its cluster if close enough
+                imin = dist[i, :i].argmin()
+                if dist[i, imin] <= dist0:
+                    iclust, rank = cluster[imin]
+                    cluster.append((iclust, clustersize[iclust]))
+                    clustersize[iclust] += 1
+                    clusterflux[iclust] += src.brightness()
+                # else start new cluster from source
+                else:
+                    cluster.append((len(clustersize), 0))
+                    clustersize.append(1)
+                    clusterflux.append(src.brightness())
+        else:
+            cluster = [(i, 0) for i, src in enumerate(sources)]
+        # now go over and rename the sources
+        # make array of source names
+        chars = [chr(x) for x in range(ord('a'), ord('z') + 1)]
+        names = morenames = list(chars)
+        while len(names) < len(sources):
+            morenames = [ch + name for ch in chars for name in morenames]
+            names += morenames
+        # make a second version where the single-char names are capitalized
+        Names = list(names)
+        Names[:26] = [n.upper() for n in chars]
+        # now go over and rename the sources
+        clustername = {}
+        for i, src in enumerate(sources):
+            iclust, rank = cluster[i]
+            # for up name of cluster based on rank-0 source
+            if not rank:
+                # lookup radius, in units of arcmin
+                rad_min = math.sqrt(l[i] ** 2 + m[i] ** 2) * (60 / DEG)
+                # divide by radial step
+                rad = min(int(rad_min / options.radial_step), 10)
+                radchr = '0123456789x'[rad]
+                if rad_min > options.radial_step * 0.01:
+                    # convert p.a. to tens of degrees
+                    pa = math.atan2(l[i], m[i])
+                    if pa < 0:
+                        pa += math.pi * 2
+                    pa = round(pa / (DEG * 10)) % 36
+                    # make clustername
+                    clusname = clustername[iclust] = "%s%02d%s" % (Names[iclust], pa, radchr)
+                else:
+                    clusname = clustername[iclust] = "%s0" % (Names[iclust])
+                src.name = "%s%s" % (clusname, typecodes.get(src.typecode, ''))
+                if options.cluster_dist:
+                    src.setAttribute('cluster_lead', True)
+            else:
+                clusname = clustername[iclust]
+                src.name = "%s%s%s" % (clusname, names[rank - 1], typecodes.get(src.typecode, ''))
+            if options.cluster_dist:
+                src.setAttribute('cluster', clusname)
+                src.setAttribute('cluster_size', clustersize[iclust])
+                src.setAttribute('cluster_flux', clusterflux[iclust])
+    # check for duplicate names (if renaming, duplicate names cannot happen anyway, unless the naming algorithm above is broken)
+    else:
+        names = dict()
+        sources0 = sources
+        sources = []
+        for i, src in enumerate(sources0):
+            if src.name in names:
+                print("Duplicate source '%s' at #%d (first found at #%d), removing" % (src.name, i, names[src.name]))
+            else:
+                names[src.name] = i
+                sources.append(src)
+    # assign prefix to source names
+    if options.prefix:
+        print("Prefixing source names with '%s'" % options.prefix)
+        for src in sources:
+            src.name = options.prefix + src.name
+    # merge clusters
+    if options.merge_clusters:
+        tags = set(options.merge_clusters.split(',')) if options.merge_clusters != "ALL" else None
+        # build up dict of clusters
+        clusters = dict()
+        for src in sources:
+            clusname = getattr(src, 'cluster', '')
+            clusters.setdefault(clusname, {})[src.name] = src
+        # unclustered sources copied over as-is
+        new_sources = list(clusters.pop('', {}).values())
+        # next, deal with each cluster
+        for clusname, srcdict in clusters.items():
+            # leading source has the same name as the cluster
+            src0 = srcdict.get(clusname)
+            # if no leading source, or leading source not tagged, or length 1, then copy cluster as-is
+            if not src0 or len(srcdict) < 2 or (tags is not None and
+                                                not any([getattr(src0, tag, None) for tag in tags])):
+                new_sources += list(srcdict.values())
+            else:
+                # sum fluxes
+                for x in 'IQUV':
+                    if hasattr(src0.flux, x):
+                        setattr(src0.flux, x, sum([getattr(s.flux, x, 0) for s in srcdict.values()]))
+                if hasattr(src0, 'Iapp'):
+                    src0.Iapp = sum([getattr(s, 'Iapp', 0) for s in srcdict.values()])
+                new_sources.append(src0)
+                print("Merged cluster %s (%d sources)" % (src0.name, len(srcdict)))
+        sources = new_sources
+        model.setSources(sources)
+    # save output
+    print("Saving model containing %d sources to %s (%s)" % (len(sources), output, output_doc))
+    export_func(model, output, sources=sources, format=options.output_format or None)
--- tigger-lsm-1.7.0.orig/Tigger/bin/tigger-make-brick
+++ tigger-lsm-1.7.0/Tigger/bin/tigger-make-brick
@@ -1,238 +1,238 @@
-#!/usr/bin/python
-# -*- coding: utf-8 -*-
-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation & 
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc., 
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-from __future__ import print_function, division, absolute_import
-import math
-import sys
-from math import cos
-
-import os.path
-from astropy.wcs import WCS
-from astropy.io import fits as pyfits
-import numpy as np
-
-import Tigger
-
-DEG = math.pi / 180
-
-NATIVE = "Tigger"
-
-if __name__ == '__main__':
-    import Kittens.utils
-
-    _verbosity = Kittens.utils.verbosity(name="convert-model")
-    dprint = _verbosity.dprint
-    dprintf = _verbosity.dprintf
-
-    Tigger.nuke_matplotlib()  # don't let the door hit you in the ass, sucka
-
-    from Tigger.Tools import Imaging
-    from Tigger.Models import SkyModel, ModelClasses
-    from Tigger.Coordinates import get_wcs_info
-
-    # setup some standard command-line option parsing
-    #
-    from optparse import OptionParser
-
-    parser = OptionParser(usage="""%prog: sky_model output_image [output_model]""",
-                          description="""Converts sources in a sky model into a brick (FITS image.)
-Input 'sky_model' should be a Tigger-format sky model.
-The 'output_image' should already exist. (Use lwimager or something similar to make a sky image.)
-If an 'output_model' is specified, then sources converted into the brick will be removed from the model,
-while the brick itself will be added (as a FITS image component), and a new sky model will be written out.""")
-    parser.add_option("-f", "--force", action="store_true",
-                      help="Forces overwrite of output model.")
-    parser.add_option("-s", "--subset", type="string",
-                      help="Selects subset of sources. Use a comma- (or space) separated list of selection tokens. A token can be "
-                           "a source name, or [N]:[M] to select sources in order of brightness from N up to and not including M, or =tag to select sources "
-                           "with the specified tag. Prefix with ! or - to negate a selection token.")
-    parser.add_option("-F", "--freq", type="float", metavar="MHz",
-                      help="Sets the frequency at which an image will be generated. This affects sources with a spectral index or an RM. Default is to use "
-                           "the reference frequency of the model.")
-    parser.add_option("-b", "--primary-beam", type="string", metavar="EXPR",
-                      help="Apply a primary (power) beam expression to source fluxes. Any valid Python expression using the variables 'r' and 'fq' is accepted. "
-                           "Example (for the WSRT-like 25m dish PB): \"cos(min(65*fq*1e-9*r,1.0881))**6\". NB: this particular expression can be simply specified as --primary-beam wsrt. "
-                           "Also available is a slightly different --primary-beam newstar")
-    parser.add_option("-p", "--padding", type="float", metavar="PAD",
-                      help="Sets the pad factor attribute of the resulting FITS image component. Default is %default.")
-    parser.add_option("-x", "--x-offset", type="float", metavar="FRACPIX",
-                      help="Offsets the FITS image by this many pixels in the X direction.")
-    parser.add_option("-y", "--y-offset", type="float", metavar="FRACPIX",
-                      help="Offsets the FITS image by this many pixels in the Y direction.")
-    parser.add_option("-N", "--source-name", type="string", metavar="NAME",
-                      help="Name for source component corresponding to image. Default is to use the basename of the FITS file")
-    parser.add_option("--add-to-image", action="store_true",
-                      help="Adds sources to contents of FITS image. Default is to overwrite image data.")
-    parser.add_option("--keep-sources", action="store_true",
-                      help="Keeps sources in the sky model. Default is to remove sources that have been put into the brick.")
-    parser.add_option("-d", "--debug", dest="verbose", type="string", action="append", metavar="Context=Level",
-                      help="(for debugging Python code) sets verbosity level of the named Python context. May be used multiple times.")
-
-    parser.set_defaults(freq=None, padding=1, x_offset=0, y_offset=0, subset="all")
-
-    (options, rem_args) = parser.parse_args()
-
-    # get filenames
-    if len(rem_args) == 2:
-        skymodel, fitsfile = rem_args
-        output_model = None
-    elif len(rem_args) == 3:
-        skymodel, fitsfile, output_model = rem_args
-    else:
-        parser.error("Incorrect number of arguments. Use -h for help.")
-
-    # check if we need to overwrite
-    if output_model and os.path.exists(output_model) and not options.force:
-        print("Output file %s already exists. Use the -f switch to overwrite." % output_model)
-        sys.exit(1)
-
-    # load model, apply selection
-    model = Tigger.load(skymodel)
-    print("Loaded model", skymodel)
-    # apply selection
-    sources0 = model.getSourceSubset(options.subset)
-    #  make sure only point sources are left
-    sources = [src for src in sources0 if src.typecode == "pnt"]
-    print("Selection leaves %d source(s), of which %d are point source(s)" % (len(sources0), len(sources)))
-
-    if not sources:
-        print("There's nothing to convert into a brick.")
-        sys.exit(1)
-
-    # get PB expression
-    pbfunc = None
-    if options.primary_beam:
-        if options.primary_beam.upper() == "WSRT":
-            pbfunc = lambda r, fq: cos(min(65 * fq * 1e-9 * r, 1.0881)) ** 6
-            print("Primary beam expression is standard WSRT cos^6: 'cos(min(65*fq*1e-9*r,1.0881))**6'")
-        elif options.primary_beam.upper() == "NEWSTAR":
-            pbfunc = lambda r, fq: max(cos(65 * 1e-9 * fq * r) ** 6, .01)
-            print("Primary beam expression is standard NEWSTAR cos^6: 'max(cos(65*1e-9*fq*r)**6,.01)'")
-        else:
-            try:
-                pbfunc = eval("lambda r,fq:" + options.primary_beam)
-            except Exception as err:
-                print("Error parsing primary beam expression %s: %s" % (options.primary_beam, str(err)))
-                sys.exit(1)
-            print("Primary beam expression is ", options.primary_beam)
-
-    # get frequency
-    freq = (options.freq or model.refFreq() or 1400) * 1e+6
-    print("Brick frequency is %f MHz" % (freq * 1e-6))
-
-    # read fits file
-    try:
-        input_hdu = pyfits.open(fitsfile)[0]
-        hdr = input_hdu.header
-    except Exception as err:
-        print("Error reading FITS file %s: %s" % (fitsfile, str(err)))
-        sys.exit(1)
-    print("Using FITS file", fitsfile)
-
-    # reset data if asked to
-    if not options.add_to_image:
-        input_hdu.data[...] = 0
-        print("Contents of FITS image will be reset")
-    else:
-        print("Adding source(s) to FITS image")
-
-    wcs, refpix, refsky, ra_axis, dec_axis = get_wcs_info(hdr)
-
-    if ra_axis is None or dec_axis is None:
-        print("Can't find RA and/or DEC axis in this FITS image")
-        sys.exit(1)
-
-    # make WCS from header
-    ra0pix, dec0pix = refpix[ra_axis], refpix[dec_axis]
-    ra0, dec0 = refsky[ra_axis], refsky[dec_axis]
-
-    print("Image reference pixel (%d,%d) is at %f,%f deg" % (ra0pix, dec0pix, ra0, dec0))
-
-    # apply x/y pixel offset
-    if options.x_offset or options.y_offset:
-        refpix[ra_axis] = ra0pix = ra0pix + options.x_offset
-        refpix[dec_axis] = dec0pix = dec0pix + options.y_offset
-        refsky = wcs.wcs_pix2world([refpix], 0)[0]
-        ra0, dec0 = refsky[ra_axis], refsky[dec_axis]
-        print("Applying x/y offset moves this to %f,%f deg" % (ra0, dec0))
-        hdr["CRVAL%d" % (ra_axis+1)] = ra0
-        hdr["CRVAL%d" % (dec_axis+1)] = dec0
-        wcs = WCS(hdr)
-
-    # insert sources
-    Imaging.restoreSources(input_hdu, sources, 0, primary_beam=pbfunc, freq=freq)
-    # save fits file
-    try:
-        input_hdu.writeto(fitsfile, overwrite=True)
-    except Exception as err:
-        print("Error writing FITS file %s: %s" % (fitsfile, str(err)))
-        sys.exit(1)
-    print("Added %d source(s) into FITS file %s" % (len(sources), fitsfile))
-    print("Using pad factor", options.padding)
-
-    # remove sources from model if asked to
-    if not options.keep_sources:
-        selected = set([src.name for src in sources])
-        sources = [src for src in model.sources if not src.name in selected]
-    else:
-        sources = model.sources
-
-    # add image to model
-    if output_model:
-        # get image parameters
-        max_flux = float(input_hdu.data.max())
-        ra0 *= DEG
-        dec0 *= DEG
-        sx, sy = wcs.getHalfSizeDeg()
-        sx *= DEG
-        sy *= DEG
-        nx, ny = input_hdu.data.shape[-1:-3:-1]
-        # check if this image is already contained in the model
-        for src in model.sources:
-            if isinstance(getattr(src, 'shape', None), ModelClasses.FITSImage) and os.path.samefile(src.shape.filename,
-                                                                                                    fitsfile):
-                print("Model already contains a component (%s) for this image. Updating the component" % src.name)
-                # update source parameters
-                src.position.ra, src.position.dec = ra0, dec0
-                src.flux.I = max_flux
-                src.shape.ex, src.shape.ey = sx, sy
-                src.shape.nx, src.shape.ny = nx, ny
-                src.shape.pad = pad
-                break
-        # not contained, make new source object
-        else:
-            pos = ModelClasses.Position(ra0, dec0)
-            flux = ModelClasses.Flux(max_flux)
-            shape = ModelClasses.FITSImage(sx, sy, 0, fitsfile, nx, ny, pad=options.padding)
-            sname = options.source_name or os.path.splitext(os.path.basename(fitsfile))[0]
-            img_src = SkyModel.Source(sname, pos, flux, shape=shape)
-            print("Inserting new model component named %s" % sname)
-            sources.append(img_src)
-        # save model
-        model.setSources(sources)
-        model.save(output_model)
-        print("Saved %d source(s) to output model %s." % (len(model.sources), output_model))
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation & 
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc., 
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+from __future__ import print_function, division, absolute_import
+import math
+import sys
+from math import cos
+
+import os.path
+from astropy.wcs import WCS
+from astropy.io import fits as pyfits
+import numpy as np
+
+import Tigger
+
+DEG = math.pi / 180
+
+NATIVE = "Tigger"
+
+if __name__ == '__main__':
+    import Kittens.utils
+
+    _verbosity = Kittens.utils.verbosity(name="convert-model")
+    dprint = _verbosity.dprint
+    dprintf = _verbosity.dprintf
+
+    Tigger.nuke_matplotlib()  # don't let the door hit you in the ass, sucka
+
+    from Tigger.Tools import Imaging
+    from Tigger.Models import SkyModel, ModelClasses
+    from Tigger.Coordinates import get_wcs_info
+
+    # setup some standard command-line option parsing
+    #
+    from optparse import OptionParser
+
+    parser = OptionParser(usage="""%prog: sky_model output_image [output_model]""",
+                          description="""Converts sources in a sky model into a brick (FITS image.)
+Input 'sky_model' should be a Tigger-format sky model.
+The 'output_image' should already exist. (Use lwimager or something similar to make a sky image.)
+If an 'output_model' is specified, then sources converted into the brick will be removed from the model,
+while the brick itself will be added (as a FITS image component), and a new sky model will be written out.""")
+    parser.add_option("-f", "--force", action="store_true",
+                      help="Forces overwrite of output model.")
+    parser.add_option("-s", "--subset", type="string",
+                      help="Selects subset of sources. Use a comma- (or space) separated list of selection tokens. A token can be "
+                           "a source name, or [N]:[M] to select sources in order of brightness from N up to and not including M, or =tag to select sources "
+                           "with the specified tag. Prefix with ! or - to negate a selection token.")
+    parser.add_option("-F", "--freq", type="float", metavar="MHz",
+                      help="Sets the frequency at which an image will be generated. This affects sources with a spectral index or an RM. Default is to use "
+                           "the reference frequency of the model.")
+    parser.add_option("-b", "--primary-beam", type="string", metavar="EXPR",
+                      help="Apply a primary (power) beam expression to source fluxes. Any valid Python expression using the variables 'r' and 'fq' is accepted. "
+                           "Example (for the WSRT-like 25m dish PB): \"cos(min(65*fq*1e-9*r,1.0881))**6\". NB: this particular expression can be simply specified as --primary-beam wsrt. "
+                           "Also available is a slightly different --primary-beam newstar")
+    parser.add_option("-p", "--padding", type="float", metavar="PAD",
+                      help="Sets the pad factor attribute of the resulting FITS image component. Default is %default.")
+    parser.add_option("-x", "--x-offset", type="float", metavar="FRACPIX",
+                      help="Offsets the FITS image by this many pixels in the X direction.")
+    parser.add_option("-y", "--y-offset", type="float", metavar="FRACPIX",
+                      help="Offsets the FITS image by this many pixels in the Y direction.")
+    parser.add_option("-N", "--source-name", type="string", metavar="NAME",
+                      help="Name for source component corresponding to image. Default is to use the basename of the FITS file")
+    parser.add_option("--add-to-image", action="store_true",
+                      help="Adds sources to contents of FITS image. Default is to overwrite image data.")
+    parser.add_option("--keep-sources", action="store_true",
+                      help="Keeps sources in the sky model. Default is to remove sources that have been put into the brick.")
+    parser.add_option("-d", "--debug", dest="verbose", type="string", action="append", metavar="Context=Level",
+                      help="(for debugging Python code) sets verbosity level of the named Python context. May be used multiple times.")
+
+    parser.set_defaults(freq=None, padding=1, x_offset=0, y_offset=0, subset="all")
+
+    (options, rem_args) = parser.parse_args()
+
+    # get filenames
+    if len(rem_args) == 2:
+        skymodel, fitsfile = rem_args
+        output_model = None
+    elif len(rem_args) == 3:
+        skymodel, fitsfile, output_model = rem_args
+    else:
+        parser.error("Incorrect number of arguments. Use -h for help.")
+
+    # check if we need to overwrite
+    if output_model and os.path.exists(output_model) and not options.force:
+        print("Output file %s already exists. Use the -f switch to overwrite." % output_model)
+        sys.exit(1)
+
+    # load model, apply selection
+    model = Tigger.load(skymodel)
+    print("Loaded model", skymodel)
+    # apply selection
+    sources0 = model.getSourceSubset(options.subset)
+    #  make sure only point sources are left
+    sources = [src for src in sources0 if src.typecode == "pnt"]
+    print("Selection leaves %d source(s), of which %d are point source(s)" % (len(sources0), len(sources)))
+
+    if not sources:
+        print("There's nothing to convert into a brick.")
+        sys.exit(1)
+
+    # get PB expression
+    pbfunc = None
+    if options.primary_beam:
+        if options.primary_beam.upper() == "WSRT":
+            pbfunc = lambda r, fq: cos(min(65 * fq * 1e-9 * r, 1.0881)) ** 6
+            print("Primary beam expression is standard WSRT cos^6: 'cos(min(65*fq*1e-9*r,1.0881))**6'")
+        elif options.primary_beam.upper() == "NEWSTAR":
+            pbfunc = lambda r, fq: max(cos(65 * 1e-9 * fq * r) ** 6, .01)
+            print("Primary beam expression is standard NEWSTAR cos^6: 'max(cos(65*1e-9*fq*r)**6,.01)'")
+        else:
+            try:
+                pbfunc = eval("lambda r,fq:" + options.primary_beam)
+            except Exception as err:
+                print("Error parsing primary beam expression %s: %s" % (options.primary_beam, str(err)))
+                sys.exit(1)
+            print("Primary beam expression is ", options.primary_beam)
+
+    # get frequency
+    freq = (options.freq or model.refFreq() or 1400) * 1e+6
+    print("Brick frequency is %f MHz" % (freq * 1e-6))
+
+    # read fits file
+    try:
+        input_hdu = pyfits.open(fitsfile)[0]
+        hdr = input_hdu.header
+    except Exception as err:
+        print("Error reading FITS file %s: %s" % (fitsfile, str(err)))
+        sys.exit(1)
+    print("Using FITS file", fitsfile)
+
+    # reset data if asked to
+    if not options.add_to_image:
+        input_hdu.data[...] = 0
+        print("Contents of FITS image will be reset")
+    else:
+        print("Adding source(s) to FITS image")
+
+    wcs, refpix, refsky, ra_axis, dec_axis = get_wcs_info(hdr)
+
+    if ra_axis is None or dec_axis is None:
+        print("Can't find RA and/or DEC axis in this FITS image")
+        sys.exit(1)
+
+    # make WCS from header
+    ra0pix, dec0pix = refpix[ra_axis], refpix[dec_axis]
+    ra0, dec0 = refsky[ra_axis], refsky[dec_axis]
+
+    print("Image reference pixel (%d,%d) is at %f,%f deg" % (ra0pix, dec0pix, ra0, dec0))
+
+    # apply x/y pixel offset
+    if options.x_offset or options.y_offset:
+        refpix[ra_axis] = ra0pix = ra0pix + options.x_offset
+        refpix[dec_axis] = dec0pix = dec0pix + options.y_offset
+        refsky = wcs.wcs_pix2world([refpix], 0)[0]
+        ra0, dec0 = refsky[ra_axis], refsky[dec_axis]
+        print("Applying x/y offset moves this to %f,%f deg" % (ra0, dec0))
+        hdr["CRVAL%d" % (ra_axis+1)] = ra0
+        hdr["CRVAL%d" % (dec_axis+1)] = dec0
+        wcs = WCS(hdr)
+
+    # insert sources
+    Imaging.restoreSources(input_hdu, sources, 0, primary_beam=pbfunc, freq=freq)
+    # save fits file
+    try:
+        input_hdu.writeto(fitsfile, overwrite=True)
+    except Exception as err:
+        print("Error writing FITS file %s: %s" % (fitsfile, str(err)))
+        sys.exit(1)
+    print("Added %d source(s) into FITS file %s" % (len(sources), fitsfile))
+    print("Using pad factor", options.padding)
+
+    # remove sources from model if asked to
+    if not options.keep_sources:
+        selected = set([src.name for src in sources])
+        sources = [src for src in model.sources if not src.name in selected]
+    else:
+        sources = model.sources
+
+    # add image to model
+    if output_model:
+        # get image parameters
+        max_flux = float(input_hdu.data.max())
+        ra0 *= DEG
+        dec0 *= DEG
+        sx, sy = wcs.getHalfSizeDeg()
+        sx *= DEG
+        sy *= DEG
+        nx, ny = input_hdu.data.shape[-1:-3:-1]
+        # check if this image is already contained in the model
+        for src in model.sources:
+            if isinstance(getattr(src, 'shape', None), ModelClasses.FITSImage) and os.path.samefile(src.shape.filename,
+                                                                                                    fitsfile):
+                print("Model already contains a component (%s) for this image. Updating the component" % src.name)
+                # update source parameters
+                src.position.ra, src.position.dec = ra0, dec0
+                src.flux.I = max_flux
+                src.shape.ex, src.shape.ey = sx, sy
+                src.shape.nx, src.shape.ny = nx, ny
+                src.shape.pad = pad
+                break
+        # not contained, make new source object
+        else:
+            pos = ModelClasses.Position(ra0, dec0)
+            flux = ModelClasses.Flux(max_flux)
+            shape = ModelClasses.FITSImage(sx, sy, 0, fitsfile, nx, ny, pad=options.padding)
+            sname = options.source_name or os.path.splitext(os.path.basename(fitsfile))[0]
+            img_src = SkyModel.Source(sname, pos, flux, shape=shape)
+            print("Inserting new model component named %s" % sname)
+            sources.append(img_src)
+        # save model
+        model.setSources(sources)
+        model.save(output_model)
+        print("Saved %d source(s) to output model %s." % (len(model.sources), output_model))
--- tigger-lsm-1.7.0.orig/Tigger/bin/tigger-restore
+++ tigger-lsm-1.7.0/Tigger/bin/tigger-restore
@@ -1,215 +1,215 @@
-#!/usr/bin/python
-# -*- coding: utf-8 -*-
-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import os
-import sys
-
-from astropy.io import fits as pyfits
-from past.builtins import cmp
-
-if __name__ == '__main__':
-
-    import Tigger.Models.Formats
-    from Tigger.Models.Formats import ASCII
-
-    AUTO = "auto"
-    full_formats = Tigger.Models.Formats.listFormatsFull()
-    input_formats = [name for name, (load, save, doc, extensions) in full_formats if load] + [AUTO]
-
-    # setup some standard command-line option parsing
-    #
-    from optparse import OptionParser
-
-    parser = OptionParser(usage="""%prog: [options] input_image sky_model [output_image]""",
-                          description="""Restores sources from sky model into an input image, writes result to output image. If
-an output image is not specified, makes a name for it automatically.""")
-    parser.add_option("-t", "--type", choices=input_formats,
-                      help="Input model type (%s). Default is %%default." % (", ".join(input_formats)))
-    parser.add_option("--format", type="string",
-                      help="""Input format, for ASCII or BBS tables. For ASCII tables, default is "%s". For BBS tables, the default format is specified in the file header.""" % ASCII.DefaultDMSFormatString)
-    parser.add_option("-n", "--num-sources", dest="nsrc", type="int", action="store",
-                      help="Only restore the NSRC brightest sources")
-    parser.add_option("-s", "--scale", dest="fluxscale", metavar="FLUXSCALE[,N]", action="store",
-                      help="rescale model fluxes by given factor. If N is given, rescale N brightest only.")
-    parser.add_option("-b", "--restoring-beam", type="string", metavar="BMAJ[,BMIN,PA]",
-                      help="specify restoring beam size, overriding BMAJ/BMIN/BPA keywords in input image. " +
-                           "Use a single value (arcsec) for circular beam, or else " +
-                           "supply major/minor size and position angle (deg).")
-    parser.add_option("-p", "--psf-file", dest="psf", action="store",
-                      help="determine restoring beam size by fitting PSF file, overriding BMAJ/BMIN/BPA keywords in input image.")
-    parser.add_option("--clear", action="store_true",
-                      help="clear contents of FITS file before adding in sources")
-    parser.add_option("--pb", action="store_true",
-                      help="apply model primary beam function during restoration, if it's defined, and source is not tagged 'nobeam'")
-    parser.add_option("--beamgain", action="store_true",
-                      help="apply beamgain atribute during restoration, if it's defined, and source is not tagged 'nobeam'")
-    parser.add_option("--ignore-nobeam", action="store_true",
-                      help="apply PB or beamgain even if source is tagged 'nobeam'")
-    parser.add_option("-F", "--freq", type="float", metavar="MHz", default=0,
-                      help="use this frequency (for spectral indices and primary beams)")
-    parser.add_option("-f", dest="force", action="store_true",
-                      help="overwrite output image even if it already exists")
-    parser.add_option("-v", "--verbose", dest="verbose", type="int", action="store",
-                      help="set verbosity level (0 is silent, higher numbers mean more messages)")
-    parser.add_option("-T", "--timestamps", action="store_true",
-                      help="enable timestamps in debug messages (useful for timing)")
-    parser.set_defaults(n=0, fluxscale='1')
-
-    (options, rem_args) = parser.parse_args()
-
-    # get filenames
-    if len(rem_args) == 2:
-        input_image, skymodel = rem_args
-        name, ext = os.path.splitext(input_image)
-        output_image = name + ".restored" + ext
-    elif len(rem_args) == 3:
-        input_image, skymodel, output_image = rem_args
-    else:
-        parser.error("Insufficient number of arguments. Use -h for help.")
-
-    # check for overwritten output
-    if os.path.exists(output_image) and not options.force:
-        parser.error("File %s already exists, use the -f option to overwrite." % output_image)
-
-    # find Tigger
-    try:
-        import Tigger
-    except ImportError:
-        sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
-        try:
-            import Tigger
-        except:
-            print("Unable to import the Tigger package. Please check your installation and PYTHONPATH.")
-            sys.exit(1)
-
-    #Tigger.nuke_matplotlib();  # don't let the door hit you in the ass, sucka
-
-    from Tigger.Tools import Imaging
-    from Tigger.Tools.Imaging import FWHM, DEG, ARCSEC
-
-    Imaging._verbosity.set_verbose(options.verbose)
-    Imaging._verbosity.enable_timestamps(options.timestamps)
-
-    # read model and sort by apparent brightness
-    # figure out input type
-    try:
-        input_type, import_func, dum, input_doc = Tigger.Models.Formats.resolveFormat(skymodel,
-                                                                                      options.type if options.type != AUTO else None)
-    except:
-        print("Unable to determine model type for %s, please specify one explicitly with the -t/--type option." % skymodel)
-        sys.exit(1)
-
-    print("Reading %s (%s)" % (skymodel, input_doc))
-    model = import_func(skymodel, format=options.format)
-
-    Imaging.dprintf(1, "Read %d sources from %s\n", len(model.sources), skymodel)
-
-    sources = sorted(model.sources, key=lambda a: a.brightness()) #, lambda a, b: cmp(b.brightness(), a.brightness()))
-
-    # apply counts and flux scales
-    if options.nsrc:
-        sources = sources[:options.nsrc]
-        Imaging.dprintf(1, "Using %d brightest sources\n", len(sources))
-
-    if options.fluxscale != '1':
-        if "," in options.fluxscale:
-            scale, n = options.fluxscale.split(",", 1)
-            scale = float(scale)
-            n = int(n)
-            Imaging.dprintf(1, "Flux of %d brightest sources will be scaled by %f\n", n, scale)
-        else:
-            scale = float(options.fluxscale)
-            n = len(sources)
-            Imaging.dprintf(1, "Flux of all model sources will be scaled by %f\n", n, scale)
-        for src in sources[:n]:
-            src.flux.rescale(0.01)
-
-    # open input image
-    input_hdu = pyfits.open(input_image)[0]
-
-    # get restoring beam size
-    if options.restoring_beam:
-        ff = options.restoring_beam.split(",")
-        try:
-            if len(ff) == 1:
-                gx = gy = float(ff[0])
-                grot = 0
-                print("User-specified restoring beam of %.2f\"" % gx)
-            else:
-                gx, gy, grot = list(map(float, ff))
-                print("User-specified restoring beam of %.2f\" by %.2f\" at PA %.2f deg" % (gx, gy, grot))
-        except:
-            print("Invalid -b/--restoring-beam setting.")
-            sys.exit(1)
-        gx /= FWHM * ARCSEC
-        gy /= FWHM * ARCSEC
-        grot /= DEG
-    elif options.psf:
-        # fit the PSF
-        gx, gy, grot = Imaging.fitPsf(options.psf)
-        print("Fitted restoring beam to PSF file %s: %.2f\" by %.2f\" at PA %.2f deg" % (
-        options.psf, gx * FWHM * ARCSEC, gy * FWHM * ARCSEC, grot * DEG))
-    else:
-        # else look in input header
-        gx, gy, grot = [input_hdu.header.get(x, None) for x in ('BMAJ', 'BMIN', 'BPA')]
-        if any([x is None for x in (gx, gy, grot)]):
-            print("Unable to determine restoring beam size, no BMAJ/BMIN/BPA keywords in input image.")
-            print("Try using the -b/-p options to specify an explicit restoring beam.")
-            sys.exit(1)
-        print("Restoring beam (as per input header) is %.2f\" by %.2f\" at PA %.2f deg" % (gx * 3600, gy * 3600, grot))
-        gx /= DEG * FWHM
-        gy /= DEG * FWHM
-        grot /= DEG
-
-    pbexp = None
-    freq = options.freq * 1e+6 or model.refFreq() or 1400 * 1e+6
-
-    if options.pb and model.primaryBeam():
-        try:
-            pbexp = eval('lambda r,fq:' + model.primaryBeam())
-            dum = pbexp(0, 1e+9)  # evaluate at r=0 and 1 GHz as a test
-            if not isinstance(dum, float):
-                raise TypeError("Primary beam expression does not evaluate to a float")
-        except Exception as exc:
-            print("Bad primary beam expression '%s': %s" % (pb, str(exc)))
-            sys.exit(1)
-        if not freq:
-            print("Model must contain a reference requency, or else specify one with --freq.")
-            sys.exit(1)
-
-    # read, restore, write
-    print("Restoring model into input image %s" % input_image)
-    if options.clear:
-        input_hdu.data[...] = 0
-    Imaging.restoreSources(input_hdu, sources, gx, gy, grot, primary_beam=pbexp, freq=freq,
-                           apply_beamgain=options.beamgain, ignore_nobeam=options.ignore_nobeam)
-
-    print("Writing output image %s" % output_image)
-    if os.path.exists(output_image):
-        os.remove(output_image)
-    input_hdu.writeto(output_image)
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import os
+import sys
+
+from astropy.io import fits as pyfits
+from past.builtins import cmp
+
+if __name__ == '__main__':
+
+    import Tigger.Models.Formats
+    from Tigger.Models.Formats import ASCII
+
+    AUTO = "auto"
+    full_formats = Tigger.Models.Formats.listFormatsFull()
+    input_formats = [name for name, (load, save, doc, extensions) in full_formats if load] + [AUTO]
+
+    # setup some standard command-line option parsing
+    #
+    from optparse import OptionParser
+
+    parser = OptionParser(usage="""%prog: [options] input_image sky_model [output_image]""",
+                          description="""Restores sources from sky model into an input image, writes result to output image. If
+an output image is not specified, makes a name for it automatically.""")
+    parser.add_option("-t", "--type", choices=input_formats,
+                      help="Input model type (%s). Default is %%default." % (", ".join(input_formats)))
+    parser.add_option("--format", type="string",
+                      help="""Input format, for ASCII or BBS tables. For ASCII tables, default is "%s". For BBS tables, the default format is specified in the file header.""" % ASCII.DefaultDMSFormatString)
+    parser.add_option("-n", "--num-sources", dest="nsrc", type="int", action="store",
+                      help="Only restore the NSRC brightest sources")
+    parser.add_option("-s", "--scale", dest="fluxscale", metavar="FLUXSCALE[,N]", action="store",
+                      help="rescale model fluxes by given factor. If N is given, rescale N brightest only.")
+    parser.add_option("-b", "--restoring-beam", type="string", metavar="BMAJ[,BMIN,PA]",
+                      help="specify restoring beam size, overriding BMAJ/BMIN/BPA keywords in input image. " +
+                           "Use a single value (arcsec) for circular beam, or else " +
+                           "supply major/minor size and position angle (deg).")
+    parser.add_option("-p", "--psf-file", dest="psf", action="store",
+                      help="determine restoring beam size by fitting PSF file, overriding BMAJ/BMIN/BPA keywords in input image.")
+    parser.add_option("--clear", action="store_true",
+                      help="clear contents of FITS file before adding in sources")
+    parser.add_option("--pb", action="store_true",
+                      help="apply model primary beam function during restoration, if it's defined, and source is not tagged 'nobeam'")
+    parser.add_option("--beamgain", action="store_true",
+                      help="apply beamgain atribute during restoration, if it's defined, and source is not tagged 'nobeam'")
+    parser.add_option("--ignore-nobeam", action="store_true",
+                      help="apply PB or beamgain even if source is tagged 'nobeam'")
+    parser.add_option("-F", "--freq", type="float", metavar="MHz", default=0,
+                      help="use this frequency (for spectral indices and primary beams)")
+    parser.add_option("-f", dest="force", action="store_true",
+                      help="overwrite output image even if it already exists")
+    parser.add_option("-v", "--verbose", dest="verbose", type="int", action="store",
+                      help="set verbosity level (0 is silent, higher numbers mean more messages)")
+    parser.add_option("-T", "--timestamps", action="store_true",
+                      help="enable timestamps in debug messages (useful for timing)")
+    parser.set_defaults(n=0, fluxscale='1')
+
+    (options, rem_args) = parser.parse_args()
+
+    # get filenames
+    if len(rem_args) == 2:
+        input_image, skymodel = rem_args
+        name, ext = os.path.splitext(input_image)
+        output_image = name + ".restored" + ext
+    elif len(rem_args) == 3:
+        input_image, skymodel, output_image = rem_args
+    else:
+        parser.error("Insufficient number of arguments. Use -h for help.")
+
+    # check for overwritten output
+    if os.path.exists(output_image) and not options.force:
+        parser.error("File %s already exists, use the -f option to overwrite." % output_image)
+
+    # find Tigger
+    try:
+        import Tigger
+    except ImportError:
+        sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
+        try:
+            import Tigger
+        except:
+            print("Unable to import the Tigger package. Please check your installation and PYTHONPATH.")
+            sys.exit(1)
+
+    #Tigger.nuke_matplotlib();  # don't let the door hit you in the ass, sucka
+
+    from Tigger.Tools import Imaging
+    from Tigger.Tools.Imaging import FWHM, DEG, ARCSEC
+
+    Imaging._verbosity.set_verbose(options.verbose)
+    Imaging._verbosity.enable_timestamps(options.timestamps)
+
+    # read model and sort by apparent brightness
+    # figure out input type
+    try:
+        input_type, import_func, dum, input_doc = Tigger.Models.Formats.resolveFormat(skymodel,
+                                                                                      options.type if options.type != AUTO else None)
+    except:
+        print("Unable to determine model type for %s, please specify one explicitly with the -t/--type option." % skymodel)
+        sys.exit(1)
+
+    print("Reading %s (%s)" % (skymodel, input_doc))
+    model = import_func(skymodel, format=options.format)
+
+    Imaging.dprintf(1, "Read %d sources from %s\n", len(model.sources), skymodel)
+
+    sources = sorted(model.sources, key=lambda a: a.brightness()) #, lambda a, b: cmp(b.brightness(), a.brightness()))
+
+    # apply counts and flux scales
+    if options.nsrc:
+        sources = sources[:options.nsrc]
+        Imaging.dprintf(1, "Using %d brightest sources\n", len(sources))
+
+    if options.fluxscale != '1':
+        if "," in options.fluxscale:
+            scale, n = options.fluxscale.split(",", 1)
+            scale = float(scale)
+            n = int(n)
+            Imaging.dprintf(1, "Flux of %d brightest sources will be scaled by %f\n", n, scale)
+        else:
+            scale = float(options.fluxscale)
+            n = len(sources)
+            Imaging.dprintf(1, "Flux of all model sources will be scaled by %f\n", n, scale)
+        for src in sources[:n]:
+            src.flux.rescale(0.01)
+
+    # open input image
+    input_hdu = pyfits.open(input_image)[0]
+
+    # get restoring beam size
+    if options.restoring_beam:
+        ff = options.restoring_beam.split(",")
+        try:
+            if len(ff) == 1:
+                gx = gy = float(ff[0])
+                grot = 0
+                print("User-specified restoring beam of %.2f\"" % gx)
+            else:
+                gx, gy, grot = list(map(float, ff))
+                print("User-specified restoring beam of %.2f\" by %.2f\" at PA %.2f deg" % (gx, gy, grot))
+        except:
+            print("Invalid -b/--restoring-beam setting.")
+            sys.exit(1)
+        gx /= FWHM * ARCSEC
+        gy /= FWHM * ARCSEC
+        grot /= DEG
+    elif options.psf:
+        # fit the PSF
+        gx, gy, grot = Imaging.fitPsf(options.psf)
+        print("Fitted restoring beam to PSF file %s: %.2f\" by %.2f\" at PA %.2f deg" % (
+        options.psf, gx * FWHM * ARCSEC, gy * FWHM * ARCSEC, grot * DEG))
+    else:
+        # else look in input header
+        gx, gy, grot = [input_hdu.header.get(x, None) for x in ('BMAJ', 'BMIN', 'BPA')]
+        if any([x is None for x in (gx, gy, grot)]):
+            print("Unable to determine restoring beam size, no BMAJ/BMIN/BPA keywords in input image.")
+            print("Try using the -b/-p options to specify an explicit restoring beam.")
+            sys.exit(1)
+        print("Restoring beam (as per input header) is %.2f\" by %.2f\" at PA %.2f deg" % (gx * 3600, gy * 3600, grot))
+        gx /= DEG * FWHM
+        gy /= DEG * FWHM
+        grot /= DEG
+
+    pbexp = None
+    freq = options.freq * 1e+6 or model.refFreq() or 1400 * 1e+6
+
+    if options.pb and model.primaryBeam():
+        try:
+            pbexp = eval('lambda r,fq:' + model.primaryBeam())
+            dum = pbexp(0, 1e+9)  # evaluate at r=0 and 1 GHz as a test
+            if not isinstance(dum, float):
+                raise TypeError("Primary beam expression does not evaluate to a float")
+        except Exception as exc:
+            print("Bad primary beam expression '%s': %s" % (pb, str(exc)))
+            sys.exit(1)
+        if not freq:
+            print("Model must contain a reference requency, or else specify one with --freq.")
+            sys.exit(1)
+
+    # read, restore, write
+    print("Restoring model into input image %s" % input_image)
+    if options.clear:
+        input_hdu.data[...] = 0
+    Imaging.restoreSources(input_hdu, sources, gx, gy, grot, primary_beam=pbexp, freq=freq,
+                           apply_beamgain=options.beamgain, ignore_nobeam=options.ignore_nobeam)
+
+    print("Writing output image %s" % output_image)
+    if os.path.exists(output_image):
+        os.remove(output_image)
+    input_hdu.writeto(output_image)
--- tigger-lsm-1.7.0.orig/Tigger/bin/tigger-tag
+++ tigger-lsm-1.7.0/Tigger/bin/tigger-tag
@@ -1,375 +1,375 @@
-#!/usr/bin/python
-# -*- coding: utf-8 -*-
-
-#
-# % $Id$
-#
-#
-# Copyright (C) 2002-2011
-# The MeqTree Foundation &
-# ASTRON (Netherlands Foundation for Research in Astronomy)
-# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
-#
-# This program is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, see <http://www.gnu.org/licenses/>,
-# or write to the Free Software Foundation, Inc.,
-# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-#
-
-import fnmatch
-import math
-import re
-import sys
-
-import os.path
-
-DEG = math.pi / 180
-ARCSEC = DEG / 3600
-
-NATIVE = "Tigger"
-
-
-def transfer_tags(fromlsm, lsm, output, tags, tolerance, tigger):
-    """Transfers tags from a reference LSM to the given LSM. That is, for every tag
-    in the given list, finds all sources with those tags in 'fromlsm', then applies
-    these tags to all nearby sources in 'lsm' (within a radius of 'tolerance').
-    Saves the result to an LSM file given by 'output'.
-    """
-    # now, set dE tags on sources
-    tagset = frozenset(tags.split())
-    print("Transferring tags %s from %s to %s (%.2f\" tolerance)" % (",".join(tagset), fromlsm, lsm, tolerance))
-
-    refmodel = tigger.load(fromlsm)
-    model = tigger.load(lsm)
-    # for each dE-tagged source in the reference model, find all nearby sources
-    # in our LSM, and tag them
-    for src0 in refmodel.getSourceSubset(",".join(["=" + x for x in tagset])):
-        for src in model.getSourcesNear(src0.pos.ra, src0.pos.dec, tolerance=tolerance * ARCSEC):
-            for tag in tagset:
-                tagval = src0.getTag(tag, None)
-                if tagval is not None:
-                    if src.getTag(tag, None) != tagval:
-                        src.setTag(tag, tagval)
-                        print("setting tag %s=%s on source %s (from reference source %s)" % (
-                        tag, tagval, src.name, src0.name))
-    model.save(output)
-
-
-if __name__ == '__main__':
-    import Kittens.utils
-
-    _verbosity = Kittens.utils.verbosity(name="convert-model")
-    dprint = _verbosity.dprint
-    dprintf = _verbosity.dprintf
-
-    # find Tigger
-    try:
-        import Tigger
-    except ImportError:
-        dirname = os.path.dirname(os.path.realpath(__file__))
-        # go up the directory tree looking for directory "Tigger"
-        while len(dirname) > 1:
-            if os.path.basename(dirname) == "Tigger":
-                break
-            dirname = os.path.dirname(dirname)
-        else:
-            print("Unable to locate the Tigger directory, it is not a parent of %s. Please check your installation and/or PYTHONPATH." % os.path.realpath(
-                __file__))
-            sys.exit(1)
-        sys.path.append(os.path.dirname(dirname))
-        try:
-            import Tigger
-        except:
-            print("Unable to import the Tigger package from %s. Please check your installation and PYTHONPATH." % dirname)
-            sys.exit(1)
-
-    Tigger.nuke_matplotlib()  # don't let the door hit you in the ass, sucka
-
-    # setup some standard command-line option parsing
-    #
-    from optparse import OptionParser
-
-    parser = OptionParser(
-        usage="""%prog: sky_model [NAME or SELTAG<>SELVAL] [TAG=[TYPE:]VALUE or +TAG or !TAG or /TAG ...]""",
-        description=
-        """Sets or changes tags of selected sources in the sky model.
-        Use NAME (with shell-style wildcards allowed) to select sources by name, or 
-        =SELTAG to select sources having the specified (non-zero) tag, or SELTAG<>SELVAL to
-        select sources by comparing a tag to a value, where '<>'  represents a comparison
-        operator, and can be one of == (or =),!=,<=,<,>,>= (or the FORTRAN-style
-        operators .eq.,.ne.,.le.,.lt.,.gt.,.ge.). SELVAL may also be followed by one of the characters 
-        'd', 'm' or 's', in which case it will be converted from degrees,
-        minutes or seconds into radians. This is useful for selections such as "r<5d".
-        Then, with a subset of sources selected, use TAG=TYPE:VALUE (where TYPE is one of: bool, int, float, str, complex)
-        to set a tag on the selected sources to a value of a specific type, or TAG=VALUE to determine type
-        automatically, or +TAG to set a bool True tag, !TAG to set a False tag, and /TAG to remove a tag."""
-        )
-
-    parser.add_option("-l", "--list", action="store_true",
-                      help="Simply lists selected sources, does not apply any tags.")
-    parser.add_option("-o", "--output", metavar="FILENAME", type="string",
-                      help="Saves changes to different output model. Default is to save in place.")
-    parser.add_option("-f", "--force", action="store_true",
-                      help="Saves changes to model without prompting. Default is to prompt.")
-    parser.add_option("-t", "--transfer-tags", dest="transfer_tags", type="string", metavar="FROM_LSM:TOL",
-                      help="""Transfers tags from a reference LSM (FROM_LSM) to the given LSM (sky_model). 
-That is, for every tag in the given list, finds all sources with those tags in the reference LSM, 
-then applies these tags to all nearby sources in LSM  (within a radius of 'tolerance' [ARCSEC]). 
-Saves the result to an LSM file given by -o/--output.
-""")
-    parser.add_option("-d", "--debug", dest="verbose", type="string", action="append", metavar="Context=Level",
-                      help="(for debugging Python code) sets verbosity level of the named Python context. May be used multiple times.")
-
-    parser.set_defaults()
-
-    (options, rem_args) = parser.parse_args()
-
-    # get filenames
-    if len(rem_args) < 2:
-        parser.error("Incorrect number of arguments. Use -h for help.")
-
-    skymodel = rem_args[0]
-    # load the model
-    model = Tigger.load(skymodel)
-    if not model.sources:
-        print("Input model %s contains no sources" % skymodel)
-        sys.exit(0)
-    print("Input model contains %d sources" % len(model.sources))
-
-    if options.transfer_tags:
-        fromlsm, tolerance = options.transfer_tags.split(":")
-        tags = " ".join(rem_args[1:])
-        transfer_tags(fromlsm, skymodel, options.output, tags, float(tolerance), Tigger)
-        sys.exit(0)
-
-    # comparison predicates for the SELTAG<>SELVAL option
-    select_predicates = {
-        '==': lambda x, y: x == y,
-        '!=': lambda x, y: x != y,
-        '>=': lambda x, y: x >= y,
-        '<=': lambda x, y: x <= y,
-        '>': lambda x, y: x > y,
-        '<': lambda x, y: x < y,
-        '.eq.': lambda x, y: x == y,
-        '.ne.': lambda x, y: x != y,
-        '.ge.': lambda x, y: x >= y,
-        '.le.': lambda x, y: x <= y,
-        '.gt.': lambda x, y: x > y,
-        '.lt.': lambda x, y: x < y
-    }
-    # units for same
-    select_units = dict(d=DEG, m=DEG / 60, s=DEG / 3600)
-
-    # This is where we accumulate the result of selection arguments, until we hit the first tagging argument.
-    # Initially None, meaning no explicit selection
-    selected_ids = None
-
-    # This is where we put the selection when we hit the first tagging argument.
-    selection = None
-
-    # this is set to true when the selection is listed
-    listed = False
-    # set to true when the model is modified
-    modified = False
-
-
-    def apply_selection(sel, selstr):
-        global selection
-        global selected_ids
-        global listed
-        listed = False
-        """Helper function: applies selection argument"""
-        # if selection is not None, then we've already selected and tagged something, so we need
-        # to reset the selection to empty and start again. If selected_ids is None, this is the first selection
-        if selection is not None or selected_ids is None:
-            print("Selecting sources:")
-            selected_ids = set()
-            selection = None
-        # add to current selection
-        selected_ids.update(list(map(id, sel)))
-        # print result
-        if not len(sel):
-            print('  %-16s: no sources selected' % selstr)
-        elif len(sel) == 1:
-            print('  %-16s: one source selected (%s)' % (selstr, sel[0].name))
-        elif len(sel) <= 5:
-            print('  %-16s: %d sources selected (%s)' % (selstr, len(sel), " ".join([src.name for src in sel])))
-        else:
-            print('  %-16s: %d sources selected' % (selstr, len(sel)))
-
-
-    def retrieve_selection():
-        global selection
-        global selected_ids
-        """Helper function: retrieves current selection in preparation for tagging"""
-        # if selection is None, then we need to set it up based on selected_ids
-        if selection is None:
-            # no explicit selection: use entire model
-            if selected_ids is None:
-                selection = model.sources
-                print("No explicit selection, using all sources.")
-            # else use selected set
-            else:
-                selection = [src for src in model.sources if id(src) in selected_ids]
-                print("Using %d selected sources:" % len(selection))
-        if options.list:
-            print("Sources: %s" % (" ".join([x.name for x in selection])))
-            global listed
-            listed = True
-        return selection
-
-
-    def getTagValue(src, tag):
-        """Helper function: looks for the given tag in the source, or in its sub-objects"""
-        for obj in src, src.pos, src.flux, getattr(src, 'shape', None), getattr(src, 'spectrum', None):
-            if obj is not None and hasattr(obj, tag):
-                return getattr(obj, tag)
-        return None
-
-
-    def lookupObject(src, tagname):
-        """helper function to look into sub-objects of a Source object.
-        Given src and "a", returns src,"a"
-        Given src and "a.b", returns src.a and "b"
-        """
-        tags = tagname.split(".")
-        for subobj in tags[:-1]:
-            src = getattr(src, subobj, None)
-            if src is None:
-                print("Can't resolve attribute %s for source %s" % (tagname, src.name))
-                sys.exit(1)
-        return src, tags[-1]
-
-
-    # loop over all arguments
-    for arg in rem_args[1:]:
-        # Match either the SELTAG<>SELVAL, or the TAG=[TYPE:]VALUE, or the [+!/]TAG forms
-        # If none match, assume the NAME form
-        mselcomp = re.match("^(?i)([^=<>!.]+)(%s)([^dms]+)([dms])?" % "|".join(
-            [key.replace('.', '\.') for key in list(select_predicates.keys())]), arg)
-        mseltag = re.match("=(.+)$", arg)
-        mset = re.match("^(.+)=((bool|int|str|float|complex):)?(.+)$", arg)
-        msetbool = re.match("^([+!/])(.+)$", arg)
-
-        # SELTAG<>SELVAL selection
-        if mselcomp:
-            seltag, oper, selval, unit = mselcomp.groups()
-            try:
-                selval = float(selval) * select_units.get(unit, 1.)
-            except:
-                parser.error("Malformed selection string '%s': right-hand side is not a number." % arg)
-            predicate = select_predicates[oper.lower()]
-            # get tag value
-            srctag = [(src, getTagValue(src, seltag)) for src in model.sources]
-            apply_selection([src for src, tag in srctag if tag is not None and predicate(tag, selval)], arg)
-        elif mseltag:
-            seltag = mseltag.groups()[0]
-            apply_selection([src for src in model.sources if getTagValue(src, seltag)], arg)
-        elif not mseltag and not mselcomp and not mset and not msetbool:
-            apply_selection([src for src in model.sources if fnmatch.fnmatch(src.name, arg)], arg)
-        elif mset:
-            sources = retrieve_selection()
-            if options.list:
-                print("--list in effect, ignoring tagging commands")
-                continue
-            tagname, typespec, typename, value = mset.groups()
-            # if type is specified, use it to explicitly convert the value
-            # first bool: allow True/False/T/F
-            if typename == "bool":
-                val = value.lower()
-                if val == "true" or val == "t":
-                    newval = True
-                elif val == "false" or val == "f":
-                    newval = False
-                else:
-                    try:
-                        newval = bool(int(value))
-                    except:
-                        print("Can't parse \"%s\" as a value of type bool" % value)
-                        sys.exit(2)
-            # else some other type is specified -- use it to convert the value
-            elif typename:
-                try:
-                    newval = getattr(__builtin__, typename)(value)
-                except:
-                    print("Can't parse \"%s\" as a value of type %s" % (value, typename))
-                    sys.exit(2)
-            # else auto-convert
-            else:
-                newval = None
-                for tp in int, float, complex, str:
-                    try:
-                        newval = tp(value)
-                        break
-                    except:
-                        pass
-            # ok, value determined
-            if type(newval) is str:
-                value = '"%s"' % value
-            if sources:
-                print("  setting tag %s=%s (type '%s')" % (tagname, value, type(newval).__name__))
-                for src in sources:
-                    obj, tag = lookupObject(src, tagname)
-                    obj.setAttribute(tag, newval)
-                modified = True
-            else:
-                print("No sources selected, ignoring tagging commands")
-        elif msetbool:
-            sources = retrieve_selection()
-            if options.list:
-                print("--list in effect, ignoring tagging commands")
-                continue
-            if sources:
-                op, tagname = msetbool.groups()
-                if op == "+":
-                    print("  setting tag %s=True" % tagname)
-                    method = 'setAttribute'
-                    args = (tagname, True)
-                elif op == "!":
-                    print("  setting tag %s=False" % tagname)
-                    method = 'setAttribute'
-                    args = (tagname, False)
-                elif op == "/":
-                    print("  removing tag %s" % tagname)
-                    method = 'removeAttribute'
-                    args = (tagname,)
-                for src in sources:
-                    obj, tag = lookupObject(src, tagname)
-                    getattr(obj, method)(*args)
-                modified = True
-            else:
-                print("No sources selected, ignoring tagging commands")
-
-    if options.list:
-        if not listed:
-            retrieve_selection()
-
-    if not modified:
-        print("Model was not modified")
-        sys.exit(0)
-
-    # prompt
-    if not options.force:
-        try:
-            input("Press ENTER to save model or Ctrl+C to cancel: ")
-        except:
-            print("Cancelling")
-            sys.exit(1)
-
-    # save output
-    if options.output:
-        model.save(options.output)
-        print("Saved updated model to %s" % options.output)
-    else:
-        model.save(skymodel)
-        print("Saved updated model")
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+#
+# % $Id$
+#
+#
+# Copyright (C) 2002-2011
+# The MeqTree Foundation &
+# ASTRON (Netherlands Foundation for Research in Astronomy)
+# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, see <http://www.gnu.org/licenses/>,
+# or write to the Free Software Foundation, Inc.,
+# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+
+import fnmatch
+import math
+import re
+import sys
+
+import os.path
+
+DEG = math.pi / 180
+ARCSEC = DEG / 3600
+
+NATIVE = "Tigger"
+
+
+def transfer_tags(fromlsm, lsm, output, tags, tolerance, tigger):
+    """Transfers tags from a reference LSM to the given LSM. That is, for every tag
+    in the given list, finds all sources with those tags in 'fromlsm', then applies
+    these tags to all nearby sources in 'lsm' (within a radius of 'tolerance').
+    Saves the result to an LSM file given by 'output'.
+    """
+    # now, set dE tags on sources
+    tagset = frozenset(tags.split())
+    print("Transferring tags %s from %s to %s (%.2f\" tolerance)" % (",".join(tagset), fromlsm, lsm, tolerance))
+
+    refmodel = tigger.load(fromlsm)
+    model = tigger.load(lsm)
+    # for each dE-tagged source in the reference model, find all nearby sources
+    # in our LSM, and tag them
+    for src0 in refmodel.getSourceSubset(",".join(["=" + x for x in tagset])):
+        for src in model.getSourcesNear(src0.pos.ra, src0.pos.dec, tolerance=tolerance * ARCSEC):
+            for tag in tagset:
+                tagval = src0.getTag(tag, None)
+                if tagval is not None:
+                    if src.getTag(tag, None) != tagval:
+                        src.setTag(tag, tagval)
+                        print("setting tag %s=%s on source %s (from reference source %s)" % (
+                        tag, tagval, src.name, src0.name))
+    model.save(output)
+
+
+if __name__ == '__main__':
+    import Kittens.utils
+
+    _verbosity = Kittens.utils.verbosity(name="convert-model")
+    dprint = _verbosity.dprint
+    dprintf = _verbosity.dprintf
+
+    # find Tigger
+    try:
+        import Tigger
+    except ImportError:
+        dirname = os.path.dirname(os.path.realpath(__file__))
+        # go up the directory tree looking for directory "Tigger"
+        while len(dirname) > 1:
+            if os.path.basename(dirname) == "Tigger":
+                break
+            dirname = os.path.dirname(dirname)
+        else:
+            print("Unable to locate the Tigger directory, it is not a parent of %s. Please check your installation and/or PYTHONPATH." % os.path.realpath(
+                __file__))
+            sys.exit(1)
+        sys.path.append(os.path.dirname(dirname))
+        try:
+            import Tigger
+        except:
+            print("Unable to import the Tigger package from %s. Please check your installation and PYTHONPATH." % dirname)
+            sys.exit(1)
+
+    Tigger.nuke_matplotlib()  # don't let the door hit you in the ass, sucka
+
+    # setup some standard command-line option parsing
+    #
+    from optparse import OptionParser
+
+    parser = OptionParser(
+        usage="""%prog: sky_model [NAME or SELTAG<>SELVAL] [TAG=[TYPE:]VALUE or +TAG or !TAG or /TAG ...]""",
+        description=
+        """Sets or changes tags of selected sources in the sky model.
+        Use NAME (with shell-style wildcards allowed) to select sources by name, or 
+        =SELTAG to select sources having the specified (non-zero) tag, or SELTAG<>SELVAL to
+        select sources by comparing a tag to a value, where '<>'  represents a comparison
+        operator, and can be one of == (or =),!=,<=,<,>,>= (or the FORTRAN-style
+        operators .eq.,.ne.,.le.,.lt.,.gt.,.ge.). SELVAL may also be followed by one of the characters 
+        'd', 'm' or 's', in which case it will be converted from degrees,
+        minutes or seconds into radians. This is useful for selections such as "r<5d".
+        Then, with a subset of sources selected, use TAG=TYPE:VALUE (where TYPE is one of: bool, int, float, str, complex)
+        to set a tag on the selected sources to a value of a specific type, or TAG=VALUE to determine type
+        automatically, or +TAG to set a bool True tag, !TAG to set a False tag, and /TAG to remove a tag."""
+        )
+
+    parser.add_option("-l", "--list", action="store_true",
+                      help="Simply lists selected sources, does not apply any tags.")
+    parser.add_option("-o", "--output", metavar="FILENAME", type="string",
+                      help="Saves changes to different output model. Default is to save in place.")
+    parser.add_option("-f", "--force", action="store_true",
+                      help="Saves changes to model without prompting. Default is to prompt.")
+    parser.add_option("-t", "--transfer-tags", dest="transfer_tags", type="string", metavar="FROM_LSM:TOL",
+                      help="""Transfers tags from a reference LSM (FROM_LSM) to the given LSM (sky_model). 
+That is, for every tag in the given list, finds all sources with those tags in the reference LSM, 
+then applies these tags to all nearby sources in LSM  (within a radius of 'tolerance' [ARCSEC]). 
+Saves the result to an LSM file given by -o/--output.
+""")
+    parser.add_option("-d", "--debug", dest="verbose", type="string", action="append", metavar="Context=Level",
+                      help="(for debugging Python code) sets verbosity level of the named Python context. May be used multiple times.")
+
+    parser.set_defaults()
+
+    (options, rem_args) = parser.parse_args()
+
+    # get filenames
+    if len(rem_args) < 2:
+        parser.error("Incorrect number of arguments. Use -h for help.")
+
+    skymodel = rem_args[0]
+    # load the model
+    model = Tigger.load(skymodel)
+    if not model.sources:
+        print("Input model %s contains no sources" % skymodel)
+        sys.exit(0)
+    print("Input model contains %d sources" % len(model.sources))
+
+    if options.transfer_tags:
+        fromlsm, tolerance = options.transfer_tags.split(":")
+        tags = " ".join(rem_args[1:])
+        transfer_tags(fromlsm, skymodel, options.output, tags, float(tolerance), Tigger)
+        sys.exit(0)
+
+    # comparison predicates for the SELTAG<>SELVAL option
+    select_predicates = {
+        '==': lambda x, y: x == y,
+        '!=': lambda x, y: x != y,
+        '>=': lambda x, y: x >= y,
+        '<=': lambda x, y: x <= y,
+        '>': lambda x, y: x > y,
+        '<': lambda x, y: x < y,
+        '.eq.': lambda x, y: x == y,
+        '.ne.': lambda x, y: x != y,
+        '.ge.': lambda x, y: x >= y,
+        '.le.': lambda x, y: x <= y,
+        '.gt.': lambda x, y: x > y,
+        '.lt.': lambda x, y: x < y
+    }
+    # units for same
+    select_units = dict(d=DEG, m=DEG / 60, s=DEG / 3600)
+
+    # This is where we accumulate the result of selection arguments, until we hit the first tagging argument.
+    # Initially None, meaning no explicit selection
+    selected_ids = None
+
+    # This is where we put the selection when we hit the first tagging argument.
+    selection = None
+
+    # this is set to true when the selection is listed
+    listed = False
+    # set to true when the model is modified
+    modified = False
+
+
+    def apply_selection(sel, selstr):
+        global selection
+        global selected_ids
+        global listed
+        listed = False
+        """Helper function: applies selection argument"""
+        # if selection is not None, then we've already selected and tagged something, so we need
+        # to reset the selection to empty and start again. If selected_ids is None, this is the first selection
+        if selection is not None or selected_ids is None:
+            print("Selecting sources:")
+            selected_ids = set()
+            selection = None
+        # add to current selection
+        selected_ids.update(list(map(id, sel)))
+        # print result
+        if not len(sel):
+            print('  %-16s: no sources selected' % selstr)
+        elif len(sel) == 1:
+            print('  %-16s: one source selected (%s)' % (selstr, sel[0].name))
+        elif len(sel) <= 5:
+            print('  %-16s: %d sources selected (%s)' % (selstr, len(sel), " ".join([src.name for src in sel])))
+        else:
+            print('  %-16s: %d sources selected' % (selstr, len(sel)))
+
+
+    def retrieve_selection():
+        global selection
+        global selected_ids
+        """Helper function: retrieves current selection in preparation for tagging"""
+        # if selection is None, then we need to set it up based on selected_ids
+        if selection is None:
+            # no explicit selection: use entire model
+            if selected_ids is None:
+                selection = model.sources
+                print("No explicit selection, using all sources.")
+            # else use selected set
+            else:
+                selection = [src for src in model.sources if id(src) in selected_ids]
+                print("Using %d selected sources:" % len(selection))
+        if options.list:
+            print("Sources: %s" % (" ".join([x.name for x in selection])))
+            global listed
+            listed = True
+        return selection
+
+
+    def getTagValue(src, tag):
+        """Helper function: looks for the given tag in the source, or in its sub-objects"""
+        for obj in src, src.pos, src.flux, getattr(src, 'shape', None), getattr(src, 'spectrum', None):
+            if obj is not None and hasattr(obj, tag):
+                return getattr(obj, tag)
+        return None
+
+
+    def lookupObject(src, tagname):
+        """helper function to look into sub-objects of a Source object.
+        Given src and "a", returns src,"a"
+        Given src and "a.b", returns src.a and "b"
+        """
+        tags = tagname.split(".")
+        for subobj in tags[:-1]:
+            src = getattr(src, subobj, None)
+            if src is None:
+                print("Can't resolve attribute %s for source %s" % (tagname, src.name))
+                sys.exit(1)
+        return src, tags[-1]
+
+
+    # loop over all arguments
+    for arg in rem_args[1:]:
+        # Match either the SELTAG<>SELVAL, or the TAG=[TYPE:]VALUE, or the [+!/]TAG forms
+        # If none match, assume the NAME form
+        mselcomp = re.match("^(?i)([^=<>!.]+)(%s)([^dms]+)([dms])?" % "|".join(
+            [key.replace('.', '\.') for key in list(select_predicates.keys())]), arg)
+        mseltag = re.match("=(.+)$", arg)
+        mset = re.match("^(.+)=((bool|int|str|float|complex):)?(.+)$", arg)
+        msetbool = re.match("^([+!/])(.+)$", arg)
+
+        # SELTAG<>SELVAL selection
+        if mselcomp:
+            seltag, oper, selval, unit = mselcomp.groups()
+            try:
+                selval = float(selval) * select_units.get(unit, 1.)
+            except:
+                parser.error("Malformed selection string '%s': right-hand side is not a number." % arg)
+            predicate = select_predicates[oper.lower()]
+            # get tag value
+            srctag = [(src, getTagValue(src, seltag)) for src in model.sources]
+            apply_selection([src for src, tag in srctag if tag is not None and predicate(tag, selval)], arg)
+        elif mseltag:
+            seltag = mseltag.groups()[0]
+            apply_selection([src for src in model.sources if getTagValue(src, seltag)], arg)
+        elif not mseltag and not mselcomp and not mset and not msetbool:
+            apply_selection([src for src in model.sources if fnmatch.fnmatch(src.name, arg)], arg)
+        elif mset:
+            sources = retrieve_selection()
+            if options.list:
+                print("--list in effect, ignoring tagging commands")
+                continue
+            tagname, typespec, typename, value = mset.groups()
+            # if type is specified, use it to explicitly convert the value
+            # first bool: allow True/False/T/F
+            if typename == "bool":
+                val = value.lower()
+                if val == "true" or val == "t":
+                    newval = True
+                elif val == "false" or val == "f":
+                    newval = False
+                else:
+                    try:
+                        newval = bool(int(value))
+                    except:
+                        print("Can't parse \"%s\" as a value of type bool" % value)
+                        sys.exit(2)
+            # else some other type is specified -- use it to convert the value
+            elif typename:
+                try:
+                    newval = getattr(__builtin__, typename)(value)
+                except:
+                    print("Can't parse \"%s\" as a value of type %s" % (value, typename))
+                    sys.exit(2)
+            # else auto-convert
+            else:
+                newval = None
+                for tp in int, float, complex, str:
+                    try:
+                        newval = tp(value)
+                        break
+                    except:
+                        pass
+            # ok, value determined
+            if type(newval) is str:
+                value = '"%s"' % value
+            if sources:
+                print("  setting tag %s=%s (type '%s')" % (tagname, value, type(newval).__name__))
+                for src in sources:
+                    obj, tag = lookupObject(src, tagname)
+                    obj.setAttribute(tag, newval)
+                modified = True
+            else:
+                print("No sources selected, ignoring tagging commands")
+        elif msetbool:
+            sources = retrieve_selection()
+            if options.list:
+                print("--list in effect, ignoring tagging commands")
+                continue
+            if sources:
+                op, tagname = msetbool.groups()
+                if op == "+":
+                    print("  setting tag %s=True" % tagname)
+                    method = 'setAttribute'
+                    args = (tagname, True)
+                elif op == "!":
+                    print("  setting tag %s=False" % tagname)
+                    method = 'setAttribute'
+                    args = (tagname, False)
+                elif op == "/":
+                    print("  removing tag %s" % tagname)
+                    method = 'removeAttribute'
+                    args = (tagname,)
+                for src in sources:
+                    obj, tag = lookupObject(src, tagname)
+                    getattr(obj, method)(*args)
+                modified = True
+            else:
+                print("No sources selected, ignoring tagging commands")
+
+    if options.list:
+        if not listed:
+            retrieve_selection()
+
+    if not modified:
+        print("Model was not modified")
+        sys.exit(0)
+
+    # prompt
+    if not options.force:
+        try:
+            input("Press ENTER to save model or Ctrl+C to cancel: ")
+        except:
+            print("Cancelling")
+            sys.exit(1)
+
+    # save output
+    if options.output:
+        model.save(options.output)
+        print("Saved updated model to %s" % options.output)
+    else:
+        model.save(skymodel)
+        print("Saved updated model")
--- tigger-lsm-1.7.0.orig/setup.py
+++ tigger-lsm-1.7.0/setup.py
@@ -1,39 +1,39 @@
-#!/usr/bin/env python
-
-
-from setuptools import setup, find_packages
-
-__version__ = "1.7.0"
-
-# PyQt 5 has not been added here are. It needs to be installed via apt-get which is a Tigger v1.6.0 requirement.
-requirements = ['astro_kittens', 'numpy', 'scipy', 'astlib', 'astropy', 'future', 'python-casacore']
-
-scripts = [
-    'Tigger/bin/tigger-convert',
-    'Tigger/bin/tigger-make-brick',
-    'Tigger/bin/tigger-restore',
-    'Tigger/bin/tigger-tag',
-]
-
-package_data = {
-}
-
-extras_require = {
-}
-
-
-setup(
-    name="astro-tigger-lsm",
-    version=__version__,
-    packages=find_packages(),
-    extras_require=extras_require,
-    scripts=scripts,
-    package_data=package_data,
-    python_requires='>=2.7.0',
-    description="Python libraries and command-line tools for manipulating Tigger-format LSMs",
-    author="Oleg Smirnov",
-    author_email="osmirnov@gmail.com",
-    url="https://github.com/ska-sa/tigger-lsm",
-    install_requires=requirements,
-)
-
+#!/usr/bin/env python
+
+
+from setuptools import setup, find_packages
+
+__version__ = "1.7.0"
+
+# PyQt 5 has not been added here are. It needs to be installed via apt-get which is a Tigger v1.6.0 requirement.
+requirements = ['astro_kittens', 'numpy', 'scipy', 'astlib', 'astropy', 'future', 'python-casacore']
+
+scripts = [
+    'Tigger/bin/tigger-convert',
+    'Tigger/bin/tigger-make-brick',
+    'Tigger/bin/tigger-restore',
+    'Tigger/bin/tigger-tag',
+]
+
+package_data = {
+}
+
+extras_require = {
+}
+
+
+setup(
+    name="astro-tigger-lsm",
+    version=__version__,
+    packages=find_packages(),
+    extras_require=extras_require,
+    scripts=scripts,
+    package_data=package_data,
+    python_requires='>=2.7.0',
+    description="Python libraries and command-line tools for manipulating Tigger-format LSMs",
+    author="Oleg Smirnov",
+    author_email="osmirnov@gmail.com",
+    url="https://github.com/ska-sa/tigger-lsm",
+    install_requires=requirements,
+)
+
--- tigger-lsm-1.7.0.orig/test/3C147-HI6.refmodel.lsm.html
+++ tigger-lsm-1.7.0/test/3C147-HI6.refmodel.lsm.html
@@ -1,684 +1,684 @@
-<HTML><BODY mdltype=SkyModel>
-<H1>Source list</H1>
-<TABLE BORDER=1 FRAME=box RULES=all CELLPADDING=5>
-<TR mdltype=Source ><TD mdltype=str mdlval="'A0'"><A>name:A0</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.494884526020575"><A>ra:1.49488452602</A> </A> <A mdltype=float mdlval="0.8700817021977513"><A>dec:0.870081702198</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="9.859337158203125"><A>I:9.8593371582</A> </A> <A mdltype=float mdlval="-4.332709724913578e-06"><A>Q:-4.33270972491e-06</A> </A> <A mdltype=float mdlval="0.0002639347043305329"><A>U:0.000263934704331</A> </A> <A mdltype=float mdlval="0.002161076417922203"><A>V:0.00216107641792</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.60414714678021"><A>Iapp:9.60414714678</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0"><A>r:0.0</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9741169201003952"><A>newstar_beamgain:0.9741169201</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.0005626648780889809"><A>0:-0.000562664878089</A> </A> <A mdltype=float mdlval="-0.0008720166515558958"><A>1:-0.000872016651556</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.0010377884204526683"><A>_newstar_r:0.00103778842045</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'A0a'"><A>name:A0a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948834032245286"><A>ra:1.49488340322</A> </A> <A mdltype=float mdlval="0.870081163507394"><A>dec:0.870081163507</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="4.9295166015625"><A>I:4.92951660156</A> </A> <A mdltype=float mdlval="-2.166288075557132e-06"><A>Q:-2.16628807556e-06</A> </A> <A mdltype=float mdlval="0.00013196325682249821"><A>U:0.000131963256822</A> </A> <A mdltype=float mdlval="0.0010805048968762776"><A>V:0.00108050489688</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="4.801910683258429"><A>Iapp:4.80191068326</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="9.059121700269689e-07"><A>r:9.05912170027e-07</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9741139083975041"><A>newstar_beamgain:0.974113908398</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.0005619412986561656"><A>0:-0.000561941298656</A> </A> <A mdltype=float mdlval="-0.0008725557709112763"><A>1:-0.000872555770911</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.0010378495057020308"><A>_newstar_r:0.0010378495057</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'A0b'"><A>name:A0b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948837771342156"><A>ra:1.49488377713</A> </A> <A mdltype=float mdlval="0.8700814067196585"><A>dec:0.87008140672</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="3.28451904296875"><A>I:3.28451904297</A> </A> <A mdltype=float mdlval="-1.4433898923209287e-06"><A>Q:-1.44338989232e-06</A> </A> <A mdltype=float mdlval="8.792663370214893e-05"><A>U:8.79266337021e-05</A> </A> <A mdltype=float mdlval="0.0007199364961437026"><A>V:0.000719936496144</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="3.199507674717049"><A>Iapp:3.19950767472</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="5.701519986900464e-07"><A>r:5.7015199869e-07</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9741175596367185"><A>newstar_beamgain:0.974117559637</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.0005621822201646864"><A>0:-0.000562182220165</A> </A> <A mdltype=float mdlval="-0.000872312462888658"><A>1:-0.000872312462889</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.0010377754485341097"><A>_newstar_r:0.00103777544853</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'A0c'"><A>name:A0c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948841521584304"><A>ra:1.49488415216</A> </A> <A mdltype=float mdlval="0.8700815052949102"><A>dec:0.870081505295</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="3.2845193481445314"><A>I:3.28451934814</A> </A> <A mdltype=float mdlval="-1.443390026431169e-06"><A>Q:-1.44339002643e-06</A> </A> <A mdltype=float mdlval="8.792666576973363e-05"><A>U:8.79266657697e-05</A> </A> <A mdltype=float mdlval="0.0007199366586275336"><A>V:0.000719936658628</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="3.1995002063068227"><A>Iapp:3.19950020631</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="3.146933329394901e-07"><A>r:3.14693332939e-07</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9741151953068149"><A>newstar_beamgain:0.974115195307</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.0005624239565804601"><A>0:-0.00056242395658</A> </A> <A mdltype=float mdlval="-0.0008722136844880879"><A>1:-0.000872213684488</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.0010378234042186102"><A>_newstar_r:0.00103782340422</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'A0d'"><A>name:A0d</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948854877683981"><A>ra:1.49488548777</A> </A> <A mdltype=float mdlval="0.8700836408219729"><A>dec:0.870083640822</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="1.234733123779297"><A>I:1.23473312378</A> </A> <A mdltype=float mdlval="-5.426064782276373e-07"><A>Q:-5.42606478228e-07</A> </A> <A mdltype=float mdlval="3.3053832365716185e-05"><A>U:3.30538323657e-05</A> </A> <A mdltype=float mdlval="0.0002706421936292891"><A>V:0.000270642193629</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="1.2028530105806574"><A>Iapp:1.20285301058</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="2.034649752223638e-06"><A>r:2.03464975222e-06</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9741805637310027"><A>newstar_beamgain:0.974180563731</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.000563283683732152"><A>0:-0.000563283683732</A> </A> <A mdltype=float mdlval="-0.0008700787439011037"><A>1:-0.000870078743901</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.001036496757808429"><A>_newstar_r:0.00103649675781</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'A0e'"><A>name:A0e</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948856379910092"><A>ra:1.49488563799</A> </A> <A mdltype=float mdlval="0.8700845999786623"><A>dec:0.870084599979</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="0.4096230697631836"><A>I:0.409623069763</A> </A> <A mdltype=float mdlval="-1.8000985557485017e-07"><A>Q:-1.80009855575e-07</A> </A> <A mdltype=float mdlval="1.0965618416099512e-05"><A>U:1.09656184161e-05</A> </A> <A mdltype=float mdlval="8.978562575736592e-05"><A>V:8.97856257574e-05</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.399062000457211"><A>Iapp:0.399062000457</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="2.984736436304518e-06"><A>r:2.9847364363e-06</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9742175915236457"><A>newstar_beamgain:0.974217591524</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.000563379900995642"><A>0:-0.000563379900996</A> </A> <A mdltype=float mdlval="-0.0008691201801411808"><A>1:-0.000869120180141</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.00103574456328503"><A>_newstar_r:0.00103574456329</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'B290G'"><A>name:B290G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4920887319541576"><A>ra:1.49208873195</A> </A> <A mdltype=float mdlval="0.8708705147925772"><A>dec:0.870870514793</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03826158067268499"><A>I:0.0382615806727</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.56388867117967e-05"><A>ex:2.56388867118e-05</A> </A> <A mdltype=float mdlval="3.5081117965086026e-06"><A>ey:3.50811179651e-06</A> </A> <A mdltype=float mdlval="2.979855522534894"><A>pa:2.97985552253</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.8790400371758633"><A>spi:-0.879040037176</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.033559"><A>Iapp:0.033559</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8770939258125796"><A>beamgain:0.877093925813</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001966893645565263"><A>r:0.00196689364557</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'C242G'"><A>name:C242G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4867089988809803"><A>ra:1.48670899888</A> </A> <A mdltype=float mdlval="0.8673396788092076"><A>dec:0.867339678809</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0887058836969246"><A>I:0.0887058836969</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.7645278737662673e-05"><A>ex:1.76452787377e-05</A> </A> <A mdltype=float mdlval="7.661995416255106e-06"><A>ey:7.66199541626e-06</A> </A> <A mdltype=float mdlval="0.9986696138226915"><A>pa:0.998669613823</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.010392796216600608"><A>spi:0.0103927962166</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.018613"><A>cluster_flux:0.018613</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.018613"><A>Iapp:0.018613</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.20982824615776086"><A>beamgain:0.209828246158</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'C242'"><A>cluster:C242</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005949400625768698"><A>r:0.00594940062577</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'D140G'"><A>name:D140G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4979689556436366"><A>ra:1.49796895564</A> </A> <A mdltype=float mdlval="0.8679812618422407"><A>dec:0.867981261842</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0236825399308751"><A>I:0.0236825399309</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.2147491593880534e-05"><A>ex:1.21474915939e-05</A> </A> <A mdltype=float mdlval="1.1047934165124105e-05"><A>ey:1.10479341651e-05</A> </A> <A mdltype=float mdlval="2.293526418817556"><A>pa:2.29352641882</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.3646974893727074"><A>spi:-0.364697489373</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020393"><A>cluster_flux:0.020393</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.017901"><A>Iapp:0.017901</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7558733164706855"><A>beamgain:0.755873316471</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'D140'"><A>cluster:D140</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0028942549839698966"><A>r:0.00289425498397</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'E090'"><A>name:E090</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4976380586707512"><A>ra:1.49763805867</A> </A> <A mdltype=float mdlval="0.8699379504666516"><A>dec:0.869937950467</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0116135023170924"><A>I:0.0116135023171</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.8133517046735592"><A>spi:-0.813351704674</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012365"><A>cluster_flux:0.012365</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.010716"><A>Iapp:0.010716</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.92271906505142"><A>beamgain:0.922719065051</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'E090'"><A>cluster:E090</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0017813345672426989"><A>r:0.00178133456724</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'F121G'"><A>name:F121G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.499066261597658"><A>ra:1.4990662616</A> </A> <A mdltype=float mdlval="0.8685890727542478"><A>dec:0.868589072754</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.014704720808157915"><A>I:0.0147047208082</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.817256058289851e-05"><A>ex:6.81725605829e-05</A> </A> <A mdltype=float mdlval="2.165953601724963e-05"><A>ey:2.16595360172e-05</A> </A> <A mdltype=float mdlval="2.365468070280014"><A>pa:2.36546807028</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-1.1039561188845133"><A>spi:-1.10395611888</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012147"><A>cluster_flux:0.012147</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.01068"><A>Iapp:0.01068</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7262973666303768"><A>beamgain:0.72629736663</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'F121'"><A>cluster:F121</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0030838997158468633"><A>r:0.00308389971585</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'G195G'"><A>name:G195G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4890175284293006"><A>ra:1.48901752843</A> </A> <A mdltype=float mdlval="0.8536717610907447"><A>dec:0.853671761091</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="1.184207406832343"><A>I:1.18420740683</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.3440508468211354e-05"><A>ex:3.34405084682e-05</A> </A> <A mdltype=float mdlval="2.7925268031909274e-05"><A>ey:2.79252680319e-05</A> </A> <A mdltype=float mdlval="1.3359479642391932"><A>pa:1.33594796424</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="7.299087678304995"><A>spi:7.2990876783</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.011000000000000001"><A>cluster_flux:0.011</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.010611"><A>Iapp:0.010611</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.008960423603820846"><A>beamgain:0.00896042360382</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'G195'"><A>cluster:G195</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016848532799856226"><A>r:0.0168485327999</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'H194G'"><A>name:H194G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4905029781556731"><A>ra:1.49050297816</A> </A> <A mdltype=float mdlval="0.8559533776619994"><A>dec:0.855953377662</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.35345544967760817"><A>I:0.353455449678</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.5220007691318064e-05"><A>ex:2.52200076913e-05</A> </A> <A mdltype=float mdlval="1.8954275676658417e-05"><A>ey:1.89542756767e-05</A> </A> <A mdltype=float mdlval="0.2878596144456701"><A>pa:0.287859614446</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.4805344140241368"><A>spi:1.48053441402</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020439000000000002"><A>cluster_flux:0.020439</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.010415"><A>Iapp:0.010415</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02946623120254525"><A>beamgain:0.0294662312025</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'H194'"><A>cluster:H194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014412622601322332"><A>r:0.0144126226013</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'H194aG'"><A>name:H194aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4905675378847043"><A>ra:1.49056753788</A> </A> <A mdltype=float mdlval="0.8559875163021684"><A>dec:0.855987516302</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.3282685168540988"><A>I:0.328268516854</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.4766222085799535e-05"><A>ex:2.47662220858e-05</A> </A> <A mdltype=float mdlval="1.9896753472735356e-05"><A>ey:1.98967534727e-05</A> </A> <A mdltype=float mdlval="0.7490780012897864"><A>pa:0.74907800129</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.5425777742624247"><A>spi:1.54257777426</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020439000000000002"><A>cluster_flux:0.020439</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.009755"><A>Iapp:0.009755</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02971652625565575"><A>beamgain:0.0297165262557</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'H194'"><A>cluster:H194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014370892384043396"><A>r:0.014370892384</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'I215G'"><A>name:I215G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4836763671325925"><A>ra:1.48367636713</A> </A> <A mdltype=float mdlval="0.856759056551305"><A>dec:0.856759056551</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.41548313652379487"><A>I:0.415483136524</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.0421088862261163e-05"><A>ex:3.04210888623e-05</A> </A> <A mdltype=float mdlval="1.1833332328521554e-05"><A>ey:1.18333323285e-05</A> </A> <A mdltype=float mdlval="0.39178367395934566"><A>pa:0.391783673959</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.902473484685625"><A>spi:2.90247348469</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00963"><A>cluster_flux:0.00963</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00963"><A>Iapp:0.00963</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02317783600213215"><A>beamgain:0.0231778360021</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'I215'"><A>cluster:I215</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015183490533498096"><A>r:0.0151834905335</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'J001G'"><A>name:J001G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4951387995417729"><A>ra:1.49513879954</A> </A> <A mdltype=float mdlval="0.8737095895269188"><A>dec:0.873709589527</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.009638236242744293"><A>I:0.00963823624274</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.3963370629882146e-05"><A>ex:2.39633706299e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.3583094631832783"><A>pa:0.358309463183</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.5750208422631442"><A>spi:-0.575020842263</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006935"><A>cluster_flux:0.006935</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.005909"><A>Iapp:0.005909</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6130789753621491"><A>beamgain:0.613078975362</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'J001'"><A>cluster:J001</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003631574495178151"><A>r:0.00363157449518</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'B290aG'"><A>name:B290aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.492046076107239"><A>ra:1.49204607611</A> </A> <A mdltype=float mdlval="0.8710509818372334"><A>dec:0.871050981837</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006188563309864936"><A>I:0.00618856330986</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.883799554043888e-05"><A>ex:9.88379955404e-05</A> </A> <A mdltype=float mdlval="2.3771384412162766e-05"><A>ey:2.37713844122e-05</A> </A> <A mdltype=float mdlval="2.9795542612527073"><A>pa:2.97955426125</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-1.6429169879215684"><A>spi:-1.64291698792</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.005341"><A>Iapp:0.005341</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.863043606823272"><A>beamgain:0.863043606823</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0020700362338122186"><A>r:0.00207003623381</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'K285'"><A>name:K285</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.469994556593284"><A>ra:1.46999455659</A> </A> <A mdltype=float mdlval="0.8726284104151859"><A>dec:0.872628410415</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.2988771537956234"><A>I:0.298877153796</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="5.165175111712941"><A>spi:5.16517511171</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.004414"><A>cluster_flux:0.004414</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.004414"><A>Iapp:0.004414</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.014768609590742953"><A>beamgain:0.0147686095907</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'K285'"><A>cluster:K285</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01622477731627649"><A>r:0.0162247773163</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'L112G'"><A>name:L112G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.503673791196583"><A>ra:1.5036737912</A> </A> <A mdltype=float mdlval="0.8674993764357651"><A>dec:0.867499376436</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.022095505177117666"><A>I:0.0220955051771</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.464552226601495e-05"><A>ex:4.4645522266e-05</A> </A> <A mdltype=float mdlval="1.5114551322270893e-05"><A>ey:1.51145513223e-05</A> </A> <A mdltype=float mdlval="1.0086603671532974"><A>pa:1.00866036715</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.8024268552220519"><A>spi:-0.802426855222</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.009729000000000002"><A>cluster_flux:0.009729</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.004335"><A>Iapp:0.004335</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.19619374914719628"><A>beamgain:0.196193749147</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'L112'"><A>cluster:L112</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006235494183430911"><A>r:0.00623549418343</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'M301G'"><A>name:M301G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4906628328618632"><A>ra:1.49066283286</A> </A> <A mdltype=float mdlval="0.8718674294080239"><A>dec:0.871867429408</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005747212805681905"><A>I:0.00574721280568</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.667010419832838e-05"><A>ex:4.66701041983e-05</A> </A> <A mdltype=float mdlval="1.5777776438028738e-05"><A>ey:1.5777776438e-05</A> </A> <A mdltype=float mdlval="1.7723132116007607"><A>pa:1.7723132116</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-1.0586065366047654"><A>spi:-1.0586065366</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006154"><A>cluster_flux:0.006154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.003845"><A>Iapp:0.003845</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6690199458420423"><A>beamgain:0.669019945842</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'M301'"><A>cluster:M301</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003253062478494753"><A>r:0.00325306247849</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'N221G'"><A>name:N221G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4901570364446353"><A>ra:1.49015703644</A> </A> <A mdltype=float mdlval="0.8661805532930806"><A>dec:0.866180553293</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010367343216787278"><A>I:0.0103673432168</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.010913943868471e-05"><A>ex:6.01091394387e-05</A> </A> <A mdltype=float mdlval="2.097885760897184e-05"><A>ey:2.0978857609e-05</A> </A> <A mdltype=float mdlval="2.839965428218786"><A>pa:2.83996542822</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.2768832991034338"><A>spi:-0.276883299103</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.005606999999999999"><A>cluster_flux:0.005607</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00377"><A>Iapp:0.00377</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3636418628347755"><A>beamgain:0.363641862835</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'N221'"><A>cluster:N221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004955089179625451"><A>r:0.00495508917963</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'L112aG'"><A>name:L112aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5035645161321156"><A>ra:1.50356451613</A> </A> <A mdltype=float mdlval="0.8673290846606481"><A>dec:0.867329084661</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01782805293839603"><A>I:0.0178280529384</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.984586682303054e-05"><A>ex:3.9845866823e-05</A> </A> <A mdltype=float mdlval="4.694935687864746e-06"><A>ey:4.69493568786e-06</A> </A> <A mdltype=float mdlval="0.30654528395044656"><A>pa:0.30654528395</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.9664552563844166"><A>spi:-0.966455256384</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.009729000000000002"><A>cluster_flux:0.009729</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.003474"><A>Iapp:0.003474</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.19486143618735247"><A>beamgain:0.194861436187</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'L112'"><A>cluster:L112</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006245012834262666"><A>r:0.00624501283426</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'O265'"><A>name:O265</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4726144005202824"><A>ra:1.47261440052</A> </A> <A mdltype=float mdlval="0.8678486517256743"><A>dec:0.867848651726</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.11264831212331218"><A>I:0.112648312123</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.377467128864789"><A>spi:2.37746712886</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.003289"><A>cluster_flux:0.003289</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.003289"><A>Iapp:0.003289</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.029197064190359515"><A>beamgain:0.0291970641904</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'O265'"><A>cluster:O265</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01455016804317742"><A>r:0.0145501680432</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'P310'"><A>name:P310</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4925434774907647"><A>ra:1.49254347749</A> </A> <A mdltype=float mdlval="0.8711537293702983"><A>dec:0.87115372937</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0032203248876156013"><A>I:0.00322032488762</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.2860275029737752"><A>spi:0.286027502974</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.003063"><A>cluster_flux:0.003063</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002879"><A>Iapp:0.002879</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8940091762392565"><A>beamgain:0.894009176239</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'P310'"><A>cluster:P310</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001850600755585436"><A>r:0.00185060075559</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'Q210G'"><A>name:Q210G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.493771560965638"><A>ra:1.49377156097</A> </A> <A mdltype=float mdlval="0.8686284299288802"><A>dec:0.868628429929</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0030740429925802384"><A>I:0.00307404299258</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.933898472602468e-05"><A>ex:2.9338984726e-05</A> </A> <A mdltype=float mdlval="1.3631021458075714e-05"><A>ey:1.36310214581e-05</A> </A> <A mdltype=float mdlval="1.3028717234391656"><A>pa:1.30287172344</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.14273714190432324"><A>spi:-0.142737141904</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.003144"><A>cluster_flux:0.003144</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002846"><A>Iapp:0.002846</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9258165897059145"><A>beamgain:0.925816589706</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'Q210'"><A>cluster:Q210</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0016210619082500783"><A>r:0.00162106190825</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'R283'"><A>name:R283</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4776186085516005"><A>ra:1.47761860855</A> </A> <A mdltype=float mdlval="0.872807463743148"><A>dec:0.872807463743</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.13494386596000701"><A>I:0.13494386596</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.0591847681338784"><A>spi:1.05918476813</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.002681"><A>cluster_flux:0.002681</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002681"><A>Iapp:0.002681</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.019867520327263792"><A>beamgain:0.0198675203273</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'R283'"><A>cluster:R283</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011443715051298443"><A>r:0.0114437150513</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'D140a'"><A>name:D140a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4979681178855957"><A>ra:1.49796811789</A> </A> <A mdltype=float mdlval="0.8679815934547986"><A>dec:0.867981593455</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0032964004284253734"><A>I:0.00329640042843</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.33585798933856015"><A>spi:0.335857989339</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020393"><A>cluster_flux:0.020393</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002492"><A>Iapp:0.002492</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7559761182261404"><A>beamgain:0.755976118226</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'D140'"><A>cluster:D140</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0028936419802057006"><A>r:0.00289364198021</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'S270'"><A>name:S270</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4908381337319336"><A>ra:1.49083813373</A> </A> <A mdltype=float mdlval="0.8700407852661791"><A>dec:0.870040785266</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002902823496384571"><A>I:0.00290282349638</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-1.027955111472692"><A>spi:-1.02795511147</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00249"><A>cluster_flux:0.00249</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002257"><A>Iapp:0.002257</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7775188545948674"><A>beamgain:0.777518854595</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'S270'"><A>cluster:S270</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0026093566050248585"><A>r:0.00260935660502</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'T254'"><A>name:T254</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4747150962612752"><A>ra:1.47471509626</A> </A> <A mdltype=float mdlval="0.8654776568434249"><A>dec:0.865477656843</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06391065166847286"><A>I:0.0639106516685</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.9704825843232725"><A>spi:2.97048258432</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.002072"><A>cluster_flux:0.002072</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002072"><A>Iapp:0.002072</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.032420260878393115"><A>beamgain:0.0324202608784</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'T254'"><A>cluster:T254</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013828721397707355"><A>r:0.0138287213977</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'U051'"><A>name:U051</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5010552388132308"><A>ra:1.50105523881</A> </A> <A mdltype=float mdlval="0.8737105494580074"><A>dec:0.873710549458</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005678059562557201"><A>I:0.00567805956256</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.32672087269666683"><A>spi:-0.326720872697</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001788"><A>cluster_flux:0.001788</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001788"><A>Iapp:0.001788</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.31489630925864165"><A>beamgain:0.314896309259</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'U051'"><A>cluster:U051</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005378660320652578"><A>r:0.00537866032065</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'M301aG'"><A>name:M301aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.490421401466435"><A>ra:1.49042140147</A> </A> <A mdltype=float mdlval="0.8718151044370491"><A>dec:0.871815104437</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00273737341861733"><A>I:0.00273737341862</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.6563911215353693e-05"><A>ex:2.65639112154e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.631004941045969"><A>pa:2.63100494105</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.9563659512415716"><A>spi:-0.956365951242</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006154"><A>cluster_flux:0.006154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001779"><A>Iapp:0.001779</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.649893064607381"><A>beamgain:0.649893064607</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'M301'"><A>cluster:M301</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0033568769817674043"><A>r:0.00335687698177</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'V151'"><A>name:V151</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4976087894991952"><A>ra:1.4976087895</A> </A> <A mdltype=float mdlval="0.8664063290851187"><A>dec:0.866406329085</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002883827072369766"><A>I:0.00288382707237</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.15728346165511642"><A>spi:-0.157283461655</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001555"><A>cluster_flux:0.001555</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001555"><A>Iapp:0.001555</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5392140239262644"><A>beamgain:0.539214023926</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'V151'"><A>cluster:V151</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004075179751896895"><A>r:0.0040751797519</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'W201'"><A>name:W201</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.491690028939832"><A>ra:1.49169002894</A> </A> <A mdltype=float mdlval="0.865101870002178"><A>dec:0.865101870002</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005172285191005143"><A>I:0.00517228519101</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.0031084627207409454"><A>spi:-0.00310846272074</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0018319999999999999"><A>cluster_flux:0.001832</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001535"><A>Iapp:0.001535</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.2967740453812253"><A>beamgain:0.296774045381</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'W201'"><A>cluster:W201</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005391298734133585"><A>r:0.00539129873413</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'E090a'"><A>name:E090a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4976380412174586"><A>ra:1.49763804122</A> </A> <A mdltype=float mdlval="0.8699373919612909"><A>dec:0.869937391961</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0015768683632177254"><A>I:0.00157686836322</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.15715658899389928"><A>spi:0.157156588994</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012365"><A>cluster_flux:0.012365</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001455"><A>Iapp:0.001455</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9227149418046263"><A>beamgain:0.922714941805</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'E090'"><A>cluster:E090</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0017813690932388304"><A>r:0.00178136909324</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'X261'"><A>name:X261</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.487696855237609"><A>ra:1.48769685524</A> </A> <A mdltype=float mdlval="0.8688763364958335"><A>dec:0.868876336496</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0037566400884037404"><A>I:0.0037566400884</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7175421667402149"><A>spi:-0.71754216674</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001453"><A>cluster_flux:0.001453</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001453"><A>Iapp:0.001453</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3867817959152441"><A>beamgain:0.386781795915</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'X261'"><A>cluster:X261</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004791742588079754"><A>r:0.00479174258808</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'Y002'"><A>name:Y002</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4953079044929984"><A>ra:1.49530790449</A> </A> <A mdltype=float mdlval="0.8784570421719762"><A>dec:0.878457042172</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.07327267231113754"><A>I:0.0732726723111</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="4.146707374879245"><A>spi:4.14670737488</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001393"><A>cluster_flux:0.001393</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001393"><A>Iapp:0.001393</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.019011180513314813"><A>beamgain:0.0190111805133</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'Y002'"><A>cluster:Y002</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00837974380992449"><A>r:0.00837974380992</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'Z294'"><A>name:Z294</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.475647904933296"><A>ra:1.47564790493</A> </A> <A mdltype=float mdlval="0.8749484416832769"><A>dec:0.874948441683</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03846618057775607"><A>I:0.0384661805778</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.7899982099052734"><A>spi:1.78999820991</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0014370000000000001"><A>cluster_flux:0.001437</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00135"><A>Iapp:0.00135</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03509576411598993"><A>beamgain:0.035095764116</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'Z294'"><A>cluster:Z294</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013290228939175476"><A>r:0.0132902289392</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'aa322'"><A>name:aa322</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4890137759714088"><A>ra:1.48901377597</A> </A> <A mdltype=float mdlval="0.8747491250826992"><A>dec:0.874749125083</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006244825648635683"><A>I:0.00624482564864</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.08949429026377231"><A>spi:-0.0894942902638</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001294"><A>cluster_flux:0.001294</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001294"><A>Iapp:0.001294</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.20721154965834832"><A>beamgain:0.207211549658</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'aa322'"><A>cluster:aa322</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006002797749128491"><A>r:0.00600279774913</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ab325'"><A>name:ab325</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4789911354753686"><A>ra:1.47899113548</A> </A> <A mdltype=float mdlval="0.8810029364985676"><A>dec:0.881002936499</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.045127587424326"><A>I:0.0451275874243</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="3.524578316545999"><A>spi:3.52457831655</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001264"><A>cluster_flux:0.001264</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001264"><A>Iapp:0.001264</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02800947429595231"><A>beamgain:0.028009474296</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ab325'"><A>cluster:ab325</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014930485754927983"><A>r:0.0149304857549</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ac317'"><A>name:ac317</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4675364174214824"><A>ra:1.46753641742</A> </A> <A mdltype=float mdlval="0.8838460953033589"><A>dec:0.883846095303</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.34474621208322065"><A>I:0.344746212083</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="5.630595492363389"><A>spi:5.63059549236</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00189"><A>cluster_flux:0.00189</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001259"><A>Iapp:0.001259</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.003651961808056302"><A>beamgain:0.00365196180806</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ac317'"><A>cluster:ac317</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.022254878036971685"><A>r:0.022254878037</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ad342'"><A>name:ad342</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4907564348696476"><A>ra:1.49075643487</A> </A> <A mdltype=float mdlval="0.8769071723429126"><A>dec:0.876907172343</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01628678211290917"><A>I:0.0162867821129</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.8097715901148881"><A>spi:0.809771590115</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001957"><A>cluster_flux:0.001957</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001194"><A>Iapp:0.001194</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.07331098259450625"><A>beamgain:0.0733109825945</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ad342'"><A>cluster:ad342</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007322157722719575"><A>r:0.00732215772272</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'N221a'"><A>name:N221a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.490158170908649"><A>ra:1.49015817091</A> </A> <A mdltype=float mdlval="0.8660938976957191"><A>dec:0.866093897696</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.003294625523059915"><A>I:0.00329462552306</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.5412993214393516"><A>spi:-0.541299321439</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.005606999999999999"><A>cluster_flux:0.005607</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001161"><A>Iapp:0.001161</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3523920979406819"><A>beamgain:0.352392097941</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'N221'"><A>cluster:N221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0050232462912970285"><A>r:0.0050232462913</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ae232'"><A>name:ae232</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4875488338637475"><A>ra:1.48754883386</A> </A> <A mdltype=float mdlval="0.8655542418910025"><A>dec:0.865554241891</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00820482921818608"><A>I:0.00820482921819</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.431047004218636"><A>spi:2.43104700422</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00114"><A>cluster_flux:0.00114</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00114"><A>Iapp:0.00114</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.1389425629327152"><A>beamgain:0.138942562933</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ae232'"><A>cluster:ae232</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006556578558227931"><A>r:0.00655657855823</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'af235G'"><A>name:af235G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.47558351973719"><A>ra:1.47558351974</A> </A> <A mdltype=float mdlval="0.859954195906346"><A>dec:0.859954195906</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06829741031591728"><A>I:0.0682974103159</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.0578168494940654e-05"><A>ex:3.05781684949e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7315087490943406"><A>pa:0.731508749094</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="4.835124208223845"><A>spi:4.83512420822</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001011"><A>cluster_flux:0.001011</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001011"><A>Iapp:0.001011</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.014802903877665446"><A>beamgain:0.0148029038777</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'af235'"><A>cluster:af235</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01610235238864404"><A>r:0.0161023523886</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ag031'"><A>name:ag031</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.498661467384243"><A>ra:1.49866146738</A> </A> <A mdltype=float mdlval="0.8745237507163892"><A>dec:0.874523750716</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0026397108590530413"><A>I:0.00263971085905</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.6008029696851742"><A>spi:-0.600802969685</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000957"><A>cluster_flux:0.000957</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000957"><A>Iapp:0.000957</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.36253970646743866"><A>beamgain:0.362539706467</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ag031'"><A>cluster:ag031</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005062694884561391"><A>r:0.00506269488456</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'F121a'"><A>name:F121a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4990849366206542"><A>ra:1.49908493662</A> </A> <A mdltype=float mdlval="0.8685772743285043"><A>dec:0.868577274329</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0013103670017206533"><A>I:0.00131036700172</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.75136548645074"><A>spi:2.75136548645</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012147"><A>cluster_flux:0.012147</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000948"><A>Iapp:0.000948</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7234614415313981"><A>beamgain:0.723461441531</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'F121'"><A>cluster:F121</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0031001759559929573"><A>r:0.00310017595599</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ah081'"><A>name:ah081</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5032069156216745"><A>ra:1.50320691562</A> </A> <A mdltype=float mdlval="0.8712548537471589"><A>dec:0.871254853747</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0030338243266867775"><A>I:0.00303382432669</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.9084735520890121"><A>spi:-0.908473552089</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000916"><A>cluster_flux:0.000916</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000916"><A>Iapp:0.000916</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3019291499321447"><A>beamgain:0.301929149932</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ah081'"><A>cluster:ah081</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005489061455932976"><A>r:0.00548906145593</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ai295'"><A>name:ai295</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4716424441131393"><A>ra:1.47164244411</A> </A> <A mdltype=float mdlval="0.8757835293704787"><A>dec:0.87578352937</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.05062809327764703"><A>I:0.0506280932776</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="5.035960640711893"><A>spi:5.03596064071</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000883"><A>cluster_flux:0.000883</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000883"><A>Iapp:0.000883</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.017440909638006378"><A>beamgain:0.017440909638</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ai295'"><A>cluster:ai295</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01598607699964985"><A>r:0.0159860769996</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'aj180'"><A>name:aj180</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948587091034127"><A>ra:1.4948587091</A> </A> <A mdltype=float mdlval="0.8671749022745269"><A>dec:0.867174902275</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.001171303297573771"><A>I:0.00117130329757</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7597299927270662"><A>spi:-0.759729992727</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000869"><A>cluster_flux:0.000869</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000869"><A>Iapp:0.000869</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7419086088121156"><A>beamgain:0.741908608812</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'aj180'"><A>cluster:aj180</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002906846979947651"><A>r:0.00290684697995</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ak101G'"><A>name:ak101G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.502657800132412"><A>ra:1.50265780013</A> </A> <A mdltype=float mdlval="0.868857923272225"><A>dec:0.868857923272</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0023429366479754067"><A>I:0.00234293664798</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.766862494160269e-05"><A>ex:9.76686249416e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6628082264127139"><A>pa:0.662808226413</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000833"><A>cluster_flux:0.000833</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000833"><A>Iapp:0.000833</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3555367153097448"><A>beamgain:0.35553671531</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ak101'"><A>cluster:ak101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005162689423801002"><A>r:0.0051626894238</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'al080G'"><A>name:al080G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4990185442959083"><A>ra:1.4990185443</A> </A> <A mdltype=float mdlval="0.8704495762835812"><A>dec:0.870449576284</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0010198646261616456"><A>I:0.00101986462616</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="7.70737397680696e-05"><A>ex:7.70737397681e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.7722462518156785"><A>pa:2.77224625182</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.5851976105827296"><A>spi:0.585197610583</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0013720000000000002"><A>cluster_flux:0.001372</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000809"><A>Iapp:0.000809</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7932425336142366"><A>beamgain:0.793242533614</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'al080'"><A>cluster:al080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0026901509446972532"><A>r:0.0026901509447</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'L112b'"><A>name:L112b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5036849263972105"><A>ra:1.5036849264</A> </A> <A mdltype=float mdlval="0.8675023085889084"><A>dec:0.867502308589</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004055863930056866"><A>I:0.00405586393006</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.9379210113032612"><A>spi:1.9379210113</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.009729000000000002"><A>cluster_flux:0.009729</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000793"><A>Iapp:0.000793</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.19551937976106645"><A>beamgain:0.195519379761</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'L112'"><A>cluster:L112</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006240818402374902"><A>r:0.00624081840237</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'am235G'"><A>name:am235G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4766172782531464"><A>ra:1.47661727825</A> </A> <A mdltype=float mdlval="0.8605670857264763"><A>dec:0.860567085726</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.033853253624760875"><A>I:0.0338532536248</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.075270142014008e-05"><A>ex:3.07527014201e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8251118040763478"><A>pa:0.825111804076</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="3.046185354407594"><A>spi:3.04618535441</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000781"><A>cluster_flux:0.000781</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000781"><A>Iapp:0.000781</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02307016066038517"><A>beamgain:0.0230701606604</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'am235'"><A>cluster:am235</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01519240521097572"><A>r:0.015192405211</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'an071'"><A>name:an071</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.502926982262947"><A>ra:1.50292698226</A> </A> <A mdltype=float mdlval="0.8715740919206412"><A>dec:0.871574091921</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002455100302376349"><A>I:0.00245510030238</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7915066173610139"><A>spi:-0.791506617361</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000778"><A>cluster_flux:0.000778</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000778"><A>Iapp:0.000778</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3168913299578659"><A>beamgain:0.316891329958</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'an071'"><A>cluster:an071</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00539154653502674"><A>r:0.00539154653503</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ad342a'"><A>name:ad342a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4907169206153825"><A>ra:1.49071692062</A> </A> <A mdltype=float mdlval="0.8768915865526923"><A>dec:0.876891586553</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010355667214408469"><A>I:0.0103556672144</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.073981466713624"><A>spi:1.07398146671</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001957"><A>cluster_flux:0.001957</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000763"><A>Iapp:0.000763</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.07367946306138456"><A>beamgain:0.0736794630614</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ad342'"><A>cluster:ad342</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007316883053228132"><A>r:0.00731688305323</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'B290b'"><A>name:B290b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4920667058989974"><A>ra:1.4920667059</A> </A> <A mdltype=float mdlval="0.8709354759473364"><A>dec:0.870935475947</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008374208096926871"><A>I:0.000837420809693</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.2533724378447622"><A>spi:-0.253372437845</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00073"><A>Iapp:0.00073</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8717242174431897"><A>beamgain:0.871724217443</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0020066077925214023"><A>r:0.00200660779252</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ao344G'"><A>name:ao344G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4873235991237777"><A>ra:1.48732359912</A> </A> <A mdltype=float mdlval="0.8816582378195215"><A>dec:0.88165823782</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.023032200938294563"><A>I:0.0230322009383</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.9390607989657e-05"><A>ex:1.93906079897e-05</A> </A> <A mdltype=float mdlval="8.918632477691023e-06"><A>ey:8.91863247769e-06</A> </A> <A mdltype=float mdlval="2.0836155126005655"><A>pa:2.0836155126</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.2099402507470467"><A>spi:2.20994025075</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000716"><A>cluster_flux:0.000716</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000716"><A>Iapp:0.000716</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031086911837832236"><A>beamgain:0.0310869118378</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ao344'"><A>cluster:ao344</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012548096011327173"><A>r:0.0125480960113</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ap172'"><A>name:ap172</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4959974491738766"><A>ra:1.49599744917</A> </A> <A mdltype=float mdlval="0.8628023638060904"><A>dec:0.862802363806</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00897535718293354"><A>I:0.00897535718293</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.7078435341140903"><A>spi:1.70784353411</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000695"><A>cluster_flux:0.000695</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000695"><A>Iapp:0.000695</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.07743424421275717"><A>beamgain:0.0774342442128</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ap172'"><A>cluster:ap172</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007314922676990702"><A>r:0.00731492267699</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'aq071G'"><A>name:aq071G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5034368103907472"><A>ra:1.50343681039</A> </A> <A mdltype=float mdlval="0.8715442293371395"><A>dec:0.871544229337</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0025671509770156"><A>I:0.00256715097702</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.469861875750229e-05"><A>ex:5.46986187575e-05</A> </A> <A mdltype=float mdlval="2.829178717482808e-05"><A>ey:2.82917871748e-05</A> </A> <A mdltype=float mdlval="2.5547748236251433"><A>pa:2.55477482363</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-1.2294580542263924"><A>spi:-1.22945805423</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001136"><A>cluster_flux:0.001136</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000692"><A>Iapp:0.000692</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.26955952579169046"><A>beamgain:0.269559525792</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'aq071'"><A>cluster:aq071</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005700223553029314"><A>r:0.00570022355303</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ar073G'"><A>name:ar073G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.511355456473508"><A>ra:1.51135545647</A> </A> <A mdltype=float mdlval="0.8741233896392742"><A>dec:0.874123389639</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04719925346734011"><A>I:0.0471992534673</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.5902159327450866e-05"><A>ex:4.59021593275e-05</A> </A> <A mdltype=float mdlval="1.1344640137963142e-05"><A>ey:1.1344640138e-05</A> </A> <A mdltype=float mdlval="1.2756721633102355"><A>pa:1.27567216331</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-2.061904743868059"><A>spi:-2.06190474387</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000675"><A>cluster_flux:0.000675</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000675"><A>Iapp:0.000675</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0143010736486981"><A>beamgain:0.0143010736487</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ar073'"><A>cluster:ar073</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011339054885285839"><A>r:0.0113390548853</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'as271'"><A>name:as271</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4895581267118134"><A>ra:1.48955812671</A> </A> <A mdltype=float mdlval="0.8701104937165037"><A>dec:0.870110493717</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0010495489725337959"><A>I:0.00104954897253</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.5467076638942489"><A>spi:0.546707663894</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000664"><A>cluster_flux:0.000664</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000664"><A>Iapp:0.000664</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6326527083314533"><A>beamgain:0.632652708331</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'as271'"><A>cluster:as271</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0034343358376838443"><A>r:0.00343433583768</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'at014G'"><A>name:at014G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4970181700803202"><A>ra:1.49701817008</A> </A> <A mdltype=float mdlval="0.8826169471776419"><A>dec:0.882616947178</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.022267239731096435"><A>I:0.0222672397311</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.0001402546586902643"><A>ex:0.00014025465869</A> </A> <A mdltype=float mdlval="2.665117767795341e-05"><A>ey:2.6651177678e-05</A> </A> <A mdltype=float mdlval="0.7673039336162951"><A>pa:0.767303933616</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000944"><A>cluster_flux:0.000944</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000658"><A>Iapp:0.000658</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02955013768864652"><A>beamgain:0.0295501376886</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'at014'"><A>cluster:at014</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012609389008266088"><A>r:0.0126093890083</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'au021'"><A>name:au021</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4974696693045186"><A>ra:1.4974696693</A> </A> <A mdltype=float mdlval="0.8755661835187277"><A>dec:0.875566183519</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0024914742957367463"><A>I:0.00249147429574</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.8721995847559127"><A>spi:-0.872199584756</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000636"><A>cluster_flux:0.000636</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000636"><A>Iapp:0.000636</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.25527054446770053"><A>beamgain:0.255270544468</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'au021'"><A>cluster:au021</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005730591761839269"><A>r:0.00573059176184</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'av161'"><A>name:av161</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4971182472596296"><A>ra:1.49711824726</A> </A> <A mdltype=float mdlval="0.8665643686488868"><A>dec:0.866564368649</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0010773680371497871"><A>I:0.00107736803715</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.3028886032954041"><A>spi:-0.302888603295</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000634"><A>cluster_flux:0.000634</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000634"><A>Iapp:0.000634</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5884711427649812"><A>beamgain:0.588471142765</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'av161'"><A>cluster:av161</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0038019071924678054"><A>r:0.00380190719247</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ac317aG'"><A>name:ac317aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4675764029146456"><A>ra:1.46757640291</A> </A> <A mdltype=float mdlval="0.8838429537107053"><A>dec:0.883842953711</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.17331164559313803"><A>I:0.173311645593</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.424335992412875e-05"><A>ex:3.42433599241e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7462835895310034"><A>pa:0.746283589531</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="5.3224204745015555"><A>spi:5.3224204745</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00189"><A>cluster_flux:0.00189</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000631"><A>Iapp:0.000631</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0036408401630512437"><A>beamgain:0.00364084016305</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ac317'"><A>cluster:ac317</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02223287418409746"><A>r:0.0222328741841</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'aw034G'"><A>name:aw034G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5053701814163511"><A>ra:1.50537018142</A> </A> <A mdltype=float mdlval="0.8822248415078888"><A>dec:0.882224841508</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.020221095075116376"><A>I:0.0202210950751</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.7488935718910692e-05"><A>ex:2.74889357189e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.9080072815506621"><A>pa:0.908007281551</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.465592230859434"><A>spi:2.46559223086</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000627"><A>cluster_flux:0.000627</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000627"><A>Iapp:0.000627</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03100722278743311"><A>beamgain:0.0310072227874</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'aw034'"><A>cluster:aw034</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01387455763559206"><A>r:0.0138745576356</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ax213G'"><A>name:ax213G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4869485976806942"><A>ra:1.48694859768</A> </A> <A mdltype=float mdlval="0.8602310225790049"><A>dec:0.860231022579</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04526571400459344"><A>I:0.0452657140046</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.602506898901798e-05"><A>ex:5.6025068989e-05</A> </A> <A mdltype=float mdlval="2.117084382669122e-05"><A>ey:2.11708438267e-05</A> </A> <A mdltype=float mdlval="1.4115159910082746"><A>pa:1.41151599101</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001797"><A>cluster_flux:0.001797</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000618"><A>Iapp:0.000618</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.013652717373181984"><A>beamgain:0.0136527173732</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ax213'"><A>cluster:ax213</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01111406371564189"><A>r:0.0111140637156</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'L112c'"><A>name:L112c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.50356170615202"><A>ra:1.50356170615</A> </A> <A mdltype=float mdlval="0.8673229411016811"><A>dec:0.867322941102</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00313788178025012"><A>I:0.00313788178025</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.581965263387142"><A>spi:2.58196526339</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.009729000000000002"><A>cluster_flux:0.009729</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000611"><A>Iapp:0.000611</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.19471734207631533"><A>beamgain:0.194717342076</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'L112'"><A>cluster:L112</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006246113221032059"><A>r:0.00624611322103</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ay090'"><A>name:ay090</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.49810299693019"><A>ra:1.49810299693</A> </A> <A mdltype=float mdlval="0.8701900632771021"><A>dec:0.870190063277</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006836974666558675"><A>I:0.000683697466656</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.34844517391545904"><A>spi:0.348445173915</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000605"><A>cluster_flux:0.000605</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000605"><A>Iapp:0.000605</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8848943129176765"><A>beamgain:0.884894312918</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ay090'"><A>cluster:ay090</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002077843110391484"><A>r:0.00207784311039</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ax213aG'"><A>name:ax213aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4872717279384082"><A>ra:1.48727172794</A> </A> <A mdltype=float mdlval="0.8601825722389694"><A>dec:0.860182572239</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04662695211083994"><A>I:0.0466269521108</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.0492375260195954e-05"><A>ex:5.04923752602e-05</A> </A> <A mdltype=float mdlval="1.6441001553786583e-05"><A>ey:1.64410015538e-05</A> </A> <A mdltype=float mdlval="1.93840434572744"><A>pa:1.93840434573</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001797"><A>cluster_flux:0.001797</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000604"><A>Iapp:0.000604</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.012953881235131831"><A>beamgain:0.0129538812351</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ax213'"><A>cluster:ax213</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011061992056448495"><A>r:0.0110619920564</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'az034G'"><A>name:az034G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5061858261356857"><A>ra:1.50618582614</A> </A> <A mdltype=float mdlval="0.8812893275755275"><A>dec:0.881289327576</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.019356871728253858"><A>I:0.0193568717283</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.160791275361731e-05"><A>ex:3.16079127536e-05</A> </A> <A mdltype=float mdlval="5.951572749300664e-06"><A>ey:5.9515727493e-06</A> </A> <A mdltype=float mdlval="0.7603491281596556"><A>pa:0.76034912816</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.3104962402424625"><A>spi:1.31049624024</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000603"><A>cluster_flux:0.000603</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000603"><A>Iapp:0.000603</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03115172784452787"><A>beamgain:0.0311517278445</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'az034'"><A>cluster:az034</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013341603420539867"><A>r:0.0133416034205</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'B290cG'"><A>name:B290cG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4920386060980404"><A>ra:1.4920386061</A> </A> <A mdltype=float mdlval="0.8710546819352476"><A>dec:0.871054681935</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006889420939524911"><A>I:0.000688942093952</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.057890510886816e-05"><A>ex:4.05789051089e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8641093536164465"><A>pa:0.864109353616</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="4.866549689017183"><A>spi:4.86654968902</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000594"><A>Iapp:0.000594</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8621914747467322"><A>beamgain:0.862191474747</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002076018783513448"><A>r:0.00207601878351</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ba195'"><A>name:ba195</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4903346236960255"><A>ra:1.4903346237</A> </A> <A mdltype=float mdlval="0.8547936063740492"><A>dec:0.854793606374</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.02929067630253879"><A>I:0.0292906763025</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000592"><A>cluster_flux:0.000592</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000592"><A>Iapp:0.000592</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.020211209665673985"><A>beamgain:0.0202112096657</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ba195'"><A>cluster:ba195</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015572002752227778"><A>r:0.0155720027522</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bb131'"><A>name:bb131</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.499144504708025"><A>ra:1.49914450471</A> </A> <A mdltype=float mdlval="0.8676627043471667"><A>dec:0.867662704347</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0009359923942207983"><A>I:0.000935992394221</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.4106888312608168"><A>spi:-0.410688831261</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000581"><A>cluster_flux:0.000581</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000581"><A>Iapp:0.000581</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6207315396870026"><A>beamgain:0.620731539687</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bb131'"><A>cluster:bb131</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0036629756813445643"><A>r:0.00366297568134</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ax213bG'"><A>name:ax213bG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.487094245406773"><A>ra:1.48709424541</A> </A> <A mdltype=float mdlval="0.8602069893952049"><A>dec:0.860206989395</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04304973573415348"><A>I:0.0430497357342</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00014414674292221168"><A>ex:0.000144146742922</A> </A> <A mdltype=float mdlval="3.703588672731968e-05"><A>ey:3.70358867273e-05</A> </A> <A mdltype=float mdlval="1.8756290413234087"><A>pa:1.87562904132</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001797"><A>cluster_flux:0.001797</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000575"><A>Iapp:0.000575</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.013356644127871478"><A>beamgain:0.0133566441279</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ax213'"><A>cluster:ax213</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01109206490553427"><A>r:0.0110920649055</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bc328G'"><A>name:bc328G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.467107206051832"><A>ra:1.46710720605</A> </A> <A mdltype=float mdlval="0.8881057633290689"><A>dec:0.888105763329</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.5326354721187088"><A>I:0.532635472119</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.162757588791977e-05"><A>ex:6.16275758879e-05</A> </A> <A mdltype=float mdlval="1.6022122533307946e-05"><A>ey:1.60221225333e-05</A> </A> <A mdltype=float mdlval="2.3413166578765217"><A>pa:2.34131665788</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000569"><A>cluster_flux:0.000569</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000569"><A>Iapp:0.000569</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0010682728240697919"><A>beamgain:0.00106827282407</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bc328'"><A>cluster:bc328</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.025273066261624063"><A>r:0.0252730662616</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bd250'"><A>name:bd250</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4909393977351344"><A>ra:1.49093939774</A> </A> <A mdltype=float mdlval="0.8692779542100099"><A>dec:0.86927795421</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007319247948674079"><A>I:0.000731924794867</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7845945636292365"><A>spi:-0.784594563629</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000562"><A>cluster_flux:0.000562</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000562"><A>Iapp:0.000562</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7678384499896732"><A>beamgain:0.76783844999</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bd250'"><A>cluster:bd250</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002668798886638666"><A>r:0.00266879888664</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'be350'"><A>name:be350</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4940460838036842"><A>ra:1.4940460838</A> </A> <A mdltype=float mdlval="0.8728671190969812"><A>dec:0.872867119097</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007386972230725153"><A>I:0.000738697223073</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.24313824664240757"><A>spi:0.243138246642</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000555"><A>cluster_flux:0.000555</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000555"><A>Iapp:0.000555</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7513227106656087"><A>beamgain:0.751322710666</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'be350'"><A>cluster:be350</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002837223466927833"><A>r:0.00283722346693</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bf275'"><A>name:bf275</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.470196473734447"><A>ra:1.47019647373</A> </A> <A mdltype=float mdlval="0.8709231015629398"><A>dec:0.870923101563</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.030816351012871467"><A>I:0.0308163510129</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000535"><A>cluster_flux:0.000535</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000535"><A>Iapp:0.000535</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01736091335981147"><A>beamgain:0.0173609133598</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bf275'"><A>cluster:bf275</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0159320291395475"><A>r:0.0159320291395</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bg191'"><A>name:bg191</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4930446138788898"><A>ra:1.49304461388</A> </A> <A mdltype=float mdlval="0.8647329772114766"><A>dec:0.864732977211</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0018540674528342352"><A>I:0.00185406745283</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000732"><A>cluster_flux:0.000732</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00053"><A>Iapp:0.00053</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.2858579924855545"><A>beamgain:0.285857992486</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bg191'"><A>cluster:bg191</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005479516637524348"><A>r:0.00547951663752</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bh264G'"><A>name:bh264G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4757937970054702"><A>ra:1.47579379701</A> </A> <A mdltype=float mdlval="0.8671091557216042"><A>dec:0.867109155722</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01674515506394857"><A>I:0.0167451550639</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010712830948741196"><A>ex:0.000107128309487</A> </A> <A mdltype=float mdlval="1.5795229730548682e-05"><A>ey:1.57952297305e-05</A> </A> <A mdltype=float mdlval="0.07555823547197787"><A>pa:0.075558235472</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001327"><A>cluster_flux:0.001327</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000525"><A>Iapp:0.000525</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031352352247265666"><A>beamgain:0.0313523522473</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bh264'"><A>cluster:bh264</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012683802180140265"><A>r:0.0126838021801</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="nobeam" mdlval="True"><A>nobeam:True</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bi081'"><A>name:bi081</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5016133602014334"><A>ra:1.5016133602</A> </A> <A mdltype=float mdlval="0.8710974774085066"><A>dec:0.871097477409</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.001089912353848124"><A>I:0.00108991235385</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000521"><A>cluster_flux:0.000521</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000521"><A>Iapp:0.000521</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.47802008864338447"><A>beamgain:0.478020088643</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bi081'"><A>cluster:bi081</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004453281634276024"><A>r:0.00445328163428</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'F121b'"><A>name:F121b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4990046340217702"><A>ra:1.49900463402</A> </A> <A mdltype=float mdlval="0.8686146418277895"><A>dec:0.868614641828</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007066374511119615"><A>I:0.000706637451112</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.4240590023537463"><A>spi:2.42405900235</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012147"><A>cluster_flux:0.012147</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000519"><A>Iapp:0.000519</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7344643270510274"><A>beamgain:0.734464327051</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'F121'"><A>cluster:F121</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003036688937428283"><A>r:0.00303668893743</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'J001a'"><A>name:J001a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4951374032783713"><A>ra:1.49513740328</A> </A> <A mdltype=float mdlval="0.8737086645024152"><A>dec:0.873708664502</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008430457198374354"><A>I:0.000843045719837</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006935"><A>cluster_flux:0.006935</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000517"><A>Iapp:0.000517</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6132526241870881"><A>beamgain:0.613252624187</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'J001'"><A>cluster:J001</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003630610048755486"><A>r:0.00363061004876</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'L112dG'"><A>name:L112dG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5035988642117948"><A>ra:1.50359886421</A> </A> <A mdltype=float mdlval="0.8674368587419586"><A>dec:0.867436858742</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0026010863407512725"><A>I:0.00260108634075</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00013901547492134835"><A>ex:0.000139015474921</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.0905652570590334"><A>pa:0.090565257059</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.009729000000000002"><A>cluster_flux:0.009729</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000516"><A>Iapp:0.000516</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.19837865122576576"><A>beamgain:0.198378651226</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'L112'"><A>cluster:L112</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006218009061278482"><A>r:0.00621800906128</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'J001b'"><A>name:J001b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948955530039223"><A>ra:1.494895553</A> </A> <A mdltype=float mdlval="0.8737463112543808"><A>dec:0.873746311254</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008393916924586326"><A>I:0.000839391692459</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.5193418922479653"><A>spi:-0.519341892248</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006935"><A>cluster_flux:0.006935</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000509"><A>Iapp:0.000509</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6063915149185073"><A>beamgain:0.606391514919</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'J001'"><A>cluster:J001</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0036646167111662087"><A>r:0.00366461671117</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bj033G'"><A>name:bj033G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.504234303685861"><A>ra:1.50423430369</A> </A> <A mdltype=float mdlval="0.8798767977053034"><A>dec:0.879876797705</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03048339102662157"><A>I:0.0304833910266</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010068804454755287"><A>ex:0.000100688044548</A> </A> <A mdltype=float mdlval="3.204424506661589e-05"><A>ey:3.20442450666e-05</A> </A> <A mdltype=float mdlval="2.241939669756482"><A>pa:2.24193966976</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000508"><A>cluster_flux:0.000508</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000508"><A>Iapp:0.000508</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01666481263703098"><A>beamgain:0.016664812637</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bj033'"><A>cluster:bj033</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011483124280829596"><A>r:0.0114831242808</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bk194'"><A>name:bk194</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4898366289005542"><A>ra:1.4898366289</A> </A> <A mdltype=float mdlval="0.8574226656394983"><A>dec:0.857422665639</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.015622797370746073"><A>I:0.0156227973707</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000497"><A>cluster_flux:0.000497</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000497"><A>Iapp:0.000497</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03181248455098318"><A>beamgain:0.031812484551</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bk194'"><A>cluster:bk194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013076800368079643"><A>r:0.0130768003681</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bl001'"><A>name:bl001</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4949442302367604"><A>ra:1.49494423024</A> </A> <A mdltype=float mdlval="0.8742630857926038"><A>dec:0.874263085793</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0009679577526259028"><A>I:0.000967957752626</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000495"><A>cluster_flux:0.000495</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000495"><A>Iapp:0.000495</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5113859552828108"><A>beamgain:0.511385955283</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bl001'"><A>cluster:bl001</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0041815606617001625"><A>r:0.0041815606617</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bm255G'"><A>name:bm255G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4715438330104014"><A>ra:1.47154383301</A> </A> <A mdltype=float mdlval="0.8628807116362125"><A>dec:0.862880711636</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.05116865782016437"><A>I:0.0511686578202</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.7908551353316833e-05"><A>ex:3.79085513533e-05</A> </A> <A mdltype=float mdlval="1.1920598791121272e-05"><A>ey:1.19205987911e-05</A> </A> <A mdltype=float mdlval="0.804137885749159"><A>pa:0.804137885749</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000891"><A>cluster_flux:0.000891</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000486"><A>Iapp:0.000486</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.009498001720273357"><A>beamgain:0.00949800172027</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bm255'"><A>cluster:bm255</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01674089491568111"><A>r:0.0167408949157</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bn282G'"><A>name:bn282G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4826783355064246"><A>ra:1.48267833551</A> </A> <A mdltype=float mdlval="0.8711695420533214"><A>dec:0.871169542053</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01469858102192274"><A>I:0.0146985810219</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.6599554414321086e-05"><A>ex:3.65995544143e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.9762507808126784"><A>pa:1.97625078081</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000479"><A>cluster_flux:0.000479</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000479"><A>Iapp:0.000479</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0325881797219458"><A>beamgain:0.0325881797219</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bn282'"><A>cluster:bn282</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007939887221025226"><A>r:0.00793988722103</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bo022G'"><A>name:bo022G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.498302994209176"><A>ra:1.49830299421</A> </A> <A mdltype=float mdlval="0.877341113554836"><A>dec:0.877341113555</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.008012678005919038"><A>I:0.00801267800592</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.232349774693498e-05"><A>ex:3.23234977469e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.267768413384311"><A>pa:2.26776841338</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000475"><A>cluster_flux:0.000475</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000475"><A>Iapp:0.000475</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.059281054305328776"><A>beamgain:0.0592810543053</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bo022'"><A>cluster:bo022</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0075838793689515455"><A>r:0.00758387936895</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bp341'"><A>name:bp341</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.49195950777634"><A>ra:1.49195950778</A> </A> <A mdltype=float mdlval="0.8748965879512002"><A>dec:0.874896587951</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.001387178757502645"><A>I:0.0013871787575</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000463"><A>cluster_flux:0.000463</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000463"><A>Iapp:0.000463</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3337709703928458"><A>beamgain:0.333770970393</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bp341'"><A>cluster:bp341</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00516910195404883"><A>r:0.00516910195405</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bq192G'"><A>name:bq192G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4933279680829512"><A>ra:1.49332796808</A> </A> <A mdltype=float mdlval="0.8614748140171461"><A>dec:0.861474814017</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04300464118194119"><A>I:0.0430046411819</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.3666664657043108e-05"><A>ex:2.3666664657e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6250542065113686"><A>pa:0.625054206511</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000457"><A>cluster_flux:0.000457</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000457"><A>Iapp:0.000457</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.010626759983104025"><A>beamgain:0.0106267599831</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bq192'"><A>cluster:bq192</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00866579549994015"><A>r:0.00866579549994</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'aq071a'"><A>name:aq071a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.503360068263537"><A>ra:1.50336006826</A> </A> <A mdltype=float mdlval="0.8715292195055723"><A>dec:0.871529219506</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0016013775737705775"><A>I:0.00160137757377</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.44338937381178756"><A>spi:-0.443389373812</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001136"><A>cluster_flux:0.001136</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000444"><A>Iapp:0.000444</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.2772612825809499"><A>beamgain:0.277261282581</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'aq071'"><A>cluster:aq071</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005648637353970059"><A>r:0.00564863735397</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'br330'"><A>name:br330</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.492611894397443"><A>ra:1.4926118944</A> </A> <A mdltype=float mdlval="0.8723591061116032"><A>dec:0.872359106112</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00057511481246919"><A>I:0.000575114812469</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000442"><A>cluster_flux:0.000442</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000442"><A>Iapp:0.000442</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7685421943878012"><A>beamgain:0.768542194388</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'br330'"><A>cluster:br330</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002707013646365865"><A>r:0.00270701364637</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bs233G'"><A>name:bs233G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.481224162080248"><A>ra:1.48122416208</A> </A> <A mdltype=float mdlval="0.8628437804692403"><A>dec:0.862843780469</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.023845664962735318"><A>I:0.0238456649627</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.169517921621702e-05"><A>ex:3.16951792162e-05</A> </A> <A mdltype=float mdlval="8.080874436733745e-06"><A>ey:8.08087443673e-06</A> </A> <A mdltype=float mdlval="1.5093162835886478"><A>pa:1.50931628359</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000665"><A>cluster_flux:0.000665</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000435"><A>Iapp:0.000435</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.018242309479722787"><A>beamgain:0.0182423094797</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bs233'"><A>cluster:bs233</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011429216015763858"><A>r:0.0114292160158</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bt303G'"><A>name:bt303G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4802551203729557"><A>ra:1.48025512037</A> </A> <A mdltype=float mdlval="0.876210925597707"><A>dec:0.876210925598</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.025811781623030463"><A>I:0.025811781623</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.998917623282763e-05"><A>ex:8.99891762328e-05</A> </A> <A mdltype=float mdlval="1.1379546723003028e-05"><A>ey:1.1379546723e-05</A> </A> <A mdltype=float mdlval="1.8504227519200112"><A>pa:1.85042275192</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000434"><A>cluster_flux:0.000434</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000434"><A>Iapp:0.000434</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01681402726624516"><A>beamgain:0.0168140272662</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bt303'"><A>cluster:bt303</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011220128894811322"><A>r:0.0112201288948</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bu130'"><A>name:bu130</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4971706071371895"><A>ra:1.49717060714</A> </A> <A mdltype=float mdlval="0.8687339350821633"><A>dec:0.868733935082</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0004737687560487315"><A>I:0.000473768756049</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000423"><A>cluster_flux:0.000423</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000423"><A>Iapp:0.000423</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8928406413454806"><A>beamgain:0.892840641345</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bu130'"><A>cluster:bu130</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0019981377791280933"><A>r:0.00199813777913</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bv200'"><A>name:bv200</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.49350194250279"><A>ra:1.4935019425</A> </A> <A mdltype=float mdlval="0.8678252294071125"><A>dec:0.867825229407</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0005189191484181142"><A>I:0.000518919148418</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000423"><A>cluster_flux:0.000423</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000423"><A>Iapp:0.000423</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8151558894858351"><A>beamgain:0.815155889486</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bv200'"><A>cluster:bv200</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00242661595237495"><A>r:0.00242661595237</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bw336G'"><A>name:bw336G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4805384920303095"><A>ra:1.48053849203</A> </A> <A mdltype=float mdlval="0.8854732134051156"><A>dec:0.885473213405</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.1466105144141137"><A>I:0.146610514414</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.195697860401617e-05"><A>ex:3.1956978604e-05</A> </A> <A mdltype=float mdlval="1.6493361431346413e-05"><A>ey:1.64933614313e-05</A> </A> <A mdltype=float mdlval="2.7476949844805545"><A>pa:2.74769498448</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000423"><A>cluster_flux:0.000423</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000423"><A>Iapp:0.000423</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0028851955242800726"><A>beamgain:0.00288519552428</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bw336'"><A>cluster:bw336</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01791337142660872"><A>r:0.0179133714266</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bh264aG'"><A>name:bh264aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4758319673562115"><A>ra:1.47583196736</A> </A> <A mdltype=float mdlval="0.867221432752385"><A>dec:0.867221432752</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01361068675963317"><A>I:0.0136106867596</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.646213791594407e-05"><A>ex:6.64621379159e-05</A> </A> <A mdltype=float mdlval="4.6233771885329785e-05"><A>ey:4.62337718853e-05</A> </A> <A mdltype=float mdlval="2.0257304811342824"><A>pa:2.02573048113</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001327"><A>cluster_flux:0.001327</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000423"><A>Iapp:0.000423</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031078519950553954"><A>beamgain:0.0310785199506</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bh264'"><A>cluster:bh264</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012633151525071249"><A>r:0.0126331515251</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="nobeam" mdlval="True"><A>nobeam:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bx231'"><A>name:bx231</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4900169039589926"><A>ra:1.49001690396</A> </A> <A mdltype=float mdlval="0.8671591943112589"><A>dec:0.867159194311</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008743829611748795"><A>I:0.000874382961175</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000418"><A>cluster_flux:0.000418</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000418"><A>Iapp:0.000418</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4780514014572599"><A>beamgain:0.478051401457</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bx231'"><A>cluster:bx231</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004292452506153728"><A>r:0.00429245250615</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'by022'"><A>name:by022</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4983924772399255"><A>ra:1.49839247724</A> </A> <A mdltype=float mdlval="0.8756959487486136"><A>dec:0.875695948749</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.001967592407061195"><A>I:0.00196759240706</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000417"><A>cluster_flux:0.000417</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000417"><A>Iapp:0.000417</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.2119341376310926"><A>beamgain:0.211934137631</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'by022'"><A>cluster:by022</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006049908099710615"><A>r:0.00604990809971</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bz085'"><A>name:bz085</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5190749430353236"><A>ra:1.51907494304</A> </A> <A mdltype=float mdlval="0.8720972020040489"><A>dec:0.872097202004</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.02109709504682287"><A>I:0.0210970950468</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000507"><A>cluster_flux:0.000507</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000416"><A>Iapp:0.000416</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.019718354544866486"><A>beamgain:0.0197183545449</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bz085'"><A>cluster:bz085</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01570807023526805"><A>r:0.0157080702353</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ca255'"><A>name:ca255</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4709572802086839"><A>ra:1.47095728021</A> </A> <A mdltype=float mdlval="0.8649749322056806"><A>dec:0.864974932206</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.030324440769925624"><A>I:0.0303244407699</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000404"><A>cluster_flux:0.000404</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000404"><A>Iapp:0.000404</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.013322586987347463"><A>beamgain:0.0133225869873</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ca255'"><A>cluster:ca255</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016294693355872053"><A>r:0.0162946933559</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cb055G'"><A>name:cb055G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5153855613427032"><A>ra:1.51538556134</A> </A> <A mdltype=float mdlval="0.8811827752246931"><A>dec:0.881182775225</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.059119906824737785"><A>I:0.0591199068247</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.195845183187119e-05"><A>ex:5.19584518319e-05</A> </A> <A mdltype=float mdlval="2.064724505109292e-05"><A>ey:2.06472450511e-05</A> </A> <A mdltype=float mdlval="1.1027235956458854"><A>pa:1.10272359565</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000402"><A>cluster_flux:0.000402</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000402"><A>Iapp:0.000402</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.006799740080642169"><A>beamgain:0.00679974008064</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cb055'"><A>cluster:cb055</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01719441153914347"><A>r:0.0171944115391</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cc150'"><A>name:cc150</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.497068714815458"><A>ra:1.49706871482</A> </A> <A mdltype=float mdlval="0.8676118105461786"><A>dec:0.867611810546</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000524211758215733"><A>I:0.000524211758216</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000577"><A>cluster_flux:0.000577</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000399"><A>Iapp:0.000399</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7611427896201373"><A>beamgain:0.76114278962</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cc150'"><A>cluster:cc150</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0028441905942155326"><A>r:0.00284419059422</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cd345G'"><A>name:cd345G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4873722763566155"><A>ra:1.48737227636</A> </A> <A mdltype=float mdlval="0.8866583792336825"><A>dec:0.886658379234</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06033024161107503"><A>I:0.0603302416111</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.4975661596038856e-05"><A>ex:2.4975661596e-05</A> </A> <A mdltype=float mdlval="8.656833089891875e-06"><A>ey:8.65683308989e-06</A> </A> <A mdltype=float mdlval="2.4911845377268937"><A>pa:2.49118453773</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000398"><A>cluster_flux:0.000398</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000398"><A>Iapp:0.000398</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.006597023140827896"><A>beamgain:0.00659702314083</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cd345'"><A>cluster:cd345</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01725641252836046"><A>r:0.0172564125284</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ce348G'"><A>name:ce348G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4787887820018928"><A>ra:1.478788782</A> </A> <A mdltype=float mdlval="0.892268094342395"><A>dec:0.892268094342</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.187575703106332"><A>I:0.187575703106</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.422664324553631e-05"><A>ex:4.42266432455e-05</A> </A> <A mdltype=float mdlval="1.0157816246606998e-05"><A>ey:1.01578162466e-05</A> </A> <A mdltype=float mdlval="2.4157557184189513"><A>pa:2.41575571842</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000397"><A>cluster_flux:0.000397</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000397"><A>Iapp:0.000397</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002116478805226445"><A>beamgain:0.00211647880523</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ce348'"><A>cluster:ce348</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.024435349363834003"><A>r:0.0244353493638</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cf225G'"><A>name:cf225G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4784639064149265"><A>ra:1.47846390641</A> </A> <A mdltype=float mdlval="0.8582596731888773"><A>dec:0.858259673189</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.023417983810154183"><A>I:0.0234179838102</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.288347633542819e-05"><A>ex:5.28834763354e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.9959473016153083"><A>pa:0.995947301615</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0006969999999999999"><A>cluster_flux:0.000697</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000385"><A>Iapp:0.000385</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.016440356399642808"><A>beamgain:0.0164403563996</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cf225'"><A>cluster:cf225</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01591911968076521"><A>r:0.0159191196808</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cg053'"><A>name:cg053</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.505718706214682"><A>ra:1.50571870621</A> </A> <A mdltype=float mdlval="0.8761616898595083"><A>dec:0.87616168986</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.1485903006277715"><A>I:0.148590300628</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00047200000000000003"><A>cluster_flux:0.000472</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000382"><A>Iapp:0.000382</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0025708272907861945"><A>beamgain:0.00257082729079</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cg053'"><A>cluster:cg053</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009241788727739182"><A>r:0.00924178872774</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ch070G'"><A>name:ch070G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4965094938698265"><A>ra:1.49650949387</A> </A> <A mdltype=float mdlval="0.870510191568503"><A>dec:0.870510191569</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00038734588726479504"><A>I:0.000387345887265</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.18741318249815e-05"><A>ex:9.1874131825e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.3900907569447887"><A>pa:0.390090756945</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000767"><A>cluster_flux:0.000767</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000382"><A>Iapp:0.000382</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.986198672967604"><A>beamgain:0.986198672968</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ch070'"><A>cluster:ch070</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0011317042449990712"><A>r:0.001131704245</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bh264bG'"><A>name:bh264bG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4757242979946559"><A>ra:1.47572429799</A> </A> <A mdltype=float mdlval="0.8669416215667054"><A>dec:0.866941621567</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.011929072746064862"><A>I:0.0119290727461</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.46135621366851e-05"><A>ex:8.46135621367e-05</A> </A> <A mdltype=float mdlval="4.9288098076319865e-05"><A>ey:4.92880980763e-05</A> </A> <A mdltype=float mdlval="1.0019087354748826"><A>pa:1.00190873547</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001327"><A>cluster_flux:0.001327</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000379"><A>Iapp:0.000379</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03177111985715937"><A>beamgain:0.0317711198572</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bh264'"><A>cluster:bh264</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012768797009832985"><A>r:0.0127687970098</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="nobeam" mdlval="True"><A>nobeam:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'B290d'"><A>name:B290d</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4921525237383177"><A>ra:1.49215252374</A> </A> <A mdltype=float mdlval="0.8708866241815731"><A>dec:0.870886624182</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000422042390697006"><A>I:0.000422042390697</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000372"><A>Iapp:0.000372</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8814280465657475"><A>beamgain:0.881428046566</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0019359306505687078"><A>r:0.00193593065057</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ci291'"><A>name:ci291</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.490439797236751"><A>ra:1.49043979724</A> </A> <A mdltype=float mdlval="0.8709006740820516"><A>dec:0.870900674082</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000515749848665839"><A>I:0.000515749848666</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000369"><A>cluster_flux:0.000369</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000369"><A>Iapp:0.000369</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.715463128015535"><A>beamgain:0.715463128016</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ci291'"><A>cluster:ci291</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0029791912012463785"><A>r:0.00297919120125</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cj005G'"><A>name:cj005G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4931182318667389"><A>ra:1.49311823187</A> </A> <A mdltype=float mdlval="0.885819608901759"><A>dec:0.885819608902</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.019298528836856295"><A>I:0.0192985288369</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.0559978588493202e-05"><A>ex:2.05599785885e-05</A> </A> <A mdltype=float mdlval="1.8413223608540177e-05"><A>ey:1.84132236085e-05</A> </A> <A mdltype=float mdlval="1.7988978049677506"><A>pa:1.79889780497</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000368"><A>cluster_flux:0.000368</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000368"><A>Iapp:0.000368</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01906881105347234"><A>beamgain:0.0190688110535</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cj005'"><A>cluster:cj005</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015778288939368865"><A>r:0.0157782889394</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ck070'"><A>name:ck070</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.497403992564766"><A>ra:1.49740399256</A> </A> <A mdltype=float mdlval="0.8706473919010023"><A>dec:0.870647391901</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00037995969075168846"><A>I:0.000379959690752</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000353"><A>cluster_flux:0.000353</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000353"><A>Iapp:0.000353</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9290459187964042"><A>beamgain:0.929045918796</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ck070'"><A>cluster:ck070</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001719620256393853"><A>r:0.00171962025639</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cl055G'"><A>name:cl055G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5144605368391462"><A>ra:1.51446053684</A> </A> <A mdltype=float mdlval="0.88084953951061"><A>dec:0.880849539511</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.02935354303329913"><A>I:0.0293535430333</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.342673824532896e-05"><A>ex:8.34267382453e-05</A> </A> <A mdltype=float mdlval="3.087487446777969e-05"><A>ey:3.08748744678e-05</A> </A> <A mdltype=float mdlval="1.7451987362728654"><A>pa:1.74519873627</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000344"><A>cluster_flux:0.000344</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000344"><A>Iapp:0.000344</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.011719198585661735"><A>beamgain:0.0117191985857</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cl055'"><A>cluster:cl055</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0165292459938653"><A>r:0.0165292459939</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cm13xG'"><A>name:cm13xG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5290057792127087"><A>ra:1.52900577921</A> </A> <A mdltype=float mdlval="0.8476393446904916"><A>dec:0.84763934469</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.1083209155465395"><A>I:0.108320915547</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.464846872172499e-05"><A>ex:8.46484687217e-05</A> </A> <A mdltype=float mdlval="3.9688787190351054e-05"><A>ey:3.96887871904e-05</A> </A> <A mdltype=float mdlval="1.70842710984759"><A>pa:1.70842710985</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000333"><A>cluster_flux:0.000333</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000333"><A>Iapp:0.000333</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.003074198536079843"><A>beamgain:0.00307419853608</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cm13x'"><A>cluster:cm13x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.031629648878146635"><A>r:0.0316296488781</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cn184G'"><A>name:cn184G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4941748018360188"><A>ra:1.49417480184</A> </A> <A mdltype=float mdlval="0.8564808510685371"><A>dec:0.856480851069</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010107262136228935"><A>I:0.0101072621362</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.2881266493645663e-05"><A>ex:2.28812664936e-05</A> </A> <A mdltype=float mdlval="6.1784655520599265e-06"><A>ey:6.17846555206e-06</A> </A> <A mdltype=float mdlval="0.12806257393399534"><A>pa:0.128062573934</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000331"><A>cluster_flux:0.000331</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000331"><A>Iapp:0.000331</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03274873012480288"><A>beamgain:0.0327487301248</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cn184'"><A>cluster:cn184</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013608670030957504"><A>r:0.013608670031</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'co127G'"><A>name:co127G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5223919761853242"><A>ra:1.52239197619</A> </A> <A mdltype=float mdlval="0.8600273950151746"><A>dec:0.860027395015</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.3328761190407426"><A>I:0.332876119041</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="7.930776121062235e-05"><A>ex:7.93077612106e-05</A> </A> <A mdltype=float mdlval="2.5080381351158514e-05"><A>ey:2.50803813512e-05</A> </A> <A mdltype=float mdlval="1.241750659553467"><A>pa:1.24175065955</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000327"><A>cluster_flux:0.000327</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000327"><A>Iapp:0.000327</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0009823474298556593"><A>beamgain:0.000982347429856</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'co127'"><A>cluster:co127</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02047865389467688"><A>r:0.0204786538947</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cp211'"><A>name:cp211</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4925811940559002"><A>ra:1.49258119406</A> </A> <A mdltype=float mdlval="0.867576205829438"><A>dec:0.867576205829</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00044246654152716017"><A>I:0.000442466541527</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0008990000000000001"><A>cluster_flux:0.000899</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000324"><A>Iapp:0.000324</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7322587576491628"><A>beamgain:0.732258757649</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cp211'"><A>cluster:cp211</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0029136932355444544"><A>r:0.00291369323554</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cq298G'"><A>name:cq298G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4582236197855212"><A>ra:1.45822361979</A> </A> <A mdltype=float mdlval="0.8792766138821275"><A>dec:0.879276613882</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.304272247351729"><A>I:0.304272247352</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="7.271041663808377e-05"><A>ex:7.27104166381e-05</A> </A> <A mdltype=float mdlval="3.9426987802551905e-05"><A>ey:3.94269878026e-05</A> </A> <A mdltype=float mdlval="1.3029031393657016"><A>pa:1.30290313937</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000324"><A>cluster_flux:0.000324</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000324"><A>Iapp:0.000324</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0010648358593988573"><A>beamgain:0.0010648358594</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cq298'"><A>cluster:cq298</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02524166462225393"><A>r:0.0252416646223</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cp211aG'"><A>name:cp211aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4924079352210546"><A>ra:1.49240793522</A> </A> <A mdltype=float mdlval="0.867589470331753"><A>dec:0.867589470332</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00044504011777008926"><A>I:0.00044504011777</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.6511551337793864e-05"><A>ex:2.65115513378e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.271667513839851"><A>pa:2.27166751384</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0008990000000000001"><A>cluster_flux:0.000899</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000322"><A>Iapp:0.000322</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7235302777048684"><A>beamgain:0.723530277705</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cp211'"><A>cluster:cp211</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002961179431482554"><A>r:0.00296117943148</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cr04xG'"><A>name:cr04xG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5268356891806567"><A>ra:1.52683568918</A> </A> <A mdltype=float mdlval="0.8913894083304784"><A>dec:0.89138940833</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.23313856386606116"><A>I:0.233138563866</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.3058009260627624e-05"><A>ex:5.30580092606e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.9383551887573872"><A>pa:0.938355188757</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000317"><A>cluster_flux:0.000317</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000317"><A>Iapp:0.000317</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0013597064112572878"><A>beamgain:0.00135970641126</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cr04x'"><A>cluster:cr04x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.029455254730643213"><A>r:0.0294552547306</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cs171G'"><A>name:cs171G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4964931750413204"><A>ra:1.49649317504</A> </A> <A mdltype=float mdlval="0.8649594511352153"><A>dec:0.864959451135</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0009376793934180677"><A>I:0.000937679393418</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00014898130495023598"><A>ex:0.00014898130495</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.2185108500715842"><A>pa:1.21851085007</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0005239999999999999"><A>cluster_flux:0.000524</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000312"><A>Iapp:0.000312</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3327363299119592"><A>beamgain:0.332736329912</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cs171'"><A>cluster:cs171</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005226829096418354"><A>r:0.00522682909642</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ct324G'"><A>name:ct324G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.481946274604968"><A>ra:1.4819462746</A> </A> <A mdltype=float mdlval="0.880448777007767"><A>dec:0.880448777008</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00889506711631609"><A>I:0.00889506711632</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.8206730554010886e-05"><A>ex:5.8206730554e-05</A> </A> <A mdltype=float mdlval="2.2863813201125715e-05"><A>ey:2.28638132011e-05</A> </A> <A mdltype=float mdlval="0.7561973040284264"><A>pa:0.756197304028</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000312"><A>cluster_flux:0.000312</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000312"><A>Iapp:0.000312</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.035075620669314904"><A>beamgain:0.0350756206693</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ct324'"><A>cluster:ct324</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013274371858526686"><A>r:0.0132743718585</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cf225aG'"><A>name:cf225aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4782883088388832"><A>ra:1.47828830884</A> </A> <A mdltype=float mdlval="0.8581728954184681"><A>dec:0.858172895418</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.020574252480893392"><A>I:0.0205742524809</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.196066167365372e-05"><A>ex:8.19606616737e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6461231231097433"><A>pa:0.64612312311</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0006969999999999999"><A>cluster_flux:0.000697</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000312"><A>Iapp:0.000312</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.015164584972880243"><A>beamgain:0.0151645849729</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cf225'"><A>cluster:cf225</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0160602988858896"><A>r:0.0160602988859</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'N221bG'"><A>name:N221bG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.490104798740123"><A>ra:1.49010479874</A> </A> <A mdltype=float mdlval="0.8660965156895971"><A>dec:0.86609651569</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008906667295853902"><A>I:0.000890666729585</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.000441968356505e-05"><A>ex:6.00044196836e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.3305743313200813"><A>pa:0.33057433132</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7449505146767801"><A>spi:-0.744950514677</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.005606999999999999"><A>cluster_flux:0.005607</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000311"><A>Iapp:0.000311</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.34917662203995437"><A>beamgain:0.34917662204</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'N221'"><A>cluster:N221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005042223393214834"><A>r:0.00504222339321</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cu251G'"><A>name:cu251G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4891597902166307"><A>ra:1.48915979022</A> </A> <A mdltype=float mdlval="0.8689974797992144"><A>dec:0.868997479799</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0005482912458106664"><A>I:0.000548291245811</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010039133857471383"><A>ex:0.000100391338575</A> </A> <A mdltype=float mdlval="3.420845333908886e-05"><A>ey:3.42084533391e-05</A> </A> <A mdltype=float mdlval="1.819992220826497"><A>pa:1.81999222083</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000468"><A>cluster_flux:0.000468</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000305"><A>Iapp:0.000305</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5562737000278886"><A>beamgain:0.556273700028</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cu251'"><A>cluster:cu251</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0038493257512615107"><A>r:0.00384932575126</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cv174G'"><A>name:cv174G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.499814850767131"><A>ra:1.49981485077</A> </A> <A mdltype=float mdlval="0.8571806233788317"><A>dec:0.857180623379</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.009162009456401523"><A>I:0.0091620094564</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.907718533822553e-05"><A>ex:2.90771853382e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.4939616009129115"><A>pa:2.49396160091</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000304"><A>cluster_flux:0.000304</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000304"><A>Iapp:0.000304</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.033180494022257784"><A>beamgain:0.0331804940223</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cv174'"><A>cluster:cv174</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013292747937412145"><A>r:0.0132927479374</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'B290e'"><A>name:B290e</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4920402467075373"><A>ra:1.49204024671</A> </A> <A mdltype=float mdlval="0.8708530265934722"><A>dec:0.870853026593</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003478286817978296"><A>I:0.000347828681798</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000304"><A>Iapp:0.000304</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8739934798611451"><A>beamgain:0.873993479861</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0019887265750338882"><A>r:0.00198872657503</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cw276G'"><A>name:cw276G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.465779568996425"><A>ra:1.465779569</A> </A> <A mdltype=float mdlval="0.8693011321824764"><A>dec:0.869301132182</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.967793845581341"><A>I:0.967793845581</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.1608649367544815e-05"><A>ex:4.16086493675e-05</A> </A> <A mdltype=float mdlval="1.4748032179352085e-05"><A>ey:1.47480321794e-05</A> </A> <A mdltype=float mdlval="1.6660821235219214"><A>pa:1.66608212352</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000301"><A>cluster_flux:0.000301</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000301"><A>Iapp:0.000301</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0003110166502652156"><A>beamgain:0.000311016650265</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cw276'"><A>cluster:cw276</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018790348184745176"><A>r:0.0187903481847</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cx110'"><A>name:cx110</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4986489184669212"><A>ra:1.49864891847</A> </A> <A mdltype=float mdlval="0.8691334234946523"><A>dec:0.869133423495</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00037076346922860755"><A>I:0.000370763469229</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000299"><A>cluster_flux:0.000299</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000299"><A>Iapp:0.000299</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.806444066946738"><A>beamgain:0.806444066947</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cx110'"><A>cluster:cx110</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0026070781591248024"><A>r:0.00260707815912</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'Q210a'"><A>name:Q210a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4937820853010273"><A>ra:1.4937820853</A> </A> <A mdltype=float mdlval="0.8686264577068256"><A>dec:0.868626457707</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00032181376174801856"><A>I:0.000321813761748</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.003144"><A>cluster_flux:0.003144</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000298"><A>Iapp:0.000298</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9260014188993421"><A>beamgain:0.926001418899</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'Q210'"><A>cluster:Q210</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001619836275344131"><A>r:0.00161983627534</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'W201aG'"><A>name:W201aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4919113366889847"><A>ra:1.49191133669</A> </A> <A mdltype=float mdlval="0.8653173134450443"><A>dec:0.865317313445</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008804723441474854"><A>I:0.000880472344147</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.4297193029543594e-05"><A>ex:5.42971930295e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.4203641036858686"><A>pa:0.420364103686</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0018319999999999999"><A>cluster_flux:0.001832</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000297"><A>Iapp:0.000297</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3373189424678288"><A>beamgain:0.337318942468</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'W201'"><A>cluster:W201</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0051376113837013244"><A>r:0.0051376113837</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cy331G'"><A>name:cy331G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4923646161490203"><A>ra:1.49236461615</A> </A> <A mdltype=float mdlval="0.8731742621387472"><A>dec:0.873174262139</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00046724831326453635"><A>I:0.000467248313265</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.572615317439642e-05"><A>ex:2.57261531744e-05</A> </A> <A mdltype=float mdlval="7.57472895365539e-06"><A>ey:7.57472895366e-06</A> </A> <A mdltype=float mdlval="0.23134457917573972"><A>pa:0.231344579176</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000295"><A>cluster_flux:0.000295</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000295"><A>Iapp:0.000295</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6313559442064447"><A>beamgain:0.631355944206</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cy331'"><A>cluster:cy331</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00349200014328481"><A>r:0.00349200014328</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cz171'"><A>name:cz171</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4964734702740654"><A>ra:1.49647347027</A> </A> <A mdltype=float mdlval="0.8659020511043399"><A>dec:0.865902051104</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0005834079111351836"><A>I:0.000583407911135</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000288"><A>cluster_flux:0.000288</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000288"><A>Iapp:0.000288</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4936511735667336"><A>beamgain:0.493651173567</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cz171'"><A>cluster:cz171</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0043039806058877625"><A>r:0.00430398060589</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'at014aG'"><A>name:at014aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4968545978228234"><A>ra:1.49685459782</A> </A> <A mdltype=float mdlval="0.8824472488144705"><A>dec:0.882447248814</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010134232181075876"><A>I:0.0101342321811</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.705407663376712e-05"><A>ex:4.70540766338e-05</A> </A> <A mdltype=float mdlval="9.494591130849153e-06"><A>ey:9.49459113085e-06</A> </A> <A mdltype=float mdlval="1.1306589167742862"><A>pa:1.13065891677</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000944"><A>cluster_flux:0.000944</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000286"><A>Iapp:0.000286</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.028221180933081555"><A>beamgain:0.0282211809331</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'at014'"><A>cluster:at014</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012429662212042053"><A>r:0.012429662212</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'da222'"><A>name:da222</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4874937861791395"><A>ra:1.48749378618</A> </A> <A mdltype=float mdlval="0.8646020426109919"><A>dec:0.864602042611</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0037869423434740606"><A>I:0.00378694234347</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000283"><A>cluster_flux:0.000283</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000283"><A>Iapp:0.000283</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.07473047496687837"><A>beamgain:0.0747304749669</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'da222'"><A>cluster:da222</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007271991933221164"><A>r:0.00727199193322</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'db280G'"><A>name:db280G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4907535725296743"><A>ra:1.49075357253</A> </A> <A mdltype=float mdlval="0.8703718044121124"><A>dec:0.870371804412</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003680274902426378"><A>I:0.000368027490243</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.463175204313254e-05"><A>ex:9.46317520431e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.35752910856476"><A>pa:2.35752910856</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000282"><A>cluster_flux:0.000282</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000282"><A>Iapp:0.000282</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.766247107829036"><A>beamgain:0.766247107829</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'db280'"><A>cluster:db280</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002678791243349624"><A>r:0.00267879124335</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dc044G'"><A>name:dc044G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5074120072016746"><A>ra:1.5074120072</A> </A> <A mdltype=float mdlval="0.8801732767853396"><A>dec:0.880173276785</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.009460380661094597"><A>I:0.00946038066109</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.5395277230445004e-05"><A>ex:3.53952772304e-05</A> </A> <A mdltype=float mdlval="2.038544566329377e-05"><A>ey:2.03854456633e-05</A> </A> <A mdltype=float mdlval="0.4203935648436422"><A>pa:0.420393564844</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00028"><A>cluster_flux:0.00028</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00028"><A>Iapp:0.00028</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.029597117709172928"><A>beamgain:0.0295971177092</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dc044'"><A>cluster:dc044</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01289569111017856"><A>r:0.0128956911102</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dd348G'"><A>name:dd348G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4822969112516937"><A>ra:1.48229691125</A> </A> <A mdltype=float mdlval="0.8920905594508822"><A>dec:0.892090559451</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.08716879795137178"><A>I:0.0871687979514</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.054399852382827e-05"><A>ex:4.05439985238e-05</A> </A> <A mdltype=float mdlval="2.319542575900464e-05"><A>ey:2.3195425759e-05</A> </A> <A mdltype=float mdlval="3.004399075514724"><A>pa:3.00439907551</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000278"><A>cluster_flux:0.000278</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000278"><A>Iapp:0.000278</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0031892145645404657"><A>beamgain:0.00318921456454</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dd348'"><A>cluster:dd348</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.023420722241900033"><A>r:0.0234207222419</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'M301bG'"><A>name:M301bG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4906678419568165"><A>ra:1.49066784196</A> </A> <A mdltype=float mdlval="0.8718711644126231"><A>dec:0.871871164413</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0004124632757367746"><A>I:0.000412463275737</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.8676496224194345e-05"><A>ex:3.86764962242e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.647210811842927"><A>pa:2.64721081184</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006154"><A>cluster_flux:0.006154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000276"><A>Iapp:0.000276</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6691504825659615"><A>beamgain:0.669150482566</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'M301'"><A>cluster:M301</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0032524146953137934"><A>r:0.00325241469531</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'de024G'"><A>name:de024G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5027865879779168"><A>ra:1.50278658798</A> </A> <A mdltype=float mdlval="0.8811924443487492"><A>dec:0.881192444349</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010694840977888694"><A>I:0.0106948409779</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.5778513051956248e-05"><A>ex:2.5778513052e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6255511890158739"><A>pa:0.625551189016</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000269"><A>cluster_flux:0.000269</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000269"><A>Iapp:0.000269</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.025152314144375826"><A>beamgain:0.0251523141444</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'de024'"><A>cluster:de024</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012209183417202656"><A>r:0.0122091834172</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'df041'"><A>name:df041</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.499974426220641"><A>ra:1.49997442622</A> </A> <A mdltype=float mdlval="0.8737445310185438"><A>dec:0.873744531019</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000688396671395934"><A>I:0.000688396671396</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00041699999999999994"><A>cluster_flux:0.000417</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000269"><A>Iapp:0.000269</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.390763074804706"><A>beamgain:0.390763074805</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'df041'"><A>cluster:df041</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004913203675449471"><A>r:0.00491320367545</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dg092G'"><A>name:dg092G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5080914464261832"><A>ra:1.50809144643</A> </A> <A mdltype=float mdlval="0.8702177267457463"><A>dec:0.870217726746</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.014795187690888032"><A>I:0.0147951876909</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.7907078125461822e-05"><A>ex:1.79070781255e-05</A> </A> <A mdltype=float mdlval="1.3002702927357755e-05"><A>ey:1.30027029274e-05</A> </A> <A mdltype=float mdlval="1.855487662502714"><A>pa:1.8554876625</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000267"><A>cluster_flux:0.000267</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000267"><A>Iapp:0.000267</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0180464084389033"><A>beamgain:0.0180464084389</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dg092'"><A>cluster:dg092</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.008515706703312783"><A>r:0.00851570670331</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dh210'"><A>name:dh210</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4927572628708414"><A>ra:1.49275726287</A> </A> <A mdltype=float mdlval="0.8678709744868073"><A>dec:0.867870974487</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003390608256073515"><A>I:0.000339060825607</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00048300000000000003"><A>cluster_flux:0.000483</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000266"><A>Iapp:0.000266</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7845200032280952"><A>beamgain:0.784520003228</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dh210'"><A>cluster:dh210</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0026025937301084683"><A>r:0.00260259373011</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'di251G'"><A>name:di251G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.490112216389444"><A>ra:1.49011221639</A> </A> <A mdltype=float mdlval="0.8690656349065048"><A>dec:0.869065634907</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003968836823045322"><A>I:0.000396883682305</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.492477494633404e-05"><A>ex:4.49247749463e-05</A> </A> <A mdltype=float mdlval="1.3212142437597073e-05"><A>ey:1.32121424376e-05</A> </A> <A mdltype=float mdlval="1.7488400515978864"><A>pa:1.7488400516</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000265"><A>cluster_flux:0.000265</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000265"><A>Iapp:0.000265</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6677019283364319"><A>beamgain:0.667701928336</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'di251'"><A>cluster:di251</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003242194963006696"><A>r:0.00324219496301</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'G195a'"><A>name:G195a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4890258187432477"><A>ra:1.48902581874</A> </A> <A mdltype=float mdlval="0.8536914134981222"><A>dec:0.853691413498</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.02896142820269427"><A>I:0.0289614282027</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.011000000000000001"><A>cluster_flux:0.011</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000264"><A>Iapp:0.000264</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.009115572552303903"><A>beamgain:0.0091155725523</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'G195'"><A>cluster:G195</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016828158843751686"><A>r:0.0168281588438</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dj241G'"><A>name:dj241G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4873352055633033"><A>ra:1.48733520556</A> </A> <A mdltype=float mdlval="0.8674540851416759"><A>dec:0.867454085142</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000982639931443642"><A>I:0.000982639931444</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.3666664657043108e-05"><A>ex:2.3666664657e-05</A> </A> <A mdltype=float mdlval="6.544984694978736e-06"><A>ey:6.54498469498e-06</A> </A> <A mdltype=float mdlval="2.353594211406261"><A>pa:2.35359421141</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000428"><A>cluster_flux:0.000428</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000263"><A>Iapp:0.000263</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.26764635914359236"><A>beamgain:0.267646359144</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dj241'"><A>cluster:dj241</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005538136695297449"><A>r:0.0055381366953</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dk258G'"><A>name:dk258G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4592674139446762"><A>ra:1.45926741394</A> </A> <A mdltype=float mdlval="0.8632375092951977"><A>dec:0.863237509295</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.11646526609927536"><A>I:0.116465266099</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.860815628196958e-05"><A>ex:5.8608156282e-05</A> </A> <A mdltype=float mdlval="2.3823744289722596e-05"><A>ey:2.38237442897e-05</A> </A> <A mdltype=float mdlval="1.5899181540797465"><A>pa:1.58991815408</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000262"><A>cluster_flux:0.000262</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000262"><A>Iapp:0.000262</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0022495977451051407"><A>beamgain:0.00224959774511</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dk258'"><A>cluster:dk258</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.024051109471022816"><A>r:0.024051109471</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dl351G'"><A>name:dl351G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4935586133436023"><A>ra:1.49355861334</A> </A> <A mdltype=float mdlval="0.8738445383846831"><A>dec:0.873844538385</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0004581155105801508"><A>I:0.00045811551058</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.7925268031909274e-05"><A>ex:2.79252680319e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.3998829088031512"><A>pa:2.3998829088</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00026"><A>cluster_flux:0.00026</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00026"><A>Iapp:0.00026</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5675424516204216"><A>beamgain:0.56754245162</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dl351'"><A>cluster:dl351</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0038583082499356"><A>r:0.00385830824994</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dm273'"><A>name:dm273</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4770481476855861"><A>ra:1.47704814769</A> </A> <A mdltype=float mdlval="0.8702604873124202"><A>dec:0.870260487312</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.012791613613256186"><A>I:0.0127916136133</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00026"><A>cluster_flux:0.00026</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00026"><A>Iapp:0.00026</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.020325817200306705"><A>beamgain:0.0203258172003</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dm273'"><A>cluster:dm273</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011500343308051377"><A>r:0.0115003433081</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dn164'"><A>name:dn164</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.503073467747067"><A>ra:1.50307346775</A> </A> <A mdltype=float mdlval="0.8566297974669023"><A>dec:0.856629797467</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.008442369486110024"><A>I:0.00844236948611</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000259"><A>cluster_flux:0.000259</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000259"><A>Iapp:0.000259</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0306785909365996"><A>beamgain:0.0306785909366</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dn164'"><A>cluster:dn164</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014466312339052772"><A>r:0.0144663123391</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'do320'"><A>name:do320</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4927367901587156"><A>ra:1.49273679016</A> </A> <A mdltype=float mdlval="0.871523634451966"><A>dec:0.871523634452</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00029583471431229435"><A>I:0.000295834714312</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000259"><A>cluster_flux:0.000259</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000259"><A>Iapp:0.000259</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8754888708787225"><A>beamgain:0.875488870879</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'do320'"><A>cluster:do320</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0019983816046967155"><A>r:0.0019983816047</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dp152'"><A>name:dp152</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5019729503872221"><A>ra:1.50197295039</A> </A> <A mdltype=float mdlval="0.8632132317653025"><A>dec:0.863213231765</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010008421981969084"><A>I:0.010008421982</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000257"><A>cluster_flux:0.000257</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000257"><A>Iapp:0.000257</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.025678373719953518"><A>beamgain:0.02567837372</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dp152'"><A>cluster:dp152</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.008260371663520253"><A>r:0.00826037166352</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dq131'"><A>name:dq131</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4996613490594182"><A>ra:1.49966134906</A> </A> <A mdltype=float mdlval="0.8672471589055595"><A>dec:0.867247158906</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000488715569914203"><A>I:0.000488715569914</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000457"><A>cluster_flux:0.000457</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000256"><A>Iapp:0.000256</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5238220669845701"><A>beamgain:0.523822066985</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dq131'"><A>cluster:dq131</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004189555139573805"><A>r:0.00418955513957</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dr005G'"><A>name:dr005G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.492813951164946"><A>ra:1.49281395116</A> </A> <A mdltype=float mdlval="0.8872544964397011"><A>dec:0.88725449644</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03771783856510834"><A>I:0.0377178385651</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.9915679993110315e-05"><A>ex:3.99156799931e-05</A> </A> <A mdltype=float mdlval="2.118829711921116e-05"><A>ey:2.11882971192e-05</A> </A> <A mdltype=float mdlval="2.7475641895064102"><A>pa:2.74756418951</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000254"><A>cluster_flux:0.000254</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000254"><A>Iapp:0.000254</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00673421409239945"><A>beamgain:0.0067342140924</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dr005'"><A>cluster:dr005</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.017223552273812746"><A>r:0.0172235522738</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'M301c'"><A>name:M301c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4904849139979148"><A>ra:1.490484914</A> </A> <A mdltype=float mdlval="0.8718369210526989"><A>dec:0.871836921053</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003882159546179499"><A>I:0.000388215954618</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-2.011820774326965"><A>spi:-2.01182077433</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006154"><A>cluster_flux:0.006154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000254"><A>Iapp:0.000254</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6542750162083519"><A>beamgain:0.654275016208</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'M301'"><A>cluster:M301</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0033333164818605938"><A>r:0.00333331648186</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'N221c'"><A>name:N221c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4901698297080523"><A>ra:1.49016982971</A> </A> <A mdltype=float mdlval="0.8661794711889444"><A>dec:0.866179471189</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006970904451045248"><A>I:0.000697090445105</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.005606999999999999"><A>cluster_flux:0.005607</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000254"><A>Iapp:0.000254</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.364371656194361"><A>beamgain:0.364371656194</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'N221'"><A>cluster:N221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0049508499418081196"><A>r:0.00495084994181</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ds340G'"><A>name:ds340G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4940568873917541"><A>ra:1.49405688739</A> </A> <A mdltype=float mdlval="0.8716323335577802"><A>dec:0.871632333558</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00027340369702445554"><A>I:0.000273403697024</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.70882466048795e-05"><A>ex:3.70882466049e-05</A> </A> <A mdltype=float mdlval="2.326523892908441e-05"><A>ey:2.32652389291e-05</A> </A> <A mdltype=float mdlval="1.3187759140749162"><A>pa:1.31877591407</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000253"><A>cluster_flux:0.000253</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000253"><A>Iapp:0.000253</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9253715394249755"><A>beamgain:0.925371539425</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ds340'"><A>cluster:ds340</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0016397269727082525"><A>r:0.00163972697271</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dt206G'"><A>name:dt206G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.485763833277855"><A>ra:1.48576383328</A> </A> <A mdltype=float mdlval="0.8513293547016432"><A>dec:0.851329354702</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="1.723461879229338"><A>I:1.72346187923</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.371976114853045e-05"><A>ex:3.37197611485e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.2544362276574208"><A>pa:0.254436227657</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000248"><A>cluster_flux:0.000248</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000248"><A>Iapp:0.000248</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00014389642323327484"><A>beamgain:0.000143896423233</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dt206'"><A>cluster:dt206</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.019672258778132237"><A>r:0.0196722587781</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'du241G'"><A>name:du241G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4905132232383822"><A>ra:1.49051322324</A> </A> <A mdltype=float mdlval="0.8684680167173294"><A>dec:0.868468016717</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003596885409137644"><A>I:0.000359688540914</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010885618544688634"><A>ex:0.000108856185447</A> </A> <A mdltype=float mdlval="3.312634920285237e-05"><A>ey:3.31263492029e-05</A> </A> <A mdltype=float mdlval="0.6369338424249456"><A>pa:0.636933842425</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00043599999999999997"><A>cluster_flux:0.000436</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00024"><A>Iapp:0.00024</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6672439421903635"><A>beamgain:0.66724394219</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'du241'"><A>cluster:du241</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0032500617103900613"><A>r:0.00325006171039</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dv326G'"><A>name:dv326G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4758527716808953"><A>ra:1.47585277168</A> </A> <A mdltype=float mdlval="0.8834491725248703"><A>dec:0.883449172525</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.1108554744287197"><A>I:0.110855474429</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.391174736624983e-05"><A>ex:3.39117473662e-05</A> </A> <A mdltype=float mdlval="2.3596851486963335e-05"><A>ey:2.3596851487e-05</A> </A> <A mdltype=float mdlval="3.0884419847991773"><A>pa:3.0884419848</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00024"><A>cluster_flux:0.00024</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00024"><A>Iapp:0.00024</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0021649810371279455"><A>beamgain:0.00216498103713</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dv326'"><A>cluster:dv326</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018079512625512315"><A>r:0.0180795126255</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'S270a'"><A>name:S270a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4908542780275145"><A>ra:1.49085427803</A> </A> <A mdltype=float mdlval="0.8700428796612815"><A>dec:0.870042879661</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00029900767291410194"><A>I:0.000299007672914</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00249"><A>cluster_flux:0.00249</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000233"><A>Iapp:0.000233</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7792442171440047"><A>beamgain:0.779244217144</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'S270'"><A>cluster:S270</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0025989130331000965"><A>r:0.0025989130331</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'al080a'"><A>name:al080a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4990156121427654"><A>ra:1.49901561214</A> </A> <A mdltype=float mdlval="0.8701679499554794"><A>dec:0.870167949955</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00028960458010105633"><A>I:0.000289604580101</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0013720000000000002"><A>cluster_flux:0.001372</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000231"><A>Iapp:0.000231</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7976393188235956"><A>beamgain:0.797639318824</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'al080'"><A>cluster:al080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002664829754604486"><A>r:0.0026648297546</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dw352'"><A>name:dw352</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.492424760195044"><A>ra:1.4924247602</A> </A> <A mdltype=float mdlval="0.8779870075511215"><A>dec:0.877987007551</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.007576669845425439"><A>I:0.00757666984543</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000231"><A>cluster_flux:0.000231</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000231"><A>Iapp:0.000231</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03048832860778152"><A>beamgain:0.0304883286078</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dw352'"><A>cluster:dw352</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.008061361655113265"><A>r:0.00806136165511</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bs233aG'"><A>name:bs233aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4811144506834677"><A>ra:1.48111445068</A> </A> <A mdltype=float mdlval="0.8628864363161591"><A>dec:0.862886436316</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01236035204869662"><A>I:0.0123603520487</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.3387411976724018e-05"><A>ex:2.33874119767e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.0346688098809116"><A>pa:1.03466880988</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000665"><A>cluster_flux:0.000665</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00023"><A>Iapp:0.00023</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.018607884232897165"><A>beamgain:0.0186078842329</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bs233'"><A>cluster:bs233</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011457273813077951"><A>r:0.0114572738131</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dx291G'"><A>name:dx291G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4873169494193275"><A>ra:1.48731694942</A> </A> <A mdltype=float mdlval="0.8720031985705364"><A>dec:0.872003198571</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007184299875963401"><A>I:0.000718429987596</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.037093882648386e-05"><A>ex:6.03709388265e-05</A> </A> <A mdltype=float mdlval="1.7418385934903408e-05"><A>ey:1.74183859349e-05</A> </A> <A mdltype=float mdlval="0.025877839739687245"><A>pa:0.0258778397397</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000226"><A>cluster_flux:0.000226</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000226"><A>Iapp:0.000226</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.31457484222802407"><A>beamgain:0.314574842228</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dx291'"><A>cluster:dx291</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005238841209161269"><A>r:0.00523884120916</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dy035G'"><A>name:dy035G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5062309254435573"><A>ra:1.50623092544</A> </A> <A mdltype=float mdlval="0.8845179423456216"><A>dec:0.884517942346</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.015099312498001156"><A>I:0.015099312498</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.2252947962927702e-05"><A>ex:2.22529479629e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.0514345823019093"><A>pa:1.0514345823</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000225"><A>cluster_flux:0.000225</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000225"><A>Iapp:0.000225</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.014901340708710112"><A>beamgain:0.0149013407087</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dy035'"><A>cluster:dy035</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016155654434759168"><A>r:0.0161556544348</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dz020G'"><A>name:dz020G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.496144196457384"><A>ra:1.49614419646</A> </A> <A mdltype=float mdlval="0.8728706795686553"><A>dec:0.872870679569</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003015114639467302"><A>I:0.000301511463947</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010068804454755287"><A>ex:0.000100688044548</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7023866738877538"><A>pa:0.702386673888</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000225"><A>cluster_flux:0.000225</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000225"><A>Iapp:0.000225</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7462402823918897"><A>beamgain:0.746240282392</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dz020'"><A>cluster:dz020</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0029044554057082155"><A>r:0.00290445540571</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ea004G'"><A>name:ea004G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.495570593998716"><A>ra:1.495570594</A> </A> <A mdltype=float mdlval="0.88300029129455"><A>dec:0.883000291295</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0070439881083481995"><A>I:0.00704398810835</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.7523105690023066e-05"><A>ex:1.752310569e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.8797125532677148"><A>pa:1.87971255327</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000223"><A>cluster_flux:0.000223</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000223"><A>Iapp:0.000223</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031658202224349445"><A>beamgain:0.0316582022243</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ea004'"><A>cluster:ea004</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012926044561792896"><A>r:0.0129260445618</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bm255aG'"><A>name:bm255aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4715664001176298"><A>ra:1.47156640012</A> </A> <A mdltype=float mdlval="0.8629332460466975"><A>dec:0.862933246047</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.02279610744235327"><A>I:0.0227961074424</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.662142739040609e-05"><A>ex:9.66214273904e-05</A> </A> <A mdltype=float mdlval="7.567747636647413e-05"><A>ey:7.56774763665e-05</A> </A> <A mdltype=float mdlval="0.11291191174950067"><A>pa:0.11291191175</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000891"><A>cluster_flux:0.000891</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000223"><A>Iapp:0.000223</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.009782371861683918"><A>beamgain:0.00978237186168</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bm255'"><A>cluster:bm255</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016704737666165564"><A>r:0.0167047376662</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'eb231'"><A>name:eb231</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4890017681061554"><A>ra:1.48900176811</A> </A> <A mdltype=float mdlval="0.8664778701311578"><A>dec:0.866477870131</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006967553707358792"><A>I:0.000696755370736</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00022"><A>cluster_flux:0.00022</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00022"><A>Iapp:0.00022</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.31574927046152035"><A>beamgain:0.315749270462</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eb231'"><A>cluster:eb231</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005237919418214676"><A>r:0.00523791941821</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dh210a'"><A>name:dh210a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4929728459400478"><A>ra:1.49297284594</A> </A> <A mdltype=float mdlval="0.8679112915925283"><A>dec:0.867911291593</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002705165151769336"><A>I:0.000270516515177</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00048300000000000003"><A>cluster_flux:0.000483</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000217"><A>Iapp:0.000217</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8021691387606014"><A>beamgain:0.802169138761</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dh210'"><A>cluster:dh210</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0024967694857390187"><A>r:0.00249676948574</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ec346'"><A>name:ec346</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4861471424881783"><A>ra:1.48614714249</A> </A> <A mdltype=float mdlval="0.8887909970466943"><A>dec:0.888790997047</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="2.728147817248216"><A>I:2.72814781725</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000217"><A>cluster_flux:0.000217</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000217"><A>Iapp:0.000217</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="7.954114459196717e-05"><A>beamgain:7.9541144592e-05</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ec346'"><A>cluster:ec346</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.019520936083281194"><A>r:0.0195209360833</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ed205'"><A>name:ed205</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.485352912958766"><A>ra:1.48535291296</A> </A> <A mdltype=float mdlval="0.8564272694605009"><A>dec:0.856427269461</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.008730058488475053"><A>I:0.00873005848848</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000217"><A>cluster_flux:0.000217</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000217"><A>Iapp:0.000217</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.024856649046105656"><A>beamgain:0.0248566490461</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ed205'"><A>cluster:ed205</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014994044257691276"><A>r:0.0149940442577</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ee274'"><A>name:ee274</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.474373971658973"><A>ra:1.47437397166</A> </A> <A mdltype=float mdlval="0.8701311060549699"><A>dec:0.870131106055</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006348981854194458"><A>I:0.00634898185419</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000216"><A>cluster_flux:0.000216</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000216"><A>Iapp:0.000216</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03402120292048078"><A>beamgain:0.0340212029205</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ee274'"><A>cluster:ee274</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013224043723996643"><A>r:0.013224043724</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ef010G'"><A>name:ef010G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4952573946644456"><A>ra:1.49525739466</A> </A> <A mdltype=float mdlval="0.8717875456881601"><A>dec:0.871787545688</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00023259839087501374"><A>I:0.000232598390875</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.820525732615587e-05"><A>ex:3.82052573262e-05</A> </A> <A mdltype=float mdlval="2.1205750411731104e-05"><A>ey:2.12057504117e-05</A> </A> <A mdltype=float mdlval="1.3817479170856473"><A>pa:1.38174791709</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000214"><A>cluster_flux:0.000214</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000214"><A>Iapp:0.000214</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9200407586439084"><A>beamgain:0.920040758644</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ef010'"><A>cluster:ef010</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0017226675346709156"><A>r:0.00172266753467</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'eg340'"><A>name:eg340</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4945069030860882"><A>ra:1.49450690309</A> </A> <A mdltype=float mdlval="0.870774975469323"><A>dec:0.870774975469</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021282382575745412"><A>I:0.000212823825757</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000407"><A>cluster_flux:0.000407</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000214"><A>Iapp:0.000214</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0055265158323312"><A>beamgain:1.00552651583</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eg340'"><A>cluster:eg340</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0007347544283484926"><A>r:0.000734754428348</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'eh125G'"><A>name:eh125G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.516440490702486"><A>ra:1.5164404907</A> </A> <A mdltype=float mdlval="0.8613114337458669"><A>dec:0.861311433746</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.015778538251266513"><A>I:0.0157785382513</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.951351765122411e-05"><A>ex:2.95135176512e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.015541179147969"><A>pa:2.01554117915</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000212"><A>cluster_flux:0.000212</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000212"><A>Iapp:0.000212</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.013435972117568189"><A>beamgain:0.0134359721176</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eh125'"><A>cluster:eh125</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01649500517464391"><A>r:0.0164950051746</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cs171aG'"><A>name:cs171aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4966942544244428"><A>ra:1.49669425442</A> </A> <A mdltype=float mdlval="0.865089513071074"><A>dec:0.865089513071</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000606551647194209"><A>I:0.000606551647194</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.841837990603273e-05"><A>ex:8.8418379906e-05</A> </A> <A mdltype=float mdlval="4.4331363000655975e-05"><A>ey:4.43313630007e-05</A> </A> <A mdltype=float mdlval="0.5526950548385412"><A>pa:0.552695054839</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0005239999999999999"><A>cluster_flux:0.000524</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000212"><A>Iapp:0.000212</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.34951681523027944"><A>beamgain:0.34951681523</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cs171'"><A>cluster:cs171</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005127525028315087"><A>r:0.00512752502832</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ei084G'"><A>name:ei084G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5149485308980037"><A>ra:1.5149485309</A> </A> <A mdltype=float mdlval="0.871293495336798"><A>dec:0.871293495337</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006809978299654974"><A>I:0.00680997829965</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="7.579964941411372e-05"><A>ex:7.57996494141e-05</A> </A> <A mdltype=float mdlval="2.6424284875194147e-05"><A>ey:2.64242848752e-05</A> </A> <A mdltype=float mdlval="0.022515602562060328"><A>pa:0.0225156025621</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000209"><A>cluster_flux:0.000209</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000209"><A>Iapp:0.000209</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.030690259322939246"><A>beamgain:0.0306902593229</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ei084'"><A>cluster:ei084</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012983792057010276"><A>r:0.012983792057</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ej080'"><A>name:ej080</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4969149862149422"><A>ra:1.49691498621</A> </A> <A mdltype=float mdlval="0.8702064170121934"><A>dec:0.870206417012</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002141107406224036"><A>I:0.000214110740622</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000208"><A>cluster_flux:0.000208</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000208"><A>Iapp:0.000208</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.971459906193215"><A>beamgain:0.971459906193</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ej080'"><A>cluster:ej080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0013149932870228432"><A>r:0.00131499328702</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ek080'"><A>name:ek080</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4975455213138102"><A>ra:1.49754552131</A> </A> <A mdltype=float mdlval="0.8703569691134704"><A>dec:0.870356969113</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00022315962589376128"><A>I:0.000223159625894</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000207"><A>cluster_flux:0.000207</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000207"><A>Iapp:0.000207</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9275871438256742"><A>beamgain:0.927587143826</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ek080'"><A>cluster:ek080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001737374021691399"><A>r:0.00173737402169</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ch070aG'"><A>name:ch070aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4967153554550992"><A>ra:1.49671535546</A> </A> <A mdltype=float mdlval="0.8706767832456058"><A>dec:0.870676783246</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021344317248145822"><A>I:0.000213443172481</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.78554548618295e-05"><A>ex:2.78554548618e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7780008646155506"><A>pa:0.778000864616</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000767"><A>cluster_flux:0.000767</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000207"><A>Iapp:0.000207</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9698131713160423"><A>beamgain:0.969813171316</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ch070'"><A>cluster:ch070</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0013215886092540698"><A>r:0.00132158860925</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'el002'"><A>name:el002</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4943516735024158"><A>ra:1.4943516735</A> </A> <A mdltype=float mdlval="0.8760383474412698"><A>dec:0.876038347441</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0009483438256831594"><A>I:0.000948343825683</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000207"><A>cluster_flux:0.000207</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000207"><A>Iapp:0.000207</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.21827526514540568"><A>beamgain:0.218275265145</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'el002'"><A>cluster:el002</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0059664760894847175"><A>r:0.00596647608948</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'em324G'"><A>name:em324G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4801536818368297"><A>ra:1.48015368184</A> </A> <A mdltype=float mdlval="0.879421877635771"><A>dec:0.879421877636</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005845863616972254"><A>I:0.00584586361697</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.0962140930379406e-05"><A>ex:3.09621409304e-05</A> </A> <A mdltype=float mdlval="1.270599695451872e-05"><A>ey:1.27059969545e-05</A> </A> <A mdltype=float mdlval="2.550537129294716"><A>pa:2.55053712929</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000206"><A>cluster_flux:0.000206</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000206"><A>Iapp:0.000206</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.035238591506295436"><A>beamgain:0.0352385915063</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'em324'"><A>cluster:em324</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013283335041780852"><A>r:0.0132833350418</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'en171G'"><A>name:en171G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4960703690300248"><A>ra:1.49607036903</A> </A> <A mdltype=float mdlval="0.8664750252444771"><A>dec:0.866475025244</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00033813730275418903"><A>I:0.000338137302754</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.368706440527308e-05"><A>ex:6.36870644053e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8437590937908729"><A>pa:0.843759093791</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000205"><A>cluster_flux:0.000205</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000205"><A>Iapp:0.000205</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6062625990396155"><A>beamgain:0.60626259904</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'en171'"><A>cluster:en171</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003687166725879393"><A>r:0.00368716672588</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'eo164'"><A>name:eo164</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.503703165087894"><A>ra:1.50370316509</A> </A> <A mdltype=float mdlval="0.8571555429974806"><A>dec:0.857155542997</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00629177722777114"><A>I:0.00629177722777</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000204"><A>cluster_flux:0.000204</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000204"><A>Iapp:0.000204</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.032423271297586445"><A>beamgain:0.0324232712976</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eo164'"><A>cluster:eo164</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014138916341574123"><A>r:0.0141389163416</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bg191a'"><A>name:bg191a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4932021472971748"><A>ra:1.4932021473</A> </A> <A mdltype=float mdlval="0.8647037254932132"><A>dec:0.864703725493</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007087044176143703"><A>I:0.000708704417614</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000732"><A>cluster_flux:0.000732</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000202"><A>Iapp:0.000202</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.28502714951314856"><A>beamgain:0.285027149513</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bg191'"><A>cluster:bg191</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005486964705494673"><A>r:0.00548696470549</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ep230G'"><A>name:ep230G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.492449840576395"><A>ra:1.49244984058</A> </A> <A mdltype=float mdlval="0.8685352817067014"><A>dec:0.868535281707</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00023921923219858156"><A>I:0.000239219232199</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.117158044061873e-05"><A>ex:3.11715804406e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.6416187769195374"><A>pa:2.64161877692</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000202"><A>cluster_flux:0.000202</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000202"><A>Iapp:0.000202</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8444137126579982"><A>beamgain:0.844413712658</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ep230'"><A>cluster:ep230</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0022045883897187503"><A>r:0.00220458838972</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dq131a'"><A>name:dq131a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4996121831343894"><A>ra:1.49961218313</A> </A> <A mdltype=float mdlval="0.8675179467390064"><A>dec:0.867517946739</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003579167546523645"><A>I:0.000357916754652</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000457"><A>cluster_flux:0.000457</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000201"><A>Iapp:0.000201</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5615830982688313"><A>beamgain:0.561583098269</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dq131'"><A>cluster:dq131</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003986562974339203"><A>r:0.00398656297434</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'eq121G'"><A>name:eq121G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4995375703088667"><A>ra:1.49953757031</A> </A> <A mdltype=float mdlval="0.8679855378989081"><A>dec:0.867985537899</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003216037372839361"><A>I:0.000321603737284</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.050909193878839e-05"><A>ex:4.05090919388e-05</A> </A> <A mdltype=float mdlval="1.70518667919846e-05"><A>ey:1.7051866792e-05</A> </A> <A mdltype=float mdlval="2.977542315504178"><A>pa:2.9775423155</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000338"><A>cluster_flux:0.000338</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.0002"><A>Iapp:0.0002</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6218833204149766"><A>beamgain:0.621883320415</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eq121'"><A>cluster:eq121</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0036629101512556128"><A>r:0.00366291015126</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'er190'"><A>name:er190</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4946998666881888"><A>ra:1.49469986669</A> </A> <A mdltype=float mdlval="0.868780884439042"><A>dec:0.868780884439</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00020562175346106775"><A>I:0.000205621753461</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000198"><A>cluster_flux:0.000198</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000198"><A>Iapp:0.000198</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9629331365345503"><A>beamgain:0.962933136535</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'er190'"><A>cluster:er190</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0013062631899897425"><A>r:0.00130626318999</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'es250G'"><A>name:es250G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4918452236169193"><A>ra:1.49184522362</A> </A> <A mdltype=float mdlval="0.8694519460831412"><A>dec:0.869451946083</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00022943021333847623"><A>I:0.000229430213338</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.5917402778188288e-05"><A>ex:1.59174027782e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8120795701780462"><A>pa:0.812079570178</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000198"><A>cluster_flux:0.000198</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000198"><A>Iapp:0.000198</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.863007522500502"><A>beamgain:0.863007522501</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'es250'"><A>cluster:es250</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002059038187435446"><A>r:0.00205903818744</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'et162'"><A>name:et162</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4992642866545893"><A>ra:1.49926428665</A> </A> <A mdltype=float mdlval="0.8638583578167172"><A>dec:0.863858357817</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.001611077173118112"><A>I:0.00161107717312</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000197"><A>cluster_flux:0.000197</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000197"><A>Iapp:0.000197</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.12227843785951119"><A>beamgain:0.12227843786</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'et162'"><A>cluster:et162</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006838361086689553"><A>r:0.00683836108669</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'du241aG'"><A>name:du241aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4906116598081947"><A>ra:1.49061165981</A> </A> <A mdltype=float mdlval="0.8685608682335355"><A>dec:0.868560868234</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00028600182916579595"><A>I:0.000286001829166</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.7718038363452476e-05"><A>ex:5.77180383635e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.46592435301285373"><A>pa:0.465924353013</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00043599999999999997"><A>cluster_flux:0.000436</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000196"><A>Iapp:0.000196</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6853103022861379"><A>beamgain:0.685310302286</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'du241'"><A>cluster:du241</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003149064537992861"><A>r:0.00314906453799</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'eu260'"><A>name:eu260</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4931936475437175"><A>ra:1.49319364754</A> </A> <A mdltype=float mdlval="0.8698992390638424"><A>dec:0.869899239064</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002001206341371704"><A>I:0.000200120634137</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000195"><A>cluster_flux:0.000195</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000195"><A>Iapp:0.000195</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9744122630869712"><A>beamgain:0.974412263087</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eu260'"><A>cluster:eu260</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001105502249573205"><A>r:0.00110550224957</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cp211b'"><A>name:cp211b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4922403137996931"><A>ra:1.4922403138</A> </A> <A mdltype=float mdlval="0.8676237485982623"><A>dec:0.867623748598</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00027176922491310273"><A>I:0.000271769224913</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0008990000000000001"><A>cluster_flux:0.000899</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000195"><A>Iapp:0.000195</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7175205362650998"><A>beamgain:0.717520536265</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cp211'"><A>cluster:cp211</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0029927701046349323"><A>r:0.00299277010463</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ev211'"><A>name:ev211</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4915041688277872"><A>ra:1.49150416883</A> </A> <A mdltype=float mdlval="0.8667341542785207"><A>dec:0.866734154279</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003643854022725176"><A>I:0.000364385402273</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000195"><A>cluster_flux:0.000195</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000195"><A>Iapp:0.000195</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5351476727219793"><A>beamgain:0.535147672722</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ev211'"><A>cluster:ev211</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003996910022895243"><A>r:0.0039969100229</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'E090b'"><A>name:E090b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4979588501872676"><A>ra:1.49795885019</A> </A> <A mdltype=float mdlval="0.8699602732277847"><A>dec:0.869960273228</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021622971669364632"><A>I:0.000216229716694</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012365"><A>cluster_flux:0.012365</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000194"><A>Iapp:0.000194</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8971939794698001"><A>beamgain:0.89719397947</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'E090'"><A>cluster:E090</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001986066514177124"><A>r:0.00198606651418</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'eg340a'"><A>name:eg340a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4945765940831204"><A>ra:1.49457659408</A> </A> <A mdltype=float mdlval="0.870692264316071"><A>dec:0.870692264316</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0001909673108899285"><A>I:0.00019096731089</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000407"><A>cluster_flux:0.000407</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000193"><A>Iapp:0.000193</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0106441730817644"><A>beamgain:1.01064417308</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eg340'"><A>cluster:eg340</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0006420125049228217"><A>r:0.000642012504923</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ew156G'"><A>name:ew156G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5076163678037904"><A>ra:1.5076163678</A> </A> <A mdltype=float mdlval="0.8543634874331877"><A>dec:0.854363487433</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04967388986371956"><A>I:0.0496738898637</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010405653000390193"><A>ex:0.000104056530004</A> </A> <A mdltype=float mdlval="9.896016858807849e-06"><A>ey:9.89601685881e-06</A> </A> <A mdltype=float mdlval="2.4872400936173866"><A>pa:2.48724009362</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000192"><A>cluster_flux:0.000192</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000192"><A>Iapp:0.000192</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0038652096811172326"><A>beamgain:0.00386520968112</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ew156'"><A>cluster:ew156</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01776795034802084"><A>r:0.017767950348</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ex101'"><A>name:ex101</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5020528690136707"><A>ra:1.50205286901</A> </A> <A mdltype=float mdlval="0.8690309552142678"><A>dec:0.869030955214</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0004490613029539293"><A>I:0.000449061302954</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000192"><A>cluster_flux:0.000192</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000192"><A>Iapp:0.000192</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4275585509974301"><A>beamgain:0.427558550997</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ex101'"><A>cluster:ex101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004742619357907228"><A>r:0.00474261935791</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ey060'"><A>name:ey060</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4985874479706658"><A>ra:1.49858744797</A> </A> <A mdltype=float mdlval="0.8715046103631192"><A>dec:0.871504610363</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00024344928970226748"><A>I:0.000243449289702</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000189"><A>cluster_flux:0.000189</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000189"><A>Iapp:0.000189</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7763423759877977"><A>beamgain:0.776342375988</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ey060'"><A>cluster:ey060</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002777630614749777"><A>r:0.00277763061475</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ez270'"><A>name:ez270</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4914097290619617"><A>ra:1.49140972906</A> </A> <A mdltype=float mdlval="0.8699896820256806"><A>dec:0.869989682026</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00022376348954072738"><A>I:0.000223763489541</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000187"><A>cluster_flux:0.000187</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000187"><A>Iapp:0.000187</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8357038066568226"><A>beamgain:0.835703806657</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ez270'"><A>cluster:ez270</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0022424397697173646"><A>r:0.00224243976972</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fa351'"><A>name:fa351</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4932666372130359"><A>ra:1.49326663721</A> </A> <A mdltype=float mdlval="0.8754723371648481"><A>dec:0.875472337165</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006519326288746158"><A>I:0.000651932628875</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000186"><A>cluster_flux:0.000186</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000186"><A>Iapp:0.000186</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.28530555422740284"><A>beamgain:0.285305554227</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fa351'"><A>cluster:fa351</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005490006858799096"><A>r:0.0054900068588</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fb015'"><A>name:fb015</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4991465467432497"><A>ra:1.49914654674</A> </A> <A mdltype=float mdlval="0.8861226853263678"><A>dec:0.886122685326</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.013019302286957897"><A>I:0.013019302287</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000184"><A>cluster_flux:0.000184</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000184"><A>Iapp:0.000184</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.014132861803533223"><A>beamgain:0.0141328618035</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fb015'"><A>cluster:fb015</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016270229564917187"><A>r:0.0162702295649</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'P310a'"><A>name:P310a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4925435473039348"><A>ra:1.4925435473</A> </A> <A mdltype=float mdlval="0.8711541831559038"><A>dec:0.871154183156</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00020582094936085277"><A>I:0.000205820949361</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.003063"><A>cluster_flux:0.003063</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000184"><A>Iapp:0.000184</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8939809119109858"><A>beamgain:0.893980911911</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'P310'"><A>cluster:P310</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0018508266706583943"><A>r:0.00185082667066</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fc084'"><A>name:fc084</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.513972019181513"><A>ra:1.51397201918</A> </A> <A mdltype=float mdlval="0.8720642850943563"><A>dec:0.872064285094</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006776521503519559"><A>I:0.00677652150352</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000183"><A>cluster_flux:0.000183</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000183"><A>Iapp:0.000183</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02700500543013909"><A>beamgain:0.0270050054301</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fc084'"><A>cluster:fc084</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012451191573877012"><A>r:0.0124511915739</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'al080b'"><A>name:al080b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4986591286430453"><A>ra:1.49865912864</A> </A> <A mdltype=float mdlval="0.870151526407218"><A>dec:0.870151526407</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021951533224342577"><A>I:0.000219515332243</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0013720000000000002"><A>cluster_flux:0.001372</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000183"><A>Iapp:0.000183</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8336547526305222"><A>beamgain:0.833654752631</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'al080'"><A>cluster:al080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00243462309352666"><A>r:0.00243462309353</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fd212'"><A>name:fd212</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4890796970572568"><A>ra:1.48907969706</A> </A> <A mdltype=float mdlval="0.8641338405858519"><A>dec:0.864133840586</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0019310399946764767"><A>I:0.00193103999468</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000183"><A>cluster_flux:0.000183</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000183"><A>Iapp:0.000183</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0947675866395815"><A>beamgain:0.0947675866396</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fd212'"><A>cluster:fd212</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007034473446284618"><A>r:0.00703447344628</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'A0f'"><A>name:A0f</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4949212442505115"><A>ra:1.49492124425</A> </A> <A mdltype=float mdlval="0.870117789192777"><A>dec:0.870117789193</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00017708251203196756"><A>I:0.000177082512032</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000182"><A>Iapp:0.000182</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0277694726125453"><A>beamgain:1.02776947261</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="4.31572770053713e-05"><A>r:4.31572770054e-05</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bm255bG'"><A>name:bm255bG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4716613983888158"><A>ra:1.47166139839</A> </A> <A mdltype=float mdlval="0.8631413940132904"><A>dec:0.863141394013</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.016603130630882357"><A>I:0.0166031306309</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.84518132632176e-05"><A>ex:6.84518132632e-05</A> </A> <A mdltype=float mdlval="3.855432317655474e-05"><A>ey:3.85543231766e-05</A> </A> <A mdltype=float mdlval="0.3454590227798645"><A>pa:0.34545902278</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000891"><A>cluster_flux:0.000891</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000182"><A>Iapp:0.000182</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.010961788113711166"><A>beamgain:0.0109617881137</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bm255'"><A>cluster:bm255</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01655920034899309"><A>r:0.016559200349</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fe259G'"><A>name:fe259G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.457714332709789"><A>ra:1.45771433271</A> </A> <A mdltype=float mdlval="0.858673927086838"><A>dec:0.858673927087</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="3.722566776356147"><A>I:3.72256677636</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.7456238975653326e-05"><A>ex:5.74562389757e-05</A> </A> <A mdltype=float mdlval="4.283037984394085e-05"><A>ey:4.28303798439e-05</A> </A> <A mdltype=float mdlval="2.0917697432257603"><A>pa:2.09176974323</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000181"><A>cluster_flux:0.000181</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000181"><A>Iapp:0.000181</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="4.862236485578179e-05"><A>beamgain:4.86223648558e-05</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fe259'"><A>cluster:fe259</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02668728494025974"><A>r:0.0266872849403</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ff066G'"><A>name:ff066G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5208386506043416"><A>ra:1.5208386506</A> </A> <A mdltype=float mdlval="0.8780726683108093"><A>dec:0.878072668311</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.16427991913287066"><A>I:0.164279919133</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.2516957192509374e-05"><A>ex:5.25169571925e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.1225619678551415"><A>pa:1.12256196786</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00018"><A>cluster_flux:0.00018</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00018"><A>Iapp:0.00018</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0010956908242352788"><A>beamgain:0.00109569082424</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ff066'"><A>cluster:ff066</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01847224230946617"><A>r:0.0184722423095</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fg055G'"><A>name:fg055G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5133141871331435"><A>ra:1.51331418713</A> </A> <A mdltype=float mdlval="0.8799361563531638"><A>dec:0.879936156353</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.008314775637276443"><A>I:0.00831477563728</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.029891581462156e-05"><A>ex:3.02989158146e-05</A> </A> <A mdltype=float mdlval="1.4154620233674013e-05"><A>ey:1.41546202337e-05</A> </A> <A mdltype=float mdlval="0.16660359770164987"><A>pa:0.166603597702</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00018"><A>cluster_flux:0.00018</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00018"><A>Iapp:0.00018</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.021648208905725823"><A>beamgain:0.0216482089057</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fg055'"><A>cluster:fg055</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015383569738623978"><A>r:0.0153835697386</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'A0g'"><A>name:A0g</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4947782668781884"><A>ra:1.49477826688</A> </A> <A mdltype=float mdlval="0.8701319612663033"><A>dec:0.870131961266</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0001752783733917841"><A>I:0.000175278373392</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00018"><A>Iapp:0.00018</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0269378732632466"><A>beamgain:1.02693787326</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="8.497279219269588e-05"><A>r:8.49727921927e-05</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fh092G'"><A>name:fh092G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5049698203392363"><A>ra:1.50496982034</A> </A> <A mdltype=float mdlval="0.8703301608561598"><A>dec:0.870330160856</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0010882811118068008"><A>I:0.00108828111181</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.214896482173555e-05"><A>ex:3.21489648217e-05</A> </A> <A mdltype=float mdlval="1.942551457469689e-05"><A>ey:1.94255145747e-05</A> </A> <A mdltype=float mdlval="0.9530120274833226"><A>pa:0.953012027483</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000178"><A>cluster_flux:0.000178</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000178"><A>Iapp:0.000178</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.1635606812145057"><A>beamgain:0.163560681215</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fh092'"><A>cluster:fh092</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006506402369930851"><A>r:0.00650640236993</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fi153G'"><A>name:fi153G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5048026701567727"><A>ra:1.50480267016</A> </A> <A mdltype=float mdlval="0.8606992769640224"><A>dec:0.860699276964</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010919805781931516"><A>I:0.0109198057819</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.4801865284766934e-05"><A>ex:3.48018652848e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.367986440764301"><A>pa:2.36798644076</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000178"><A>cluster_flux:0.000178</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000178"><A>Iapp:0.000178</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.016300656216297192"><A>beamgain:0.0163006562163</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fi153'"><A>cluster:fi153</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011374426225093067"><A>r:0.0113744262251</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cc150a'"><A>name:cc150a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4971078101907027"><A>ra:1.49710781019</A> </A> <A mdltype=float mdlval="0.8677049762216501"><A>dec:0.867704976222</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00023033986063413485"><A>I:0.000230339860634</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000577"><A>cluster_flux:0.000577</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000178"><A>Iapp:0.000178</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.772771154371453"><A>beamgain:0.772771154371</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cc150'"><A>cluster:cc150</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0027765983026782725"><A>r:0.00277659830268</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ch070b'"><A>name:ch070b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4965507360000512"><A>ra:1.496550736</A> </A> <A mdltype=float mdlval="0.8703139292941162"><A>dec:0.870313929294</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0001799521444839762"><A>I:0.000179952144484</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000767"><A>cluster_flux:0.000767</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000178"><A>Iapp:0.000178</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.989151868739469"><A>beamgain:0.989151868739</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ch070'"><A>cluster:ch070</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001098975902329455"><A>r:0.00109897590233</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fj182'"><A>name:fj182</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.494011945163515"><A>ra:1.49401194516</A> </A> <A mdltype=float mdlval="0.8628833296300905"><A>dec:0.86288332963</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002076618111313575"><A>I:0.00207661811131</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000173"><A>cluster_flux:0.000173</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000173"><A>Iapp:0.000173</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.08330852892858959"><A>beamgain:0.0833085289286</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fj182'"><A>cluster:fj182</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007220511498606846"><A>r:0.00722051149861</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fk220'"><A>name:fk220</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4939326024957196"><A>ra:1.4939326025</A> </A> <A mdltype=float mdlval="0.8692674996877905"><A>dec:0.869267499688</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0001747733849492259"><A>I:0.000174773384949</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000172"><A>cluster_flux:0.000172</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000172"><A>Iapp:0.000172</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9841315372473239"><A>beamgain:0.984131537247</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fk220'"><A>cluster:fk220</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0010198053897728374"><A>r:0.00101980538977</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fl081G'"><A>name:fl081G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5020020101192675"><A>ra:1.50200201012</A> </A> <A mdltype=float mdlval="0.8706937652992278"><A>dec:0.870693765299</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00037791687445499193"><A>I:0.000377916874455</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.4977871437821384e-05"><A>ex:5.49778714378e-05</A> </A> <A mdltype=float mdlval="2.399827721492203e-05"><A>ey:2.39982772149e-05</A> </A> <A mdltype=float mdlval="1.2943387912728728"><A>pa:1.29433879127</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000169"><A>cluster_flux:0.000169</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000169"><A>Iapp:0.000169</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4471882877516946"><A>beamgain:0.447188287752</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fl081'"><A>cluster:fl081</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004628073268797277"><A>r:0.0046280732688</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fm186G'"><A>name:fm186G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4953766879188197"><A>ra:1.49537668792</A> </A> <A mdltype=float mdlval="0.849958311307739"><A>dec:0.849958311308</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.30361058515430306"><A>I:0.303610585154</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.0351275692181393e-05"><A>ex:3.03512756922e-05</A> </A> <A mdltype=float mdlval="1.736602605734358e-05"><A>ey:1.73660260573e-05</A> </A> <A mdltype=float mdlval="2.965639937950448"><A>pa:2.96563993795</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000167"><A>cluster_flux:0.000167</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000167"><A>Iapp:0.000167</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0005500466985204949"><A>beamgain:0.00055004669852</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fm186'"><A>cluster:fm186</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0201259511947221"><A>r:0.0201259511947</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fn149G'"><A>name:fn149G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.524600864886648"><A>ra:1.52460086489</A> </A> <A mdltype=float mdlval="0.8485847022798345"><A>dec:0.84858470228</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.11326516551203365"><A>I:0.113265165512</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.452334921837534e-05"><A>ex:4.45233492184e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.427485011670761"><A>pa:2.42748501167</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000166"><A>cluster_flux:0.000166</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000166"><A>Iapp:0.000166</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0014655874050028526"><A>beamgain:0.001465587405</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fn149'"><A>cluster:fn149</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02895705074194904"><A>r:0.0289570507419</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'A0h'"><A>name:A0h</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948470328507169"><A>ra:1.49484703285</A> </A> <A mdltype=float mdlval="0.8700469637317312"><A>dec:0.870046963732</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00016156574322970772"><A>I:0.00016156574323</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000166"><A>Iapp:0.000166</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0274455257757693"><A>beamgain:1.02744552578</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="4.23245758336201e-05"><A>r:4.23245758336e-05</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fo181'"><A>name:fo181</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4943139045774028"><A>ra:1.49431390458</A> </A> <A mdltype=float mdlval="0.8647599250951273"><A>dec:0.864759925095</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00053406470905919"><A>I:0.000534064709059</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000166"><A>cluster_flux:0.000166</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000166"><A>Iapp:0.000166</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.31082375821541564"><A>beamgain:0.310823758215</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fo181'"><A>cluster:fo181</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005334559202167436"><A>r:0.00533455920217</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fp234'"><A>name:fp234</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4782891291436315"><A>ra:1.47828912914</A> </A> <A mdltype=float mdlval="0.8606322563207457"><A>dec:0.860632256321</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005613835570835469"><A>I:0.00561383557084</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000166"><A>cluster_flux:0.000166</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000166"><A>Iapp:0.000166</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.029569800879525106"><A>beamgain:0.0295698008795</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fp234'"><A>cluster:fp234</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014319995225417718"><A>r:0.0143199952254</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fq154'"><A>name:fq154</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.505164372190956"><A>ra:1.50516437219</A> </A> <A mdltype=float mdlval="0.8602292772497527"><A>dec:0.86022927725</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.007155195775666683"><A>I:0.00715519577567</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000165"><A>cluster_flux:0.000165</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000165"><A>Iapp:0.000165</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.023060165671655038"><A>beamgain:0.0230601656717</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fq154'"><A>cluster:fq154</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011895926334634455"><A>r:0.0118959263346</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fr091'"><A>name:fr091</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5019141153381372"><A>ra:1.50191411534</A> </A> <A mdltype=float mdlval="0.8699963317301308"><A>dec:0.86999633173</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00035508511926026745"><A>I:0.00035508511926</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000165"><A>cluster_flux:0.000165</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000165"><A>Iapp:0.000165</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4646773155229285"><A>beamgain:0.464677315523</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fr091'"><A>cluster:fr091</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004533449503141569"><A>r:0.00453344950314</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fs052G'"><A>name:fs052G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5019408886888628"><A>ra:1.50194088869</A> </A> <A mdltype=float mdlval="0.8738076072177109"><A>dec:0.873807607218</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006838467203289275"><A>I:0.000683846720329</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.6162485487394997e-05"><A>ex:2.61624854874e-05</A> </A> <A mdltype=float mdlval="6.19591884457987e-06"><A>ey:6.19591884458e-06</A> </A> <A mdltype=float mdlval="1.674766532813995"><A>pa:1.67476653281</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000165"><A>cluster_flux:0.000165</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000165"><A>Iapp:0.000165</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.24128213983483854"><A>beamgain:0.241282139835</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fs052'"><A>cluster:fs052</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005872854646673546"><A>r:0.00587285464667</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'dj241a'"><A>name:dj241a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4872674344284484"><A>ra:1.48726743443</A> </A> <A mdltype=float mdlval="0.8672313287692439"><A>dec:0.867231328769</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006698274171574189"><A>I:0.000669827417157</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000428"><A>cluster_flux:0.000428</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000165"><A>Iapp:0.000165</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.24633210850075232"><A>beamgain:0.246332108501</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dj241'"><A>cluster:dj241</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005685613379383803"><A>r:0.00568561337938</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cu251a'"><A>name:cu251a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.489477352874031"><A>ra:1.48947735287</A> </A> <A mdltype=float mdlval="0.8688160877300546"><A>dec:0.86881608773</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002801137470120461"><A>I:0.000280113747012</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000468"><A>cluster_flux:0.000468</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000163"><A>Iapp:0.000163</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.581906463851595"><A>beamgain:0.581906463852</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cu251'"><A>cluster:cu251</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003711424354376261"><A>r:0.00371142435438</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ft225G'"><A>name:ft225G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4796708364992655"><A>ra:1.4796708365</A> </A> <A mdltype=float mdlval="0.8591497212942243"><A>dec:0.859149721294</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0060867204286367115"><A>I:0.00608672042864</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.5812683023068626e-05"><A>ex:1.58126830231e-05</A> </A> <A mdltype=float mdlval="1.1938052083641214e-05"><A>ey:1.19380520836e-05</A> </A> <A mdltype=float mdlval="0.5557639196222004"><A>pa:0.555763919622</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000163"><A>cluster_flux:0.000163</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000163"><A>Iapp:0.000163</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02677961012191722"><A>beamgain:0.0267796101219</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ft225'"><A>cluster:ft225</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01472995620762919"><A>r:0.0147299562076</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fu088G'"><A>name:fu088G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5314323802849268"><A>ra:1.53143238028</A> </A> <A mdltype=float mdlval="0.8755821009215059"><A>dec:0.875582100922</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.07355207517034314"><A>I:0.0735520751703</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.235987755982989e-05"><A>ex:5.23598775598e-05</A> </A> <A mdltype=float mdlval="1.996656664281513e-05"><A>ey:1.99665666428e-05</A> </A> <A mdltype=float mdlval="2.0296644881748622"><A>pa:2.02966448817</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000162"><A>cluster_flux:0.000162</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000162"><A>Iapp:0.000162</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002202521133833623"><A>beamgain:0.00220252113383</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fu088'"><A>cluster:fu088</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.024122368858180598"><A>r:0.0241223688582</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fv101G'"><A>name:fv101G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5008605996950484"><A>ra:1.5008605997</A> </A> <A mdltype=float mdlval="0.8695707331920319"><A>dec:0.869570733192</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002745629005272173"><A>I:0.000274562900527</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.2132248143143114e-05"><A>ex:4.21322481431e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.4499803863234501"><A>pa:0.449980386323</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00016"><A>cluster_flux:0.00016</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00016"><A>Iapp:0.00016</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5827444264784757"><A>beamgain:0.582744426478</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fv101'"><A>cluster:fv101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0038880381383596617"><A>r:0.00388803813836</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fw234G'"><A>name:fw234G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4774114205160962"><A>ra:1.47741142052</A> </A> <A mdltype=float mdlval="0.8617303651262231"><A>dec:0.861730365126</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005138133629271287"><A>I:0.00513813362927</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.21307749152881e-05"><A>ex:2.21307749153e-05</A> </A> <A mdltype=float mdlval="1.2653637076958888e-05"><A>ey:1.2653637077e-05</A> </A> <A mdltype=float mdlval="0.39397708159020445"><A>pa:0.39397708159</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000159"><A>cluster_flux:0.000159</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000159"><A>Iapp:0.000159</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03094508852284367"><A>beamgain:0.0309450885228</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fw234'"><A>cluster:fw234</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014068410606097833"><A>r:0.0140684106061</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fx282G'"><A>name:fx282G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4852431317488153"><A>ra:1.48524313175</A> </A> <A mdltype=float mdlval="0.8712494083198926"><A>dec:0.87124940832</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0009545382633463356"><A>I:0.000954538263346</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.878563566287905e-06"><A>ex:9.87856356629e-06</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6715466187385515"><A>pa:0.671546618739</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000156"><A>cluster_flux:0.000156</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000156"><A>Iapp:0.000156</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.1634298026494077"><A>beamgain:0.163429802649</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fx282'"><A>cluster:fx282</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006320905953209571"><A>r:0.00632090595321</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fy004G'"><A>name:fy004G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4950696845033937"><A>ra:1.4950696845</A> </A> <A mdltype=float mdlval="0.8831372123743689"><A>dec:0.883137212374</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0048021923126122254"><A>I:0.00480219231261</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.181808887778414e-05"><A>ex:4.18180888778e-05</A> </A> <A mdltype=float mdlval="1.3526301702956054e-05"><A>ey:1.3526301703e-05</A> </A> <A mdltype=float mdlval="1.6196888809028371"><A>pa:1.6196888809</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000155"><A>cluster_flux:0.000155</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000155"><A>Iapp:0.000155</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.032276924768905264"><A>beamgain:0.0322769247689</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fy004'"><A>cluster:fy004</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013056048277577325"><A>r:0.0130560482776</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'fz221G'"><A>name:fz221G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4915883809641959"><A>ra:1.49158838096</A> </A> <A mdltype=float mdlval="0.8672943002486558"><A>dec:0.867294300249</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00024666420277594605"><A>I:0.000246664202776</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.839650692994774e-05"><A>ex:2.83965069299e-05</A> </A> <A mdltype=float mdlval="1.9931660057775245e-05"><A>ey:1.99316600578e-05</A> </A> <A mdltype=float mdlval="1.0941931243938379"><A>pa:1.09419312439</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000154"><A>cluster_flux:0.000154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000154"><A>Iapp:0.000154</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.624330560603817"><A>beamgain:0.624330560604</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fz221'"><A>cluster:fz221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00350730182599096"><A>r:0.00350730182599</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ga246G'"><A>name:ga246G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4691370937850714"><A>ra:1.46913709379</A> </A> <A mdltype=float mdlval="0.8606861171814624"><A>dec:0.860686117181</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="1.813361256131663"><A>I:1.81336125613</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.584979944989104e-05"><A>ex:4.58497994499e-05</A> </A> <A mdltype=float mdlval="2.452187599052033e-05"><A>ey:2.45218759905e-05</A> </A> <A mdltype=float mdlval="1.3788851233267712"><A>pa:1.37888512333</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000154"><A>cluster_flux:0.000154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000154"><A>Iapp:0.000154</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="8.492516285945093e-05"><A>beamgain:8.49251628595e-05</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ga246'"><A>cluster:ga246</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.019155253874888045"><A>r:0.0191552538749</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gb101'"><A>name:gb101</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4997736260901988"><A>ra:1.49977362609</A> </A> <A mdltype=float mdlval="0.8694133743066721"><A>dec:0.869413374307</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021760453388050194"><A>I:0.000217604533881</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000153"><A>cluster_flux:0.000153</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000153"><A>Iapp:0.000153</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.703110350099692"><A>beamgain:0.7031103501</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gb101'"><A>cluster:gb101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003223598413669475"><A>r:0.00322359841367</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gc111'"><A>name:gc111</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5005320763699455"><A>ra:1.50053207637</A> </A> <A mdltype=float mdlval="0.8687344237743538"><A>dec:0.868734423774</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002608084338892978"><A>I:0.000260808433889</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000152"><A>cluster_flux:0.000152</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000152"><A>Iapp:0.000152</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.58280323888804"><A>beamgain:0.582803238888</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gc111'"><A>cluster:gc111</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0038853069113194004"><A>r:0.00388530691132</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gd32xG'"><A>name:gd32xG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4555502466103636"><A>ra:1.45555024661</A> </A> <A mdltype=float mdlval="0.8944046915061015"><A>dec:0.894404691506</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.21438627718534695"><A>I:0.214386277185</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.895943197415098e-05"><A>ex:8.89594319742e-05</A> </A> <A mdltype=float mdlval="9.965830028887622e-06"><A>ey:9.96583002889e-06</A> </A> <A mdltype=float mdlval="2.4891858564806797"><A>pa:2.48918585648</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000151"><A>cluster_flux:0.000151</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000151"><A>Iapp:0.000151</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0007043361262785185"><A>beamgain:0.000704336126279</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gd32x'"><A>cluster:gd32x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.03487238867497411"><A>r:0.034872388675</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'al080c'"><A>name:al080c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4986580465389092"><A>ra:1.49865804654</A> </A> <A mdltype=float mdlval="0.8703063545651625"><A>dec:0.870306354565</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00017903813265050743"><A>I:0.000179038132651</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0013720000000000002"><A>cluster_flux:0.001372</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000149"><A>Iapp:0.000149</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.832224944452791"><A>beamgain:0.832224944453</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'al080'"><A>cluster:al080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0024430516202742455"><A>r:0.00244305162027</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ge031'"><A>name:ge031</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4977555891425802"><A>ra:1.49775558914</A> </A> <A mdltype=float mdlval="0.8730103059088148"><A>dec:0.873010305909</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00022880800992272575"><A>I:0.000228808009923</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000149"><A>cluster_flux:0.000149</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000149"><A>Iapp:0.000149</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6512009787171396"><A>beamgain:0.651200978717</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ge031'"><A>cluster:ge031</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0034628867180720125"><A>r:0.00346288671807</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gf002'"><A>name:gf002</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4949822958677466"><A>ra:1.49498229587</A> </A> <A mdltype=float mdlval="0.8769048161484224"><A>dec:0.876904816148</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0012513626897773008"><A>I:0.00125136268978</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000149"><A>cluster_flux:0.000149</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000149"><A>Iapp:0.000149</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.11907019540954736"><A>beamgain:0.11907019541</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gf002'"><A>cluster:gf002</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006823403540429901"><A>r:0.00682340354043</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'df041a'"><A>name:df041a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4996184314131116"><A>ra:1.49961843141</A> </A> <A mdltype=float mdlval="0.8736115892894193"><A>dec:0.873611589289</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000340760784675228"><A>I:0.000340760784675</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00041699999999999994"><A>cluster_flux:0.000417</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000148"><A>Iapp:0.000148</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.43432227725691996"><A>beamgain:0.434322277257</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'df041'"><A>cluster:df041</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004662326276059908"><A>r:0.00466232627606</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gg015'"><A>name:gg015</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4993789722397377"><A>ra:1.49937897224</A> </A> <A mdltype=float mdlval="0.8850262520369725"><A>dec:0.885026252037</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006177948870687285"><A>I:0.00617794887069</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000146"><A>cluster_flux:0.000146</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000146"><A>Iapp:0.000146</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.023632439027252386"><A>beamgain:0.0236324390273</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gg015'"><A>cluster:gg015</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015218006744325349"><A>r:0.0152180067443</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gh295G'"><A>name:gh295G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4728090047318798"><A>ra:1.47280900473</A> </A> <A mdltype=float mdlval="0.8743066666640261"><A>dec:0.874306666664</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0051213177045641095"><A>I:0.00512131770456</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.428047635095116e-05"><A>ex:6.4280476351e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.8451962847067684"><A>pa:2.84519628471</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000146"><A>cluster_flux:0.000146</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000146"><A>Iapp:0.000146</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.028508287988047498"><A>beamgain:0.028508287988</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gh295'"><A>cluster:gh295</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014812911622168776"><A>r:0.0148129116222</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gi13xG'"><A>name:gi13xG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5300598359078659"><A>ra:1.53005983591</A> </A> <A mdltype=float mdlval="0.8512079845054595"><A>dec:0.851207984505</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06536434925685765"><A>I:0.0653643492569</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.955063407804653e-05"><A>ex:5.9550634078e-05</A> </A> <A mdltype=float mdlval="2.2636920398366454e-05"><A>ey:2.26369203984e-05</A> </A> <A mdltype=float mdlval="2.2079129226458183"><A>pa:2.20791292265</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000266"><A>cluster_flux:0.000266</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000145"><A>Iapp:0.000145</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002218334637283755"><A>beamgain:0.00221833463728</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gi13x'"><A>cluster:gi13x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.029698588570806067"><A>r:0.0296985885708</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gj350'"><A>name:gj350</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4940967507118696"><A>ra:1.49409675071</A> </A> <A mdltype=float mdlval="0.8720848101663597"><A>dec:0.872084810166</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00016415703569606316"><A>I:0.000164157035696</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000143"><A>cluster_flux:0.000143</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000143"><A>Iapp:0.000143</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8711170946383595"><A>beamgain:0.871117094638</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gj350'"><A>cluster:gj350</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0020663564487075486"><A>r:0.00206635644871</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gk291'"><A>name:gk291</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4885650169141362"><A>ra:1.48856501691</A> </A> <A mdltype=float mdlval="0.8715981251044411"><A>dec:0.871598125104</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003058721031003116"><A>I:0.0003058721031</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000143"><A>cluster_flux:0.000143</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000143"><A>Iapp:0.000143</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.46751566602693007"><A>beamgain:0.467515666027</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gk291'"><A>cluster:gk291</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004344190964178054"><A>r:0.00434419096418</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gl113'"><A>name:gl113</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5079245754964001"><A>ra:1.5079245755</A> </A> <A mdltype=float mdlval="0.8666709733595984"><A>dec:0.86667097336</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0308501635591711"><A>I:0.0308501635592</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000142"><A>cluster_flux:0.000142</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000142"><A>Iapp:0.000142</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.004602892938562279"><A>beamgain:0.00460289293856</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gl113'"><A>cluster:gl113</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009088911506246636"><A>r:0.00908891150625</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gm038G'"><A>name:gm038G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5124489052498824"><A>ra:1.51244890525</A> </A> <A mdltype=float mdlval="0.8911184634173989"><A>dec:0.891118463417</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.061534265569952784"><A>I:0.06153426557</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.000441968356505e-05"><A>ex:6.00044196836e-05</A> </A> <A mdltype=float mdlval="2.951351765122411e-05"><A>ey:2.95135176512e-05</A> </A> <A mdltype=float mdlval="0.25076459596329287"><A>pa:0.250764595963</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000141"><A>cluster_flux:0.000141</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000141"><A>Iapp:0.000141</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0022914062383617754"><A>beamgain:0.00229140623836</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gm038'"><A>cluster:gm038</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02382391187991342"><A>r:0.0238239118799</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gn076G'"><A>name:gn076G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5221697783182526"><A>ra:1.52216977832</A> </A> <A mdltype=float mdlval="0.8751977445136317"><A>dec:0.875197744514</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.08289667539499954"><A>I:0.082896675395</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.646213791594407e-05"><A>ex:6.64621379159e-05</A> </A> <A mdltype=float mdlval="2.0559978588493202e-05"><A>ey:2.05599785885e-05</A> </A> <A mdltype=float mdlval="1.150727916790901"><A>pa:1.15072791679</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00014"><A>cluster_flux:0.00014</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00014"><A>Iapp:0.00014</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0016888493939341386"><A>beamgain:0.00168884939393</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gn076'"><A>cluster:gn076</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018269661035935015"><A>r:0.0182696610359</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'go271'"><A>name:go271</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.487945355216508"><A>ra:1.48794535522</A> </A> <A mdltype=float mdlval="0.8704115804657653"><A>dec:0.870411580466</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003176841188162603"><A>I:0.000317684118816</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00014"><A>cluster_flux:0.00014</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00014"><A>Iapp:0.00014</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.440689325364017"><A>beamgain:0.440689325364</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'go271'"><A>cluster:go271</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004485399944092482"><A>r:0.00448539994409</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'eq121a'"><A>name:eq121a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4995713773364778"><A>ra:1.49957137734</A> </A> <A mdltype=float mdlval="0.8681497035683508"><A>dec:0.868149703568</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021711401324762028"><A>I:0.000217114013248</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000338"><A>cluster_flux:0.000338</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000138"><A>Iapp:0.000138</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6356107463345071"><A>beamgain:0.635610746335</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eq121'"><A>cluster:eq121</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0035896296124167653"><A>r:0.00358962961242</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'A0i'"><A>name:A0i</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4949927154833809"><A>ra:1.49499271548</A> </A> <A mdltype=float mdlval="0.8700387781375393"><A>dec:0.870038778138</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00013425466912512943"><A>I:0.000134254669125</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000138"><A>Iapp:0.000138</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0278972113169471"><A>beamgain:1.02789721132</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="8.190201453568703e-05"><A>r:8.19020145357e-05</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'H194b'"><A>name:H194b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4905728087790453"><A>ra:1.49057280878</A> </A> <A mdltype=float mdlval="0.8560249885212087"><A>dec:0.856024988521</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004577690977254836"><A>I:0.00457769097725</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020439000000000002"><A>cluster_flux:0.020439</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000137"><A>Iapp:0.000137</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02992775193448217"><A>beamgain:0.0299277519345</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'H194'"><A>cluster:H194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014333461152615362"><A>r:0.0143334611526</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gp034G'"><A>name:gp034G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.504947183418838"><A>ra:1.50494718342</A> </A> <A mdltype=float mdlval="0.8829257133756122"><A>dec:0.882925713376</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0046629219278244965"><A>I:0.00466292192782</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.3440508468211354e-05"><A>ex:3.34405084682e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7557236391227277"><A>pa:0.755723639123</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000136"><A>cluster_flux:0.000136</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000136"><A>Iapp:0.000136</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02916626143544533"><A>beamgain:0.0291662614354</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gp034'"><A>cluster:gp034</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014367315479308161"><A>r:0.0143673154793</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gq033'"><A>name:gq033</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5035453698702212"><A>ra:1.50354536987</A> </A> <A mdltype=float mdlval="0.8794111613141637"><A>dec:0.879411161314</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.015454507684941414"><A>I:0.0154545076849</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000136"><A>cluster_flux:0.000136</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000136"><A>Iapp:0.000136</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.008800021506509449"><A>beamgain:0.00880002150651</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gq033'"><A>cluster:gq033</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.010857078558369603"><A>r:0.0108570785584</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gr266'"><A>name:gr266</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.464949071525156"><A>ra:1.46494907153</A> </A> <A mdltype=float mdlval="0.8670936397445539"><A>dec:0.867093639745</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.8112730910945324"><A>I:0.811273091095</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000135"><A>cluster_flux:0.000135</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000135"><A>Iapp:0.000135</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00016640512483640275"><A>beamgain:0.000166405124836</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gr266'"><A>cluster:gr266</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.019564545638445802"><A>r:0.0195645456384</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gs081'"><A>name:gs081</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5003426034263492"><A>ra:1.50034260343</A> </A> <A mdltype=float mdlval="0.8705936183067483"><A>dec:0.870593618307</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00020839384414880714"><A>I:0.000208393844149</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000134"><A>cluster_flux:0.000134</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000134"><A>Iapp:0.000134</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6430132355748236"><A>beamgain:0.643013235575</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gs081'"><A>cluster:gs081</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0035551458707533674"><A>r:0.00355514587075</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gt351'"><A>name:gt351</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.494227912205157"><A>ra:1.49422791221</A> </A> <A mdltype=float mdlval="0.8744707974268836"><A>dec:0.874470797427</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002860224210071341"><A>I:0.000286022421007</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000134"><A>cluster_flux:0.000134</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000134"><A>Iapp:0.000134</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.46849474082543247"><A>beamgain:0.468494740825</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gt351'"><A>cluster:gt351</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004409361516249144"><A>r:0.00440936151625</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'H194c'"><A>name:H194c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.49049159860895"><A>ra:1.49049159861</A> </A> <A mdltype=float mdlval="0.8559157483633264"><A>dec:0.855915748363</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004515317090979741"><A>I:0.00451531709098</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020439000000000002"><A>cluster_flux:0.020439</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000132"><A>Iapp:0.000132</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.029233827290600853"><A>beamgain:0.0292338272906</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'H194'"><A>cluster:H194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014450984087814055"><A>r:0.0144509840878</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gu288G'"><A>name:gu288G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.45827077858191"><A>ra:1.45827077858</A> </A> <A mdltype=float mdlval="0.8754842054037616"><A>dec:0.875484205404</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.05421926765247324"><A>I:0.0542192676525</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.283185307179586e-05"><A>ex:6.28318530718e-05</A> </A> <A mdltype=float mdlval="5.038765550507629e-05"><A>ey:5.03876555051e-05</A> </A> <A mdltype=float mdlval="1.524837514079926"><A>pa:1.52483751408</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000225"><A>cluster_flux:0.000225</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000132"><A>Iapp:0.000132</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002434558888660658"><A>beamgain:0.00243455888866</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gu288'"><A>cluster:gu288</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.024142855339245827"><A>r:0.0241428553392</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gv174G'"><A>name:gv174G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5001550677982223"><A>ra:1.5001550678</A> </A> <A mdltype=float mdlval="0.8562906101800698"><A>dec:0.85629061018</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00412509461848593"><A>I:0.00412509461849</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.1624629432209744e-05"><A>ex:2.16246294322e-05</A> </A> <A mdltype=float mdlval="1.5742869852988853e-05"><A>ey:1.5742869853e-05</A> </A> <A mdltype=float mdlval="1.0253131818651062"><A>pa:1.02531318187</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000131"><A>cluster_flux:0.000131</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000131"><A>Iapp:0.000131</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031756847324894116"><A>beamgain:0.0317568473249</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gv174'"><A>cluster:gv174</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014210220501072799"><A>r:0.0142102205011</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gw064G'"><A>name:gw064G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5129595013225534"><A>ra:1.51295950132</A> </A> <A mdltype=float mdlval="0.8777496078662652"><A>dec:0.877749607866</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00420870396119081"><A>I:0.00420870396119</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.806563098599633e-05"><A>ex:3.8065630986e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8182476510210568"><A>pa:0.818247651021</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000129"><A>cluster_flux:0.000129</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000129"><A>Iapp:0.000129</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.030650765934009942"><A>beamgain:0.030650765934</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gw064'"><A>cluster:gw064</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013905939056161599"><A>r:0.0139059390562</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gx032'"><A>name:gx032</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5009197489033985"><A>ra:1.5009197489</A> </A> <A mdltype=float mdlval="0.8777413350056108"><A>dec:0.877741335006</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00908305530895856"><A>I:0.00908305530896</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000129"><A>cluster_flux:0.000129</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000129"><A>Iapp:0.000129</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.014202269568122976"><A>beamgain:0.0142022695681</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gx032'"><A>cluster:gx032</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.008583373521527504"><A>r:0.00858337352153</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gy045G'"><A>name:gy045G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5087361885051624"><A>ra:1.50873618851</A> </A> <A mdltype=float mdlval="0.8817446839773727"><A>dec:0.881744683977</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004695637642435678"><A>I:0.00469563764244</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.2393310917014756e-05"><A>ex:3.2393310917e-05</A> </A> <A mdltype=float mdlval="1.0663961729685353e-05"><A>ey:1.06639617297e-05</A> </A> <A mdltype=float mdlval="0.3484309170702829"><A>pa:0.34843091707</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000128"><A>cluster_flux:0.000128</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000128"><A>Iapp:0.000128</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.027259343617836107"><A>beamgain:0.0272593436178</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gy045'"><A>cluster:gy045</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014652016293153278"><A>r:0.0146520162932</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gz105G'"><A>name:gz105G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5170291204460136"><A>ra:1.51702912045</A> </A> <A mdltype=float mdlval="0.8669449376922841"><A>dec:0.866944937692</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004317793720176379"><A>I:0.00431779372018</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.8518679977587346e-05"><A>ex:2.85186799776e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.37420949947875"><A>pa:2.37420949948</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000127"><A>cluster_flux:0.000127</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000127"><A>Iapp:0.000127</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02941316983406334"><A>beamgain:0.0294131698341</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gz105'"><A>cluster:gz105</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014644251893552424"><A>r:0.0146442518936</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ha331'"><A>name:ha331</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4899072798286748"><A>ra:1.48990727983</A> </A> <A mdltype=float mdlval="0.8746835530627017"><A>dec:0.874683553063</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00048213695351193784"><A>I:0.000482136953512</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000127"><A>cluster_flux:0.000127</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000127"><A>Iapp:0.000127</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.263410632756768"><A>beamgain:0.263410632757</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ha331'"><A>cluster:ha331</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005605304840002477"><A>r:0.00560530484</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hb246G'"><A>name:hb246G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.471646161664446"><A>ra:1.47164616166</A> </A> <A mdltype=float mdlval="0.8606911786362931"><A>dec:0.860691178636</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.039617822538598677"><A>I:0.0396178225386</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.654940437854378e-05"><A>ex:6.65494043785e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.9802714873121811"><A>pa:0.980271487312</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000127"><A>cluster_flux:0.000127</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000127"><A>Iapp:0.000127</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0032056279689845904"><A>beamgain:0.00320562796898</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hb246'"><A>cluster:hb246</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.017752943019952797"><A>r:0.01775294302</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hc111'"><A>name:hc111</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5018143697713857"><A>ra:1.50181436977</A> </A> <A mdltype=float mdlval="0.8686462671938356"><A>dec:0.868646267194</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00028933192920472714"><A>I:0.000289331929205</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000126"><A>cluster_flux:0.000126</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000126"><A>Iapp:0.000126</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4354859843721023"><A>beamgain:0.435485984372</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hc111'"><A>cluster:hc111</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004696635588045357"><A>r:0.00469663558805</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hd182'"><A>name:hd182</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.494141570767061"><A>ra:1.49414157077</A> </A> <A mdltype=float mdlval="0.8640941168920766"><A>dec:0.864094116892</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0005926909596606095"><A>I:0.000592690959661</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000126"><A>cluster_flux:0.000126</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000126"><A>Iapp:0.000126</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.21258971129262866"><A>beamgain:0.212589711293</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hd182'"><A>cluster:hd182</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00600685190856849"><A>r:0.00600685190857</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'he332G'"><A>name:he332G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4894998850746743"><A>ra:1.48949988507</A> </A> <A mdltype=float mdlval="0.8767948429522542"><A>dec:0.876794842952</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0022183287264869"><A>I:0.00221832872649</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.93048147549123e-05"><A>ex:3.93048147549e-05</A> </A> <A mdltype=float mdlval="3.090978105281957e-05"><A>ey:3.09097810528e-05</A> </A> <A mdltype=float mdlval="0.33884867550439857"><A>pa:0.338848675504</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000126"><A>cluster_flux:0.000126</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000126"><A>Iapp:0.000126</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.05679951690457635"><A>beamgain:0.0567995169046</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'he332'"><A>cluster:he332</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007551406056479882"><A>r:0.00755140605648</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hf222G'"><A>name:hf222G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.488781420288091"><A>ra:1.48878142029</A> </A> <A mdltype=float mdlval="0.8652140772197888"><A>dec:0.86521407722</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007296053171167158"><A>I:0.000729605317117</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.9112091923265415e-05"><A>ex:2.91120919233e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8921152558597978"><A>pa:0.89211525586</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000126"><A>cluster_flux:0.000126</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000126"><A>Iapp:0.000126</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.17269610986105743"><A>beamgain:0.172696109861</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hf222'"><A>cluster:hf222</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006266397425867981"><A>r:0.00626639742587</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'G195b'"><A>name:G195b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.48897541363445"><A>ra:1.48897541363</A> </A> <A mdltype=float mdlval="0.8536295241228464"><A>dec:0.853629524123</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01453010833162101"><A>I:0.0145301083316</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.011000000000000001"><A>cluster_flux:0.011</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000125"><A>Iapp:0.000125</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.008602826430961285"><A>beamgain:0.00860282643096</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'G195'"><A>cluster:G195</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01689591495029935"><A>r:0.0168959149503</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hg011'"><A>name:hg011</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4969411487004298"><A>ra:1.4969411487</A> </A> <A mdltype=float mdlval="0.8751026240693981"><A>dec:0.875102624069</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00036390250857058445"><A>I:0.000363902508571</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000123"><A>cluster_flux:0.000123</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000123"><A>Iapp:0.000123</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.33800261636872525"><A>beamgain:0.338002616369</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hg011'"><A>cluster:hg011</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005192065299395909"><A>r:0.0051920652994</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gi13xaG'"><A>name:gi13xaG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5302568312205385"><A>ra:1.53025683122</A> </A> <A mdltype=float mdlval="0.8510730531009878"><A>dec:0.851073053101</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.05064768937243134"><A>I:0.0506476893724</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.544911033585985e-05"><A>ex:5.54491103359e-05</A> </A> <A mdltype=float mdlval="2.049016541841343e-05"><A>ey:2.04901654184e-05</A> </A> <A mdltype=float mdlval="2.2198230669147203"><A>pa:2.21982306691</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000266"><A>cluster_flux:0.000266</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000121"><A>Iapp:0.000121</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002389052718876115"><A>beamgain:0.00238905271888</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gi13x'"><A>cluster:gi13x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02988486878214216"><A>r:0.0298848687821</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hh274'"><A>name:hh274</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4755722623635146"><A>ra:1.47557226236</A> </A> <A mdltype=float mdlval="0.8691301771822436"><A>dec:0.869130177182</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.003955588014487305"><A>I:0.00395558801449</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000121"><A>cluster_flux:0.000121</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000121"><A>Iapp:0.000121</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.030589636624653173"><A>beamgain:0.0305896366247</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hh274'"><A>cluster:hh274</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012495048590640071"><A>r:0.0124950485906</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hi295G'"><A>name:hi295G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4729943761517341"><A>ra:1.47299437615</A> </A> <A mdltype=float mdlval="0.8738165607567735"><A>dec:0.873816560757</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0039540918852228974"><A>I:0.00395409188522</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.3423791789618924e-05"><A>ex:4.34237917896e-05</A> </A> <A mdltype=float mdlval="3.1223940318178555e-05"><A>ey:3.12239403182e-05</A> </A> <A mdltype=float mdlval="1.295618466680435"><A>pa:1.29561846668</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00012"><A>cluster_flux:0.00012</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00012"><A>Iapp:0.00012</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.030348308406403013"><A>beamgain:0.0303483084064</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hi295'"><A>cluster:hi295</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014569359259102117"><A>r:0.0145693592591</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hj105'"><A>name:hj105</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5195627276546713"><A>ra:1.51956272765</A> </A> <A mdltype=float mdlval="0.8680395558392573"><A>dec:0.868039555839</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006908560995931712"><A>I:0.00690856099593</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000118"><A>cluster_flux:0.000118</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000118"><A>Iapp:0.000118</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01708025738927215"><A>beamgain:0.0170802573893</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hj105'"><A>cluster:hj105</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016060973887612094"><A>r:0.0160609738876</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hk194'"><A>name:hk194</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4913540006989454"><A>ra:1.4913540007</A> </A> <A mdltype=float mdlval="0.8563105069335425"><A>dec:0.856310506934</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0037245147327935645"><A>I:0.00372451473279</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000118"><A>cluster_flux:0.000118</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000118"><A>Iapp:0.000118</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03168197965792294"><A>beamgain:0.0316819796579</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hk194'"><A>cluster:hk194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013961084649520157"><A>r:0.0139610846495</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hl14xG'"><A>name:hl14xG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5289168372340274"><A>ra:1.52891683723</A> </A> <A mdltype=float mdlval="0.846579825114776"><A>dec:0.846579825115</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04195700598091431"><A>I:0.0419570059809</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="7.305948248848263e-05"><A>ex:7.30594824885e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.340658092789867"><A>pa:2.34065809279</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000117"><A>cluster_flux:0.000117</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000117"><A>Iapp:0.000117</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00278856885196293"><A>beamgain:0.00278856885196</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hl14x'"><A>cluster:hl14x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.03235929777953499"><A>r:0.0323592977795</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hm045G'"><A>name:hm045G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5114096489467823"><A>ra:1.51140964895</A> </A> <A mdltype=float mdlval="0.8816213241058418"><A>dec:0.881621324106</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006077710522348738"><A>I:0.00607771052235</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.623524511318481e-05"><A>ex:6.62352451132e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6970039213949707"><A>pa:0.697003921395</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000117"><A>cluster_flux:0.000117</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000117"><A>Iapp:0.000117</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.019250670062315706"><A>beamgain:0.0192506700623</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hm045'"><A>cluster:hm045</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01565656602663837"><A>r:0.0156565660266</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hn175'"><A>name:hn175</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.499080154418504"><A>ra:1.49908015442</A> </A> <A mdltype=float mdlval="0.8537653980051142"><A>dec:0.853765398005</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.009434979537697416"><A>I:0.0094349795377</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000115"><A>cluster_flux:0.000115</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000115"><A>Iapp:0.000115</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.012188685681883893"><A>beamgain:0.0121886856819</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hn175'"><A>cluster:hn175</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016543297260700782"><A>r:0.0165432972607</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ho105G'"><A>name:ho105G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5192722699605543"><A>ra:1.51927226996</A> </A> <A mdltype=float mdlval="0.8673158027050403"><A>dec:0.867315802705</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006394898724925413"><A>I:0.00639489872493</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.1223940318178555e-05"><A>ex:3.12239403182e-05</A> </A> <A mdltype=float mdlval="5.88175957922089e-06"><A>ey:5.88175957922e-06</A> </A> <A mdltype=float mdlval="1.577362988479185"><A>pa:1.57736298848</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000114"><A>cluster_flux:0.000114</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000114"><A>Iapp:0.000114</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01782670921052462"><A>beamgain:0.0178267092105</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ho105'"><A>cluster:ho105</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015990869815160978"><A>r:0.0159908698152</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hp176'"><A>name:hp176</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4986179737792833"><A>ra:1.49861797378</A> </A> <A mdltype=float mdlval="0.8523559922742513"><A>dec:0.852355992274</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.037451314332247035"><A>I:0.0374513143322</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000114"><A>cluster_flux:0.000114</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000114"><A>Iapp:0.000114</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00304395191550972"><A>beamgain:0.00304395191551</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hp176'"><A>cluster:hp176</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.017891799104072088"><A>r:0.0178917991041</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hq035G'"><A>name:hq035G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5091919637860285"><A>ra:1.50919196379</A> </A> <A mdltype=float mdlval="0.8833015351234442"><A>dec:0.883301535123</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.007276076761392004"><A>I:0.00727607676139</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.1834805556376576e-05"><A>ex:3.18348055564e-05</A> </A> <A mdltype=float mdlval="1.614429558094755e-05"><A>ey:1.61442955809e-05</A> </A> <A mdltype=float mdlval="0.6083416491792643"><A>pa:0.608341649179</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000113"><A>cluster_flux:0.000113</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000113"><A>Iapp:0.000113</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.015530347425634042"><A>beamgain:0.0155303474256</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hq035'"><A>cluster:hq035</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016078668831027876"><A>r:0.016078668831</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hr101'"><A>name:hr101</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5034069129006604"><A>ra:1.5034069129</A> </A> <A mdltype=float mdlval="0.8692238490031982"><A>dec:0.869223849003</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003878588645601122"><A>I:0.00038785886456</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000215"><A>cluster_flux:0.000215</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000113"><A>Iapp:0.000113</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.2913430897812746"><A>beamgain:0.291343089781</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hr101'"><A>cluster:hr101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005564233457827813"><A>r:0.00556423345783</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hs004'"><A>name:hs004</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4951397594728615"><A>ra:1.49513975947</A> </A> <A mdltype=float mdlval="0.8819106298826523"><A>dec:0.881910629883</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004979331649519516"><A>I:0.00497933164952</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000112"><A>cluster_flux:0.000112</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000112"><A>Iapp:0.000112</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02249297855281592"><A>beamgain:0.0224929785528</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hs004'"><A>cluster:hs004</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011830056978244517"><A>r:0.0118300569782</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ht142'"><A>name:ht142</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5001379635715526"><A>ra:1.50013796357</A> </A> <A mdltype=float mdlval="0.8652165381340341"><A>dec:0.865216538134</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0004781846933216933"><A>I:0.000478184693322</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000111"><A>cluster_flux:0.000111</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000111"><A>Iapp:0.000111</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.23212788186284755"><A>beamgain:0.232127881863</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ht142'"><A>cluster:ht142</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0059337308080254295"><A>r:0.00593373080803</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'N221dG'"><A>name:N221dG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4900871883679705"><A>ra:1.49008718837</A> </A> <A mdltype=float mdlval="0.8662342919807495"><A>dec:0.866234291981</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003034135332825865"><A>I:0.000303413533283</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.754276882432553e-05"><A>ex:4.75427688243e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7561465149471934"><A>pa:0.756146514947</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.005606999999999999"><A>cluster_flux:0.005607</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000111"><A>Iapp:0.000111</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3658373402105941"><A>beamgain:0.365837340211</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'N221'"><A>cluster:N221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004941027832725218"><A>r:0.00494102783273</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hu076'"><A>name:hu076</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5220887775876677"><A>ra:1.52208877759</A> </A> <A mdltype=float mdlval="0.8774273677264696"><A>dec:0.877427367726</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.4051774394879799"><A>I:0.405177439488</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000108"><A>cluster_flux:0.000108</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000108"><A>Iapp:0.000108</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0002665498852465204"><A>beamgain:0.000266549885247</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hu076'"><A>cluster:hu076</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018945336393584093"><A>r:0.0189453363936</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hv308G'"><A>name:hv308G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4630288079222344"><A>ra:1.46302880792</A> </A> <A mdltype=float mdlval="0.8832237981585603"><A>dec:0.883223798159</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.043755764656285834"><A>I:0.0437557646563</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.672320068981571e-05"><A>ex:5.67232006898e-05</A> </A> <A mdltype=float mdlval="1.1519173063162575e-05"><A>ey:1.15191730632e-05</A> </A> <A mdltype=float mdlval="1.9358542277040585"><A>pa:1.9358542277</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000107"><A>cluster_flux:0.000107</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000107"><A>Iapp:0.000107</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0024453920721193173"><A>beamgain:0.00244539207212</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hv308'"><A>cluster:hv308</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.024247989352754882"><A>r:0.0242479893528</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hw315G'"><A>name:hw315G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4759227768371928"><A>ra:1.47592277684</A> </A> <A mdltype=float mdlval="0.8792614644242203"><A>dec:0.879261464424</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004206147723040001"><A>I:0.00420614772304</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.4713862208239706e-05"><A>ex:2.47138622082e-05</A> </A> <A mdltype=float mdlval="7.190756518216638e-06"><A>ey:7.19075651822e-06</A> </A> <A mdltype=float mdlval="1.742983861092207"><A>pa:1.74298386109</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000106"><A>cluster_flux:0.000106</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000106"><A>Iapp:0.000106</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02520120713292217"><A>beamgain:0.0252012071329</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hw315'"><A>cluster:hw315</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015235032948047676"><A>r:0.015235032948</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hx254G'"><A>name:hx254G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.475541928541115"><A>ra:1.47554192854</A> </A> <A mdltype=float mdlval="0.8641681363056537"><A>dec:0.864168136306</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0032984406525964818"><A>I:0.0032984406526</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.509930787153347e-05"><A>ex:4.50993078715e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6404742428126161"><A>pa:0.640474242813</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000106"><A>cluster_flux:0.000106</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000106"><A>Iapp:0.000106</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.032136397517584084"><A>beamgain:0.0321363975176</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hx254'"><A>cluster:hx254</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013841685811576307"><A>r:0.0138416858116</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hy132G'"><A>name:hy132G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5036226006896218"><A>ra:1.50362260069</A> </A> <A mdltype=float mdlval="0.8654771681512344"><A>dec:0.865477168151</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0012325030608133585"><A>I:0.00123250306081</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.607595563872279e-05"><A>ex:3.60759556387e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.0682236110068604"><A>pa:2.06822361101</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000105"><A>cluster_flux:0.000105</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000105"><A>Iapp:0.000105</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.08519248620016244"><A>beamgain:0.0851924862002</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hy132'"><A>cluster:hy132</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00728810802779868"><A>r:0.0072881080278</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hz229G'"><A>name:hz229G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4700303532962422"><A>ra:1.4700303533</A> </A> <A mdltype=float mdlval="0.8487442602800518"><A>dec:0.84874426028</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="4.62660628533627"><A>I:4.62660628534</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.436700619962337e-05"><A>ex:5.43670061996e-05</A> </A> <A mdltype=float mdlval="1.4398966328953218e-05"><A>ey:1.4398966329e-05</A> </A> <A mdltype=float mdlval="0.39149958671699847"><A>pa:0.391499586717</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000105"><A>cluster_flux:0.000105</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000105"><A>Iapp:0.000105</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="2.269482067942343e-05"><A>beamgain:2.26948206794e-05</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hz229'"><A>cluster:hz229</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.026805578402171702"><A>r:0.0268055784022</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ia304G'"><A>name:ia304G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4773832858085543"><A>ra:1.47738328581</A> </A> <A mdltype=float mdlval="0.877389354455361"><A>dec:0.877389354455</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002938376793122128"><A>I:0.00293837679312</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.832669375986797e-05"><A>ex:2.83266937599e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.2874287969164486"><A>pa:2.28742879692</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000104"><A>cluster_flux:0.000104</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000104"><A>Iapp:0.000104</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03539369091242256"><A>beamgain:0.0353936909124</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ia304'"><A>cluster:ia304</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013402504976076843"><A>r:0.0134025049761</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ib075G'"><A>name:ib075G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5200917194976582"><A>ra:1.5200917195</A> </A> <A mdltype=float mdlval="0.8760297080614724"><A>dec:0.876029708061</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.015650064366549966"><A>I:0.0156500643665</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.6704274169440744e-05"><A>ex:3.67042741694e-05</A> </A> <A mdltype=float mdlval="1.727875959474386e-05"><A>ey:1.72787595947e-05</A> </A> <A mdltype=float mdlval="1.0910137802685276"><A>pa:1.09101378027</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000103"><A>cluster_flux:0.000103</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000103"><A>Iapp:0.000103</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.006581442579888008"><A>beamgain:0.00658144257989</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ib075'"><A>cluster:ib075</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.017252673404092502"><A>r:0.0172526734041</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ic135G'"><A>name:ic135G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5143413483045274"><A>ra:1.5143413483</A> </A> <A mdltype=float mdlval="0.8610888344530675"><A>dec:0.861088834453</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004480225654096124"><A>I:0.0044802256541</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.146828641345776e-05"><A>ex:3.14682864135e-05</A> </A> <A mdltype=float mdlval="5.044001538263612e-06"><A>ey:5.04400153826e-06</A> </A> <A mdltype=float mdlval="2.6344640090904967"><A>pa:2.63446400909</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000103"><A>cluster_flux:0.000103</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000103"><A>Iapp:0.000103</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.022989913444611987"><A>beamgain:0.0229899134446</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ic135'"><A>cluster:ic135</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01548937594515262"><A>r:0.0154893759452</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'hr101a'"><A>name:hr101a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.503637174188876"><A>ra:1.50363717419</A> </A> <A mdltype=float mdlval="0.8693023015530752"><A>dec:0.869302301553</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003765278730157013"><A>I:0.000376527873016</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000215"><A>cluster_flux:0.000215</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000102"><A>Iapp:0.000102</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.27089627969121577"><A>beamgain:0.270896279691</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hr101'"><A>cluster:hr101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005699526009122617"><A>r:0.00569952600912</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'id025G'"><A>name:id025G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5032535508192877"><A>ra:1.50325355082</A> </A> <A mdltype=float mdlval="0.8851567153985591"><A>dec:0.885156715399</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006213397218524051"><A>I:0.00621339721852</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.55167136641571e-05"><A>ex:2.55167136642e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.1900675159578054"><A>pa:1.19006751596</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000102"><A>cluster_flux:0.000102</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000102"><A>Iapp:0.000102</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0164161402229213"><A>beamgain:0.0164161402229</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'id025'"><A>cluster:id025</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015995331553217047"><A>r:0.0159953315532</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ie006G'"><A>name:ie006G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4967731782132179"><A>ra:1.49677317821</A> </A> <A mdltype=float mdlval="0.8883286069679636"><A>dec:0.888328606968</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06606720999829074"><A>I:0.0660672099983</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.33365253270192e-05"><A>ex:4.3336525327e-05</A> </A> <A mdltype=float mdlval="2.2427480888127134e-05"><A>ey:2.24274808881e-05</A> </A> <A mdltype=float mdlval="2.8515508365270623"><A>pa:2.85155083653</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000101"><A>cluster_flux:0.000101</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000101"><A>Iapp:0.000101</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0015287462570708378"><A>beamgain:0.00152874625707</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ie006'"><A>cluster:ie006</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018286612231879888"><A>r:0.0182866122319</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'if193G'"><A>name:if193G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4923385060234104"><A>ra:1.49233850602</A> </A> <A mdltype=float mdlval="0.8611242122770054"><A>dec:0.861124212277</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03464575769093049"><A>I:0.0346457576909</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.141592653589793e-05"><A>ex:3.14159265359e-05</A> </A> <A mdltype=float mdlval="2.04378055408536e-05"><A>ey:2.04378055409e-05</A> </A> <A mdltype=float mdlval="0.8939116185391205"><A>pa:0.893911618539</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00015900000000000002"><A>cluster_flux:0.000159</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000101"><A>Iapp:0.000101</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0029152198344456932"><A>beamgain:0.00291521983445</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'if193'"><A>cluster:if193</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009108236082137395"><A>r:0.00910823608214</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ig186G'"><A>name:ig186G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.494992418777408"><A>ra:1.49499241878</A> </A> <A mdltype=float mdlval="0.8517965618891095"><A>dec:0.851796561889</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06396067031024755"><A>I:0.0639606703102</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.7995817815916554e-05"><A>ex:3.79958178159e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.5119191544170004"><A>pa:0.511919154417</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="9.5e-05"><A>cluster_flux:9.5e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.5e-05"><A>Iapp:9.5e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0014852877485366104"><A>beamgain:0.00148528774854</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ig186'"><A>cluster:ig186</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018285274674684517"><A>r:0.0182852746747</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ih296'"><A>name:ih296</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4680137649719027"><A>ra:1.46801376497</A> </A> <A mdltype=float mdlval="0.877698173013209"><A>dec:0.877698173013</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.38816090472997955"><A>I:0.38816090473</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="9.4e-05"><A>cluster_flux:9.4e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.4e-05"><A>Iapp:9.4e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00024216761362247494"><A>beamgain:0.000242167613622</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ih296'"><A>cluster:ih296</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018853387726647228"><A>r:0.0188533877266</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'gu288aG'"><A>name:gu288aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4584206325514861"><A>ra:1.45842063255</A> </A> <A mdltype=float mdlval="0.8755392356350771"><A>dec:0.875539235635</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.036632885637822604"><A>I:0.0366328856378</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.2935836212988014e-05"><A>ex:5.2935836213e-05</A> </A> <A mdltype=float mdlval="2.064724505109292e-05"><A>ey:2.06472450511e-05</A> </A> <A mdltype=float mdlval="1.4019205896598306"><A>pa:1.40192058966</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000225"><A>cluster_flux:0.000225</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.3e-05"><A>Iapp:9.3e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0025387025450154454"><A>beamgain:0.00253870254502</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gu288'"><A>cluster:gu288</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02406067681437547"><A>r:0.0240606768144</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ii128G'"><A>name:ii128G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5265966837928886"><A>ra:1.52659668379</A> </A> <A mdltype=float mdlval="0.8558110984213767"><A>dec:0.855811098421</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06653795773106504"><A>I:0.0665379577311</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.211479485062318e-05"><A>ex:4.21147948506e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.0770970918168024"><A>pa:2.07709709182</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="9.1e-05"><A>cluster_flux:9.1e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.1e-05"><A>Iapp:9.1e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.001367640413127892"><A>beamgain:0.00136764041313</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ii128'"><A>cluster:ii128</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.025074849738159627"><A>r:0.0250748497382</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'bz085a'"><A>name:bz085a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5193265497002915"><A>ra:1.5193265497</A> </A> <A mdltype=float mdlval="0.87226655130137"><A>dec:0.872266551301</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005044810388944112"><A>I:0.00504481038894</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000507"><A>cluster_flux:0.000507</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.1e-05"><A>Iapp:9.1e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01803833900267686"><A>beamgain:0.0180383390027</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bz085'"><A>cluster:bz085</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01588959666178983"><A>r:0.0158895966618</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ij094G'"><A>name:ij094G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5142343072615025"><A>ra:1.51423430726</A> </A> <A mdltype=float mdlval="0.8699335696902291"><A>dec:0.86993356969</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.003291030626891089"><A>I:0.00329103062689</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.73674992851986e-05"><A>ex:3.73674992852e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.935588737173221"><A>pa:0.935588737173</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="9.1e-05"><A>cluster_flux:9.1e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.1e-05"><A>Iapp:9.1e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.027650912530693836"><A>beamgain:0.0276509125307</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ij094'"><A>cluster:ij094</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012477900147781102"><A>r:0.0124779001478</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'ik083G'"><A>name:ik083G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5094110200604463"><A>ra:1.50941102006</A> </A> <A mdltype=float mdlval="0.8716276211687999"><A>dec:0.871627621169</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.10150738166626692"><A>I:0.101507381666</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.8047441079548873e-05"><A>ex:2.80474410795e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6605016865397407"><A>pa:0.66050168654</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="9e-05"><A>cluster_flux:9e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9e-05"><A>Iapp:9e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0008866350261688301"><A>beamgain:0.000886635026169</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ik083'"><A>cluster:ik083</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009484356289588096"><A>r:0.00948435628959</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cg053a'"><A>name:cg053a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.505605643785738"><A>ra:1.50560564379</A> </A> <A mdltype=float mdlval="0.8762176625686198"><A>dec:0.876217662569</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03277376568774914"><A>I:0.0327737656877</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00047200000000000003"><A>cluster_flux:0.000472</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9e-05"><A>Iapp:9e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0027460988419051916"><A>beamgain:0.00274609884191</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cg053'"><A>cluster:cg053</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009224175504770674"><A>r:0.00922417550477</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'Z294a'"><A>name:Z294a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4756181645228423"><A>ra:1.47561816452</A> </A> <A mdltype=float mdlval="0.8748978794948465"><A>dec:0.874897879495</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002479451794371511"><A>I:0.00247945179437</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0014370000000000001"><A>cluster_flux:0.001437</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="8.7e-05"><A>Iapp:8.7e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03508840147547723"><A>beamgain:0.0350884014755</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'Z294'"><A>cluster:Z294</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013289963995098287"><A>r:0.0132899639951</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'il354'"><A>name:il354</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4892375620880995"><A>ra:1.48923756209</A> </A> <A mdltype=float mdlval="0.883950692885431"><A>dec:0.883950692885</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002410167230688144"><A>I:0.00241016723069</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="7.6e-05"><A>cluster_flux:7.6e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="7.6e-05"><A>Iapp:7.6e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031533081618697764"><A>beamgain:0.0315330816187</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'il354'"><A>cluster:il354</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014331319304368586"><A>r:0.0143313193044</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'cp211c'"><A>name:cp211c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4921320684794845"><A>ra:1.49213206848</A> </A> <A mdltype=float mdlval="0.8676586726365947"><A>dec:0.867658672637</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="8.111269677687587e-05"><A>I:8.11126967769e-05</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0008990000000000001"><A>cluster_flux:0.000899</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="5.8e-05"><A>Iapp:5.8e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7150545143326441"><A>beamgain:0.715054514333</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cp211'"><A>cluster:cp211</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003004935271552052"><A>r:0.00300493527155</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
-
-<TR mdltype=Source ><TD mdltype=str mdlval="'if193a'"><A>name:if193a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4922124234382463"><A>ra:1.49221242344</A> </A> <A mdltype=float mdlval="0.8611143686200242"><A>dec:0.86111436862</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.021971150389285925"><A>I:0.0219711503893</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00015900000000000002"><A>cluster_flux:0.000159</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="5.8e-05"><A>Iapp:5.8e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002639825360636705"><A>beamgain:0.00263982536064</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'if193'"><A>cluster:if193</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009133063629184715"><A>r:0.00913306362918</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
-
-</TABLE>
-<H1>Plot styles</H1>
-<TABLE BORDER=1 FRAME=box RULES=all CELLPADDING=5>
-<A mdltype=dict mdlattr="plotstyles" ><TR mdltype=PlotStyle mdlattr="current" ><TD bgcolor=yellow>current</TD><TD mdltype=int mdlattr="apply" mdlval="-2"><A>apply:-2</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'%N %BJy'"><A>label:%N %BJy</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'red'"><A>label_color:red</A> </TD> <TD mdltype=int mdlattr="label_size" mdlval="12"><A>label_size:12</A> </TD> <TD mdltype=int mdlattr="show_list" mdlval="2"><A>show_list:2</A> </TD> <TD mdltype=int mdlattr="show_plot" mdlval="2"><A>show_plot:2</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'red'"><A>symbol_color:red</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="default" ><TD bgcolor=yellow>default</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'none'"><A>label:none</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'blue'"><A>label_color:blue</A> </TD> <TD mdltype=int mdlattr="label_size" mdlval="6"><A>label_size:6</A> </TD> <TD mdltype=int mdlattr="show_list" mdlval="2"><A>show_list:2</A> </TD> <TD mdltype=int mdlattr="show_plot" mdlval="2"><A>show_plot:2</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'plus'"><A>symbol:plus</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'yellow'"><A>symbol_color:yellow</A> </TD> <TD mdltype=int mdlattr="symbol_size" mdlval="2"><A>symbol_size:2</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="selected" ><TD bgcolor=yellow>selected</TD><TD mdltype=int mdlattr="apply" mdlval="-1"><A>apply:-1</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'%N'"><A>label:%N</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'green'"><A>label_color:green</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=int mdlattr="show_list" mdlval="2"><A>show_list:2</A> </TD> <TD mdltype=int mdlattr="show_plot" mdlval="2"><A>show_plot:2</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'cyan'"><A>symbol_color:cyan</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:Iapp" ><TD bgcolor=yellow>tag:Iapp</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:beamgain" ><TD bgcolor=yellow>tag:beamgain</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:brick" ><TD bgcolor=yellow>tag:brick</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:cal" ><TD bgcolor=yellow>tag:cal</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=int mdlattr="show_plot" mdlval="2"><A>show_plot:2</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:cluster" ><TD bgcolor=yellow>tag:cluster</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:cluster_flux" ><TD bgcolor=yellow>tag:cluster_flux</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:cluster_lead" ><TD bgcolor=yellow>tag:cluster_lead</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:cluster_size" ><TD bgcolor=yellow>tag:cluster_size</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:dE" ><TD bgcolor=yellow>tag:dE</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'lightblue'"><A>symbol_color:lightblue</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:dE_lead" ><TD bgcolor=yellow>tag:dE_lead</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:dft" ><TD bgcolor=yellow>tag:dft</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:dft_5mJy" ><TD bgcolor=yellow>tag:dft_5mJy</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:flux_intrinsic" ><TD bgcolor=yellow>tag:flux_intrinsic</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:mincal" ><TD bgcolor=yellow>tag:mincal</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:newstar_beamed" ><TD bgcolor=yellow>tag:newstar_beamed</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:newstar_beamgain" ><TD bgcolor=yellow>tag:newstar_beamgain</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:nobeam" ><TD bgcolor=yellow>tag:nobeam</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="tag:r" ><TD bgcolor=yellow>tag:r</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="type:Gau" ><TD bgcolor=yellow>type:Gau</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-<TR mdltype=PlotStyle mdlattr="type:pnt" ><TD bgcolor=yellow>type:pnt</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
-</A> </TABLE>
-
-<H1>Other properties</H1>
-<P><A mdltype=float mdlattr="ra0" mdlval="1.4948845339009"><A>Field centre ra: 1.4948845339</A> </A> <A mdltype=float mdlattr="dec0" mdlval="0.87008170140032"><A>dec: 0.8700817014</A> </A> </P>
-</BODY></HTML>
+<HTML><BODY mdltype=SkyModel>
+<H1>Source list</H1>
+<TABLE BORDER=1 FRAME=box RULES=all CELLPADDING=5>
+<TR mdltype=Source ><TD mdltype=str mdlval="'A0'"><A>name:A0</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.494884526020575"><A>ra:1.49488452602</A> </A> <A mdltype=float mdlval="0.8700817021977513"><A>dec:0.870081702198</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="9.859337158203125"><A>I:9.8593371582</A> </A> <A mdltype=float mdlval="-4.332709724913578e-06"><A>Q:-4.33270972491e-06</A> </A> <A mdltype=float mdlval="0.0002639347043305329"><A>U:0.000263934704331</A> </A> <A mdltype=float mdlval="0.002161076417922203"><A>V:0.00216107641792</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.60414714678021"><A>Iapp:9.60414714678</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0"><A>r:0.0</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9741169201003952"><A>newstar_beamgain:0.9741169201</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.0005626648780889809"><A>0:-0.000562664878089</A> </A> <A mdltype=float mdlval="-0.0008720166515558958"><A>1:-0.000872016651556</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.0010377884204526683"><A>_newstar_r:0.00103778842045</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'A0a'"><A>name:A0a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948834032245286"><A>ra:1.49488340322</A> </A> <A mdltype=float mdlval="0.870081163507394"><A>dec:0.870081163507</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="4.9295166015625"><A>I:4.92951660156</A> </A> <A mdltype=float mdlval="-2.166288075557132e-06"><A>Q:-2.16628807556e-06</A> </A> <A mdltype=float mdlval="0.00013196325682249821"><A>U:0.000131963256822</A> </A> <A mdltype=float mdlval="0.0010805048968762776"><A>V:0.00108050489688</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="4.801910683258429"><A>Iapp:4.80191068326</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="9.059121700269689e-07"><A>r:9.05912170027e-07</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9741139083975041"><A>newstar_beamgain:0.974113908398</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.0005619412986561656"><A>0:-0.000561941298656</A> </A> <A mdltype=float mdlval="-0.0008725557709112763"><A>1:-0.000872555770911</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.0010378495057020308"><A>_newstar_r:0.0010378495057</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'A0b'"><A>name:A0b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948837771342156"><A>ra:1.49488377713</A> </A> <A mdltype=float mdlval="0.8700814067196585"><A>dec:0.87008140672</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="3.28451904296875"><A>I:3.28451904297</A> </A> <A mdltype=float mdlval="-1.4433898923209287e-06"><A>Q:-1.44338989232e-06</A> </A> <A mdltype=float mdlval="8.792663370214893e-05"><A>U:8.79266337021e-05</A> </A> <A mdltype=float mdlval="0.0007199364961437026"><A>V:0.000719936496144</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="3.199507674717049"><A>Iapp:3.19950767472</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="5.701519986900464e-07"><A>r:5.7015199869e-07</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9741175596367185"><A>newstar_beamgain:0.974117559637</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.0005621822201646864"><A>0:-0.000562182220165</A> </A> <A mdltype=float mdlval="-0.000872312462888658"><A>1:-0.000872312462889</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.0010377754485341097"><A>_newstar_r:0.00103777544853</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'A0c'"><A>name:A0c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948841521584304"><A>ra:1.49488415216</A> </A> <A mdltype=float mdlval="0.8700815052949102"><A>dec:0.870081505295</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="3.2845193481445314"><A>I:3.28451934814</A> </A> <A mdltype=float mdlval="-1.443390026431169e-06"><A>Q:-1.44339002643e-06</A> </A> <A mdltype=float mdlval="8.792666576973363e-05"><A>U:8.79266657697e-05</A> </A> <A mdltype=float mdlval="0.0007199366586275336"><A>V:0.000719936658628</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="3.1995002063068227"><A>Iapp:3.19950020631</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="3.146933329394901e-07"><A>r:3.14693332939e-07</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9741151953068149"><A>newstar_beamgain:0.974115195307</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.0005624239565804601"><A>0:-0.00056242395658</A> </A> <A mdltype=float mdlval="-0.0008722136844880879"><A>1:-0.000872213684488</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.0010378234042186102"><A>_newstar_r:0.00103782340422</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'A0d'"><A>name:A0d</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948854877683981"><A>ra:1.49488548777</A> </A> <A mdltype=float mdlval="0.8700836408219729"><A>dec:0.870083640822</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="1.234733123779297"><A>I:1.23473312378</A> </A> <A mdltype=float mdlval="-5.426064782276373e-07"><A>Q:-5.42606478228e-07</A> </A> <A mdltype=float mdlval="3.3053832365716185e-05"><A>U:3.30538323657e-05</A> </A> <A mdltype=float mdlval="0.0002706421936292891"><A>V:0.000270642193629</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="1.2028530105806574"><A>Iapp:1.20285301058</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="2.034649752223638e-06"><A>r:2.03464975222e-06</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9741805637310027"><A>newstar_beamgain:0.974180563731</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.000563283683732152"><A>0:-0.000563283683732</A> </A> <A mdltype=float mdlval="-0.0008700787439011037"><A>1:-0.000870078743901</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.001036496757808429"><A>_newstar_r:0.00103649675781</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'A0e'"><A>name:A0e</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948856379910092"><A>ra:1.49488563799</A> </A> <A mdltype=float mdlval="0.8700845999786623"><A>dec:0.870084599979</A> </A> </TD> <TD mdltype=PolarizationWithRM ><A mdltype=float mdlval="0.4096230697631836"><A>I:0.409623069763</A> </A> <A mdltype=float mdlval="-1.8000985557485017e-07"><A>Q:-1.80009855575e-07</A> </A> <A mdltype=float mdlval="1.0965618416099512e-05"><A>U:1.09656184161e-05</A> </A> <A mdltype=float mdlval="8.978562575736592e-05"><A>V:8.97856257574e-05</A> </A> <A mdltype=float mdlval="0.0"><A>rm:0.0</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7099262475967407"><A>spi:-0.709926247597</A> </A> <A mdltype=float mdlval="1385000000.0"><A>freq0:1385000000.0</A> </A> </TD> <TD mdltype=bool mdlattr="newstar_beamed" mdlval="True"><A>newstar_beamed:True</A> </TD> <TD mdltype=bool mdlattr="dft_5mJy" mdlval="True"><A>dft_5mJy:True</A> </TD> <TD mdltype=bool mdlattr="dft" mdlval="True"><A>dft:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.399062000457211"><A>Iapp:0.399062000457</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="2.984736436304518e-06"><A>r:2.9847364363e-06</A> </TD> <TD mdltype=float mdlattr="newstar_beamgain" mdlval="0.9742175915236457"><A>newstar_beamgain:0.974217591524</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=tuple mdlattr="_lm_ncp" ><A>_lm_ncp:</A> <A mdltype=float mdlval="-0.000563379900995642"><A>0:-0.000563379900996</A> </A> <A mdltype=float mdlval="-0.0008691201801411808"><A>1:-0.000869120180141</A> </A> </TD> <TD mdltype=bool mdlattr="flux_intrinsic" mdlval="True"><A>flux_intrinsic:True</A> </TD> <TD mdltype=float mdlattr="_newstar_r" mdlval="0.00103574456328503"><A>_newstar_r:0.00103574456329</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'B290G'"><A>name:B290G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4920887319541576"><A>ra:1.49208873195</A> </A> <A mdltype=float mdlval="0.8708705147925772"><A>dec:0.870870514793</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03826158067268499"><A>I:0.0382615806727</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.56388867117967e-05"><A>ex:2.56388867118e-05</A> </A> <A mdltype=float mdlval="3.5081117965086026e-06"><A>ey:3.50811179651e-06</A> </A> <A mdltype=float mdlval="2.979855522534894"><A>pa:2.97985552253</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.8790400371758633"><A>spi:-0.879040037176</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.033559"><A>Iapp:0.033559</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8770939258125796"><A>beamgain:0.877093925813</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001966893645565263"><A>r:0.00196689364557</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'C242G'"><A>name:C242G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4867089988809803"><A>ra:1.48670899888</A> </A> <A mdltype=float mdlval="0.8673396788092076"><A>dec:0.867339678809</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0887058836969246"><A>I:0.0887058836969</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.7645278737662673e-05"><A>ex:1.76452787377e-05</A> </A> <A mdltype=float mdlval="7.661995416255106e-06"><A>ey:7.66199541626e-06</A> </A> <A mdltype=float mdlval="0.9986696138226915"><A>pa:0.998669613823</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.010392796216600608"><A>spi:0.0103927962166</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.018613"><A>cluster_flux:0.018613</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.018613"><A>Iapp:0.018613</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.20982824615776086"><A>beamgain:0.209828246158</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'C242'"><A>cluster:C242</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005949400625768698"><A>r:0.00594940062577</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'D140G'"><A>name:D140G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4979689556436366"><A>ra:1.49796895564</A> </A> <A mdltype=float mdlval="0.8679812618422407"><A>dec:0.867981261842</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0236825399308751"><A>I:0.0236825399309</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.2147491593880534e-05"><A>ex:1.21474915939e-05</A> </A> <A mdltype=float mdlval="1.1047934165124105e-05"><A>ey:1.10479341651e-05</A> </A> <A mdltype=float mdlval="2.293526418817556"><A>pa:2.29352641882</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.3646974893727074"><A>spi:-0.364697489373</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020393"><A>cluster_flux:0.020393</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.017901"><A>Iapp:0.017901</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7558733164706855"><A>beamgain:0.755873316471</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'D140'"><A>cluster:D140</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0028942549839698966"><A>r:0.00289425498397</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'E090'"><A>name:E090</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4976380586707512"><A>ra:1.49763805867</A> </A> <A mdltype=float mdlval="0.8699379504666516"><A>dec:0.869937950467</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0116135023170924"><A>I:0.0116135023171</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.8133517046735592"><A>spi:-0.813351704674</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012365"><A>cluster_flux:0.012365</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.010716"><A>Iapp:0.010716</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.92271906505142"><A>beamgain:0.922719065051</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'E090'"><A>cluster:E090</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0017813345672426989"><A>r:0.00178133456724</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'F121G'"><A>name:F121G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.499066261597658"><A>ra:1.4990662616</A> </A> <A mdltype=float mdlval="0.8685890727542478"><A>dec:0.868589072754</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.014704720808157915"><A>I:0.0147047208082</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.817256058289851e-05"><A>ex:6.81725605829e-05</A> </A> <A mdltype=float mdlval="2.165953601724963e-05"><A>ey:2.16595360172e-05</A> </A> <A mdltype=float mdlval="2.365468070280014"><A>pa:2.36546807028</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-1.1039561188845133"><A>spi:-1.10395611888</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012147"><A>cluster_flux:0.012147</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.01068"><A>Iapp:0.01068</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7262973666303768"><A>beamgain:0.72629736663</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'F121'"><A>cluster:F121</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0030838997158468633"><A>r:0.00308389971585</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'G195G'"><A>name:G195G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4890175284293006"><A>ra:1.48901752843</A> </A> <A mdltype=float mdlval="0.8536717610907447"><A>dec:0.853671761091</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="1.184207406832343"><A>I:1.18420740683</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.3440508468211354e-05"><A>ex:3.34405084682e-05</A> </A> <A mdltype=float mdlval="2.7925268031909274e-05"><A>ey:2.79252680319e-05</A> </A> <A mdltype=float mdlval="1.3359479642391932"><A>pa:1.33594796424</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="7.299087678304995"><A>spi:7.2990876783</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.011000000000000001"><A>cluster_flux:0.011</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.010611"><A>Iapp:0.010611</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.008960423603820846"><A>beamgain:0.00896042360382</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'G195'"><A>cluster:G195</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016848532799856226"><A>r:0.0168485327999</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'H194G'"><A>name:H194G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4905029781556731"><A>ra:1.49050297816</A> </A> <A mdltype=float mdlval="0.8559533776619994"><A>dec:0.855953377662</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.35345544967760817"><A>I:0.353455449678</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.5220007691318064e-05"><A>ex:2.52200076913e-05</A> </A> <A mdltype=float mdlval="1.8954275676658417e-05"><A>ey:1.89542756767e-05</A> </A> <A mdltype=float mdlval="0.2878596144456701"><A>pa:0.287859614446</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.4805344140241368"><A>spi:1.48053441402</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020439000000000002"><A>cluster_flux:0.020439</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.010415"><A>Iapp:0.010415</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02946623120254525"><A>beamgain:0.0294662312025</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'H194'"><A>cluster:H194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014412622601322332"><A>r:0.0144126226013</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'H194aG'"><A>name:H194aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4905675378847043"><A>ra:1.49056753788</A> </A> <A mdltype=float mdlval="0.8559875163021684"><A>dec:0.855987516302</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.3282685168540988"><A>I:0.328268516854</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.4766222085799535e-05"><A>ex:2.47662220858e-05</A> </A> <A mdltype=float mdlval="1.9896753472735356e-05"><A>ey:1.98967534727e-05</A> </A> <A mdltype=float mdlval="0.7490780012897864"><A>pa:0.74907800129</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.5425777742624247"><A>spi:1.54257777426</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020439000000000002"><A>cluster_flux:0.020439</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.009755"><A>Iapp:0.009755</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02971652625565575"><A>beamgain:0.0297165262557</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'H194'"><A>cluster:H194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014370892384043396"><A>r:0.014370892384</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'I215G'"><A>name:I215G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4836763671325925"><A>ra:1.48367636713</A> </A> <A mdltype=float mdlval="0.856759056551305"><A>dec:0.856759056551</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.41548313652379487"><A>I:0.415483136524</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.0421088862261163e-05"><A>ex:3.04210888623e-05</A> </A> <A mdltype=float mdlval="1.1833332328521554e-05"><A>ey:1.18333323285e-05</A> </A> <A mdltype=float mdlval="0.39178367395934566"><A>pa:0.391783673959</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.902473484685625"><A>spi:2.90247348469</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00963"><A>cluster_flux:0.00963</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00963"><A>Iapp:0.00963</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02317783600213215"><A>beamgain:0.0231778360021</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'I215'"><A>cluster:I215</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015183490533498096"><A>r:0.0151834905335</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'J001G'"><A>name:J001G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4951387995417729"><A>ra:1.49513879954</A> </A> <A mdltype=float mdlval="0.8737095895269188"><A>dec:0.873709589527</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.009638236242744293"><A>I:0.00963823624274</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.3963370629882146e-05"><A>ex:2.39633706299e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.3583094631832783"><A>pa:0.358309463183</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.5750208422631442"><A>spi:-0.575020842263</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006935"><A>cluster_flux:0.006935</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.005909"><A>Iapp:0.005909</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6130789753621491"><A>beamgain:0.613078975362</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'J001'"><A>cluster:J001</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003631574495178151"><A>r:0.00363157449518</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'B290aG'"><A>name:B290aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.492046076107239"><A>ra:1.49204607611</A> </A> <A mdltype=float mdlval="0.8710509818372334"><A>dec:0.871050981837</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006188563309864936"><A>I:0.00618856330986</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.883799554043888e-05"><A>ex:9.88379955404e-05</A> </A> <A mdltype=float mdlval="2.3771384412162766e-05"><A>ey:2.37713844122e-05</A> </A> <A mdltype=float mdlval="2.9795542612527073"><A>pa:2.97955426125</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-1.6429169879215684"><A>spi:-1.64291698792</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.005341"><A>Iapp:0.005341</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.863043606823272"><A>beamgain:0.863043606823</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0020700362338122186"><A>r:0.00207003623381</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'K285'"><A>name:K285</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.469994556593284"><A>ra:1.46999455659</A> </A> <A mdltype=float mdlval="0.8726284104151859"><A>dec:0.872628410415</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.2988771537956234"><A>I:0.298877153796</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="5.165175111712941"><A>spi:5.16517511171</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.004414"><A>cluster_flux:0.004414</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.004414"><A>Iapp:0.004414</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.014768609590742953"><A>beamgain:0.0147686095907</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'K285'"><A>cluster:K285</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01622477731627649"><A>r:0.0162247773163</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'L112G'"><A>name:L112G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.503673791196583"><A>ra:1.5036737912</A> </A> <A mdltype=float mdlval="0.8674993764357651"><A>dec:0.867499376436</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.022095505177117666"><A>I:0.0220955051771</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.464552226601495e-05"><A>ex:4.4645522266e-05</A> </A> <A mdltype=float mdlval="1.5114551322270893e-05"><A>ey:1.51145513223e-05</A> </A> <A mdltype=float mdlval="1.0086603671532974"><A>pa:1.00866036715</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.8024268552220519"><A>spi:-0.802426855222</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.009729000000000002"><A>cluster_flux:0.009729</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.004335"><A>Iapp:0.004335</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.19619374914719628"><A>beamgain:0.196193749147</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'L112'"><A>cluster:L112</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006235494183430911"><A>r:0.00623549418343</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'M301G'"><A>name:M301G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4906628328618632"><A>ra:1.49066283286</A> </A> <A mdltype=float mdlval="0.8718674294080239"><A>dec:0.871867429408</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005747212805681905"><A>I:0.00574721280568</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.667010419832838e-05"><A>ex:4.66701041983e-05</A> </A> <A mdltype=float mdlval="1.5777776438028738e-05"><A>ey:1.5777776438e-05</A> </A> <A mdltype=float mdlval="1.7723132116007607"><A>pa:1.7723132116</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-1.0586065366047654"><A>spi:-1.0586065366</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006154"><A>cluster_flux:0.006154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.003845"><A>Iapp:0.003845</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6690199458420423"><A>beamgain:0.669019945842</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'M301'"><A>cluster:M301</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003253062478494753"><A>r:0.00325306247849</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'N221G'"><A>name:N221G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4901570364446353"><A>ra:1.49015703644</A> </A> <A mdltype=float mdlval="0.8661805532930806"><A>dec:0.866180553293</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010367343216787278"><A>I:0.0103673432168</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.010913943868471e-05"><A>ex:6.01091394387e-05</A> </A> <A mdltype=float mdlval="2.097885760897184e-05"><A>ey:2.0978857609e-05</A> </A> <A mdltype=float mdlval="2.839965428218786"><A>pa:2.83996542822</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.2768832991034338"><A>spi:-0.276883299103</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.005606999999999999"><A>cluster_flux:0.005607</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00377"><A>Iapp:0.00377</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3636418628347755"><A>beamgain:0.363641862835</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'N221'"><A>cluster:N221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004955089179625451"><A>r:0.00495508917963</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'L112aG'"><A>name:L112aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5035645161321156"><A>ra:1.50356451613</A> </A> <A mdltype=float mdlval="0.8673290846606481"><A>dec:0.867329084661</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01782805293839603"><A>I:0.0178280529384</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.984586682303054e-05"><A>ex:3.9845866823e-05</A> </A> <A mdltype=float mdlval="4.694935687864746e-06"><A>ey:4.69493568786e-06</A> </A> <A mdltype=float mdlval="0.30654528395044656"><A>pa:0.30654528395</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.9664552563844166"><A>spi:-0.966455256384</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.009729000000000002"><A>cluster_flux:0.009729</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.003474"><A>Iapp:0.003474</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.19486143618735247"><A>beamgain:0.194861436187</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'L112'"><A>cluster:L112</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006245012834262666"><A>r:0.00624501283426</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'O265'"><A>name:O265</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4726144005202824"><A>ra:1.47261440052</A> </A> <A mdltype=float mdlval="0.8678486517256743"><A>dec:0.867848651726</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.11264831212331218"><A>I:0.112648312123</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.377467128864789"><A>spi:2.37746712886</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.003289"><A>cluster_flux:0.003289</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.003289"><A>Iapp:0.003289</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.029197064190359515"><A>beamgain:0.0291970641904</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'O265'"><A>cluster:O265</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01455016804317742"><A>r:0.0145501680432</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'P310'"><A>name:P310</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4925434774907647"><A>ra:1.49254347749</A> </A> <A mdltype=float mdlval="0.8711537293702983"><A>dec:0.87115372937</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0032203248876156013"><A>I:0.00322032488762</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.2860275029737752"><A>spi:0.286027502974</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.003063"><A>cluster_flux:0.003063</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002879"><A>Iapp:0.002879</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8940091762392565"><A>beamgain:0.894009176239</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'P310'"><A>cluster:P310</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001850600755585436"><A>r:0.00185060075559</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'Q210G'"><A>name:Q210G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.493771560965638"><A>ra:1.49377156097</A> </A> <A mdltype=float mdlval="0.8686284299288802"><A>dec:0.868628429929</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0030740429925802384"><A>I:0.00307404299258</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.933898472602468e-05"><A>ex:2.9338984726e-05</A> </A> <A mdltype=float mdlval="1.3631021458075714e-05"><A>ey:1.36310214581e-05</A> </A> <A mdltype=float mdlval="1.3028717234391656"><A>pa:1.30287172344</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.14273714190432324"><A>spi:-0.142737141904</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.003144"><A>cluster_flux:0.003144</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002846"><A>Iapp:0.002846</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9258165897059145"><A>beamgain:0.925816589706</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'Q210'"><A>cluster:Q210</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0016210619082500783"><A>r:0.00162106190825</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'R283'"><A>name:R283</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4776186085516005"><A>ra:1.47761860855</A> </A> <A mdltype=float mdlval="0.872807463743148"><A>dec:0.872807463743</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.13494386596000701"><A>I:0.13494386596</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.0591847681338784"><A>spi:1.05918476813</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.002681"><A>cluster_flux:0.002681</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002681"><A>Iapp:0.002681</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.019867520327263792"><A>beamgain:0.0198675203273</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'R283'"><A>cluster:R283</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011443715051298443"><A>r:0.0114437150513</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'D140a'"><A>name:D140a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4979681178855957"><A>ra:1.49796811789</A> </A> <A mdltype=float mdlval="0.8679815934547986"><A>dec:0.867981593455</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0032964004284253734"><A>I:0.00329640042843</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.33585798933856015"><A>spi:0.335857989339</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020393"><A>cluster_flux:0.020393</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002492"><A>Iapp:0.002492</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7559761182261404"><A>beamgain:0.755976118226</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'D140'"><A>cluster:D140</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0028936419802057006"><A>r:0.00289364198021</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'S270'"><A>name:S270</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4908381337319336"><A>ra:1.49083813373</A> </A> <A mdltype=float mdlval="0.8700407852661791"><A>dec:0.870040785266</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002902823496384571"><A>I:0.00290282349638</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-1.027955111472692"><A>spi:-1.02795511147</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00249"><A>cluster_flux:0.00249</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002257"><A>Iapp:0.002257</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7775188545948674"><A>beamgain:0.777518854595</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'S270'"><A>cluster:S270</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0026093566050248585"><A>r:0.00260935660502</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'T254'"><A>name:T254</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4747150962612752"><A>ra:1.47471509626</A> </A> <A mdltype=float mdlval="0.8654776568434249"><A>dec:0.865477656843</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06391065166847286"><A>I:0.0639106516685</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.9704825843232725"><A>spi:2.97048258432</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.002072"><A>cluster_flux:0.002072</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.002072"><A>Iapp:0.002072</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.032420260878393115"><A>beamgain:0.0324202608784</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'T254'"><A>cluster:T254</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013828721397707355"><A>r:0.0138287213977</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'U051'"><A>name:U051</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5010552388132308"><A>ra:1.50105523881</A> </A> <A mdltype=float mdlval="0.8737105494580074"><A>dec:0.873710549458</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005678059562557201"><A>I:0.00567805956256</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.32672087269666683"><A>spi:-0.326720872697</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001788"><A>cluster_flux:0.001788</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001788"><A>Iapp:0.001788</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.31489630925864165"><A>beamgain:0.314896309259</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'U051'"><A>cluster:U051</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005378660320652578"><A>r:0.00537866032065</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'M301aG'"><A>name:M301aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.490421401466435"><A>ra:1.49042140147</A> </A> <A mdltype=float mdlval="0.8718151044370491"><A>dec:0.871815104437</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00273737341861733"><A>I:0.00273737341862</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.6563911215353693e-05"><A>ex:2.65639112154e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.631004941045969"><A>pa:2.63100494105</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.9563659512415716"><A>spi:-0.956365951242</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006154"><A>cluster_flux:0.006154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001779"><A>Iapp:0.001779</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.649893064607381"><A>beamgain:0.649893064607</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'M301'"><A>cluster:M301</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0033568769817674043"><A>r:0.00335687698177</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'V151'"><A>name:V151</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4976087894991952"><A>ra:1.4976087895</A> </A> <A mdltype=float mdlval="0.8664063290851187"><A>dec:0.866406329085</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002883827072369766"><A>I:0.00288382707237</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.15728346165511642"><A>spi:-0.157283461655</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001555"><A>cluster_flux:0.001555</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001555"><A>Iapp:0.001555</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5392140239262644"><A>beamgain:0.539214023926</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'V151'"><A>cluster:V151</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004075179751896895"><A>r:0.0040751797519</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'W201'"><A>name:W201</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.491690028939832"><A>ra:1.49169002894</A> </A> <A mdltype=float mdlval="0.865101870002178"><A>dec:0.865101870002</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005172285191005143"><A>I:0.00517228519101</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.0031084627207409454"><A>spi:-0.00310846272074</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0018319999999999999"><A>cluster_flux:0.001832</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001535"><A>Iapp:0.001535</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.2967740453812253"><A>beamgain:0.296774045381</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'W201'"><A>cluster:W201</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005391298734133585"><A>r:0.00539129873413</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'E090a'"><A>name:E090a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4976380412174586"><A>ra:1.49763804122</A> </A> <A mdltype=float mdlval="0.8699373919612909"><A>dec:0.869937391961</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0015768683632177254"><A>I:0.00157686836322</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.15715658899389928"><A>spi:0.157156588994</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012365"><A>cluster_flux:0.012365</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001455"><A>Iapp:0.001455</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9227149418046263"><A>beamgain:0.922714941805</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'E090'"><A>cluster:E090</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0017813690932388304"><A>r:0.00178136909324</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'X261'"><A>name:X261</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.487696855237609"><A>ra:1.48769685524</A> </A> <A mdltype=float mdlval="0.8688763364958335"><A>dec:0.868876336496</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0037566400884037404"><A>I:0.0037566400884</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7175421667402149"><A>spi:-0.71754216674</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001453"><A>cluster_flux:0.001453</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001453"><A>Iapp:0.001453</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3867817959152441"><A>beamgain:0.386781795915</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'X261'"><A>cluster:X261</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004791742588079754"><A>r:0.00479174258808</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'Y002'"><A>name:Y002</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4953079044929984"><A>ra:1.49530790449</A> </A> <A mdltype=float mdlval="0.8784570421719762"><A>dec:0.878457042172</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.07327267231113754"><A>I:0.0732726723111</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="4.146707374879245"><A>spi:4.14670737488</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001393"><A>cluster_flux:0.001393</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001393"><A>Iapp:0.001393</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.019011180513314813"><A>beamgain:0.0190111805133</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'Y002'"><A>cluster:Y002</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00837974380992449"><A>r:0.00837974380992</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'Z294'"><A>name:Z294</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.475647904933296"><A>ra:1.47564790493</A> </A> <A mdltype=float mdlval="0.8749484416832769"><A>dec:0.874948441683</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03846618057775607"><A>I:0.0384661805778</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.7899982099052734"><A>spi:1.78999820991</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0014370000000000001"><A>cluster_flux:0.001437</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00135"><A>Iapp:0.00135</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03509576411598993"><A>beamgain:0.035095764116</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'Z294'"><A>cluster:Z294</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013290228939175476"><A>r:0.0132902289392</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'aa322'"><A>name:aa322</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4890137759714088"><A>ra:1.48901377597</A> </A> <A mdltype=float mdlval="0.8747491250826992"><A>dec:0.874749125083</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006244825648635683"><A>I:0.00624482564864</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.08949429026377231"><A>spi:-0.0894942902638</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001294"><A>cluster_flux:0.001294</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001294"><A>Iapp:0.001294</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.20721154965834832"><A>beamgain:0.207211549658</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'aa322'"><A>cluster:aa322</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006002797749128491"><A>r:0.00600279774913</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ab325'"><A>name:ab325</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4789911354753686"><A>ra:1.47899113548</A> </A> <A mdltype=float mdlval="0.8810029364985676"><A>dec:0.881002936499</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.045127587424326"><A>I:0.0451275874243</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="3.524578316545999"><A>spi:3.52457831655</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001264"><A>cluster_flux:0.001264</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001264"><A>Iapp:0.001264</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02800947429595231"><A>beamgain:0.028009474296</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ab325'"><A>cluster:ab325</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014930485754927983"><A>r:0.0149304857549</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ac317'"><A>name:ac317</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4675364174214824"><A>ra:1.46753641742</A> </A> <A mdltype=float mdlval="0.8838460953033589"><A>dec:0.883846095303</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.34474621208322065"><A>I:0.344746212083</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="5.630595492363389"><A>spi:5.63059549236</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00189"><A>cluster_flux:0.00189</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001259"><A>Iapp:0.001259</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.003651961808056302"><A>beamgain:0.00365196180806</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ac317'"><A>cluster:ac317</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.022254878036971685"><A>r:0.022254878037</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ad342'"><A>name:ad342</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4907564348696476"><A>ra:1.49075643487</A> </A> <A mdltype=float mdlval="0.8769071723429126"><A>dec:0.876907172343</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01628678211290917"><A>I:0.0162867821129</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.8097715901148881"><A>spi:0.809771590115</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001957"><A>cluster_flux:0.001957</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001194"><A>Iapp:0.001194</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.07331098259450625"><A>beamgain:0.0733109825945</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ad342'"><A>cluster:ad342</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007322157722719575"><A>r:0.00732215772272</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'N221a'"><A>name:N221a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.490158170908649"><A>ra:1.49015817091</A> </A> <A mdltype=float mdlval="0.8660938976957191"><A>dec:0.866093897696</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.003294625523059915"><A>I:0.00329462552306</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.5412993214393516"><A>spi:-0.541299321439</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.005606999999999999"><A>cluster_flux:0.005607</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001161"><A>Iapp:0.001161</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3523920979406819"><A>beamgain:0.352392097941</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'N221'"><A>cluster:N221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0050232462912970285"><A>r:0.0050232462913</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ae232'"><A>name:ae232</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4875488338637475"><A>ra:1.48754883386</A> </A> <A mdltype=float mdlval="0.8655542418910025"><A>dec:0.865554241891</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00820482921818608"><A>I:0.00820482921819</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.431047004218636"><A>spi:2.43104700422</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00114"><A>cluster_flux:0.00114</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00114"><A>Iapp:0.00114</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.1389425629327152"><A>beamgain:0.138942562933</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ae232'"><A>cluster:ae232</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006556578558227931"><A>r:0.00655657855823</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'af235G'"><A>name:af235G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.47558351973719"><A>ra:1.47558351974</A> </A> <A mdltype=float mdlval="0.859954195906346"><A>dec:0.859954195906</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06829741031591728"><A>I:0.0682974103159</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.0578168494940654e-05"><A>ex:3.05781684949e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7315087490943406"><A>pa:0.731508749094</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="4.835124208223845"><A>spi:4.83512420822</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001011"><A>cluster_flux:0.001011</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.001011"><A>Iapp:0.001011</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.014802903877665446"><A>beamgain:0.0148029038777</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'af235'"><A>cluster:af235</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01610235238864404"><A>r:0.0161023523886</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ag031'"><A>name:ag031</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.498661467384243"><A>ra:1.49866146738</A> </A> <A mdltype=float mdlval="0.8745237507163892"><A>dec:0.874523750716</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0026397108590530413"><A>I:0.00263971085905</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.6008029696851742"><A>spi:-0.600802969685</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000957"><A>cluster_flux:0.000957</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000957"><A>Iapp:0.000957</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.36253970646743866"><A>beamgain:0.362539706467</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ag031'"><A>cluster:ag031</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005062694884561391"><A>r:0.00506269488456</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'F121a'"><A>name:F121a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4990849366206542"><A>ra:1.49908493662</A> </A> <A mdltype=float mdlval="0.8685772743285043"><A>dec:0.868577274329</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0013103670017206533"><A>I:0.00131036700172</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.75136548645074"><A>spi:2.75136548645</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012147"><A>cluster_flux:0.012147</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000948"><A>Iapp:0.000948</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7234614415313981"><A>beamgain:0.723461441531</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'F121'"><A>cluster:F121</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0031001759559929573"><A>r:0.00310017595599</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ah081'"><A>name:ah081</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5032069156216745"><A>ra:1.50320691562</A> </A> <A mdltype=float mdlval="0.8712548537471589"><A>dec:0.871254853747</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0030338243266867775"><A>I:0.00303382432669</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.9084735520890121"><A>spi:-0.908473552089</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000916"><A>cluster_flux:0.000916</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000916"><A>Iapp:0.000916</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3019291499321447"><A>beamgain:0.301929149932</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ah081'"><A>cluster:ah081</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005489061455932976"><A>r:0.00548906145593</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ai295'"><A>name:ai295</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4716424441131393"><A>ra:1.47164244411</A> </A> <A mdltype=float mdlval="0.8757835293704787"><A>dec:0.87578352937</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.05062809327764703"><A>I:0.0506280932776</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="5.035960640711893"><A>spi:5.03596064071</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000883"><A>cluster_flux:0.000883</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000883"><A>Iapp:0.000883</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.017440909638006378"><A>beamgain:0.017440909638</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ai295'"><A>cluster:ai295</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01598607699964985"><A>r:0.0159860769996</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'aj180'"><A>name:aj180</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948587091034127"><A>ra:1.4948587091</A> </A> <A mdltype=float mdlval="0.8671749022745269"><A>dec:0.867174902275</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.001171303297573771"><A>I:0.00117130329757</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7597299927270662"><A>spi:-0.759729992727</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000869"><A>cluster_flux:0.000869</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000869"><A>Iapp:0.000869</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7419086088121156"><A>beamgain:0.741908608812</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'aj180'"><A>cluster:aj180</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002906846979947651"><A>r:0.00290684697995</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ak101G'"><A>name:ak101G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.502657800132412"><A>ra:1.50265780013</A> </A> <A mdltype=float mdlval="0.868857923272225"><A>dec:0.868857923272</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0023429366479754067"><A>I:0.00234293664798</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.766862494160269e-05"><A>ex:9.76686249416e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6628082264127139"><A>pa:0.662808226413</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000833"><A>cluster_flux:0.000833</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000833"><A>Iapp:0.000833</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3555367153097448"><A>beamgain:0.35553671531</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ak101'"><A>cluster:ak101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005162689423801002"><A>r:0.0051626894238</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'al080G'"><A>name:al080G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4990185442959083"><A>ra:1.4990185443</A> </A> <A mdltype=float mdlval="0.8704495762835812"><A>dec:0.870449576284</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0010198646261616456"><A>I:0.00101986462616</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="7.70737397680696e-05"><A>ex:7.70737397681e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.7722462518156785"><A>pa:2.77224625182</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.5851976105827296"><A>spi:0.585197610583</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0013720000000000002"><A>cluster_flux:0.001372</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000809"><A>Iapp:0.000809</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7932425336142366"><A>beamgain:0.793242533614</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'al080'"><A>cluster:al080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0026901509446972532"><A>r:0.0026901509447</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'L112b'"><A>name:L112b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5036849263972105"><A>ra:1.5036849264</A> </A> <A mdltype=float mdlval="0.8675023085889084"><A>dec:0.867502308589</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004055863930056866"><A>I:0.00405586393006</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.9379210113032612"><A>spi:1.9379210113</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.009729000000000002"><A>cluster_flux:0.009729</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000793"><A>Iapp:0.000793</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.19551937976106645"><A>beamgain:0.195519379761</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'L112'"><A>cluster:L112</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006240818402374902"><A>r:0.00624081840237</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'am235G'"><A>name:am235G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4766172782531464"><A>ra:1.47661727825</A> </A> <A mdltype=float mdlval="0.8605670857264763"><A>dec:0.860567085726</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.033853253624760875"><A>I:0.0338532536248</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.075270142014008e-05"><A>ex:3.07527014201e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8251118040763478"><A>pa:0.825111804076</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="3.046185354407594"><A>spi:3.04618535441</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000781"><A>cluster_flux:0.000781</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000781"><A>Iapp:0.000781</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02307016066038517"><A>beamgain:0.0230701606604</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'am235'"><A>cluster:am235</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01519240521097572"><A>r:0.015192405211</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'an071'"><A>name:an071</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.502926982262947"><A>ra:1.50292698226</A> </A> <A mdltype=float mdlval="0.8715740919206412"><A>dec:0.871574091921</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002455100302376349"><A>I:0.00245510030238</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7915066173610139"><A>spi:-0.791506617361</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000778"><A>cluster_flux:0.000778</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000778"><A>Iapp:0.000778</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3168913299578659"><A>beamgain:0.316891329958</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'an071'"><A>cluster:an071</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00539154653502674"><A>r:0.00539154653503</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ad342a'"><A>name:ad342a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4907169206153825"><A>ra:1.49071692062</A> </A> <A mdltype=float mdlval="0.8768915865526923"><A>dec:0.876891586553</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010355667214408469"><A>I:0.0103556672144</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.073981466713624"><A>spi:1.07398146671</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001957"><A>cluster_flux:0.001957</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000763"><A>Iapp:0.000763</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.07367946306138456"><A>beamgain:0.0736794630614</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ad342'"><A>cluster:ad342</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007316883053228132"><A>r:0.00731688305323</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'B290b'"><A>name:B290b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4920667058989974"><A>ra:1.4920667059</A> </A> <A mdltype=float mdlval="0.8709354759473364"><A>dec:0.870935475947</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008374208096926871"><A>I:0.000837420809693</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.2533724378447622"><A>spi:-0.253372437845</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00073"><A>Iapp:0.00073</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8717242174431897"><A>beamgain:0.871724217443</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0020066077925214023"><A>r:0.00200660779252</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ao344G'"><A>name:ao344G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4873235991237777"><A>ra:1.48732359912</A> </A> <A mdltype=float mdlval="0.8816582378195215"><A>dec:0.88165823782</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.023032200938294563"><A>I:0.0230322009383</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.9390607989657e-05"><A>ex:1.93906079897e-05</A> </A> <A mdltype=float mdlval="8.918632477691023e-06"><A>ey:8.91863247769e-06</A> </A> <A mdltype=float mdlval="2.0836155126005655"><A>pa:2.0836155126</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.2099402507470467"><A>spi:2.20994025075</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000716"><A>cluster_flux:0.000716</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000716"><A>Iapp:0.000716</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031086911837832236"><A>beamgain:0.0310869118378</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ao344'"><A>cluster:ao344</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012548096011327173"><A>r:0.0125480960113</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ap172'"><A>name:ap172</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4959974491738766"><A>ra:1.49599744917</A> </A> <A mdltype=float mdlval="0.8628023638060904"><A>dec:0.862802363806</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00897535718293354"><A>I:0.00897535718293</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.7078435341140903"><A>spi:1.70784353411</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000695"><A>cluster_flux:0.000695</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000695"><A>Iapp:0.000695</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.07743424421275717"><A>beamgain:0.0774342442128</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ap172'"><A>cluster:ap172</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007314922676990702"><A>r:0.00731492267699</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'aq071G'"><A>name:aq071G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5034368103907472"><A>ra:1.50343681039</A> </A> <A mdltype=float mdlval="0.8715442293371395"><A>dec:0.871544229337</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0025671509770156"><A>I:0.00256715097702</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.469861875750229e-05"><A>ex:5.46986187575e-05</A> </A> <A mdltype=float mdlval="2.829178717482808e-05"><A>ey:2.82917871748e-05</A> </A> <A mdltype=float mdlval="2.5547748236251433"><A>pa:2.55477482363</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-1.2294580542263924"><A>spi:-1.22945805423</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001136"><A>cluster_flux:0.001136</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000692"><A>Iapp:0.000692</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.26955952579169046"><A>beamgain:0.269559525792</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'aq071'"><A>cluster:aq071</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005700223553029314"><A>r:0.00570022355303</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ar073G'"><A>name:ar073G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.511355456473508"><A>ra:1.51135545647</A> </A> <A mdltype=float mdlval="0.8741233896392742"><A>dec:0.874123389639</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04719925346734011"><A>I:0.0471992534673</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.5902159327450866e-05"><A>ex:4.59021593275e-05</A> </A> <A mdltype=float mdlval="1.1344640137963142e-05"><A>ey:1.1344640138e-05</A> </A> <A mdltype=float mdlval="1.2756721633102355"><A>pa:1.27567216331</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-2.061904743868059"><A>spi:-2.06190474387</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000675"><A>cluster_flux:0.000675</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000675"><A>Iapp:0.000675</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0143010736486981"><A>beamgain:0.0143010736487</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ar073'"><A>cluster:ar073</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011339054885285839"><A>r:0.0113390548853</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'as271'"><A>name:as271</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4895581267118134"><A>ra:1.48955812671</A> </A> <A mdltype=float mdlval="0.8701104937165037"><A>dec:0.870110493717</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0010495489725337959"><A>I:0.00104954897253</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.5467076638942489"><A>spi:0.546707663894</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000664"><A>cluster_flux:0.000664</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000664"><A>Iapp:0.000664</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6326527083314533"><A>beamgain:0.632652708331</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'as271'"><A>cluster:as271</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0034343358376838443"><A>r:0.00343433583768</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'at014G'"><A>name:at014G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4970181700803202"><A>ra:1.49701817008</A> </A> <A mdltype=float mdlval="0.8826169471776419"><A>dec:0.882616947178</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.022267239731096435"><A>I:0.0222672397311</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.0001402546586902643"><A>ex:0.00014025465869</A> </A> <A mdltype=float mdlval="2.665117767795341e-05"><A>ey:2.6651177678e-05</A> </A> <A mdltype=float mdlval="0.7673039336162951"><A>pa:0.767303933616</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000944"><A>cluster_flux:0.000944</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000658"><A>Iapp:0.000658</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02955013768864652"><A>beamgain:0.0295501376886</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'at014'"><A>cluster:at014</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012609389008266088"><A>r:0.0126093890083</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'au021'"><A>name:au021</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4974696693045186"><A>ra:1.4974696693</A> </A> <A mdltype=float mdlval="0.8755661835187277"><A>dec:0.875566183519</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0024914742957367463"><A>I:0.00249147429574</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.8721995847559127"><A>spi:-0.872199584756</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000636"><A>cluster_flux:0.000636</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000636"><A>Iapp:0.000636</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.25527054446770053"><A>beamgain:0.255270544468</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'au021'"><A>cluster:au021</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005730591761839269"><A>r:0.00573059176184</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'av161'"><A>name:av161</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4971182472596296"><A>ra:1.49711824726</A> </A> <A mdltype=float mdlval="0.8665643686488868"><A>dec:0.866564368649</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0010773680371497871"><A>I:0.00107736803715</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.3028886032954041"><A>spi:-0.302888603295</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000634"><A>cluster_flux:0.000634</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000634"><A>Iapp:0.000634</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5884711427649812"><A>beamgain:0.588471142765</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'av161'"><A>cluster:av161</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0038019071924678054"><A>r:0.00380190719247</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ac317aG'"><A>name:ac317aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4675764029146456"><A>ra:1.46757640291</A> </A> <A mdltype=float mdlval="0.8838429537107053"><A>dec:0.883842953711</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.17331164559313803"><A>I:0.173311645593</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.424335992412875e-05"><A>ex:3.42433599241e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7462835895310034"><A>pa:0.746283589531</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="5.3224204745015555"><A>spi:5.3224204745</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00189"><A>cluster_flux:0.00189</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000631"><A>Iapp:0.000631</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0036408401630512437"><A>beamgain:0.00364084016305</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ac317'"><A>cluster:ac317</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02223287418409746"><A>r:0.0222328741841</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'aw034G'"><A>name:aw034G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5053701814163511"><A>ra:1.50537018142</A> </A> <A mdltype=float mdlval="0.8822248415078888"><A>dec:0.882224841508</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.020221095075116376"><A>I:0.0202210950751</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.7488935718910692e-05"><A>ex:2.74889357189e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.9080072815506621"><A>pa:0.908007281551</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.465592230859434"><A>spi:2.46559223086</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000627"><A>cluster_flux:0.000627</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000627"><A>Iapp:0.000627</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03100722278743311"><A>beamgain:0.0310072227874</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'aw034'"><A>cluster:aw034</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01387455763559206"><A>r:0.0138745576356</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ax213G'"><A>name:ax213G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4869485976806942"><A>ra:1.48694859768</A> </A> <A mdltype=float mdlval="0.8602310225790049"><A>dec:0.860231022579</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04526571400459344"><A>I:0.0452657140046</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.602506898901798e-05"><A>ex:5.6025068989e-05</A> </A> <A mdltype=float mdlval="2.117084382669122e-05"><A>ey:2.11708438267e-05</A> </A> <A mdltype=float mdlval="1.4115159910082746"><A>pa:1.41151599101</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001797"><A>cluster_flux:0.001797</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000618"><A>Iapp:0.000618</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.013652717373181984"><A>beamgain:0.0136527173732</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ax213'"><A>cluster:ax213</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01111406371564189"><A>r:0.0111140637156</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'L112c'"><A>name:L112c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.50356170615202"><A>ra:1.50356170615</A> </A> <A mdltype=float mdlval="0.8673229411016811"><A>dec:0.867322941102</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00313788178025012"><A>I:0.00313788178025</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.581965263387142"><A>spi:2.58196526339</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.009729000000000002"><A>cluster_flux:0.009729</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000611"><A>Iapp:0.000611</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.19471734207631533"><A>beamgain:0.194717342076</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'L112'"><A>cluster:L112</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006246113221032059"><A>r:0.00624611322103</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ay090'"><A>name:ay090</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.49810299693019"><A>ra:1.49810299693</A> </A> <A mdltype=float mdlval="0.8701900632771021"><A>dec:0.870190063277</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006836974666558675"><A>I:0.000683697466656</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.34844517391545904"><A>spi:0.348445173915</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000605"><A>cluster_flux:0.000605</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000605"><A>Iapp:0.000605</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8848943129176765"><A>beamgain:0.884894312918</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ay090'"><A>cluster:ay090</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002077843110391484"><A>r:0.00207784311039</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ax213aG'"><A>name:ax213aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4872717279384082"><A>ra:1.48727172794</A> </A> <A mdltype=float mdlval="0.8601825722389694"><A>dec:0.860182572239</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04662695211083994"><A>I:0.0466269521108</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.0492375260195954e-05"><A>ex:5.04923752602e-05</A> </A> <A mdltype=float mdlval="1.6441001553786583e-05"><A>ey:1.64410015538e-05</A> </A> <A mdltype=float mdlval="1.93840434572744"><A>pa:1.93840434573</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001797"><A>cluster_flux:0.001797</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000604"><A>Iapp:0.000604</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.012953881235131831"><A>beamgain:0.0129538812351</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ax213'"><A>cluster:ax213</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011061992056448495"><A>r:0.0110619920564</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'az034G'"><A>name:az034G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5061858261356857"><A>ra:1.50618582614</A> </A> <A mdltype=float mdlval="0.8812893275755275"><A>dec:0.881289327576</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.019356871728253858"><A>I:0.0193568717283</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.160791275361731e-05"><A>ex:3.16079127536e-05</A> </A> <A mdltype=float mdlval="5.951572749300664e-06"><A>ey:5.9515727493e-06</A> </A> <A mdltype=float mdlval="0.7603491281596556"><A>pa:0.76034912816</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="1.3104962402424625"><A>spi:1.31049624024</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000603"><A>cluster_flux:0.000603</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000603"><A>Iapp:0.000603</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03115172784452787"><A>beamgain:0.0311517278445</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'az034'"><A>cluster:az034</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013341603420539867"><A>r:0.0133416034205</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'B290cG'"><A>name:B290cG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4920386060980404"><A>ra:1.4920386061</A> </A> <A mdltype=float mdlval="0.8710546819352476"><A>dec:0.871054681935</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006889420939524911"><A>I:0.000688942093952</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.057890510886816e-05"><A>ex:4.05789051089e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8641093536164465"><A>pa:0.864109353616</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="4.866549689017183"><A>spi:4.86654968902</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000594"><A>Iapp:0.000594</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8621914747467322"><A>beamgain:0.862191474747</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002076018783513448"><A>r:0.00207601878351</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ba195'"><A>name:ba195</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4903346236960255"><A>ra:1.4903346237</A> </A> <A mdltype=float mdlval="0.8547936063740492"><A>dec:0.854793606374</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.02929067630253879"><A>I:0.0292906763025</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000592"><A>cluster_flux:0.000592</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000592"><A>Iapp:0.000592</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.020211209665673985"><A>beamgain:0.0202112096657</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ba195'"><A>cluster:ba195</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015572002752227778"><A>r:0.0155720027522</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bb131'"><A>name:bb131</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.499144504708025"><A>ra:1.49914450471</A> </A> <A mdltype=float mdlval="0.8676627043471667"><A>dec:0.867662704347</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0009359923942207983"><A>I:0.000935992394221</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.4106888312608168"><A>spi:-0.410688831261</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000581"><A>cluster_flux:0.000581</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000581"><A>Iapp:0.000581</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6207315396870026"><A>beamgain:0.620731539687</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bb131'"><A>cluster:bb131</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0036629756813445643"><A>r:0.00366297568134</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ax213bG'"><A>name:ax213bG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.487094245406773"><A>ra:1.48709424541</A> </A> <A mdltype=float mdlval="0.8602069893952049"><A>dec:0.860206989395</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04304973573415348"><A>I:0.0430497357342</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00014414674292221168"><A>ex:0.000144146742922</A> </A> <A mdltype=float mdlval="3.703588672731968e-05"><A>ey:3.70358867273e-05</A> </A> <A mdltype=float mdlval="1.8756290413234087"><A>pa:1.87562904132</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001797"><A>cluster_flux:0.001797</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000575"><A>Iapp:0.000575</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.013356644127871478"><A>beamgain:0.0133566441279</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ax213'"><A>cluster:ax213</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01109206490553427"><A>r:0.0110920649055</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bc328G'"><A>name:bc328G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.467107206051832"><A>ra:1.46710720605</A> </A> <A mdltype=float mdlval="0.8881057633290689"><A>dec:0.888105763329</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.5326354721187088"><A>I:0.532635472119</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.162757588791977e-05"><A>ex:6.16275758879e-05</A> </A> <A mdltype=float mdlval="1.6022122533307946e-05"><A>ey:1.60221225333e-05</A> </A> <A mdltype=float mdlval="2.3413166578765217"><A>pa:2.34131665788</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000569"><A>cluster_flux:0.000569</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000569"><A>Iapp:0.000569</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0010682728240697919"><A>beamgain:0.00106827282407</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bc328'"><A>cluster:bc328</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.025273066261624063"><A>r:0.0252730662616</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bd250'"><A>name:bd250</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4909393977351344"><A>ra:1.49093939774</A> </A> <A mdltype=float mdlval="0.8692779542100099"><A>dec:0.86927795421</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007319247948674079"><A>I:0.000731924794867</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7845945636292365"><A>spi:-0.784594563629</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000562"><A>cluster_flux:0.000562</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000562"><A>Iapp:0.000562</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7678384499896732"><A>beamgain:0.76783844999</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bd250'"><A>cluster:bd250</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002668798886638666"><A>r:0.00266879888664</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'be350'"><A>name:be350</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4940460838036842"><A>ra:1.4940460838</A> </A> <A mdltype=float mdlval="0.8728671190969812"><A>dec:0.872867119097</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007386972230725153"><A>I:0.000738697223073</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="0.24313824664240757"><A>spi:0.243138246642</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000555"><A>cluster_flux:0.000555</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000555"><A>Iapp:0.000555</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7513227106656087"><A>beamgain:0.751322710666</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'be350'"><A>cluster:be350</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002837223466927833"><A>r:0.00283722346693</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bf275'"><A>name:bf275</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.470196473734447"><A>ra:1.47019647373</A> </A> <A mdltype=float mdlval="0.8709231015629398"><A>dec:0.870923101563</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.030816351012871467"><A>I:0.0308163510129</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000535"><A>cluster_flux:0.000535</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000535"><A>Iapp:0.000535</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01736091335981147"><A>beamgain:0.0173609133598</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bf275'"><A>cluster:bf275</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0159320291395475"><A>r:0.0159320291395</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bg191'"><A>name:bg191</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4930446138788898"><A>ra:1.49304461388</A> </A> <A mdltype=float mdlval="0.8647329772114766"><A>dec:0.864732977211</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0018540674528342352"><A>I:0.00185406745283</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000732"><A>cluster_flux:0.000732</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00053"><A>Iapp:0.00053</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.2858579924855545"><A>beamgain:0.285857992486</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bg191'"><A>cluster:bg191</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005479516637524348"><A>r:0.00547951663752</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bh264G'"><A>name:bh264G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4757937970054702"><A>ra:1.47579379701</A> </A> <A mdltype=float mdlval="0.8671091557216042"><A>dec:0.867109155722</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01674515506394857"><A>I:0.0167451550639</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010712830948741196"><A>ex:0.000107128309487</A> </A> <A mdltype=float mdlval="1.5795229730548682e-05"><A>ey:1.57952297305e-05</A> </A> <A mdltype=float mdlval="0.07555823547197787"><A>pa:0.075558235472</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001327"><A>cluster_flux:0.001327</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000525"><A>Iapp:0.000525</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031352352247265666"><A>beamgain:0.0313523522473</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bh264'"><A>cluster:bh264</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012683802180140265"><A>r:0.0126838021801</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="nobeam" mdlval="True"><A>nobeam:True</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bi081'"><A>name:bi081</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5016133602014334"><A>ra:1.5016133602</A> </A> <A mdltype=float mdlval="0.8710974774085066"><A>dec:0.871097477409</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.001089912353848124"><A>I:0.00108991235385</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000521"><A>cluster_flux:0.000521</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000521"><A>Iapp:0.000521</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.47802008864338447"><A>beamgain:0.478020088643</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bi081'"><A>cluster:bi081</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004453281634276024"><A>r:0.00445328163428</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'F121b'"><A>name:F121b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4990046340217702"><A>ra:1.49900463402</A> </A> <A mdltype=float mdlval="0.8686146418277895"><A>dec:0.868614641828</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007066374511119615"><A>I:0.000706637451112</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="2.4240590023537463"><A>spi:2.42405900235</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012147"><A>cluster_flux:0.012147</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000519"><A>Iapp:0.000519</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7344643270510274"><A>beamgain:0.734464327051</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'F121'"><A>cluster:F121</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003036688937428283"><A>r:0.00303668893743</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'J001a'"><A>name:J001a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4951374032783713"><A>ra:1.49513740328</A> </A> <A mdltype=float mdlval="0.8737086645024152"><A>dec:0.873708664502</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008430457198374354"><A>I:0.000843045719837</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006935"><A>cluster_flux:0.006935</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000517"><A>Iapp:0.000517</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6132526241870881"><A>beamgain:0.613252624187</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'J001'"><A>cluster:J001</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003630610048755486"><A>r:0.00363061004876</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'L112dG'"><A>name:L112dG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5035988642117948"><A>ra:1.50359886421</A> </A> <A mdltype=float mdlval="0.8674368587419586"><A>dec:0.867436858742</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0026010863407512725"><A>I:0.00260108634075</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00013901547492134835"><A>ex:0.000139015474921</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.0905652570590334"><A>pa:0.090565257059</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.009729000000000002"><A>cluster_flux:0.009729</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000516"><A>Iapp:0.000516</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.19837865122576576"><A>beamgain:0.198378651226</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'L112'"><A>cluster:L112</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006218009061278482"><A>r:0.00621800906128</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'J001b'"><A>name:J001b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948955530039223"><A>ra:1.494895553</A> </A> <A mdltype=float mdlval="0.8737463112543808"><A>dec:0.873746311254</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008393916924586326"><A>I:0.000839391692459</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.5193418922479653"><A>spi:-0.519341892248</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006935"><A>cluster_flux:0.006935</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000509"><A>Iapp:0.000509</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6063915149185073"><A>beamgain:0.606391514919</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'J001'"><A>cluster:J001</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0036646167111662087"><A>r:0.00366461671117</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bj033G'"><A>name:bj033G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.504234303685861"><A>ra:1.50423430369</A> </A> <A mdltype=float mdlval="0.8798767977053034"><A>dec:0.879876797705</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03048339102662157"><A>I:0.0304833910266</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010068804454755287"><A>ex:0.000100688044548</A> </A> <A mdltype=float mdlval="3.204424506661589e-05"><A>ey:3.20442450666e-05</A> </A> <A mdltype=float mdlval="2.241939669756482"><A>pa:2.24193966976</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000508"><A>cluster_flux:0.000508</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000508"><A>Iapp:0.000508</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01666481263703098"><A>beamgain:0.016664812637</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bj033'"><A>cluster:bj033</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011483124280829596"><A>r:0.0114831242808</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bk194'"><A>name:bk194</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4898366289005542"><A>ra:1.4898366289</A> </A> <A mdltype=float mdlval="0.8574226656394983"><A>dec:0.857422665639</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.015622797370746073"><A>I:0.0156227973707</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000497"><A>cluster_flux:0.000497</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000497"><A>Iapp:0.000497</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03181248455098318"><A>beamgain:0.031812484551</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bk194'"><A>cluster:bk194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013076800368079643"><A>r:0.0130768003681</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bl001'"><A>name:bl001</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4949442302367604"><A>ra:1.49494423024</A> </A> <A mdltype=float mdlval="0.8742630857926038"><A>dec:0.874263085793</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0009679577526259028"><A>I:0.000967957752626</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000495"><A>cluster_flux:0.000495</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000495"><A>Iapp:0.000495</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5113859552828108"><A>beamgain:0.511385955283</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bl001'"><A>cluster:bl001</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0041815606617001625"><A>r:0.0041815606617</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bm255G'"><A>name:bm255G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4715438330104014"><A>ra:1.47154383301</A> </A> <A mdltype=float mdlval="0.8628807116362125"><A>dec:0.862880711636</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.05116865782016437"><A>I:0.0511686578202</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.7908551353316833e-05"><A>ex:3.79085513533e-05</A> </A> <A mdltype=float mdlval="1.1920598791121272e-05"><A>ey:1.19205987911e-05</A> </A> <A mdltype=float mdlval="0.804137885749159"><A>pa:0.804137885749</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000891"><A>cluster_flux:0.000891</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000486"><A>Iapp:0.000486</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.009498001720273357"><A>beamgain:0.00949800172027</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bm255'"><A>cluster:bm255</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01674089491568111"><A>r:0.0167408949157</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bn282G'"><A>name:bn282G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4826783355064246"><A>ra:1.48267833551</A> </A> <A mdltype=float mdlval="0.8711695420533214"><A>dec:0.871169542053</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01469858102192274"><A>I:0.0146985810219</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.6599554414321086e-05"><A>ex:3.65995544143e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.9762507808126784"><A>pa:1.97625078081</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000479"><A>cluster_flux:0.000479</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000479"><A>Iapp:0.000479</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0325881797219458"><A>beamgain:0.0325881797219</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bn282'"><A>cluster:bn282</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007939887221025226"><A>r:0.00793988722103</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bo022G'"><A>name:bo022G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.498302994209176"><A>ra:1.49830299421</A> </A> <A mdltype=float mdlval="0.877341113554836"><A>dec:0.877341113555</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.008012678005919038"><A>I:0.00801267800592</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.232349774693498e-05"><A>ex:3.23234977469e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.267768413384311"><A>pa:2.26776841338</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000475"><A>cluster_flux:0.000475</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000475"><A>Iapp:0.000475</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.059281054305328776"><A>beamgain:0.0592810543053</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bo022'"><A>cluster:bo022</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0075838793689515455"><A>r:0.00758387936895</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bp341'"><A>name:bp341</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.49195950777634"><A>ra:1.49195950778</A> </A> <A mdltype=float mdlval="0.8748965879512002"><A>dec:0.874896587951</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.001387178757502645"><A>I:0.0013871787575</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000463"><A>cluster_flux:0.000463</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000463"><A>Iapp:0.000463</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3337709703928458"><A>beamgain:0.333770970393</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bp341'"><A>cluster:bp341</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00516910195404883"><A>r:0.00516910195405</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bq192G'"><A>name:bq192G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4933279680829512"><A>ra:1.49332796808</A> </A> <A mdltype=float mdlval="0.8614748140171461"><A>dec:0.861474814017</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04300464118194119"><A>I:0.0430046411819</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.3666664657043108e-05"><A>ex:2.3666664657e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6250542065113686"><A>pa:0.625054206511</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000457"><A>cluster_flux:0.000457</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000457"><A>Iapp:0.000457</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.010626759983104025"><A>beamgain:0.0106267599831</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bq192'"><A>cluster:bq192</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00866579549994015"><A>r:0.00866579549994</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'aq071a'"><A>name:aq071a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.503360068263537"><A>ra:1.50336006826</A> </A> <A mdltype=float mdlval="0.8715292195055723"><A>dec:0.871529219506</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0016013775737705775"><A>I:0.00160137757377</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.44338937381178756"><A>spi:-0.443389373812</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001136"><A>cluster_flux:0.001136</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000444"><A>Iapp:0.000444</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.2772612825809499"><A>beamgain:0.277261282581</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'aq071'"><A>cluster:aq071</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005648637353970059"><A>r:0.00564863735397</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'br330'"><A>name:br330</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.492611894397443"><A>ra:1.4926118944</A> </A> <A mdltype=float mdlval="0.8723591061116032"><A>dec:0.872359106112</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00057511481246919"><A>I:0.000575114812469</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000442"><A>cluster_flux:0.000442</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000442"><A>Iapp:0.000442</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7685421943878012"><A>beamgain:0.768542194388</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'br330'"><A>cluster:br330</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002707013646365865"><A>r:0.00270701364637</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bs233G'"><A>name:bs233G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.481224162080248"><A>ra:1.48122416208</A> </A> <A mdltype=float mdlval="0.8628437804692403"><A>dec:0.862843780469</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.023845664962735318"><A>I:0.0238456649627</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.169517921621702e-05"><A>ex:3.16951792162e-05</A> </A> <A mdltype=float mdlval="8.080874436733745e-06"><A>ey:8.08087443673e-06</A> </A> <A mdltype=float mdlval="1.5093162835886478"><A>pa:1.50931628359</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000665"><A>cluster_flux:0.000665</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000435"><A>Iapp:0.000435</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.018242309479722787"><A>beamgain:0.0182423094797</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bs233'"><A>cluster:bs233</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011429216015763858"><A>r:0.0114292160158</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bt303G'"><A>name:bt303G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4802551203729557"><A>ra:1.48025512037</A> </A> <A mdltype=float mdlval="0.876210925597707"><A>dec:0.876210925598</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.025811781623030463"><A>I:0.025811781623</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.998917623282763e-05"><A>ex:8.99891762328e-05</A> </A> <A mdltype=float mdlval="1.1379546723003028e-05"><A>ey:1.1379546723e-05</A> </A> <A mdltype=float mdlval="1.8504227519200112"><A>pa:1.85042275192</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000434"><A>cluster_flux:0.000434</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000434"><A>Iapp:0.000434</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01681402726624516"><A>beamgain:0.0168140272662</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bt303'"><A>cluster:bt303</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011220128894811322"><A>r:0.0112201288948</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bu130'"><A>name:bu130</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4971706071371895"><A>ra:1.49717060714</A> </A> <A mdltype=float mdlval="0.8687339350821633"><A>dec:0.868733935082</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0004737687560487315"><A>I:0.000473768756049</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000423"><A>cluster_flux:0.000423</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000423"><A>Iapp:0.000423</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8928406413454806"><A>beamgain:0.892840641345</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bu130'"><A>cluster:bu130</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0019981377791280933"><A>r:0.00199813777913</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bv200'"><A>name:bv200</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.49350194250279"><A>ra:1.4935019425</A> </A> <A mdltype=float mdlval="0.8678252294071125"><A>dec:0.867825229407</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0005189191484181142"><A>I:0.000518919148418</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000423"><A>cluster_flux:0.000423</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000423"><A>Iapp:0.000423</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8151558894858351"><A>beamgain:0.815155889486</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bv200'"><A>cluster:bv200</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00242661595237495"><A>r:0.00242661595237</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bw336G'"><A>name:bw336G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4805384920303095"><A>ra:1.48053849203</A> </A> <A mdltype=float mdlval="0.8854732134051156"><A>dec:0.885473213405</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.1466105144141137"><A>I:0.146610514414</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.195697860401617e-05"><A>ex:3.1956978604e-05</A> </A> <A mdltype=float mdlval="1.6493361431346413e-05"><A>ey:1.64933614313e-05</A> </A> <A mdltype=float mdlval="2.7476949844805545"><A>pa:2.74769498448</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000423"><A>cluster_flux:0.000423</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000423"><A>Iapp:0.000423</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0028851955242800726"><A>beamgain:0.00288519552428</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bw336'"><A>cluster:bw336</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01791337142660872"><A>r:0.0179133714266</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bh264aG'"><A>name:bh264aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4758319673562115"><A>ra:1.47583196736</A> </A> <A mdltype=float mdlval="0.867221432752385"><A>dec:0.867221432752</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01361068675963317"><A>I:0.0136106867596</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.646213791594407e-05"><A>ex:6.64621379159e-05</A> </A> <A mdltype=float mdlval="4.6233771885329785e-05"><A>ey:4.62337718853e-05</A> </A> <A mdltype=float mdlval="2.0257304811342824"><A>pa:2.02573048113</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001327"><A>cluster_flux:0.001327</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000423"><A>Iapp:0.000423</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031078519950553954"><A>beamgain:0.0310785199506</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bh264'"><A>cluster:bh264</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012633151525071249"><A>r:0.0126331515251</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="nobeam" mdlval="True"><A>nobeam:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bx231'"><A>name:bx231</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4900169039589926"><A>ra:1.49001690396</A> </A> <A mdltype=float mdlval="0.8671591943112589"><A>dec:0.867159194311</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008743829611748795"><A>I:0.000874382961175</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000418"><A>cluster_flux:0.000418</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000418"><A>Iapp:0.000418</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4780514014572599"><A>beamgain:0.478051401457</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bx231'"><A>cluster:bx231</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004292452506153728"><A>r:0.00429245250615</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'by022'"><A>name:by022</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4983924772399255"><A>ra:1.49839247724</A> </A> <A mdltype=float mdlval="0.8756959487486136"><A>dec:0.875695948749</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.001967592407061195"><A>I:0.00196759240706</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000417"><A>cluster_flux:0.000417</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000417"><A>Iapp:0.000417</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.2119341376310926"><A>beamgain:0.211934137631</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'by022'"><A>cluster:by022</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006049908099710615"><A>r:0.00604990809971</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bz085'"><A>name:bz085</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5190749430353236"><A>ra:1.51907494304</A> </A> <A mdltype=float mdlval="0.8720972020040489"><A>dec:0.872097202004</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.02109709504682287"><A>I:0.0210970950468</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000507"><A>cluster_flux:0.000507</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000416"><A>Iapp:0.000416</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.019718354544866486"><A>beamgain:0.0197183545449</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bz085'"><A>cluster:bz085</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01570807023526805"><A>r:0.0157080702353</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ca255'"><A>name:ca255</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4709572802086839"><A>ra:1.47095728021</A> </A> <A mdltype=float mdlval="0.8649749322056806"><A>dec:0.864974932206</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.030324440769925624"><A>I:0.0303244407699</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000404"><A>cluster_flux:0.000404</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000404"><A>Iapp:0.000404</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.013322586987347463"><A>beamgain:0.0133225869873</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ca255'"><A>cluster:ca255</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016294693355872053"><A>r:0.0162946933559</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cb055G'"><A>name:cb055G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5153855613427032"><A>ra:1.51538556134</A> </A> <A mdltype=float mdlval="0.8811827752246931"><A>dec:0.881182775225</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.059119906824737785"><A>I:0.0591199068247</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.195845183187119e-05"><A>ex:5.19584518319e-05</A> </A> <A mdltype=float mdlval="2.064724505109292e-05"><A>ey:2.06472450511e-05</A> </A> <A mdltype=float mdlval="1.1027235956458854"><A>pa:1.10272359565</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000402"><A>cluster_flux:0.000402</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000402"><A>Iapp:0.000402</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.006799740080642169"><A>beamgain:0.00679974008064</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cb055'"><A>cluster:cb055</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01719441153914347"><A>r:0.0171944115391</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cc150'"><A>name:cc150</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.497068714815458"><A>ra:1.49706871482</A> </A> <A mdltype=float mdlval="0.8676118105461786"><A>dec:0.867611810546</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000524211758215733"><A>I:0.000524211758216</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000577"><A>cluster_flux:0.000577</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000399"><A>Iapp:0.000399</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7611427896201373"><A>beamgain:0.76114278962</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cc150'"><A>cluster:cc150</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0028441905942155326"><A>r:0.00284419059422</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cd345G'"><A>name:cd345G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4873722763566155"><A>ra:1.48737227636</A> </A> <A mdltype=float mdlval="0.8866583792336825"><A>dec:0.886658379234</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06033024161107503"><A>I:0.0603302416111</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.4975661596038856e-05"><A>ex:2.4975661596e-05</A> </A> <A mdltype=float mdlval="8.656833089891875e-06"><A>ey:8.65683308989e-06</A> </A> <A mdltype=float mdlval="2.4911845377268937"><A>pa:2.49118453773</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000398"><A>cluster_flux:0.000398</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000398"><A>Iapp:0.000398</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.006597023140827896"><A>beamgain:0.00659702314083</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cd345'"><A>cluster:cd345</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01725641252836046"><A>r:0.0172564125284</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ce348G'"><A>name:ce348G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4787887820018928"><A>ra:1.478788782</A> </A> <A mdltype=float mdlval="0.892268094342395"><A>dec:0.892268094342</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.187575703106332"><A>I:0.187575703106</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.422664324553631e-05"><A>ex:4.42266432455e-05</A> </A> <A mdltype=float mdlval="1.0157816246606998e-05"><A>ey:1.01578162466e-05</A> </A> <A mdltype=float mdlval="2.4157557184189513"><A>pa:2.41575571842</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000397"><A>cluster_flux:0.000397</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000397"><A>Iapp:0.000397</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002116478805226445"><A>beamgain:0.00211647880523</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ce348'"><A>cluster:ce348</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.024435349363834003"><A>r:0.0244353493638</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cf225G'"><A>name:cf225G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4784639064149265"><A>ra:1.47846390641</A> </A> <A mdltype=float mdlval="0.8582596731888773"><A>dec:0.858259673189</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.023417983810154183"><A>I:0.0234179838102</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.288347633542819e-05"><A>ex:5.28834763354e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.9959473016153083"><A>pa:0.995947301615</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0006969999999999999"><A>cluster_flux:0.000697</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000385"><A>Iapp:0.000385</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.016440356399642808"><A>beamgain:0.0164403563996</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cf225'"><A>cluster:cf225</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01591911968076521"><A>r:0.0159191196808</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cg053'"><A>name:cg053</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.505718706214682"><A>ra:1.50571870621</A> </A> <A mdltype=float mdlval="0.8761616898595083"><A>dec:0.87616168986</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.1485903006277715"><A>I:0.148590300628</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00047200000000000003"><A>cluster_flux:0.000472</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000382"><A>Iapp:0.000382</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0025708272907861945"><A>beamgain:0.00257082729079</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cg053'"><A>cluster:cg053</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009241788727739182"><A>r:0.00924178872774</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ch070G'"><A>name:ch070G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4965094938698265"><A>ra:1.49650949387</A> </A> <A mdltype=float mdlval="0.870510191568503"><A>dec:0.870510191569</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00038734588726479504"><A>I:0.000387345887265</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.18741318249815e-05"><A>ex:9.1874131825e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.3900907569447887"><A>pa:0.390090756945</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000767"><A>cluster_flux:0.000767</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000382"><A>Iapp:0.000382</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.986198672967604"><A>beamgain:0.986198672968</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ch070'"><A>cluster:ch070</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0011317042449990712"><A>r:0.001131704245</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bh264bG'"><A>name:bh264bG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4757242979946559"><A>ra:1.47572429799</A> </A> <A mdltype=float mdlval="0.8669416215667054"><A>dec:0.866941621567</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.011929072746064862"><A>I:0.0119290727461</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.46135621366851e-05"><A>ex:8.46135621367e-05</A> </A> <A mdltype=float mdlval="4.9288098076319865e-05"><A>ey:4.92880980763e-05</A> </A> <A mdltype=float mdlval="1.0019087354748826"><A>pa:1.00190873547</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.001327"><A>cluster_flux:0.001327</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000379"><A>Iapp:0.000379</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03177111985715937"><A>beamgain:0.0317711198572</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bh264'"><A>cluster:bh264</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012768797009832985"><A>r:0.0127687970098</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="nobeam" mdlval="True"><A>nobeam:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'B290d'"><A>name:B290d</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4921525237383177"><A>ra:1.49215252374</A> </A> <A mdltype=float mdlval="0.8708866241815731"><A>dec:0.870886624182</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000422042390697006"><A>I:0.000422042390697</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000372"><A>Iapp:0.000372</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8814280465657475"><A>beamgain:0.881428046566</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0019359306505687078"><A>r:0.00193593065057</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ci291'"><A>name:ci291</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.490439797236751"><A>ra:1.49043979724</A> </A> <A mdltype=float mdlval="0.8709006740820516"><A>dec:0.870900674082</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000515749848665839"><A>I:0.000515749848666</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000369"><A>cluster_flux:0.000369</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000369"><A>Iapp:0.000369</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.715463128015535"><A>beamgain:0.715463128016</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ci291'"><A>cluster:ci291</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0029791912012463785"><A>r:0.00297919120125</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cj005G'"><A>name:cj005G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4931182318667389"><A>ra:1.49311823187</A> </A> <A mdltype=float mdlval="0.885819608901759"><A>dec:0.885819608902</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.019298528836856295"><A>I:0.0192985288369</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.0559978588493202e-05"><A>ex:2.05599785885e-05</A> </A> <A mdltype=float mdlval="1.8413223608540177e-05"><A>ey:1.84132236085e-05</A> </A> <A mdltype=float mdlval="1.7988978049677506"><A>pa:1.79889780497</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000368"><A>cluster_flux:0.000368</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000368"><A>Iapp:0.000368</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01906881105347234"><A>beamgain:0.0190688110535</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cj005'"><A>cluster:cj005</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015778288939368865"><A>r:0.0157782889394</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ck070'"><A>name:ck070</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.497403992564766"><A>ra:1.49740399256</A> </A> <A mdltype=float mdlval="0.8706473919010023"><A>dec:0.870647391901</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00037995969075168846"><A>I:0.000379959690752</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000353"><A>cluster_flux:0.000353</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000353"><A>Iapp:0.000353</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9290459187964042"><A>beamgain:0.929045918796</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ck070'"><A>cluster:ck070</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001719620256393853"><A>r:0.00171962025639</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cl055G'"><A>name:cl055G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5144605368391462"><A>ra:1.51446053684</A> </A> <A mdltype=float mdlval="0.88084953951061"><A>dec:0.880849539511</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.02935354303329913"><A>I:0.0293535430333</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.342673824532896e-05"><A>ex:8.34267382453e-05</A> </A> <A mdltype=float mdlval="3.087487446777969e-05"><A>ey:3.08748744678e-05</A> </A> <A mdltype=float mdlval="1.7451987362728654"><A>pa:1.74519873627</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000344"><A>cluster_flux:0.000344</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000344"><A>Iapp:0.000344</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.011719198585661735"><A>beamgain:0.0117191985857</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cl055'"><A>cluster:cl055</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0165292459938653"><A>r:0.0165292459939</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cm13xG'"><A>name:cm13xG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5290057792127087"><A>ra:1.52900577921</A> </A> <A mdltype=float mdlval="0.8476393446904916"><A>dec:0.84763934469</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.1083209155465395"><A>I:0.108320915547</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.464846872172499e-05"><A>ex:8.46484687217e-05</A> </A> <A mdltype=float mdlval="3.9688787190351054e-05"><A>ey:3.96887871904e-05</A> </A> <A mdltype=float mdlval="1.70842710984759"><A>pa:1.70842710985</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000333"><A>cluster_flux:0.000333</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000333"><A>Iapp:0.000333</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.003074198536079843"><A>beamgain:0.00307419853608</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cm13x'"><A>cluster:cm13x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.031629648878146635"><A>r:0.0316296488781</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cn184G'"><A>name:cn184G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4941748018360188"><A>ra:1.49417480184</A> </A> <A mdltype=float mdlval="0.8564808510685371"><A>dec:0.856480851069</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010107262136228935"><A>I:0.0101072621362</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.2881266493645663e-05"><A>ex:2.28812664936e-05</A> </A> <A mdltype=float mdlval="6.1784655520599265e-06"><A>ey:6.17846555206e-06</A> </A> <A mdltype=float mdlval="0.12806257393399534"><A>pa:0.128062573934</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000331"><A>cluster_flux:0.000331</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000331"><A>Iapp:0.000331</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03274873012480288"><A>beamgain:0.0327487301248</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cn184'"><A>cluster:cn184</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013608670030957504"><A>r:0.013608670031</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'co127G'"><A>name:co127G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5223919761853242"><A>ra:1.52239197619</A> </A> <A mdltype=float mdlval="0.8600273950151746"><A>dec:0.860027395015</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.3328761190407426"><A>I:0.332876119041</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="7.930776121062235e-05"><A>ex:7.93077612106e-05</A> </A> <A mdltype=float mdlval="2.5080381351158514e-05"><A>ey:2.50803813512e-05</A> </A> <A mdltype=float mdlval="1.241750659553467"><A>pa:1.24175065955</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000327"><A>cluster_flux:0.000327</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000327"><A>Iapp:0.000327</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0009823474298556593"><A>beamgain:0.000982347429856</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'co127'"><A>cluster:co127</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02047865389467688"><A>r:0.0204786538947</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cp211'"><A>name:cp211</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4925811940559002"><A>ra:1.49258119406</A> </A> <A mdltype=float mdlval="0.867576205829438"><A>dec:0.867576205829</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00044246654152716017"><A>I:0.000442466541527</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0008990000000000001"><A>cluster_flux:0.000899</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000324"><A>Iapp:0.000324</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7322587576491628"><A>beamgain:0.732258757649</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cp211'"><A>cluster:cp211</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0029136932355444544"><A>r:0.00291369323554</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cq298G'"><A>name:cq298G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4582236197855212"><A>ra:1.45822361979</A> </A> <A mdltype=float mdlval="0.8792766138821275"><A>dec:0.879276613882</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.304272247351729"><A>I:0.304272247352</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="7.271041663808377e-05"><A>ex:7.27104166381e-05</A> </A> <A mdltype=float mdlval="3.9426987802551905e-05"><A>ey:3.94269878026e-05</A> </A> <A mdltype=float mdlval="1.3029031393657016"><A>pa:1.30290313937</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000324"><A>cluster_flux:0.000324</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000324"><A>Iapp:0.000324</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0010648358593988573"><A>beamgain:0.0010648358594</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cq298'"><A>cluster:cq298</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02524166462225393"><A>r:0.0252416646223</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cp211aG'"><A>name:cp211aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4924079352210546"><A>ra:1.49240793522</A> </A> <A mdltype=float mdlval="0.867589470331753"><A>dec:0.867589470332</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00044504011777008926"><A>I:0.00044504011777</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.6511551337793864e-05"><A>ex:2.65115513378e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.271667513839851"><A>pa:2.27166751384</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0008990000000000001"><A>cluster_flux:0.000899</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000322"><A>Iapp:0.000322</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7235302777048684"><A>beamgain:0.723530277705</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cp211'"><A>cluster:cp211</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002961179431482554"><A>r:0.00296117943148</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cr04xG'"><A>name:cr04xG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5268356891806567"><A>ra:1.52683568918</A> </A> <A mdltype=float mdlval="0.8913894083304784"><A>dec:0.89138940833</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.23313856386606116"><A>I:0.233138563866</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.3058009260627624e-05"><A>ex:5.30580092606e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.9383551887573872"><A>pa:0.938355188757</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000317"><A>cluster_flux:0.000317</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000317"><A>Iapp:0.000317</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0013597064112572878"><A>beamgain:0.00135970641126</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cr04x'"><A>cluster:cr04x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.029455254730643213"><A>r:0.0294552547306</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cs171G'"><A>name:cs171G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4964931750413204"><A>ra:1.49649317504</A> </A> <A mdltype=float mdlval="0.8649594511352153"><A>dec:0.864959451135</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0009376793934180677"><A>I:0.000937679393418</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00014898130495023598"><A>ex:0.00014898130495</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.2185108500715842"><A>pa:1.21851085007</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0005239999999999999"><A>cluster_flux:0.000524</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000312"><A>Iapp:0.000312</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3327363299119592"><A>beamgain:0.332736329912</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cs171'"><A>cluster:cs171</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005226829096418354"><A>r:0.00522682909642</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ct324G'"><A>name:ct324G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.481946274604968"><A>ra:1.4819462746</A> </A> <A mdltype=float mdlval="0.880448777007767"><A>dec:0.880448777008</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00889506711631609"><A>I:0.00889506711632</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.8206730554010886e-05"><A>ex:5.8206730554e-05</A> </A> <A mdltype=float mdlval="2.2863813201125715e-05"><A>ey:2.28638132011e-05</A> </A> <A mdltype=float mdlval="0.7561973040284264"><A>pa:0.756197304028</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000312"><A>cluster_flux:0.000312</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000312"><A>Iapp:0.000312</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.035075620669314904"><A>beamgain:0.0350756206693</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ct324'"><A>cluster:ct324</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013274371858526686"><A>r:0.0132743718585</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cf225aG'"><A>name:cf225aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4782883088388832"><A>ra:1.47828830884</A> </A> <A mdltype=float mdlval="0.8581728954184681"><A>dec:0.858172895418</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.020574252480893392"><A>I:0.0205742524809</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.196066167365372e-05"><A>ex:8.19606616737e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6461231231097433"><A>pa:0.64612312311</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0006969999999999999"><A>cluster_flux:0.000697</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000312"><A>Iapp:0.000312</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.015164584972880243"><A>beamgain:0.0151645849729</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cf225'"><A>cluster:cf225</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0160602988858896"><A>r:0.0160602988859</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'N221bG'"><A>name:N221bG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.490104798740123"><A>ra:1.49010479874</A> </A> <A mdltype=float mdlval="0.8660965156895971"><A>dec:0.86609651569</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008906667295853902"><A>I:0.000890666729585</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.000441968356505e-05"><A>ex:6.00044196836e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.3305743313200813"><A>pa:0.33057433132</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-0.7449505146767801"><A>spi:-0.744950514677</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.005606999999999999"><A>cluster_flux:0.005607</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000311"><A>Iapp:0.000311</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.34917662203995437"><A>beamgain:0.34917662204</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'N221'"><A>cluster:N221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005042223393214834"><A>r:0.00504222339321</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cu251G'"><A>name:cu251G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4891597902166307"><A>ra:1.48915979022</A> </A> <A mdltype=float mdlval="0.8689974797992144"><A>dec:0.868997479799</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0005482912458106664"><A>I:0.000548291245811</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010039133857471383"><A>ex:0.000100391338575</A> </A> <A mdltype=float mdlval="3.420845333908886e-05"><A>ey:3.42084533391e-05</A> </A> <A mdltype=float mdlval="1.819992220826497"><A>pa:1.81999222083</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000468"><A>cluster_flux:0.000468</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000305"><A>Iapp:0.000305</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5562737000278886"><A>beamgain:0.556273700028</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cu251'"><A>cluster:cu251</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0038493257512615107"><A>r:0.00384932575126</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cv174G'"><A>name:cv174G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.499814850767131"><A>ra:1.49981485077</A> </A> <A mdltype=float mdlval="0.8571806233788317"><A>dec:0.857180623379</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.009162009456401523"><A>I:0.0091620094564</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.907718533822553e-05"><A>ex:2.90771853382e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.4939616009129115"><A>pa:2.49396160091</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000304"><A>cluster_flux:0.000304</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000304"><A>Iapp:0.000304</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.033180494022257784"><A>beamgain:0.0331804940223</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cv174'"><A>cluster:cv174</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013292747937412145"><A>r:0.0132927479374</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'B290e'"><A>name:B290e</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4920402467075373"><A>ra:1.49204024671</A> </A> <A mdltype=float mdlval="0.8708530265934722"><A>dec:0.870853026593</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003478286817978296"><A>I:0.000347828681798</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.04089999999999999"><A>cluster_flux:0.0409</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000304"><A>Iapp:0.000304</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8739934798611451"><A>beamgain:0.873993479861</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'B290'"><A>cluster:B290</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0019887265750338882"><A>r:0.00198872657503</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="6"><A>cluster_size:6</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cw276G'"><A>name:cw276G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.465779568996425"><A>ra:1.465779569</A> </A> <A mdltype=float mdlval="0.8693011321824764"><A>dec:0.869301132182</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.967793845581341"><A>I:0.967793845581</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.1608649367544815e-05"><A>ex:4.16086493675e-05</A> </A> <A mdltype=float mdlval="1.4748032179352085e-05"><A>ey:1.47480321794e-05</A> </A> <A mdltype=float mdlval="1.6660821235219214"><A>pa:1.66608212352</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000301"><A>cluster_flux:0.000301</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000301"><A>Iapp:0.000301</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0003110166502652156"><A>beamgain:0.000311016650265</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cw276'"><A>cluster:cw276</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018790348184745176"><A>r:0.0187903481847</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cx110'"><A>name:cx110</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4986489184669212"><A>ra:1.49864891847</A> </A> <A mdltype=float mdlval="0.8691334234946523"><A>dec:0.869133423495</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00037076346922860755"><A>I:0.000370763469229</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000299"><A>cluster_flux:0.000299</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000299"><A>Iapp:0.000299</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.806444066946738"><A>beamgain:0.806444066947</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cx110'"><A>cluster:cx110</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0026070781591248024"><A>r:0.00260707815912</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'Q210a'"><A>name:Q210a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4937820853010273"><A>ra:1.4937820853</A> </A> <A mdltype=float mdlval="0.8686264577068256"><A>dec:0.868626457707</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00032181376174801856"><A>I:0.000321813761748</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.003144"><A>cluster_flux:0.003144</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000298"><A>Iapp:0.000298</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9260014188993421"><A>beamgain:0.926001418899</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'Q210'"><A>cluster:Q210</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001619836275344131"><A>r:0.00161983627534</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'W201aG'"><A>name:W201aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4919113366889847"><A>ra:1.49191133669</A> </A> <A mdltype=float mdlval="0.8653173134450443"><A>dec:0.865317313445</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0008804723441474854"><A>I:0.000880472344147</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.4297193029543594e-05"><A>ex:5.42971930295e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.4203641036858686"><A>pa:0.420364103686</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0018319999999999999"><A>cluster_flux:0.001832</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000297"><A>Iapp:0.000297</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3373189424678288"><A>beamgain:0.337318942468</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'W201'"><A>cluster:W201</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0051376113837013244"><A>r:0.0051376113837</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cy331G'"><A>name:cy331G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4923646161490203"><A>ra:1.49236461615</A> </A> <A mdltype=float mdlval="0.8731742621387472"><A>dec:0.873174262139</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00046724831326453635"><A>I:0.000467248313265</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.572615317439642e-05"><A>ex:2.57261531744e-05</A> </A> <A mdltype=float mdlval="7.57472895365539e-06"><A>ey:7.57472895366e-06</A> </A> <A mdltype=float mdlval="0.23134457917573972"><A>pa:0.231344579176</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000295"><A>cluster_flux:0.000295</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000295"><A>Iapp:0.000295</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6313559442064447"><A>beamgain:0.631355944206</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cy331'"><A>cluster:cy331</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00349200014328481"><A>r:0.00349200014328</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cz171'"><A>name:cz171</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4964734702740654"><A>ra:1.49647347027</A> </A> <A mdltype=float mdlval="0.8659020511043399"><A>dec:0.865902051104</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0005834079111351836"><A>I:0.000583407911135</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000288"><A>cluster_flux:0.000288</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000288"><A>Iapp:0.000288</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4936511735667336"><A>beamgain:0.493651173567</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cz171'"><A>cluster:cz171</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0043039806058877625"><A>r:0.00430398060589</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'at014aG'"><A>name:at014aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4968545978228234"><A>ra:1.49685459782</A> </A> <A mdltype=float mdlval="0.8824472488144705"><A>dec:0.882447248814</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010134232181075876"><A>I:0.0101342321811</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.705407663376712e-05"><A>ex:4.70540766338e-05</A> </A> <A mdltype=float mdlval="9.494591130849153e-06"><A>ey:9.49459113085e-06</A> </A> <A mdltype=float mdlval="1.1306589167742862"><A>pa:1.13065891677</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000944"><A>cluster_flux:0.000944</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000286"><A>Iapp:0.000286</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.028221180933081555"><A>beamgain:0.0282211809331</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'at014'"><A>cluster:at014</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012429662212042053"><A>r:0.012429662212</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'da222'"><A>name:da222</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4874937861791395"><A>ra:1.48749378618</A> </A> <A mdltype=float mdlval="0.8646020426109919"><A>dec:0.864602042611</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0037869423434740606"><A>I:0.00378694234347</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000283"><A>cluster_flux:0.000283</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000283"><A>Iapp:0.000283</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.07473047496687837"><A>beamgain:0.0747304749669</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'da222'"><A>cluster:da222</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007271991933221164"><A>r:0.00727199193322</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'db280G'"><A>name:db280G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4907535725296743"><A>ra:1.49075357253</A> </A> <A mdltype=float mdlval="0.8703718044121124"><A>dec:0.870371804412</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003680274902426378"><A>I:0.000368027490243</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.463175204313254e-05"><A>ex:9.46317520431e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.35752910856476"><A>pa:2.35752910856</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000282"><A>cluster_flux:0.000282</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000282"><A>Iapp:0.000282</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.766247107829036"><A>beamgain:0.766247107829</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'db280'"><A>cluster:db280</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002678791243349624"><A>r:0.00267879124335</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dc044G'"><A>name:dc044G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5074120072016746"><A>ra:1.5074120072</A> </A> <A mdltype=float mdlval="0.8801732767853396"><A>dec:0.880173276785</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.009460380661094597"><A>I:0.00946038066109</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.5395277230445004e-05"><A>ex:3.53952772304e-05</A> </A> <A mdltype=float mdlval="2.038544566329377e-05"><A>ey:2.03854456633e-05</A> </A> <A mdltype=float mdlval="0.4203935648436422"><A>pa:0.420393564844</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00028"><A>cluster_flux:0.00028</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00028"><A>Iapp:0.00028</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.029597117709172928"><A>beamgain:0.0295971177092</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dc044'"><A>cluster:dc044</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01289569111017856"><A>r:0.0128956911102</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dd348G'"><A>name:dd348G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4822969112516937"><A>ra:1.48229691125</A> </A> <A mdltype=float mdlval="0.8920905594508822"><A>dec:0.892090559451</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.08716879795137178"><A>I:0.0871687979514</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.054399852382827e-05"><A>ex:4.05439985238e-05</A> </A> <A mdltype=float mdlval="2.319542575900464e-05"><A>ey:2.3195425759e-05</A> </A> <A mdltype=float mdlval="3.004399075514724"><A>pa:3.00439907551</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000278"><A>cluster_flux:0.000278</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000278"><A>Iapp:0.000278</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0031892145645404657"><A>beamgain:0.00318921456454</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dd348'"><A>cluster:dd348</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.023420722241900033"><A>r:0.0234207222419</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'M301bG'"><A>name:M301bG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4906678419568165"><A>ra:1.49066784196</A> </A> <A mdltype=float mdlval="0.8718711644126231"><A>dec:0.871871164413</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0004124632757367746"><A>I:0.000412463275737</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.8676496224194345e-05"><A>ex:3.86764962242e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.647210811842927"><A>pa:2.64721081184</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006154"><A>cluster_flux:0.006154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000276"><A>Iapp:0.000276</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6691504825659615"><A>beamgain:0.669150482566</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'M301'"><A>cluster:M301</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0032524146953137934"><A>r:0.00325241469531</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'de024G'"><A>name:de024G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5027865879779168"><A>ra:1.50278658798</A> </A> <A mdltype=float mdlval="0.8811924443487492"><A>dec:0.881192444349</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010694840977888694"><A>I:0.0106948409779</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.5778513051956248e-05"><A>ex:2.5778513052e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6255511890158739"><A>pa:0.625551189016</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000269"><A>cluster_flux:0.000269</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000269"><A>Iapp:0.000269</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.025152314144375826"><A>beamgain:0.0251523141444</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'de024'"><A>cluster:de024</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012209183417202656"><A>r:0.0122091834172</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'df041'"><A>name:df041</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.499974426220641"><A>ra:1.49997442622</A> </A> <A mdltype=float mdlval="0.8737445310185438"><A>dec:0.873744531019</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000688396671395934"><A>I:0.000688396671396</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00041699999999999994"><A>cluster_flux:0.000417</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000269"><A>Iapp:0.000269</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.390763074804706"><A>beamgain:0.390763074805</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'df041'"><A>cluster:df041</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004913203675449471"><A>r:0.00491320367545</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dg092G'"><A>name:dg092G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5080914464261832"><A>ra:1.50809144643</A> </A> <A mdltype=float mdlval="0.8702177267457463"><A>dec:0.870217726746</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.014795187690888032"><A>I:0.0147951876909</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.7907078125461822e-05"><A>ex:1.79070781255e-05</A> </A> <A mdltype=float mdlval="1.3002702927357755e-05"><A>ey:1.30027029274e-05</A> </A> <A mdltype=float mdlval="1.855487662502714"><A>pa:1.8554876625</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000267"><A>cluster_flux:0.000267</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000267"><A>Iapp:0.000267</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0180464084389033"><A>beamgain:0.0180464084389</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dg092'"><A>cluster:dg092</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.008515706703312783"><A>r:0.00851570670331</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dh210'"><A>name:dh210</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4927572628708414"><A>ra:1.49275726287</A> </A> <A mdltype=float mdlval="0.8678709744868073"><A>dec:0.867870974487</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003390608256073515"><A>I:0.000339060825607</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00048300000000000003"><A>cluster_flux:0.000483</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000266"><A>Iapp:0.000266</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7845200032280952"><A>beamgain:0.784520003228</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dh210'"><A>cluster:dh210</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0026025937301084683"><A>r:0.00260259373011</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'di251G'"><A>name:di251G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.490112216389444"><A>ra:1.49011221639</A> </A> <A mdltype=float mdlval="0.8690656349065048"><A>dec:0.869065634907</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003968836823045322"><A>I:0.000396883682305</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.492477494633404e-05"><A>ex:4.49247749463e-05</A> </A> <A mdltype=float mdlval="1.3212142437597073e-05"><A>ey:1.32121424376e-05</A> </A> <A mdltype=float mdlval="1.7488400515978864"><A>pa:1.7488400516</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000265"><A>cluster_flux:0.000265</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000265"><A>Iapp:0.000265</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6677019283364319"><A>beamgain:0.667701928336</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'di251'"><A>cluster:di251</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003242194963006696"><A>r:0.00324219496301</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'G195a'"><A>name:G195a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4890258187432477"><A>ra:1.48902581874</A> </A> <A mdltype=float mdlval="0.8536914134981222"><A>dec:0.853691413498</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.02896142820269427"><A>I:0.0289614282027</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.011000000000000001"><A>cluster_flux:0.011</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000264"><A>Iapp:0.000264</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.009115572552303903"><A>beamgain:0.0091155725523</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'G195'"><A>cluster:G195</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016828158843751686"><A>r:0.0168281588438</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dj241G'"><A>name:dj241G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4873352055633033"><A>ra:1.48733520556</A> </A> <A mdltype=float mdlval="0.8674540851416759"><A>dec:0.867454085142</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000982639931443642"><A>I:0.000982639931444</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.3666664657043108e-05"><A>ex:2.3666664657e-05</A> </A> <A mdltype=float mdlval="6.544984694978736e-06"><A>ey:6.54498469498e-06</A> </A> <A mdltype=float mdlval="2.353594211406261"><A>pa:2.35359421141</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000428"><A>cluster_flux:0.000428</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000263"><A>Iapp:0.000263</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.26764635914359236"><A>beamgain:0.267646359144</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dj241'"><A>cluster:dj241</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005538136695297449"><A>r:0.0055381366953</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dk258G'"><A>name:dk258G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4592674139446762"><A>ra:1.45926741394</A> </A> <A mdltype=float mdlval="0.8632375092951977"><A>dec:0.863237509295</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.11646526609927536"><A>I:0.116465266099</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.860815628196958e-05"><A>ex:5.8608156282e-05</A> </A> <A mdltype=float mdlval="2.3823744289722596e-05"><A>ey:2.38237442897e-05</A> </A> <A mdltype=float mdlval="1.5899181540797465"><A>pa:1.58991815408</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000262"><A>cluster_flux:0.000262</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000262"><A>Iapp:0.000262</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0022495977451051407"><A>beamgain:0.00224959774511</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dk258'"><A>cluster:dk258</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.024051109471022816"><A>r:0.024051109471</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dl351G'"><A>name:dl351G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4935586133436023"><A>ra:1.49355861334</A> </A> <A mdltype=float mdlval="0.8738445383846831"><A>dec:0.873844538385</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0004581155105801508"><A>I:0.00045811551058</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.7925268031909274e-05"><A>ex:2.79252680319e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.3998829088031512"><A>pa:2.3998829088</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00026"><A>cluster_flux:0.00026</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00026"><A>Iapp:0.00026</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5675424516204216"><A>beamgain:0.56754245162</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dl351'"><A>cluster:dl351</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0038583082499356"><A>r:0.00385830824994</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dm273'"><A>name:dm273</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4770481476855861"><A>ra:1.47704814769</A> </A> <A mdltype=float mdlval="0.8702604873124202"><A>dec:0.870260487312</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.012791613613256186"><A>I:0.0127916136133</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00026"><A>cluster_flux:0.00026</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00026"><A>Iapp:0.00026</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.020325817200306705"><A>beamgain:0.0203258172003</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dm273'"><A>cluster:dm273</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011500343308051377"><A>r:0.0115003433081</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dn164'"><A>name:dn164</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.503073467747067"><A>ra:1.50307346775</A> </A> <A mdltype=float mdlval="0.8566297974669023"><A>dec:0.856629797467</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.008442369486110024"><A>I:0.00844236948611</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000259"><A>cluster_flux:0.000259</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000259"><A>Iapp:0.000259</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0306785909365996"><A>beamgain:0.0306785909366</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dn164'"><A>cluster:dn164</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014466312339052772"><A>r:0.0144663123391</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'do320'"><A>name:do320</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4927367901587156"><A>ra:1.49273679016</A> </A> <A mdltype=float mdlval="0.871523634451966"><A>dec:0.871523634452</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00029583471431229435"><A>I:0.000295834714312</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000259"><A>cluster_flux:0.000259</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000259"><A>Iapp:0.000259</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8754888708787225"><A>beamgain:0.875488870879</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'do320'"><A>cluster:do320</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0019983816046967155"><A>r:0.0019983816047</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dp152'"><A>name:dp152</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5019729503872221"><A>ra:1.50197295039</A> </A> <A mdltype=float mdlval="0.8632132317653025"><A>dec:0.863213231765</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010008421981969084"><A>I:0.010008421982</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000257"><A>cluster_flux:0.000257</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000257"><A>Iapp:0.000257</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.025678373719953518"><A>beamgain:0.02567837372</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dp152'"><A>cluster:dp152</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.008260371663520253"><A>r:0.00826037166352</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dq131'"><A>name:dq131</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4996613490594182"><A>ra:1.49966134906</A> </A> <A mdltype=float mdlval="0.8672471589055595"><A>dec:0.867247158906</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000488715569914203"><A>I:0.000488715569914</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000457"><A>cluster_flux:0.000457</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000256"><A>Iapp:0.000256</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5238220669845701"><A>beamgain:0.523822066985</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dq131'"><A>cluster:dq131</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004189555139573805"><A>r:0.00418955513957</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dr005G'"><A>name:dr005G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.492813951164946"><A>ra:1.49281395116</A> </A> <A mdltype=float mdlval="0.8872544964397011"><A>dec:0.88725449644</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03771783856510834"><A>I:0.0377178385651</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.9915679993110315e-05"><A>ex:3.99156799931e-05</A> </A> <A mdltype=float mdlval="2.118829711921116e-05"><A>ey:2.11882971192e-05</A> </A> <A mdltype=float mdlval="2.7475641895064102"><A>pa:2.74756418951</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000254"><A>cluster_flux:0.000254</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000254"><A>Iapp:0.000254</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00673421409239945"><A>beamgain:0.0067342140924</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dr005'"><A>cluster:dr005</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.017223552273812746"><A>r:0.0172235522738</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'M301c'"><A>name:M301c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4904849139979148"><A>ra:1.490484914</A> </A> <A mdltype=float mdlval="0.8718369210526989"><A>dec:0.871836921053</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003882159546179499"><A>I:0.000388215954618</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=SpectralIndex mdlattr="spectrum" ><A>spectrum:</A> <A mdltype=float mdlval="-2.011820774326965"><A>spi:-2.01182077433</A> </A> <A mdltype=float mdlval="1424500000.12"><A>freq0:1424500000.12</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.006154"><A>cluster_flux:0.006154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000254"><A>Iapp:0.000254</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6542750162083519"><A>beamgain:0.654275016208</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'M301'"><A>cluster:M301</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0033333164818605938"><A>r:0.00333331648186</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'N221c'"><A>name:N221c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4901698297080523"><A>ra:1.49016982971</A> </A> <A mdltype=float mdlval="0.8661794711889444"><A>dec:0.866179471189</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006970904451045248"><A>I:0.000697090445105</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.005606999999999999"><A>cluster_flux:0.005607</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000254"><A>Iapp:0.000254</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.364371656194361"><A>beamgain:0.364371656194</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'N221'"><A>cluster:N221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0049508499418081196"><A>r:0.00495084994181</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ds340G'"><A>name:ds340G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4940568873917541"><A>ra:1.49405688739</A> </A> <A mdltype=float mdlval="0.8716323335577802"><A>dec:0.871632333558</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00027340369702445554"><A>I:0.000273403697024</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.70882466048795e-05"><A>ex:3.70882466049e-05</A> </A> <A mdltype=float mdlval="2.326523892908441e-05"><A>ey:2.32652389291e-05</A> </A> <A mdltype=float mdlval="1.3187759140749162"><A>pa:1.31877591407</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000253"><A>cluster_flux:0.000253</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000253"><A>Iapp:0.000253</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9253715394249755"><A>beamgain:0.925371539425</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ds340'"><A>cluster:ds340</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0016397269727082525"><A>r:0.00163972697271</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dt206G'"><A>name:dt206G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.485763833277855"><A>ra:1.48576383328</A> </A> <A mdltype=float mdlval="0.8513293547016432"><A>dec:0.851329354702</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="1.723461879229338"><A>I:1.72346187923</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.371976114853045e-05"><A>ex:3.37197611485e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.2544362276574208"><A>pa:0.254436227657</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000248"><A>cluster_flux:0.000248</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000248"><A>Iapp:0.000248</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00014389642323327484"><A>beamgain:0.000143896423233</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dt206'"><A>cluster:dt206</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.019672258778132237"><A>r:0.0196722587781</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'du241G'"><A>name:du241G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4905132232383822"><A>ra:1.49051322324</A> </A> <A mdltype=float mdlval="0.8684680167173294"><A>dec:0.868468016717</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003596885409137644"><A>I:0.000359688540914</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010885618544688634"><A>ex:0.000108856185447</A> </A> <A mdltype=float mdlval="3.312634920285237e-05"><A>ey:3.31263492029e-05</A> </A> <A mdltype=float mdlval="0.6369338424249456"><A>pa:0.636933842425</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00043599999999999997"><A>cluster_flux:0.000436</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00024"><A>Iapp:0.00024</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6672439421903635"><A>beamgain:0.66724394219</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'du241'"><A>cluster:du241</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0032500617103900613"><A>r:0.00325006171039</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dv326G'"><A>name:dv326G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4758527716808953"><A>ra:1.47585277168</A> </A> <A mdltype=float mdlval="0.8834491725248703"><A>dec:0.883449172525</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.1108554744287197"><A>I:0.110855474429</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.391174736624983e-05"><A>ex:3.39117473662e-05</A> </A> <A mdltype=float mdlval="2.3596851486963335e-05"><A>ey:2.3596851487e-05</A> </A> <A mdltype=float mdlval="3.0884419847991773"><A>pa:3.0884419848</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00024"><A>cluster_flux:0.00024</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00024"><A>Iapp:0.00024</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0021649810371279455"><A>beamgain:0.00216498103713</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dv326'"><A>cluster:dv326</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018079512625512315"><A>r:0.0180795126255</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'S270a'"><A>name:S270a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4908542780275145"><A>ra:1.49085427803</A> </A> <A mdltype=float mdlval="0.8700428796612815"><A>dec:0.870042879661</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00029900767291410194"><A>I:0.000299007672914</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00249"><A>cluster_flux:0.00249</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000233"><A>Iapp:0.000233</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7792442171440047"><A>beamgain:0.779244217144</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'S270'"><A>cluster:S270</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0025989130331000965"><A>r:0.0025989130331</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'al080a'"><A>name:al080a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4990156121427654"><A>ra:1.49901561214</A> </A> <A mdltype=float mdlval="0.8701679499554794"><A>dec:0.870167949955</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00028960458010105633"><A>I:0.000289604580101</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0013720000000000002"><A>cluster_flux:0.001372</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000231"><A>Iapp:0.000231</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7976393188235956"><A>beamgain:0.797639318824</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'al080'"><A>cluster:al080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002664829754604486"><A>r:0.0026648297546</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dw352'"><A>name:dw352</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.492424760195044"><A>ra:1.4924247602</A> </A> <A mdltype=float mdlval="0.8779870075511215"><A>dec:0.877987007551</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.007576669845425439"><A>I:0.00757666984543</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000231"><A>cluster_flux:0.000231</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000231"><A>Iapp:0.000231</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03048832860778152"><A>beamgain:0.0304883286078</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dw352'"><A>cluster:dw352</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.008061361655113265"><A>r:0.00806136165511</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bs233aG'"><A>name:bs233aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4811144506834677"><A>ra:1.48111445068</A> </A> <A mdltype=float mdlval="0.8628864363161591"><A>dec:0.862886436316</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01236035204869662"><A>I:0.0123603520487</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.3387411976724018e-05"><A>ex:2.33874119767e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.0346688098809116"><A>pa:1.03466880988</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000665"><A>cluster_flux:0.000665</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00023"><A>Iapp:0.00023</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.018607884232897165"><A>beamgain:0.0186078842329</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bs233'"><A>cluster:bs233</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011457273813077951"><A>r:0.0114572738131</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dx291G'"><A>name:dx291G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4873169494193275"><A>ra:1.48731694942</A> </A> <A mdltype=float mdlval="0.8720031985705364"><A>dec:0.872003198571</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007184299875963401"><A>I:0.000718429987596</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.037093882648386e-05"><A>ex:6.03709388265e-05</A> </A> <A mdltype=float mdlval="1.7418385934903408e-05"><A>ey:1.74183859349e-05</A> </A> <A mdltype=float mdlval="0.025877839739687245"><A>pa:0.0258778397397</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000226"><A>cluster_flux:0.000226</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000226"><A>Iapp:0.000226</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.31457484222802407"><A>beamgain:0.314574842228</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dx291'"><A>cluster:dx291</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005238841209161269"><A>r:0.00523884120916</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dy035G'"><A>name:dy035G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5062309254435573"><A>ra:1.50623092544</A> </A> <A mdltype=float mdlval="0.8845179423456216"><A>dec:0.884517942346</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.015099312498001156"><A>I:0.015099312498</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.2252947962927702e-05"><A>ex:2.22529479629e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.0514345823019093"><A>pa:1.0514345823</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000225"><A>cluster_flux:0.000225</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000225"><A>Iapp:0.000225</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.014901340708710112"><A>beamgain:0.0149013407087</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dy035'"><A>cluster:dy035</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016155654434759168"><A>r:0.0161556544348</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dz020G'"><A>name:dz020G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.496144196457384"><A>ra:1.49614419646</A> </A> <A mdltype=float mdlval="0.8728706795686553"><A>dec:0.872870679569</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003015114639467302"><A>I:0.000301511463947</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010068804454755287"><A>ex:0.000100688044548</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7023866738877538"><A>pa:0.702386673888</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000225"><A>cluster_flux:0.000225</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000225"><A>Iapp:0.000225</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7462402823918897"><A>beamgain:0.746240282392</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dz020'"><A>cluster:dz020</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0029044554057082155"><A>r:0.00290445540571</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ea004G'"><A>name:ea004G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.495570593998716"><A>ra:1.495570594</A> </A> <A mdltype=float mdlval="0.88300029129455"><A>dec:0.883000291295</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0070439881083481995"><A>I:0.00704398810835</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.7523105690023066e-05"><A>ex:1.752310569e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.8797125532677148"><A>pa:1.87971255327</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000223"><A>cluster_flux:0.000223</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000223"><A>Iapp:0.000223</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031658202224349445"><A>beamgain:0.0316582022243</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ea004'"><A>cluster:ea004</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012926044561792896"><A>r:0.0129260445618</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bm255aG'"><A>name:bm255aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4715664001176298"><A>ra:1.47156640012</A> </A> <A mdltype=float mdlval="0.8629332460466975"><A>dec:0.862933246047</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.02279610744235327"><A>I:0.0227961074424</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.662142739040609e-05"><A>ex:9.66214273904e-05</A> </A> <A mdltype=float mdlval="7.567747636647413e-05"><A>ey:7.56774763665e-05</A> </A> <A mdltype=float mdlval="0.11291191174950067"><A>pa:0.11291191175</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000891"><A>cluster_flux:0.000891</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000223"><A>Iapp:0.000223</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.009782371861683918"><A>beamgain:0.00978237186168</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bm255'"><A>cluster:bm255</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016704737666165564"><A>r:0.0167047376662</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'eb231'"><A>name:eb231</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4890017681061554"><A>ra:1.48900176811</A> </A> <A mdltype=float mdlval="0.8664778701311578"><A>dec:0.866477870131</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006967553707358792"><A>I:0.000696755370736</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00022"><A>cluster_flux:0.00022</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00022"><A>Iapp:0.00022</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.31574927046152035"><A>beamgain:0.315749270462</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eb231'"><A>cluster:eb231</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005237919418214676"><A>r:0.00523791941821</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dh210a'"><A>name:dh210a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4929728459400478"><A>ra:1.49297284594</A> </A> <A mdltype=float mdlval="0.8679112915925283"><A>dec:0.867911291593</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002705165151769336"><A>I:0.000270516515177</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00048300000000000003"><A>cluster_flux:0.000483</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000217"><A>Iapp:0.000217</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8021691387606014"><A>beamgain:0.802169138761</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dh210'"><A>cluster:dh210</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0024967694857390187"><A>r:0.00249676948574</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ec346'"><A>name:ec346</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4861471424881783"><A>ra:1.48614714249</A> </A> <A mdltype=float mdlval="0.8887909970466943"><A>dec:0.888790997047</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="2.728147817248216"><A>I:2.72814781725</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000217"><A>cluster_flux:0.000217</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000217"><A>Iapp:0.000217</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="7.954114459196717e-05"><A>beamgain:7.9541144592e-05</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ec346'"><A>cluster:ec346</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.019520936083281194"><A>r:0.0195209360833</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ed205'"><A>name:ed205</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.485352912958766"><A>ra:1.48535291296</A> </A> <A mdltype=float mdlval="0.8564272694605009"><A>dec:0.856427269461</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.008730058488475053"><A>I:0.00873005848848</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000217"><A>cluster_flux:0.000217</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000217"><A>Iapp:0.000217</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.024856649046105656"><A>beamgain:0.0248566490461</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ed205'"><A>cluster:ed205</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014994044257691276"><A>r:0.0149940442577</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ee274'"><A>name:ee274</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.474373971658973"><A>ra:1.47437397166</A> </A> <A mdltype=float mdlval="0.8701311060549699"><A>dec:0.870131106055</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006348981854194458"><A>I:0.00634898185419</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000216"><A>cluster_flux:0.000216</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000216"><A>Iapp:0.000216</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03402120292048078"><A>beamgain:0.0340212029205</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ee274'"><A>cluster:ee274</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013224043723996643"><A>r:0.013224043724</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ef010G'"><A>name:ef010G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4952573946644456"><A>ra:1.49525739466</A> </A> <A mdltype=float mdlval="0.8717875456881601"><A>dec:0.871787545688</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00023259839087501374"><A>I:0.000232598390875</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.820525732615587e-05"><A>ex:3.82052573262e-05</A> </A> <A mdltype=float mdlval="2.1205750411731104e-05"><A>ey:2.12057504117e-05</A> </A> <A mdltype=float mdlval="1.3817479170856473"><A>pa:1.38174791709</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000214"><A>cluster_flux:0.000214</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000214"><A>Iapp:0.000214</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9200407586439084"><A>beamgain:0.920040758644</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ef010'"><A>cluster:ef010</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0017226675346709156"><A>r:0.00172266753467</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'eg340'"><A>name:eg340</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4945069030860882"><A>ra:1.49450690309</A> </A> <A mdltype=float mdlval="0.870774975469323"><A>dec:0.870774975469</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021282382575745412"><A>I:0.000212823825757</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000407"><A>cluster_flux:0.000407</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000214"><A>Iapp:0.000214</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0055265158323312"><A>beamgain:1.00552651583</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eg340'"><A>cluster:eg340</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0007347544283484926"><A>r:0.000734754428348</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'eh125G'"><A>name:eh125G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.516440490702486"><A>ra:1.5164404907</A> </A> <A mdltype=float mdlval="0.8613114337458669"><A>dec:0.861311433746</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.015778538251266513"><A>I:0.0157785382513</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.951351765122411e-05"><A>ex:2.95135176512e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.015541179147969"><A>pa:2.01554117915</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000212"><A>cluster_flux:0.000212</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000212"><A>Iapp:0.000212</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.013435972117568189"><A>beamgain:0.0134359721176</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eh125'"><A>cluster:eh125</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01649500517464391"><A>r:0.0164950051746</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cs171aG'"><A>name:cs171aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4966942544244428"><A>ra:1.49669425442</A> </A> <A mdltype=float mdlval="0.865089513071074"><A>dec:0.865089513071</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000606551647194209"><A>I:0.000606551647194</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.841837990603273e-05"><A>ex:8.8418379906e-05</A> </A> <A mdltype=float mdlval="4.4331363000655975e-05"><A>ey:4.43313630007e-05</A> </A> <A mdltype=float mdlval="0.5526950548385412"><A>pa:0.552695054839</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0005239999999999999"><A>cluster_flux:0.000524</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000212"><A>Iapp:0.000212</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.34951681523027944"><A>beamgain:0.34951681523</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cs171'"><A>cluster:cs171</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005127525028315087"><A>r:0.00512752502832</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ei084G'"><A>name:ei084G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5149485308980037"><A>ra:1.5149485309</A> </A> <A mdltype=float mdlval="0.871293495336798"><A>dec:0.871293495337</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006809978299654974"><A>I:0.00680997829965</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="7.579964941411372e-05"><A>ex:7.57996494141e-05</A> </A> <A mdltype=float mdlval="2.6424284875194147e-05"><A>ey:2.64242848752e-05</A> </A> <A mdltype=float mdlval="0.022515602562060328"><A>pa:0.0225156025621</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000209"><A>cluster_flux:0.000209</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000209"><A>Iapp:0.000209</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.030690259322939246"><A>beamgain:0.0306902593229</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ei084'"><A>cluster:ei084</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012983792057010276"><A>r:0.012983792057</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ej080'"><A>name:ej080</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4969149862149422"><A>ra:1.49691498621</A> </A> <A mdltype=float mdlval="0.8702064170121934"><A>dec:0.870206417012</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002141107406224036"><A>I:0.000214110740622</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000208"><A>cluster_flux:0.000208</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000208"><A>Iapp:0.000208</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.971459906193215"><A>beamgain:0.971459906193</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ej080'"><A>cluster:ej080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0013149932870228432"><A>r:0.00131499328702</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ek080'"><A>name:ek080</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4975455213138102"><A>ra:1.49754552131</A> </A> <A mdltype=float mdlval="0.8703569691134704"><A>dec:0.870356969113</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00022315962589376128"><A>I:0.000223159625894</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000207"><A>cluster_flux:0.000207</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000207"><A>Iapp:0.000207</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9275871438256742"><A>beamgain:0.927587143826</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ek080'"><A>cluster:ek080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001737374021691399"><A>r:0.00173737402169</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ch070aG'"><A>name:ch070aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4967153554550992"><A>ra:1.49671535546</A> </A> <A mdltype=float mdlval="0.8706767832456058"><A>dec:0.870676783246</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021344317248145822"><A>I:0.000213443172481</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.78554548618295e-05"><A>ex:2.78554548618e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7780008646155506"><A>pa:0.778000864616</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000767"><A>cluster_flux:0.000767</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000207"><A>Iapp:0.000207</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9698131713160423"><A>beamgain:0.969813171316</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ch070'"><A>cluster:ch070</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0013215886092540698"><A>r:0.00132158860925</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'el002'"><A>name:el002</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4943516735024158"><A>ra:1.4943516735</A> </A> <A mdltype=float mdlval="0.8760383474412698"><A>dec:0.876038347441</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0009483438256831594"><A>I:0.000948343825683</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000207"><A>cluster_flux:0.000207</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000207"><A>Iapp:0.000207</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.21827526514540568"><A>beamgain:0.218275265145</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'el002'"><A>cluster:el002</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0059664760894847175"><A>r:0.00596647608948</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'em324G'"><A>name:em324G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4801536818368297"><A>ra:1.48015368184</A> </A> <A mdltype=float mdlval="0.879421877635771"><A>dec:0.879421877636</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005845863616972254"><A>I:0.00584586361697</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.0962140930379406e-05"><A>ex:3.09621409304e-05</A> </A> <A mdltype=float mdlval="1.270599695451872e-05"><A>ey:1.27059969545e-05</A> </A> <A mdltype=float mdlval="2.550537129294716"><A>pa:2.55053712929</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000206"><A>cluster_flux:0.000206</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000206"><A>Iapp:0.000206</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.035238591506295436"><A>beamgain:0.0352385915063</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'em324'"><A>cluster:em324</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013283335041780852"><A>r:0.0132833350418</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'en171G'"><A>name:en171G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4960703690300248"><A>ra:1.49607036903</A> </A> <A mdltype=float mdlval="0.8664750252444771"><A>dec:0.866475025244</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00033813730275418903"><A>I:0.000338137302754</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.368706440527308e-05"><A>ex:6.36870644053e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8437590937908729"><A>pa:0.843759093791</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000205"><A>cluster_flux:0.000205</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000205"><A>Iapp:0.000205</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6062625990396155"><A>beamgain:0.60626259904</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'en171'"><A>cluster:en171</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003687166725879393"><A>r:0.00368716672588</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'eo164'"><A>name:eo164</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.503703165087894"><A>ra:1.50370316509</A> </A> <A mdltype=float mdlval="0.8571555429974806"><A>dec:0.857155542997</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00629177722777114"><A>I:0.00629177722777</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000204"><A>cluster_flux:0.000204</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000204"><A>Iapp:0.000204</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.032423271297586445"><A>beamgain:0.0324232712976</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eo164'"><A>cluster:eo164</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014138916341574123"><A>r:0.0141389163416</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bg191a'"><A>name:bg191a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4932021472971748"><A>ra:1.4932021473</A> </A> <A mdltype=float mdlval="0.8647037254932132"><A>dec:0.864703725493</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007087044176143703"><A>I:0.000708704417614</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000732"><A>cluster_flux:0.000732</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000202"><A>Iapp:0.000202</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.28502714951314856"><A>beamgain:0.285027149513</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bg191'"><A>cluster:bg191</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005486964705494673"><A>r:0.00548696470549</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ep230G'"><A>name:ep230G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.492449840576395"><A>ra:1.49244984058</A> </A> <A mdltype=float mdlval="0.8685352817067014"><A>dec:0.868535281707</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00023921923219858156"><A>I:0.000239219232199</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.117158044061873e-05"><A>ex:3.11715804406e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.6416187769195374"><A>pa:2.64161877692</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000202"><A>cluster_flux:0.000202</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000202"><A>Iapp:0.000202</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8444137126579982"><A>beamgain:0.844413712658</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ep230'"><A>cluster:ep230</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0022045883897187503"><A>r:0.00220458838972</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dq131a'"><A>name:dq131a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4996121831343894"><A>ra:1.49961218313</A> </A> <A mdltype=float mdlval="0.8675179467390064"><A>dec:0.867517946739</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003579167546523645"><A>I:0.000357916754652</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000457"><A>cluster_flux:0.000457</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000201"><A>Iapp:0.000201</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5615830982688313"><A>beamgain:0.561583098269</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dq131'"><A>cluster:dq131</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003986562974339203"><A>r:0.00398656297434</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'eq121G'"><A>name:eq121G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4995375703088667"><A>ra:1.49953757031</A> </A> <A mdltype=float mdlval="0.8679855378989081"><A>dec:0.867985537899</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003216037372839361"><A>I:0.000321603737284</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.050909193878839e-05"><A>ex:4.05090919388e-05</A> </A> <A mdltype=float mdlval="1.70518667919846e-05"><A>ey:1.7051866792e-05</A> </A> <A mdltype=float mdlval="2.977542315504178"><A>pa:2.9775423155</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000338"><A>cluster_flux:0.000338</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.0002"><A>Iapp:0.0002</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6218833204149766"><A>beamgain:0.621883320415</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eq121'"><A>cluster:eq121</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0036629101512556128"><A>r:0.00366291015126</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'er190'"><A>name:er190</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4946998666881888"><A>ra:1.49469986669</A> </A> <A mdltype=float mdlval="0.868780884439042"><A>dec:0.868780884439</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00020562175346106775"><A>I:0.000205621753461</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000198"><A>cluster_flux:0.000198</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000198"><A>Iapp:0.000198</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9629331365345503"><A>beamgain:0.962933136535</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'er190'"><A>cluster:er190</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0013062631899897425"><A>r:0.00130626318999</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'es250G'"><A>name:es250G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4918452236169193"><A>ra:1.49184522362</A> </A> <A mdltype=float mdlval="0.8694519460831412"><A>dec:0.869451946083</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00022943021333847623"><A>I:0.000229430213338</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.5917402778188288e-05"><A>ex:1.59174027782e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8120795701780462"><A>pa:0.812079570178</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000198"><A>cluster_flux:0.000198</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000198"><A>Iapp:0.000198</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.863007522500502"><A>beamgain:0.863007522501</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'es250'"><A>cluster:es250</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002059038187435446"><A>r:0.00205903818744</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'et162'"><A>name:et162</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4992642866545893"><A>ra:1.49926428665</A> </A> <A mdltype=float mdlval="0.8638583578167172"><A>dec:0.863858357817</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.001611077173118112"><A>I:0.00161107717312</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000197"><A>cluster_flux:0.000197</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000197"><A>Iapp:0.000197</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.12227843785951119"><A>beamgain:0.12227843786</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'et162'"><A>cluster:et162</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006838361086689553"><A>r:0.00683836108669</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'du241aG'"><A>name:du241aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4906116598081947"><A>ra:1.49061165981</A> </A> <A mdltype=float mdlval="0.8685608682335355"><A>dec:0.868560868234</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00028600182916579595"><A>I:0.000286001829166</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.7718038363452476e-05"><A>ex:5.77180383635e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.46592435301285373"><A>pa:0.465924353013</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00043599999999999997"><A>cluster_flux:0.000436</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000196"><A>Iapp:0.000196</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6853103022861379"><A>beamgain:0.685310302286</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'du241'"><A>cluster:du241</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003149064537992861"><A>r:0.00314906453799</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'eu260'"><A>name:eu260</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4931936475437175"><A>ra:1.49319364754</A> </A> <A mdltype=float mdlval="0.8698992390638424"><A>dec:0.869899239064</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002001206341371704"><A>I:0.000200120634137</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000195"><A>cluster_flux:0.000195</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000195"><A>Iapp:0.000195</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9744122630869712"><A>beamgain:0.974412263087</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eu260'"><A>cluster:eu260</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001105502249573205"><A>r:0.00110550224957</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cp211b'"><A>name:cp211b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4922403137996931"><A>ra:1.4922403138</A> </A> <A mdltype=float mdlval="0.8676237485982623"><A>dec:0.867623748598</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00027176922491310273"><A>I:0.000271769224913</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0008990000000000001"><A>cluster_flux:0.000899</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000195"><A>Iapp:0.000195</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7175205362650998"><A>beamgain:0.717520536265</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cp211'"><A>cluster:cp211</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0029927701046349323"><A>r:0.00299277010463</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ev211'"><A>name:ev211</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4915041688277872"><A>ra:1.49150416883</A> </A> <A mdltype=float mdlval="0.8667341542785207"><A>dec:0.866734154279</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003643854022725176"><A>I:0.000364385402273</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000195"><A>cluster_flux:0.000195</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000195"><A>Iapp:0.000195</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5351476727219793"><A>beamgain:0.535147672722</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ev211'"><A>cluster:ev211</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003996910022895243"><A>r:0.0039969100229</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'E090b'"><A>name:E090b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4979588501872676"><A>ra:1.49795885019</A> </A> <A mdltype=float mdlval="0.8699602732277847"><A>dec:0.869960273228</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021622971669364632"><A>I:0.000216229716694</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.012365"><A>cluster_flux:0.012365</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000194"><A>Iapp:0.000194</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8971939794698001"><A>beamgain:0.89719397947</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'E090'"><A>cluster:E090</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001986066514177124"><A>r:0.00198606651418</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'eg340a'"><A>name:eg340a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4945765940831204"><A>ra:1.49457659408</A> </A> <A mdltype=float mdlval="0.870692264316071"><A>dec:0.870692264316</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0001909673108899285"><A>I:0.00019096731089</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000407"><A>cluster_flux:0.000407</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000193"><A>Iapp:0.000193</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0106441730817644"><A>beamgain:1.01064417308</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eg340'"><A>cluster:eg340</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0006420125049228217"><A>r:0.000642012504923</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ew156G'"><A>name:ew156G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5076163678037904"><A>ra:1.5076163678</A> </A> <A mdltype=float mdlval="0.8543634874331877"><A>dec:0.854363487433</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04967388986371956"><A>I:0.0496738898637</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="0.00010405653000390193"><A>ex:0.000104056530004</A> </A> <A mdltype=float mdlval="9.896016858807849e-06"><A>ey:9.89601685881e-06</A> </A> <A mdltype=float mdlval="2.4872400936173866"><A>pa:2.48724009362</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000192"><A>cluster_flux:0.000192</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000192"><A>Iapp:0.000192</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0038652096811172326"><A>beamgain:0.00386520968112</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ew156'"><A>cluster:ew156</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01776795034802084"><A>r:0.017767950348</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ex101'"><A>name:ex101</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5020528690136707"><A>ra:1.50205286901</A> </A> <A mdltype=float mdlval="0.8690309552142678"><A>dec:0.869030955214</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0004490613029539293"><A>I:0.000449061302954</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000192"><A>cluster_flux:0.000192</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000192"><A>Iapp:0.000192</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4275585509974301"><A>beamgain:0.427558550997</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ex101'"><A>cluster:ex101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004742619357907228"><A>r:0.00474261935791</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ey060'"><A>name:ey060</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4985874479706658"><A>ra:1.49858744797</A> </A> <A mdltype=float mdlval="0.8715046103631192"><A>dec:0.871504610363</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00024344928970226748"><A>I:0.000243449289702</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000189"><A>cluster_flux:0.000189</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000189"><A>Iapp:0.000189</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7763423759877977"><A>beamgain:0.776342375988</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ey060'"><A>cluster:ey060</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.002777630614749777"><A>r:0.00277763061475</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ez270'"><A>name:ez270</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4914097290619617"><A>ra:1.49140972906</A> </A> <A mdltype=float mdlval="0.8699896820256806"><A>dec:0.869989682026</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00022376348954072738"><A>I:0.000223763489541</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000187"><A>cluster_flux:0.000187</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000187"><A>Iapp:0.000187</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8357038066568226"><A>beamgain:0.835703806657</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ez270'"><A>cluster:ez270</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0022424397697173646"><A>r:0.00224243976972</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fa351'"><A>name:fa351</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4932666372130359"><A>ra:1.49326663721</A> </A> <A mdltype=float mdlval="0.8754723371648481"><A>dec:0.875472337165</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006519326288746158"><A>I:0.000651932628875</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000186"><A>cluster_flux:0.000186</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000186"><A>Iapp:0.000186</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.28530555422740284"><A>beamgain:0.285305554227</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fa351'"><A>cluster:fa351</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005490006858799096"><A>r:0.0054900068588</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fb015'"><A>name:fb015</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4991465467432497"><A>ra:1.49914654674</A> </A> <A mdltype=float mdlval="0.8861226853263678"><A>dec:0.886122685326</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.013019302286957897"><A>I:0.013019302287</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000184"><A>cluster_flux:0.000184</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000184"><A>Iapp:0.000184</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.014132861803533223"><A>beamgain:0.0141328618035</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fb015'"><A>cluster:fb015</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016270229564917187"><A>r:0.0162702295649</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'P310a'"><A>name:P310a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4925435473039348"><A>ra:1.4925435473</A> </A> <A mdltype=float mdlval="0.8711541831559038"><A>dec:0.871154183156</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00020582094936085277"><A>I:0.000205820949361</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.003063"><A>cluster_flux:0.003063</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000184"><A>Iapp:0.000184</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8939809119109858"><A>beamgain:0.893980911911</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'P310'"><A>cluster:P310</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0018508266706583943"><A>r:0.00185082667066</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fc084'"><A>name:fc084</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.513972019181513"><A>ra:1.51397201918</A> </A> <A mdltype=float mdlval="0.8720642850943563"><A>dec:0.872064285094</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006776521503519559"><A>I:0.00677652150352</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000183"><A>cluster_flux:0.000183</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000183"><A>Iapp:0.000183</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02700500543013909"><A>beamgain:0.0270050054301</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fc084'"><A>cluster:fc084</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012451191573877012"><A>r:0.0124511915739</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'al080b'"><A>name:al080b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4986591286430453"><A>ra:1.49865912864</A> </A> <A mdltype=float mdlval="0.870151526407218"><A>dec:0.870151526407</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021951533224342577"><A>I:0.000219515332243</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0013720000000000002"><A>cluster_flux:0.001372</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000183"><A>Iapp:0.000183</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8336547526305222"><A>beamgain:0.833654752631</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'al080'"><A>cluster:al080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00243462309352666"><A>r:0.00243462309353</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fd212'"><A>name:fd212</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4890796970572568"><A>ra:1.48907969706</A> </A> <A mdltype=float mdlval="0.8641338405858519"><A>dec:0.864133840586</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0019310399946764767"><A>I:0.00193103999468</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000183"><A>cluster_flux:0.000183</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000183"><A>Iapp:0.000183</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0947675866395815"><A>beamgain:0.0947675866396</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fd212'"><A>cluster:fd212</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007034473446284618"><A>r:0.00703447344628</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'A0f'"><A>name:A0f</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4949212442505115"><A>ra:1.49492124425</A> </A> <A mdltype=float mdlval="0.870117789192777"><A>dec:0.870117789193</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00017708251203196756"><A>I:0.000177082512032</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000182"><A>Iapp:0.000182</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0277694726125453"><A>beamgain:1.02776947261</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="4.31572770053713e-05"><A>r:4.31572770054e-05</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bm255bG'"><A>name:bm255bG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4716613983888158"><A>ra:1.47166139839</A> </A> <A mdltype=float mdlval="0.8631413940132904"><A>dec:0.863141394013</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.016603130630882357"><A>I:0.0166031306309</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.84518132632176e-05"><A>ex:6.84518132632e-05</A> </A> <A mdltype=float mdlval="3.855432317655474e-05"><A>ey:3.85543231766e-05</A> </A> <A mdltype=float mdlval="0.3454590227798645"><A>pa:0.34545902278</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000891"><A>cluster_flux:0.000891</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000182"><A>Iapp:0.000182</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.010961788113711166"><A>beamgain:0.0109617881137</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bm255'"><A>cluster:bm255</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01655920034899309"><A>r:0.016559200349</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fe259G'"><A>name:fe259G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.457714332709789"><A>ra:1.45771433271</A> </A> <A mdltype=float mdlval="0.858673927086838"><A>dec:0.858673927087</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="3.722566776356147"><A>I:3.72256677636</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.7456238975653326e-05"><A>ex:5.74562389757e-05</A> </A> <A mdltype=float mdlval="4.283037984394085e-05"><A>ey:4.28303798439e-05</A> </A> <A mdltype=float mdlval="2.0917697432257603"><A>pa:2.09176974323</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000181"><A>cluster_flux:0.000181</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000181"><A>Iapp:0.000181</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="4.862236485578179e-05"><A>beamgain:4.86223648558e-05</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fe259'"><A>cluster:fe259</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02668728494025974"><A>r:0.0266872849403</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ff066G'"><A>name:ff066G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5208386506043416"><A>ra:1.5208386506</A> </A> <A mdltype=float mdlval="0.8780726683108093"><A>dec:0.878072668311</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.16427991913287066"><A>I:0.164279919133</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.2516957192509374e-05"><A>ex:5.25169571925e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.1225619678551415"><A>pa:1.12256196786</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00018"><A>cluster_flux:0.00018</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00018"><A>Iapp:0.00018</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0010956908242352788"><A>beamgain:0.00109569082424</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ff066'"><A>cluster:ff066</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01847224230946617"><A>r:0.0184722423095</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fg055G'"><A>name:fg055G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5133141871331435"><A>ra:1.51331418713</A> </A> <A mdltype=float mdlval="0.8799361563531638"><A>dec:0.879936156353</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.008314775637276443"><A>I:0.00831477563728</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.029891581462156e-05"><A>ex:3.02989158146e-05</A> </A> <A mdltype=float mdlval="1.4154620233674013e-05"><A>ey:1.41546202337e-05</A> </A> <A mdltype=float mdlval="0.16660359770164987"><A>pa:0.166603597702</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00018"><A>cluster_flux:0.00018</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00018"><A>Iapp:0.00018</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.021648208905725823"><A>beamgain:0.0216482089057</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fg055'"><A>cluster:fg055</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015383569738623978"><A>r:0.0153835697386</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'A0g'"><A>name:A0g</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4947782668781884"><A>ra:1.49477826688</A> </A> <A mdltype=float mdlval="0.8701319612663033"><A>dec:0.870131961266</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0001752783733917841"><A>I:0.000175278373392</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00018"><A>Iapp:0.00018</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0269378732632466"><A>beamgain:1.02693787326</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="8.497279219269588e-05"><A>r:8.49727921927e-05</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fh092G'"><A>name:fh092G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5049698203392363"><A>ra:1.50496982034</A> </A> <A mdltype=float mdlval="0.8703301608561598"><A>dec:0.870330160856</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0010882811118068008"><A>I:0.00108828111181</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.214896482173555e-05"><A>ex:3.21489648217e-05</A> </A> <A mdltype=float mdlval="1.942551457469689e-05"><A>ey:1.94255145747e-05</A> </A> <A mdltype=float mdlval="0.9530120274833226"><A>pa:0.953012027483</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000178"><A>cluster_flux:0.000178</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000178"><A>Iapp:0.000178</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.1635606812145057"><A>beamgain:0.163560681215</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fh092'"><A>cluster:fh092</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006506402369930851"><A>r:0.00650640236993</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fi153G'"><A>name:fi153G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5048026701567727"><A>ra:1.50480267016</A> </A> <A mdltype=float mdlval="0.8606992769640224"><A>dec:0.860699276964</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.010919805781931516"><A>I:0.0109198057819</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.4801865284766934e-05"><A>ex:3.48018652848e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.367986440764301"><A>pa:2.36798644076</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000178"><A>cluster_flux:0.000178</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000178"><A>Iapp:0.000178</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.016300656216297192"><A>beamgain:0.0163006562163</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fi153'"><A>cluster:fi153</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011374426225093067"><A>r:0.0113744262251</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cc150a'"><A>name:cc150a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4971078101907027"><A>ra:1.49710781019</A> </A> <A mdltype=float mdlval="0.8677049762216501"><A>dec:0.867704976222</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00023033986063413485"><A>I:0.000230339860634</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000577"><A>cluster_flux:0.000577</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000178"><A>Iapp:0.000178</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.772771154371453"><A>beamgain:0.772771154371</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cc150'"><A>cluster:cc150</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0027765983026782725"><A>r:0.00277659830268</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ch070b'"><A>name:ch070b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4965507360000512"><A>ra:1.496550736</A> </A> <A mdltype=float mdlval="0.8703139292941162"><A>dec:0.870313929294</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0001799521444839762"><A>I:0.000179952144484</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000767"><A>cluster_flux:0.000767</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000178"><A>Iapp:0.000178</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.989151868739469"><A>beamgain:0.989151868739</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ch070'"><A>cluster:ch070</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.001098975902329455"><A>r:0.00109897590233</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fj182'"><A>name:fj182</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.494011945163515"><A>ra:1.49401194516</A> </A> <A mdltype=float mdlval="0.8628833296300905"><A>dec:0.86288332963</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002076618111313575"><A>I:0.00207661811131</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000173"><A>cluster_flux:0.000173</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000173"><A>Iapp:0.000173</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.08330852892858959"><A>beamgain:0.0833085289286</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fj182'"><A>cluster:fj182</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007220511498606846"><A>r:0.00722051149861</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fk220'"><A>name:fk220</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4939326024957196"><A>ra:1.4939326025</A> </A> <A mdltype=float mdlval="0.8692674996877905"><A>dec:0.869267499688</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0001747733849492259"><A>I:0.000174773384949</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000172"><A>cluster_flux:0.000172</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000172"><A>Iapp:0.000172</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.9841315372473239"><A>beamgain:0.984131537247</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fk220'"><A>cluster:fk220</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0010198053897728374"><A>r:0.00101980538977</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fl081G'"><A>name:fl081G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5020020101192675"><A>ra:1.50200201012</A> </A> <A mdltype=float mdlval="0.8706937652992278"><A>dec:0.870693765299</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00037791687445499193"><A>I:0.000377916874455</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.4977871437821384e-05"><A>ex:5.49778714378e-05</A> </A> <A mdltype=float mdlval="2.399827721492203e-05"><A>ey:2.39982772149e-05</A> </A> <A mdltype=float mdlval="1.2943387912728728"><A>pa:1.29433879127</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000169"><A>cluster_flux:0.000169</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000169"><A>Iapp:0.000169</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4471882877516946"><A>beamgain:0.447188287752</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fl081'"><A>cluster:fl081</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004628073268797277"><A>r:0.0046280732688</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fm186G'"><A>name:fm186G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4953766879188197"><A>ra:1.49537668792</A> </A> <A mdltype=float mdlval="0.849958311307739"><A>dec:0.849958311308</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.30361058515430306"><A>I:0.303610585154</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.0351275692181393e-05"><A>ex:3.03512756922e-05</A> </A> <A mdltype=float mdlval="1.736602605734358e-05"><A>ey:1.73660260573e-05</A> </A> <A mdltype=float mdlval="2.965639937950448"><A>pa:2.96563993795</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000167"><A>cluster_flux:0.000167</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000167"><A>Iapp:0.000167</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0005500466985204949"><A>beamgain:0.00055004669852</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fm186'"><A>cluster:fm186</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0201259511947221"><A>r:0.0201259511947</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fn149G'"><A>name:fn149G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.524600864886648"><A>ra:1.52460086489</A> </A> <A mdltype=float mdlval="0.8485847022798345"><A>dec:0.84858470228</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.11326516551203365"><A>I:0.113265165512</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.452334921837534e-05"><A>ex:4.45233492184e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.427485011670761"><A>pa:2.42748501167</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000166"><A>cluster_flux:0.000166</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000166"><A>Iapp:0.000166</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0014655874050028526"><A>beamgain:0.001465587405</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fn149'"><A>cluster:fn149</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02895705074194904"><A>r:0.0289570507419</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'A0h'"><A>name:A0h</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4948470328507169"><A>ra:1.49484703285</A> </A> <A mdltype=float mdlval="0.8700469637317312"><A>dec:0.870046963732</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00016156574322970772"><A>I:0.00016156574323</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000166"><A>Iapp:0.000166</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0274455257757693"><A>beamgain:1.02744552578</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="4.23245758336201e-05"><A>r:4.23245758336e-05</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fo181'"><A>name:fo181</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4943139045774028"><A>ra:1.49431390458</A> </A> <A mdltype=float mdlval="0.8647599250951273"><A>dec:0.864759925095</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00053406470905919"><A>I:0.000534064709059</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000166"><A>cluster_flux:0.000166</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000166"><A>Iapp:0.000166</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.31082375821541564"><A>beamgain:0.310823758215</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fo181'"><A>cluster:fo181</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005334559202167436"><A>r:0.00533455920217</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fp234'"><A>name:fp234</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4782891291436315"><A>ra:1.47828912914</A> </A> <A mdltype=float mdlval="0.8606322563207457"><A>dec:0.860632256321</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005613835570835469"><A>I:0.00561383557084</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000166"><A>cluster_flux:0.000166</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000166"><A>Iapp:0.000166</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.029569800879525106"><A>beamgain:0.0295698008795</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fp234'"><A>cluster:fp234</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014319995225417718"><A>r:0.0143199952254</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fq154'"><A>name:fq154</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.505164372190956"><A>ra:1.50516437219</A> </A> <A mdltype=float mdlval="0.8602292772497527"><A>dec:0.86022927725</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.007155195775666683"><A>I:0.00715519577567</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000165"><A>cluster_flux:0.000165</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000165"><A>Iapp:0.000165</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.023060165671655038"><A>beamgain:0.0230601656717</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fq154'"><A>cluster:fq154</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011895926334634455"><A>r:0.0118959263346</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fr091'"><A>name:fr091</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5019141153381372"><A>ra:1.50191411534</A> </A> <A mdltype=float mdlval="0.8699963317301308"><A>dec:0.86999633173</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00035508511926026745"><A>I:0.00035508511926</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000165"><A>cluster_flux:0.000165</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000165"><A>Iapp:0.000165</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4646773155229285"><A>beamgain:0.464677315523</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fr091'"><A>cluster:fr091</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004533449503141569"><A>r:0.00453344950314</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fs052G'"><A>name:fs052G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5019408886888628"><A>ra:1.50194088869</A> </A> <A mdltype=float mdlval="0.8738076072177109"><A>dec:0.873807607218</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006838467203289275"><A>I:0.000683846720329</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.6162485487394997e-05"><A>ex:2.61624854874e-05</A> </A> <A mdltype=float mdlval="6.19591884457987e-06"><A>ey:6.19591884458e-06</A> </A> <A mdltype=float mdlval="1.674766532813995"><A>pa:1.67476653281</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000165"><A>cluster_flux:0.000165</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000165"><A>Iapp:0.000165</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.24128213983483854"><A>beamgain:0.241282139835</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fs052'"><A>cluster:fs052</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005872854646673546"><A>r:0.00587285464667</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'dj241a'"><A>name:dj241a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4872674344284484"><A>ra:1.48726743443</A> </A> <A mdltype=float mdlval="0.8672313287692439"><A>dec:0.867231328769</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0006698274171574189"><A>I:0.000669827417157</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000428"><A>cluster_flux:0.000428</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000165"><A>Iapp:0.000165</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.24633210850075232"><A>beamgain:0.246332108501</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'dj241'"><A>cluster:dj241</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005685613379383803"><A>r:0.00568561337938</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cu251a'"><A>name:cu251a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.489477352874031"><A>ra:1.48947735287</A> </A> <A mdltype=float mdlval="0.8688160877300546"><A>dec:0.86881608773</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002801137470120461"><A>I:0.000280113747012</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000468"><A>cluster_flux:0.000468</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000163"><A>Iapp:0.000163</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.581906463851595"><A>beamgain:0.581906463852</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cu251'"><A>cluster:cu251</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003711424354376261"><A>r:0.00371142435438</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ft225G'"><A>name:ft225G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4796708364992655"><A>ra:1.4796708365</A> </A> <A mdltype=float mdlval="0.8591497212942243"><A>dec:0.859149721294</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0060867204286367115"><A>I:0.00608672042864</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="1.5812683023068626e-05"><A>ex:1.58126830231e-05</A> </A> <A mdltype=float mdlval="1.1938052083641214e-05"><A>ey:1.19380520836e-05</A> </A> <A mdltype=float mdlval="0.5557639196222004"><A>pa:0.555763919622</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000163"><A>cluster_flux:0.000163</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000163"><A>Iapp:0.000163</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02677961012191722"><A>beamgain:0.0267796101219</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ft225'"><A>cluster:ft225</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01472995620762919"><A>r:0.0147299562076</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fu088G'"><A>name:fu088G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5314323802849268"><A>ra:1.53143238028</A> </A> <A mdltype=float mdlval="0.8755821009215059"><A>dec:0.875582100922</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.07355207517034314"><A>I:0.0735520751703</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.235987755982989e-05"><A>ex:5.23598775598e-05</A> </A> <A mdltype=float mdlval="1.996656664281513e-05"><A>ey:1.99665666428e-05</A> </A> <A mdltype=float mdlval="2.0296644881748622"><A>pa:2.02966448817</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000162"><A>cluster_flux:0.000162</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000162"><A>Iapp:0.000162</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002202521133833623"><A>beamgain:0.00220252113383</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fu088'"><A>cluster:fu088</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.024122368858180598"><A>r:0.0241223688582</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fv101G'"><A>name:fv101G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5008605996950484"><A>ra:1.5008605997</A> </A> <A mdltype=float mdlval="0.8695707331920319"><A>dec:0.869570733192</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002745629005272173"><A>I:0.000274562900527</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.2132248143143114e-05"><A>ex:4.21322481431e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.4499803863234501"><A>pa:0.449980386323</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00016"><A>cluster_flux:0.00016</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00016"><A>Iapp:0.00016</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.5827444264784757"><A>beamgain:0.582744426478</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fv101'"><A>cluster:fv101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0038880381383596617"><A>r:0.00388803813836</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fw234G'"><A>name:fw234G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4774114205160962"><A>ra:1.47741142052</A> </A> <A mdltype=float mdlval="0.8617303651262231"><A>dec:0.861730365126</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005138133629271287"><A>I:0.00513813362927</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.21307749152881e-05"><A>ex:2.21307749153e-05</A> </A> <A mdltype=float mdlval="1.2653637076958888e-05"><A>ey:1.2653637077e-05</A> </A> <A mdltype=float mdlval="0.39397708159020445"><A>pa:0.39397708159</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000159"><A>cluster_flux:0.000159</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000159"><A>Iapp:0.000159</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03094508852284367"><A>beamgain:0.0309450885228</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fw234'"><A>cluster:fw234</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014068410606097833"><A>r:0.0140684106061</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fx282G'"><A>name:fx282G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4852431317488153"><A>ra:1.48524313175</A> </A> <A mdltype=float mdlval="0.8712494083198926"><A>dec:0.87124940832</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0009545382633463356"><A>I:0.000954538263346</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="9.878563566287905e-06"><A>ex:9.87856356629e-06</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6715466187385515"><A>pa:0.671546618739</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000156"><A>cluster_flux:0.000156</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000156"><A>Iapp:0.000156</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.1634298026494077"><A>beamgain:0.163429802649</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fx282'"><A>cluster:fx282</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006320905953209571"><A>r:0.00632090595321</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fy004G'"><A>name:fy004G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4950696845033937"><A>ra:1.4950696845</A> </A> <A mdltype=float mdlval="0.8831372123743689"><A>dec:0.883137212374</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0048021923126122254"><A>I:0.00480219231261</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.181808887778414e-05"><A>ex:4.18180888778e-05</A> </A> <A mdltype=float mdlval="1.3526301702956054e-05"><A>ey:1.3526301703e-05</A> </A> <A mdltype=float mdlval="1.6196888809028371"><A>pa:1.6196888809</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000155"><A>cluster_flux:0.000155</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000155"><A>Iapp:0.000155</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.032276924768905264"><A>beamgain:0.0322769247689</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fy004'"><A>cluster:fy004</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013056048277577325"><A>r:0.0130560482776</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'fz221G'"><A>name:fz221G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4915883809641959"><A>ra:1.49158838096</A> </A> <A mdltype=float mdlval="0.8672943002486558"><A>dec:0.867294300249</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00024666420277594605"><A>I:0.000246664202776</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.839650692994774e-05"><A>ex:2.83965069299e-05</A> </A> <A mdltype=float mdlval="1.9931660057775245e-05"><A>ey:1.99316600578e-05</A> </A> <A mdltype=float mdlval="1.0941931243938379"><A>pa:1.09419312439</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000154"><A>cluster_flux:0.000154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000154"><A>Iapp:0.000154</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.624330560603817"><A>beamgain:0.624330560604</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'fz221'"><A>cluster:fz221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00350730182599096"><A>r:0.00350730182599</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ga246G'"><A>name:ga246G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4691370937850714"><A>ra:1.46913709379</A> </A> <A mdltype=float mdlval="0.8606861171814624"><A>dec:0.860686117181</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="1.813361256131663"><A>I:1.81336125613</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.584979944989104e-05"><A>ex:4.58497994499e-05</A> </A> <A mdltype=float mdlval="2.452187599052033e-05"><A>ey:2.45218759905e-05</A> </A> <A mdltype=float mdlval="1.3788851233267712"><A>pa:1.37888512333</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000154"><A>cluster_flux:0.000154</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000154"><A>Iapp:0.000154</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="8.492516285945093e-05"><A>beamgain:8.49251628595e-05</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ga246'"><A>cluster:ga246</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.019155253874888045"><A>r:0.0191552538749</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gb101'"><A>name:gb101</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4997736260901988"><A>ra:1.49977362609</A> </A> <A mdltype=float mdlval="0.8694133743066721"><A>dec:0.869413374307</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021760453388050194"><A>I:0.000217604533881</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000153"><A>cluster_flux:0.000153</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000153"><A>Iapp:0.000153</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.703110350099692"><A>beamgain:0.7031103501</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gb101'"><A>cluster:gb101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003223598413669475"><A>r:0.00322359841367</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gc111'"><A>name:gc111</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5005320763699455"><A>ra:1.50053207637</A> </A> <A mdltype=float mdlval="0.8687344237743538"><A>dec:0.868734423774</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002608084338892978"><A>I:0.000260808433889</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000152"><A>cluster_flux:0.000152</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000152"><A>Iapp:0.000152</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.58280323888804"><A>beamgain:0.582803238888</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gc111'"><A>cluster:gc111</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0038853069113194004"><A>r:0.00388530691132</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gd32xG'"><A>name:gd32xG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4555502466103636"><A>ra:1.45555024661</A> </A> <A mdltype=float mdlval="0.8944046915061015"><A>dec:0.894404691506</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.21438627718534695"><A>I:0.214386277185</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="8.895943197415098e-05"><A>ex:8.89594319742e-05</A> </A> <A mdltype=float mdlval="9.965830028887622e-06"><A>ey:9.96583002889e-06</A> </A> <A mdltype=float mdlval="2.4891858564806797"><A>pa:2.48918585648</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000151"><A>cluster_flux:0.000151</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000151"><A>Iapp:0.000151</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0007043361262785185"><A>beamgain:0.000704336126279</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gd32x'"><A>cluster:gd32x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.03487238867497411"><A>r:0.034872388675</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'al080c'"><A>name:al080c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4986580465389092"><A>ra:1.49865804654</A> </A> <A mdltype=float mdlval="0.8703063545651625"><A>dec:0.870306354565</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00017903813265050743"><A>I:0.000179038132651</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0013720000000000002"><A>cluster_flux:0.001372</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000149"><A>Iapp:0.000149</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.832224944452791"><A>beamgain:0.832224944453</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'al080'"><A>cluster:al080</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0024430516202742455"><A>r:0.00244305162027</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ge031'"><A>name:ge031</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4977555891425802"><A>ra:1.49775558914</A> </A> <A mdltype=float mdlval="0.8730103059088148"><A>dec:0.873010305909</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00022880800992272575"><A>I:0.000228808009923</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000149"><A>cluster_flux:0.000149</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000149"><A>Iapp:0.000149</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6512009787171396"><A>beamgain:0.651200978717</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ge031'"><A>cluster:ge031</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0034628867180720125"><A>r:0.00346288671807</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gf002'"><A>name:gf002</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4949822958677466"><A>ra:1.49498229587</A> </A> <A mdltype=float mdlval="0.8769048161484224"><A>dec:0.876904816148</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0012513626897773008"><A>I:0.00125136268978</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000149"><A>cluster_flux:0.000149</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000149"><A>Iapp:0.000149</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.11907019540954736"><A>beamgain:0.11907019541</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gf002'"><A>cluster:gf002</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006823403540429901"><A>r:0.00682340354043</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'df041a'"><A>name:df041a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4996184314131116"><A>ra:1.49961843141</A> </A> <A mdltype=float mdlval="0.8736115892894193"><A>dec:0.873611589289</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.000340760784675228"><A>I:0.000340760784675</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00041699999999999994"><A>cluster_flux:0.000417</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000148"><A>Iapp:0.000148</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.43432227725691996"><A>beamgain:0.434322277257</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'df041'"><A>cluster:df041</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004662326276059908"><A>r:0.00466232627606</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gg015'"><A>name:gg015</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4993789722397377"><A>ra:1.49937897224</A> </A> <A mdltype=float mdlval="0.8850262520369725"><A>dec:0.885026252037</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006177948870687285"><A>I:0.00617794887069</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000146"><A>cluster_flux:0.000146</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000146"><A>Iapp:0.000146</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.023632439027252386"><A>beamgain:0.0236324390273</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gg015'"><A>cluster:gg015</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015218006744325349"><A>r:0.0152180067443</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gh295G'"><A>name:gh295G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4728090047318798"><A>ra:1.47280900473</A> </A> <A mdltype=float mdlval="0.8743066666640261"><A>dec:0.874306666664</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0051213177045641095"><A>I:0.00512131770456</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.428047635095116e-05"><A>ex:6.4280476351e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.8451962847067684"><A>pa:2.84519628471</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000146"><A>cluster_flux:0.000146</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000146"><A>Iapp:0.000146</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.028508287988047498"><A>beamgain:0.028508287988</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gh295'"><A>cluster:gh295</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014812911622168776"><A>r:0.0148129116222</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gi13xG'"><A>name:gi13xG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5300598359078659"><A>ra:1.53005983591</A> </A> <A mdltype=float mdlval="0.8512079845054595"><A>dec:0.851207984505</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06536434925685765"><A>I:0.0653643492569</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.955063407804653e-05"><A>ex:5.9550634078e-05</A> </A> <A mdltype=float mdlval="2.2636920398366454e-05"><A>ey:2.26369203984e-05</A> </A> <A mdltype=float mdlval="2.2079129226458183"><A>pa:2.20791292265</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000266"><A>cluster_flux:0.000266</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000145"><A>Iapp:0.000145</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002218334637283755"><A>beamgain:0.00221833463728</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gi13x'"><A>cluster:gi13x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.029698588570806067"><A>r:0.0296985885708</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gj350'"><A>name:gj350</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4940967507118696"><A>ra:1.49409675071</A> </A> <A mdltype=float mdlval="0.8720848101663597"><A>dec:0.872084810166</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00016415703569606316"><A>I:0.000164157035696</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000143"><A>cluster_flux:0.000143</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000143"><A>Iapp:0.000143</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.8711170946383595"><A>beamgain:0.871117094638</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gj350'"><A>cluster:gj350</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0020663564487075486"><A>r:0.00206635644871</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gk291'"><A>name:gk291</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4885650169141362"><A>ra:1.48856501691</A> </A> <A mdltype=float mdlval="0.8715981251044411"><A>dec:0.871598125104</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003058721031003116"><A>I:0.0003058721031</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000143"><A>cluster_flux:0.000143</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000143"><A>Iapp:0.000143</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.46751566602693007"><A>beamgain:0.467515666027</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gk291'"><A>cluster:gk291</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004344190964178054"><A>r:0.00434419096418</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gl113'"><A>name:gl113</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5079245754964001"><A>ra:1.5079245755</A> </A> <A mdltype=float mdlval="0.8666709733595984"><A>dec:0.86667097336</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0308501635591711"><A>I:0.0308501635592</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000142"><A>cluster_flux:0.000142</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000142"><A>Iapp:0.000142</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.004602892938562279"><A>beamgain:0.00460289293856</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gl113'"><A>cluster:gl113</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009088911506246636"><A>r:0.00908891150625</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gm038G'"><A>name:gm038G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5124489052498824"><A>ra:1.51244890525</A> </A> <A mdltype=float mdlval="0.8911184634173989"><A>dec:0.891118463417</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.061534265569952784"><A>I:0.06153426557</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.000441968356505e-05"><A>ex:6.00044196836e-05</A> </A> <A mdltype=float mdlval="2.951351765122411e-05"><A>ey:2.95135176512e-05</A> </A> <A mdltype=float mdlval="0.25076459596329287"><A>pa:0.250764595963</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000141"><A>cluster_flux:0.000141</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000141"><A>Iapp:0.000141</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0022914062383617754"><A>beamgain:0.00229140623836</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gm038'"><A>cluster:gm038</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02382391187991342"><A>r:0.0238239118799</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gn076G'"><A>name:gn076G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5221697783182526"><A>ra:1.52216977832</A> </A> <A mdltype=float mdlval="0.8751977445136317"><A>dec:0.875197744514</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.08289667539499954"><A>I:0.082896675395</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.646213791594407e-05"><A>ex:6.64621379159e-05</A> </A> <A mdltype=float mdlval="2.0559978588493202e-05"><A>ey:2.05599785885e-05</A> </A> <A mdltype=float mdlval="1.150727916790901"><A>pa:1.15072791679</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00014"><A>cluster_flux:0.00014</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00014"><A>Iapp:0.00014</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0016888493939341386"><A>beamgain:0.00168884939393</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gn076'"><A>cluster:gn076</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018269661035935015"><A>r:0.0182696610359</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'go271'"><A>name:go271</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.487945355216508"><A>ra:1.48794535522</A> </A> <A mdltype=float mdlval="0.8704115804657653"><A>dec:0.870411580466</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003176841188162603"><A>I:0.000317684118816</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00014"><A>cluster_flux:0.00014</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00014"><A>Iapp:0.00014</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.440689325364017"><A>beamgain:0.440689325364</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'go271'"><A>cluster:go271</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004485399944092482"><A>r:0.00448539994409</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'eq121a'"><A>name:eq121a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4995713773364778"><A>ra:1.49957137734</A> </A> <A mdltype=float mdlval="0.8681497035683508"><A>dec:0.868149703568</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00021711401324762028"><A>I:0.000217114013248</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000338"><A>cluster_flux:0.000338</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000138"><A>Iapp:0.000138</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6356107463345071"><A>beamgain:0.635610746335</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'eq121'"><A>cluster:eq121</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0035896296124167653"><A>r:0.00358962961242</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'A0i'"><A>name:A0i</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4949927154833809"><A>ra:1.49499271548</A> </A> <A mdltype=float mdlval="0.8700387781375393"><A>dec:0.870038778138</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00013425466912512943"><A>I:0.000134254669125</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="22.407646722100377"><A>cluster_flux:22.4076467221</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000138"><A>Iapp:0.000138</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="1.0278972113169471"><A>beamgain:1.02789721132</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'A0'"><A>cluster:A0</A> </TD> <TD mdltype=float mdlattr="r" mdlval="8.190201453568703e-05"><A>r:8.19020145357e-05</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="10"><A>cluster_size:10</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'H194b'"><A>name:H194b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4905728087790453"><A>ra:1.49057280878</A> </A> <A mdltype=float mdlval="0.8560249885212087"><A>dec:0.856024988521</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004577690977254836"><A>I:0.00457769097725</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020439000000000002"><A>cluster_flux:0.020439</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000137"><A>Iapp:0.000137</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02992775193448217"><A>beamgain:0.0299277519345</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'H194'"><A>cluster:H194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014333461152615362"><A>r:0.0143334611526</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gp034G'"><A>name:gp034G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.504947183418838"><A>ra:1.50494718342</A> </A> <A mdltype=float mdlval="0.8829257133756122"><A>dec:0.882925713376</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0046629219278244965"><A>I:0.00466292192782</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.3440508468211354e-05"><A>ex:3.34405084682e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7557236391227277"><A>pa:0.755723639123</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000136"><A>cluster_flux:0.000136</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000136"><A>Iapp:0.000136</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02916626143544533"><A>beamgain:0.0291662614354</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gp034'"><A>cluster:gp034</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014367315479308161"><A>r:0.0143673154793</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gq033'"><A>name:gq033</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5035453698702212"><A>ra:1.50354536987</A> </A> <A mdltype=float mdlval="0.8794111613141637"><A>dec:0.879411161314</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.015454507684941414"><A>I:0.0154545076849</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000136"><A>cluster_flux:0.000136</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000136"><A>Iapp:0.000136</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.008800021506509449"><A>beamgain:0.00880002150651</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gq033'"><A>cluster:gq033</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.010857078558369603"><A>r:0.0108570785584</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gr266'"><A>name:gr266</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.464949071525156"><A>ra:1.46494907153</A> </A> <A mdltype=float mdlval="0.8670936397445539"><A>dec:0.867093639745</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.8112730910945324"><A>I:0.811273091095</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000135"><A>cluster_flux:0.000135</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000135"><A>Iapp:0.000135</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00016640512483640275"><A>beamgain:0.000166405124836</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gr266'"><A>cluster:gr266</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.019564545638445802"><A>r:0.0195645456384</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gs081'"><A>name:gs081</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5003426034263492"><A>ra:1.50034260343</A> </A> <A mdltype=float mdlval="0.8705936183067483"><A>dec:0.870593618307</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00020839384414880714"><A>I:0.000208393844149</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000134"><A>cluster_flux:0.000134</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000134"><A>Iapp:0.000134</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.6430132355748236"><A>beamgain:0.643013235575</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gs081'"><A>cluster:gs081</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0035551458707533674"><A>r:0.00355514587075</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gt351'"><A>name:gt351</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.494227912205157"><A>ra:1.49422791221</A> </A> <A mdltype=float mdlval="0.8744707974268836"><A>dec:0.874470797427</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0002860224210071341"><A>I:0.000286022421007</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000134"><A>cluster_flux:0.000134</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000134"><A>Iapp:0.000134</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.46849474082543247"><A>beamgain:0.468494740825</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gt351'"><A>cluster:gt351</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004409361516249144"><A>r:0.00440936151625</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'H194c'"><A>name:H194c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.49049159860895"><A>ra:1.49049159861</A> </A> <A mdltype=float mdlval="0.8559157483633264"><A>dec:0.855915748363</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004515317090979741"><A>I:0.00451531709098</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.020439000000000002"><A>cluster_flux:0.020439</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000132"><A>Iapp:0.000132</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.029233827290600853"><A>beamgain:0.0292338272906</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'H194'"><A>cluster:H194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014450984087814055"><A>r:0.0144509840878</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gu288G'"><A>name:gu288G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.45827077858191"><A>ra:1.45827077858</A> </A> <A mdltype=float mdlval="0.8754842054037616"><A>dec:0.875484205404</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.05421926765247324"><A>I:0.0542192676525</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.283185307179586e-05"><A>ex:6.28318530718e-05</A> </A> <A mdltype=float mdlval="5.038765550507629e-05"><A>ey:5.03876555051e-05</A> </A> <A mdltype=float mdlval="1.524837514079926"><A>pa:1.52483751408</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000225"><A>cluster_flux:0.000225</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000132"><A>Iapp:0.000132</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002434558888660658"><A>beamgain:0.00243455888866</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gu288'"><A>cluster:gu288</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.024142855339245827"><A>r:0.0241428553392</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gv174G'"><A>name:gv174G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5001550677982223"><A>ra:1.5001550678</A> </A> <A mdltype=float mdlval="0.8562906101800698"><A>dec:0.85629061018</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00412509461848593"><A>I:0.00412509461849</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.1624629432209744e-05"><A>ex:2.16246294322e-05</A> </A> <A mdltype=float mdlval="1.5742869852988853e-05"><A>ey:1.5742869853e-05</A> </A> <A mdltype=float mdlval="1.0253131818651062"><A>pa:1.02531318187</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000131"><A>cluster_flux:0.000131</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000131"><A>Iapp:0.000131</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031756847324894116"><A>beamgain:0.0317568473249</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gv174'"><A>cluster:gv174</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014210220501072799"><A>r:0.0142102205011</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gw064G'"><A>name:gw064G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5129595013225534"><A>ra:1.51295950132</A> </A> <A mdltype=float mdlval="0.8777496078662652"><A>dec:0.877749607866</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00420870396119081"><A>I:0.00420870396119</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.806563098599633e-05"><A>ex:3.8065630986e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8182476510210568"><A>pa:0.818247651021</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000129"><A>cluster_flux:0.000129</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000129"><A>Iapp:0.000129</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.030650765934009942"><A>beamgain:0.030650765934</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gw064'"><A>cluster:gw064</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013905939056161599"><A>r:0.0139059390562</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gx032'"><A>name:gx032</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5009197489033985"><A>ra:1.5009197489</A> </A> <A mdltype=float mdlval="0.8777413350056108"><A>dec:0.877741335006</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00908305530895856"><A>I:0.00908305530896</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000129"><A>cluster_flux:0.000129</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000129"><A>Iapp:0.000129</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.014202269568122976"><A>beamgain:0.0142022695681</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gx032'"><A>cluster:gx032</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.008583373521527504"><A>r:0.00858337352153</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gy045G'"><A>name:gy045G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5087361885051624"><A>ra:1.50873618851</A> </A> <A mdltype=float mdlval="0.8817446839773727"><A>dec:0.881744683977</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004695637642435678"><A>I:0.00469563764244</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.2393310917014756e-05"><A>ex:3.2393310917e-05</A> </A> <A mdltype=float mdlval="1.0663961729685353e-05"><A>ey:1.06639617297e-05</A> </A> <A mdltype=float mdlval="0.3484309170702829"><A>pa:0.34843091707</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000128"><A>cluster_flux:0.000128</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000128"><A>Iapp:0.000128</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.027259343617836107"><A>beamgain:0.0272593436178</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gy045'"><A>cluster:gy045</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014652016293153278"><A>r:0.0146520162932</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gz105G'"><A>name:gz105G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5170291204460136"><A>ra:1.51702912045</A> </A> <A mdltype=float mdlval="0.8669449376922841"><A>dec:0.866944937692</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004317793720176379"><A>I:0.00431779372018</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.8518679977587346e-05"><A>ex:2.85186799776e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.37420949947875"><A>pa:2.37420949948</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000127"><A>cluster_flux:0.000127</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000127"><A>Iapp:0.000127</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02941316983406334"><A>beamgain:0.0294131698341</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gz105'"><A>cluster:gz105</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014644251893552424"><A>r:0.0146442518936</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ha331'"><A>name:ha331</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4899072798286748"><A>ra:1.48990727983</A> </A> <A mdltype=float mdlval="0.8746835530627017"><A>dec:0.874683553063</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00048213695351193784"><A>I:0.000482136953512</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000127"><A>cluster_flux:0.000127</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000127"><A>Iapp:0.000127</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.263410632756768"><A>beamgain:0.263410632757</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ha331'"><A>cluster:ha331</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005605304840002477"><A>r:0.00560530484</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hb246G'"><A>name:hb246G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.471646161664446"><A>ra:1.47164616166</A> </A> <A mdltype=float mdlval="0.8606911786362931"><A>dec:0.860691178636</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.039617822538598677"><A>I:0.0396178225386</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.654940437854378e-05"><A>ex:6.65494043785e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.9802714873121811"><A>pa:0.980271487312</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000127"><A>cluster_flux:0.000127</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000127"><A>Iapp:0.000127</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0032056279689845904"><A>beamgain:0.00320562796898</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hb246'"><A>cluster:hb246</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.017752943019952797"><A>r:0.01775294302</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hc111'"><A>name:hc111</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5018143697713857"><A>ra:1.50181436977</A> </A> <A mdltype=float mdlval="0.8686462671938356"><A>dec:0.868646267194</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00028933192920472714"><A>I:0.000289331929205</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000126"><A>cluster_flux:0.000126</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000126"><A>Iapp:0.000126</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.4354859843721023"><A>beamgain:0.435485984372</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hc111'"><A>cluster:hc111</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004696635588045357"><A>r:0.00469663558805</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hd182'"><A>name:hd182</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.494141570767061"><A>ra:1.49414157077</A> </A> <A mdltype=float mdlval="0.8640941168920766"><A>dec:0.864094116892</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0005926909596606095"><A>I:0.000592690959661</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000126"><A>cluster_flux:0.000126</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000126"><A>Iapp:0.000126</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.21258971129262866"><A>beamgain:0.212589711293</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hd182'"><A>cluster:hd182</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00600685190856849"><A>r:0.00600685190857</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'he332G'"><A>name:he332G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4894998850746743"><A>ra:1.48949988507</A> </A> <A mdltype=float mdlval="0.8767948429522542"><A>dec:0.876794842952</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0022183287264869"><A>I:0.00221832872649</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.93048147549123e-05"><A>ex:3.93048147549e-05</A> </A> <A mdltype=float mdlval="3.090978105281957e-05"><A>ey:3.09097810528e-05</A> </A> <A mdltype=float mdlval="0.33884867550439857"><A>pa:0.338848675504</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000126"><A>cluster_flux:0.000126</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000126"><A>Iapp:0.000126</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.05679951690457635"><A>beamgain:0.0567995169046</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'he332'"><A>cluster:he332</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.007551406056479882"><A>r:0.00755140605648</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hf222G'"><A>name:hf222G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.488781420288091"><A>ra:1.48878142029</A> </A> <A mdltype=float mdlval="0.8652140772197888"><A>dec:0.86521407722</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0007296053171167158"><A>I:0.000729605317117</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.9112091923265415e-05"><A>ex:2.91120919233e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.8921152558597978"><A>pa:0.89211525586</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000126"><A>cluster_flux:0.000126</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000126"><A>Iapp:0.000126</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.17269610986105743"><A>beamgain:0.172696109861</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hf222'"><A>cluster:hf222</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.006266397425867981"><A>r:0.00626639742587</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'G195b'"><A>name:G195b</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.48897541363445"><A>ra:1.48897541363</A> </A> <A mdltype=float mdlval="0.8536295241228464"><A>dec:0.853629524123</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.01453010833162101"><A>I:0.0145301083316</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.011000000000000001"><A>cluster_flux:0.011</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000125"><A>Iapp:0.000125</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.008602826430961285"><A>beamgain:0.00860282643096</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'G195'"><A>cluster:G195</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01689591495029935"><A>r:0.0168959149503</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="3"><A>cluster_size:3</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hg011'"><A>name:hg011</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4969411487004298"><A>ra:1.4969411487</A> </A> <A mdltype=float mdlval="0.8751026240693981"><A>dec:0.875102624069</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.00036390250857058445"><A>I:0.000363902508571</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000123"><A>cluster_flux:0.000123</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000123"><A>Iapp:0.000123</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.33800261636872525"><A>beamgain:0.338002616369</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hg011'"><A>cluster:hg011</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005192065299395909"><A>r:0.0051920652994</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gi13xaG'"><A>name:gi13xaG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5302568312205385"><A>ra:1.53025683122</A> </A> <A mdltype=float mdlval="0.8510730531009878"><A>dec:0.851073053101</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.05064768937243134"><A>I:0.0506476893724</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.544911033585985e-05"><A>ex:5.54491103359e-05</A> </A> <A mdltype=float mdlval="2.049016541841343e-05"><A>ey:2.04901654184e-05</A> </A> <A mdltype=float mdlval="2.2198230669147203"><A>pa:2.21982306691</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000266"><A>cluster_flux:0.000266</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000121"><A>Iapp:0.000121</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002389052718876115"><A>beamgain:0.00238905271888</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gi13x'"><A>cluster:gi13x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02988486878214216"><A>r:0.0298848687821</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hh274'"><A>name:hh274</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4755722623635146"><A>ra:1.47557226236</A> </A> <A mdltype=float mdlval="0.8691301771822436"><A>dec:0.869130177182</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.003955588014487305"><A>I:0.00395558801449</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000121"><A>cluster_flux:0.000121</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000121"><A>Iapp:0.000121</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.030589636624653173"><A>beamgain:0.0305896366247</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hh274'"><A>cluster:hh274</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012495048590640071"><A>r:0.0124950485906</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hi295G'"><A>name:hi295G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4729943761517341"><A>ra:1.47299437615</A> </A> <A mdltype=float mdlval="0.8738165607567735"><A>dec:0.873816560757</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0039540918852228974"><A>I:0.00395409188522</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.3423791789618924e-05"><A>ex:4.34237917896e-05</A> </A> <A mdltype=float mdlval="3.1223940318178555e-05"><A>ey:3.12239403182e-05</A> </A> <A mdltype=float mdlval="1.295618466680435"><A>pa:1.29561846668</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00012"><A>cluster_flux:0.00012</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.00012"><A>Iapp:0.00012</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.030348308406403013"><A>beamgain:0.0303483084064</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hi295'"><A>cluster:hi295</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014569359259102117"><A>r:0.0145693592591</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hj105'"><A>name:hj105</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5195627276546713"><A>ra:1.51956272765</A> </A> <A mdltype=float mdlval="0.8680395558392573"><A>dec:0.868039555839</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006908560995931712"><A>I:0.00690856099593</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000118"><A>cluster_flux:0.000118</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000118"><A>Iapp:0.000118</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01708025738927215"><A>beamgain:0.0170802573893</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hj105'"><A>cluster:hj105</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016060973887612094"><A>r:0.0160609738876</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hk194'"><A>name:hk194</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4913540006989454"><A>ra:1.4913540007</A> </A> <A mdltype=float mdlval="0.8563105069335425"><A>dec:0.856310506934</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0037245147327935645"><A>I:0.00372451473279</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000118"><A>cluster_flux:0.000118</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000118"><A>Iapp:0.000118</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03168197965792294"><A>beamgain:0.0316819796579</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hk194'"><A>cluster:hk194</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013961084649520157"><A>r:0.0139610846495</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hl14xG'"><A>name:hl14xG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5289168372340274"><A>ra:1.52891683723</A> </A> <A mdltype=float mdlval="0.846579825114776"><A>dec:0.846579825115</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.04195700598091431"><A>I:0.0419570059809</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="7.305948248848263e-05"><A>ex:7.30594824885e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.340658092789867"><A>pa:2.34065809279</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000117"><A>cluster_flux:0.000117</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000117"><A>Iapp:0.000117</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00278856885196293"><A>beamgain:0.00278856885196</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hl14x'"><A>cluster:hl14x</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.03235929777953499"><A>r:0.0323592977795</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hm045G'"><A>name:hm045G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5114096489467823"><A>ra:1.51140964895</A> </A> <A mdltype=float mdlval="0.8816213241058418"><A>dec:0.881621324106</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006077710522348738"><A>I:0.00607771052235</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="6.623524511318481e-05"><A>ex:6.62352451132e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6970039213949707"><A>pa:0.697003921395</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000117"><A>cluster_flux:0.000117</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000117"><A>Iapp:0.000117</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.019250670062315706"><A>beamgain:0.0192506700623</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hm045'"><A>cluster:hm045</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01565656602663837"><A>r:0.0156565660266</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hn175'"><A>name:hn175</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.499080154418504"><A>ra:1.49908015442</A> </A> <A mdltype=float mdlval="0.8537653980051142"><A>dec:0.853765398005</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.009434979537697416"><A>I:0.0094349795377</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000115"><A>cluster_flux:0.000115</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000115"><A>Iapp:0.000115</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.012188685681883893"><A>beamgain:0.0121886856819</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hn175'"><A>cluster:hn175</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016543297260700782"><A>r:0.0165432972607</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ho105G'"><A>name:ho105G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5192722699605543"><A>ra:1.51927226996</A> </A> <A mdltype=float mdlval="0.8673158027050403"><A>dec:0.867315802705</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006394898724925413"><A>I:0.00639489872493</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.1223940318178555e-05"><A>ex:3.12239403182e-05</A> </A> <A mdltype=float mdlval="5.88175957922089e-06"><A>ey:5.88175957922e-06</A> </A> <A mdltype=float mdlval="1.577362988479185"><A>pa:1.57736298848</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000114"><A>cluster_flux:0.000114</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000114"><A>Iapp:0.000114</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01782670921052462"><A>beamgain:0.0178267092105</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ho105'"><A>cluster:ho105</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015990869815160978"><A>r:0.0159908698152</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hp176'"><A>name:hp176</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4986179737792833"><A>ra:1.49861797378</A> </A> <A mdltype=float mdlval="0.8523559922742513"><A>dec:0.852355992274</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.037451314332247035"><A>I:0.0374513143322</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000114"><A>cluster_flux:0.000114</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000114"><A>Iapp:0.000114</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00304395191550972"><A>beamgain:0.00304395191551</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hp176'"><A>cluster:hp176</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.017891799104072088"><A>r:0.0178917991041</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hq035G'"><A>name:hq035G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5091919637860285"><A>ra:1.50919196379</A> </A> <A mdltype=float mdlval="0.8833015351234442"><A>dec:0.883301535123</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.007276076761392004"><A>I:0.00727607676139</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.1834805556376576e-05"><A>ex:3.18348055564e-05</A> </A> <A mdltype=float mdlval="1.614429558094755e-05"><A>ey:1.61442955809e-05</A> </A> <A mdltype=float mdlval="0.6083416491792643"><A>pa:0.608341649179</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000113"><A>cluster_flux:0.000113</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000113"><A>Iapp:0.000113</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.015530347425634042"><A>beamgain:0.0155303474256</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hq035'"><A>cluster:hq035</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.016078668831027876"><A>r:0.016078668831</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hr101'"><A>name:hr101</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5034069129006604"><A>ra:1.5034069129</A> </A> <A mdltype=float mdlval="0.8692238490031982"><A>dec:0.869223849003</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003878588645601122"><A>I:0.00038785886456</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000215"><A>cluster_flux:0.000215</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000113"><A>Iapp:0.000113</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.2913430897812746"><A>beamgain:0.291343089781</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hr101'"><A>cluster:hr101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005564233457827813"><A>r:0.00556423345783</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hs004'"><A>name:hs004</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4951397594728615"><A>ra:1.49513975947</A> </A> <A mdltype=float mdlval="0.8819106298826523"><A>dec:0.881910629883</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004979331649519516"><A>I:0.00497933164952</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000112"><A>cluster_flux:0.000112</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000112"><A>Iapp:0.000112</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02249297855281592"><A>beamgain:0.0224929785528</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hs004'"><A>cluster:hs004</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.011830056978244517"><A>r:0.0118300569782</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ht142'"><A>name:ht142</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5001379635715526"><A>ra:1.50013796357</A> </A> <A mdltype=float mdlval="0.8652165381340341"><A>dec:0.865216538134</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0004781846933216933"><A>I:0.000478184693322</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000111"><A>cluster_flux:0.000111</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000111"><A>Iapp:0.000111</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.23212788186284755"><A>beamgain:0.232127881863</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ht142'"><A>cluster:ht142</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.0059337308080254295"><A>r:0.00593373080803</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'N221dG'"><A>name:N221dG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4900871883679705"><A>ra:1.49008718837</A> </A> <A mdltype=float mdlval="0.8662342919807495"><A>dec:0.866234291981</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003034135332825865"><A>I:0.000303413533283</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.754276882432553e-05"><A>ex:4.75427688243e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.7561465149471934"><A>pa:0.756146514947</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.005606999999999999"><A>cluster_flux:0.005607</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000111"><A>Iapp:0.000111</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.3658373402105941"><A>beamgain:0.365837340211</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'N221'"><A>cluster:N221</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.004941027832725218"><A>r:0.00494102783273</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="5"><A>cluster_size:5</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hu076'"><A>name:hu076</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5220887775876677"><A>ra:1.52208877759</A> </A> <A mdltype=float mdlval="0.8774273677264696"><A>dec:0.877427367726</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.4051774394879799"><A>I:0.405177439488</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000108"><A>cluster_flux:0.000108</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000108"><A>Iapp:0.000108</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0002665498852465204"><A>beamgain:0.000266549885247</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hu076'"><A>cluster:hu076</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018945336393584093"><A>r:0.0189453363936</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hv308G'"><A>name:hv308G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4630288079222344"><A>ra:1.46302880792</A> </A> <A mdltype=float mdlval="0.8832237981585603"><A>dec:0.883223798159</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.043755764656285834"><A>I:0.0437557646563</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.672320068981571e-05"><A>ex:5.67232006898e-05</A> </A> <A mdltype=float mdlval="1.1519173063162575e-05"><A>ey:1.15191730632e-05</A> </A> <A mdltype=float mdlval="1.9358542277040585"><A>pa:1.9358542277</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000107"><A>cluster_flux:0.000107</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000107"><A>Iapp:0.000107</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0024453920721193173"><A>beamgain:0.00244539207212</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hv308'"><A>cluster:hv308</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.024247989352754882"><A>r:0.0242479893528</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hw315G'"><A>name:hw315G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4759227768371928"><A>ra:1.47592277684</A> </A> <A mdltype=float mdlval="0.8792614644242203"><A>dec:0.879261464424</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004206147723040001"><A>I:0.00420614772304</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.4713862208239706e-05"><A>ex:2.47138622082e-05</A> </A> <A mdltype=float mdlval="7.190756518216638e-06"><A>ey:7.19075651822e-06</A> </A> <A mdltype=float mdlval="1.742983861092207"><A>pa:1.74298386109</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000106"><A>cluster_flux:0.000106</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000106"><A>Iapp:0.000106</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.02520120713292217"><A>beamgain:0.0252012071329</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hw315'"><A>cluster:hw315</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015235032948047676"><A>r:0.015235032948</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hx254G'"><A>name:hx254G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.475541928541115"><A>ra:1.47554192854</A> </A> <A mdltype=float mdlval="0.8641681363056537"><A>dec:0.864168136306</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0032984406525964818"><A>I:0.0032984406526</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.509930787153347e-05"><A>ex:4.50993078715e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6404742428126161"><A>pa:0.640474242813</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000106"><A>cluster_flux:0.000106</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000106"><A>Iapp:0.000106</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.032136397517584084"><A>beamgain:0.0321363975176</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hx254'"><A>cluster:hx254</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013841685811576307"><A>r:0.0138416858116</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hy132G'"><A>name:hy132G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5036226006896218"><A>ra:1.50362260069</A> </A> <A mdltype=float mdlval="0.8654771681512344"><A>dec:0.865477168151</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0012325030608133585"><A>I:0.00123250306081</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.607595563872279e-05"><A>ex:3.60759556387e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.0682236110068604"><A>pa:2.06822361101</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000105"><A>cluster_flux:0.000105</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000105"><A>Iapp:0.000105</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.08519248620016244"><A>beamgain:0.0851924862002</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hy132'"><A>cluster:hy132</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.00728810802779868"><A>r:0.0072881080278</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hz229G'"><A>name:hz229G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4700303532962422"><A>ra:1.4700303533</A> </A> <A mdltype=float mdlval="0.8487442602800518"><A>dec:0.84874426028</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="4.62660628533627"><A>I:4.62660628534</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.436700619962337e-05"><A>ex:5.43670061996e-05</A> </A> <A mdltype=float mdlval="1.4398966328953218e-05"><A>ey:1.4398966329e-05</A> </A> <A mdltype=float mdlval="0.39149958671699847"><A>pa:0.391499586717</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000105"><A>cluster_flux:0.000105</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000105"><A>Iapp:0.000105</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="2.269482067942343e-05"><A>beamgain:2.26948206794e-05</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hz229'"><A>cluster:hz229</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.026805578402171702"><A>r:0.0268055784022</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ia304G'"><A>name:ia304G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4773832858085543"><A>ra:1.47738328581</A> </A> <A mdltype=float mdlval="0.877389354455361"><A>dec:0.877389354455</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002938376793122128"><A>I:0.00293837679312</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.832669375986797e-05"><A>ex:2.83266937599e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.2874287969164486"><A>pa:2.28742879692</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000104"><A>cluster_flux:0.000104</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000104"><A>Iapp:0.000104</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03539369091242256"><A>beamgain:0.0353936909124</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ia304'"><A>cluster:ia304</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013402504976076843"><A>r:0.0134025049761</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ib075G'"><A>name:ib075G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5200917194976582"><A>ra:1.5200917195</A> </A> <A mdltype=float mdlval="0.8760297080614724"><A>dec:0.876029708061</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.015650064366549966"><A>I:0.0156500643665</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.6704274169440744e-05"><A>ex:3.67042741694e-05</A> </A> <A mdltype=float mdlval="1.727875959474386e-05"><A>ey:1.72787595947e-05</A> </A> <A mdltype=float mdlval="1.0910137802685276"><A>pa:1.09101378027</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000103"><A>cluster_flux:0.000103</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000103"><A>Iapp:0.000103</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.006581442579888008"><A>beamgain:0.00658144257989</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ib075'"><A>cluster:ib075</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.017252673404092502"><A>r:0.0172526734041</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ic135G'"><A>name:ic135G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5143413483045274"><A>ra:1.5143413483</A> </A> <A mdltype=float mdlval="0.8610888344530675"><A>dec:0.861088834453</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.004480225654096124"><A>I:0.0044802256541</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.146828641345776e-05"><A>ex:3.14682864135e-05</A> </A> <A mdltype=float mdlval="5.044001538263612e-06"><A>ey:5.04400153826e-06</A> </A> <A mdltype=float mdlval="2.6344640090904967"><A>pa:2.63446400909</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000103"><A>cluster_flux:0.000103</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000103"><A>Iapp:0.000103</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.022989913444611987"><A>beamgain:0.0229899134446</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ic135'"><A>cluster:ic135</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01548937594515262"><A>r:0.0154893759452</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'hr101a'"><A>name:hr101a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.503637174188876"><A>ra:1.50363717419</A> </A> <A mdltype=float mdlval="0.8693023015530752"><A>dec:0.869302301553</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.0003765278730157013"><A>I:0.000376527873016</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000215"><A>cluster_flux:0.000215</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000102"><A>Iapp:0.000102</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.27089627969121577"><A>beamgain:0.270896279691</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'hr101'"><A>cluster:hr101</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.005699526009122617"><A>r:0.00569952600912</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'id025G'"><A>name:id025G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5032535508192877"><A>ra:1.50325355082</A> </A> <A mdltype=float mdlval="0.8851567153985591"><A>dec:0.885156715399</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.006213397218524051"><A>I:0.00621339721852</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.55167136641571e-05"><A>ex:2.55167136642e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="1.1900675159578054"><A>pa:1.19006751596</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000102"><A>cluster_flux:0.000102</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000102"><A>Iapp:0.000102</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0164161402229213"><A>beamgain:0.0164161402229</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'id025'"><A>cluster:id025</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.015995331553217047"><A>r:0.0159953315532</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ie006G'"><A>name:ie006G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4967731782132179"><A>ra:1.49677317821</A> </A> <A mdltype=float mdlval="0.8883286069679636"><A>dec:0.888328606968</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06606720999829074"><A>I:0.0660672099983</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.33365253270192e-05"><A>ex:4.3336525327e-05</A> </A> <A mdltype=float mdlval="2.2427480888127134e-05"><A>ey:2.24274808881e-05</A> </A> <A mdltype=float mdlval="2.8515508365270623"><A>pa:2.85155083653</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000101"><A>cluster_flux:0.000101</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000101"><A>Iapp:0.000101</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0015287462570708378"><A>beamgain:0.00152874625707</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ie006'"><A>cluster:ie006</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018286612231879888"><A>r:0.0182866122319</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'if193G'"><A>name:if193G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4923385060234104"><A>ra:1.49233850602</A> </A> <A mdltype=float mdlval="0.8611242122770054"><A>dec:0.861124212277</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03464575769093049"><A>I:0.0346457576909</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.141592653589793e-05"><A>ex:3.14159265359e-05</A> </A> <A mdltype=float mdlval="2.04378055408536e-05"><A>ey:2.04378055409e-05</A> </A> <A mdltype=float mdlval="0.8939116185391205"><A>pa:0.893911618539</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00015900000000000002"><A>cluster_flux:0.000159</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="0.000101"><A>Iapp:0.000101</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0029152198344456932"><A>beamgain:0.00291521983445</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'if193'"><A>cluster:if193</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009108236082137395"><A>r:0.00910823608214</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ig186G'"><A>name:ig186G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.494992418777408"><A>ra:1.49499241878</A> </A> <A mdltype=float mdlval="0.8517965618891095"><A>dec:0.851796561889</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06396067031024755"><A>I:0.0639606703102</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.7995817815916554e-05"><A>ex:3.79958178159e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.5119191544170004"><A>pa:0.511919154417</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="9.5e-05"><A>cluster_flux:9.5e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.5e-05"><A>Iapp:9.5e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0014852877485366104"><A>beamgain:0.00148528774854</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ig186'"><A>cluster:ig186</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018285274674684517"><A>r:0.0182852746747</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ih296'"><A>name:ih296</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4680137649719027"><A>ra:1.46801376497</A> </A> <A mdltype=float mdlval="0.877698173013209"><A>dec:0.877698173013</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.38816090472997955"><A>I:0.38816090473</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="9.4e-05"><A>cluster_flux:9.4e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.4e-05"><A>Iapp:9.4e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.00024216761362247494"><A>beamgain:0.000242167613622</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ih296'"><A>cluster:ih296</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.018853387726647228"><A>r:0.0188533877266</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'gu288aG'"><A>name:gu288aG</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4584206325514861"><A>ra:1.45842063255</A> </A> <A mdltype=float mdlval="0.8755392356350771"><A>dec:0.875539235635</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.036632885637822604"><A>I:0.0366328856378</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="5.2935836212988014e-05"><A>ex:5.2935836213e-05</A> </A> <A mdltype=float mdlval="2.064724505109292e-05"><A>ey:2.06472450511e-05</A> </A> <A mdltype=float mdlval="1.4019205896598306"><A>pa:1.40192058966</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000225"><A>cluster_flux:0.000225</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.3e-05"><A>Iapp:9.3e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0025387025450154454"><A>beamgain:0.00253870254502</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'gu288'"><A>cluster:gu288</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.02406067681437547"><A>r:0.0240606768144</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ii128G'"><A>name:ii128G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5265966837928886"><A>ra:1.52659668379</A> </A> <A mdltype=float mdlval="0.8558110984213767"><A>dec:0.855811098421</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.06653795773106504"><A>I:0.0665379577311</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="4.211479485062318e-05"><A>ex:4.21147948506e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="2.0770970918168024"><A>pa:2.07709709182</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="9.1e-05"><A>cluster_flux:9.1e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.1e-05"><A>Iapp:9.1e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.001367640413127892"><A>beamgain:0.00136764041313</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ii128'"><A>cluster:ii128</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.025074849738159627"><A>r:0.0250748497382</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'bz085a'"><A>name:bz085a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5193265497002915"><A>ra:1.5193265497</A> </A> <A mdltype=float mdlval="0.87226655130137"><A>dec:0.872266551301</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.005044810388944112"><A>I:0.00504481038894</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.000507"><A>cluster_flux:0.000507</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.1e-05"><A>Iapp:9.1e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.01803833900267686"><A>beamgain:0.0180383390027</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'bz085'"><A>cluster:bz085</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.01588959666178983"><A>r:0.0158895966618</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ij094G'"><A>name:ij094G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5142343072615025"><A>ra:1.51423430726</A> </A> <A mdltype=float mdlval="0.8699335696902291"><A>dec:0.86993356969</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.003291030626891089"><A>I:0.00329103062689</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="3.73674992851986e-05"><A>ex:3.73674992852e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.935588737173221"><A>pa:0.935588737173</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="9.1e-05"><A>cluster_flux:9.1e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9.1e-05"><A>Iapp:9.1e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.027650912530693836"><A>beamgain:0.0276509125307</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ij094'"><A>cluster:ij094</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.012477900147781102"><A>r:0.0124779001478</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'ik083G'"><A>name:ik083G</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.5094110200604463"><A>ra:1.50941102006</A> </A> <A mdltype=float mdlval="0.8716276211687999"><A>dec:0.871627621169</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.10150738166626692"><A>I:0.101507381666</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=Gaussian mdlattr="shape" ><A>shape:</A> <A mdltype=float mdlval="2.8047441079548873e-05"><A>ex:2.80474410795e-05</A> </A> <A mdltype=float mdlval="0.0"><A>ey:0.0</A> </A> <A mdltype=float mdlval="0.6605016865397407"><A>pa:0.66050168654</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="9e-05"><A>cluster_flux:9e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9e-05"><A>Iapp:9e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0008866350261688301"><A>beamgain:0.000886635026169</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'ik083'"><A>cluster:ik083</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009484356289588096"><A>r:0.00948435628959</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cg053a'"><A>name:cg053a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.505605643785738"><A>ra:1.50560564379</A> </A> <A mdltype=float mdlval="0.8762176625686198"><A>dec:0.876217662569</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.03277376568774914"><A>I:0.0327737656877</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=bool mdlattr="dE" mdlval="True"><A>dE:True</A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00047200000000000003"><A>cluster_flux:0.000472</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="9e-05"><A>Iapp:9e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.0027460988419051916"><A>beamgain:0.00274609884191</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cg053'"><A>cluster:cg053</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009224175504770674"><A>r:0.00922417550477</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'Z294a'"><A>name:Z294a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4756181645228423"><A>ra:1.47561816452</A> </A> <A mdltype=float mdlval="0.8748978794948465"><A>dec:0.874897879495</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002479451794371511"><A>I:0.00247945179437</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0014370000000000001"><A>cluster_flux:0.001437</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="8.7e-05"><A>Iapp:8.7e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.03508840147547723"><A>beamgain:0.0350884014755</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'Z294'"><A>cluster:Z294</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.013289963995098287"><A>r:0.0132899639951</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'il354'"><A>name:il354</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4892375620880995"><A>ra:1.48923756209</A> </A> <A mdltype=float mdlval="0.883950692885431"><A>dec:0.883950692885</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.002410167230688144"><A>I:0.00241016723069</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="7.6e-05"><A>cluster_flux:7.6e-05</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="7.6e-05"><A>Iapp:7.6e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.031533081618697764"><A>beamgain:0.0315330816187</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'il354'"><A>cluster:il354</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.014331319304368586"><A>r:0.0143313193044</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="1"><A>cluster_size:1</A> </TD> <TD mdltype=bool mdlattr="cluster_lead" mdlval="True"><A>cluster_lead:True</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'cp211c'"><A>name:cp211c</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4921320684794845"><A>ra:1.49213206848</A> </A> <A mdltype=float mdlval="0.8676586726365947"><A>dec:0.867658672637</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="8.111269677687587e-05"><A>I:8.11126967769e-05</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.0008990000000000001"><A>cluster_flux:0.000899</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="5.8e-05"><A>Iapp:5.8e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.7150545143326441"><A>beamgain:0.715054514333</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'cp211'"><A>cluster:cp211</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.003004935271552052"><A>r:0.00300493527155</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="4"><A>cluster_size:4</A> </TD> </TR>
+
+<TR mdltype=Source ><TD mdltype=str mdlval="'if193a'"><A>name:if193a</A> </TD> <TD mdltype=Position ><A mdltype=float mdlval="1.4922124234382463"><A>ra:1.49221242344</A> </A> <A mdltype=float mdlval="0.8611143686200242"><A>dec:0.86111436862</A> </A> </TD> <TD mdltype=Polarization ><A mdltype=float mdlval="0.021971150389285925"><A>I:0.0219711503893</A> </A> <A mdltype=float mdlval="0.0"><A>Q:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>U:0.0</A> </A> <A mdltype=float mdlval="0.0"><A>V:0.0</A> </A> </TD> <TD mdltype=float mdlattr="cluster_flux" mdlval="0.00015900000000000002"><A>cluster_flux:0.000159</A> </TD> <TD mdltype=float mdlattr="Iapp" mdlval="5.8e-05"><A>Iapp:5.8e-05</A> </TD> <TD mdltype=float mdlattr="beamgain" mdlval="0.002639825360636705"><A>beamgain:0.00263982536064</A> </TD> <TD mdltype=str mdlattr="cluster" mdlval="'if193'"><A>cluster:if193</A> </TD> <TD mdltype=float mdlattr="r" mdlval="0.009133063629184715"><A>r:0.00913306362918</A> </TD> <TD mdltype=int mdlattr="cluster_size" mdlval="2"><A>cluster_size:2</A> </TD> </TR>
+
+</TABLE>
+<H1>Plot styles</H1>
+<TABLE BORDER=1 FRAME=box RULES=all CELLPADDING=5>
+<A mdltype=dict mdlattr="plotstyles" ><TR mdltype=PlotStyle mdlattr="current" ><TD bgcolor=yellow>current</TD><TD mdltype=int mdlattr="apply" mdlval="-2"><A>apply:-2</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'%N %BJy'"><A>label:%N %BJy</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'red'"><A>label_color:red</A> </TD> <TD mdltype=int mdlattr="label_size" mdlval="12"><A>label_size:12</A> </TD> <TD mdltype=int mdlattr="show_list" mdlval="2"><A>show_list:2</A> </TD> <TD mdltype=int mdlattr="show_plot" mdlval="2"><A>show_plot:2</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'red'"><A>symbol_color:red</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="default" ><TD bgcolor=yellow>default</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'none'"><A>label:none</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'blue'"><A>label_color:blue</A> </TD> <TD mdltype=int mdlattr="label_size" mdlval="6"><A>label_size:6</A> </TD> <TD mdltype=int mdlattr="show_list" mdlval="2"><A>show_list:2</A> </TD> <TD mdltype=int mdlattr="show_plot" mdlval="2"><A>show_plot:2</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'plus'"><A>symbol:plus</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'yellow'"><A>symbol_color:yellow</A> </TD> <TD mdltype=int mdlattr="symbol_size" mdlval="2"><A>symbol_size:2</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="selected" ><TD bgcolor=yellow>selected</TD><TD mdltype=int mdlattr="apply" mdlval="-1"><A>apply:-1</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'%N'"><A>label:%N</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'green'"><A>label_color:green</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=int mdlattr="show_list" mdlval="2"><A>show_list:2</A> </TD> <TD mdltype=int mdlattr="show_plot" mdlval="2"><A>show_plot:2</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'cyan'"><A>symbol_color:cyan</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:Iapp" ><TD bgcolor=yellow>tag:Iapp</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:beamgain" ><TD bgcolor=yellow>tag:beamgain</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:brick" ><TD bgcolor=yellow>tag:brick</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:cal" ><TD bgcolor=yellow>tag:cal</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=int mdlattr="show_plot" mdlval="2"><A>show_plot:2</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:cluster" ><TD bgcolor=yellow>tag:cluster</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:cluster_flux" ><TD bgcolor=yellow>tag:cluster_flux</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:cluster_lead" ><TD bgcolor=yellow>tag:cluster_lead</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:cluster_size" ><TD bgcolor=yellow>tag:cluster_size</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:dE" ><TD bgcolor=yellow>tag:dE</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'lightblue'"><A>symbol_color:lightblue</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:dE_lead" ><TD bgcolor=yellow>tag:dE_lead</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:dft" ><TD bgcolor=yellow>tag:dft</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:dft_5mJy" ><TD bgcolor=yellow>tag:dft_5mJy</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:flux_intrinsic" ><TD bgcolor=yellow>tag:flux_intrinsic</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:mincal" ><TD bgcolor=yellow>tag:mincal</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:newstar_beamed" ><TD bgcolor=yellow>tag:newstar_beamed</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:newstar_beamgain" ><TD bgcolor=yellow>tag:newstar_beamgain</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:nobeam" ><TD bgcolor=yellow>tag:nobeam</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="tag:r" ><TD bgcolor=yellow>tag:r</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="type:Gau" ><TD bgcolor=yellow>type:Gau</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+<TR mdltype=PlotStyle mdlattr="type:pnt" ><TD bgcolor=yellow>type:pnt</TD><TD mdltype=int mdlattr="apply" mdlval="1000"><A>apply:1000</A> </TD> <TD mdltype=str mdlattr="label" mdlval="'default'"><A>label:default</A> </TD> <TD mdltype=str mdlattr="label_color" mdlval="'default'"><A>label_color:default</A> </TD> <TD mdltype=str mdlattr="label_size" mdlval="'default'"><A>label_size:default</A> </TD> <TD mdltype=str mdlattr="symbol" mdlval="'default'"><A>symbol:default</A> </TD> <TD mdltype=str mdlattr="symbol_color" mdlval="'default'"><A>symbol_color:default</A> </TD> <TD mdltype=str mdlattr="symbol_linewidth" mdlval="'default'"><A>symbol_linewidth:default</A> </TD> <TD mdltype=str mdlattr="symbol_size" mdlval="'default'"><A>symbol_size:default</A> </TD> </TR>
+</A> </TABLE>
+
+<H1>Other properties</H1>
+<P><A mdltype=float mdlattr="ra0" mdlval="1.4948845339009"><A>Field centre ra: 1.4948845339</A> </A> <A mdltype=float mdlattr="dec0" mdlval="0.87008170140032"><A>dec: 0.8700817014</A> </A> </P>
+</BODY></HTML>
--- tigger-lsm-1.7.0.orig/test/3C147-HI6.refmodel.recentred.reference.txt
+++ tigger-lsm-1.7.0/test/3C147-HI6.refmodel.recentred.reference.txt
@@ -1,326 +1,326 @@
-#format: name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0
-A110 85.65057420039344 49.85200936748971 0 0 0 0 9.859337158203125 -4.332709724913578e-06 0.0002639347043305329 0.002161076417922203 -0.7099262475967407 0.0 0 0 0 1385000000.0
-A110a 85.65050986891873 49.85197850280577 0 0 0 0 4.9295166015625 -2.166288075557132e-06 0.00013196325682249821 0.0010805048968762776 -0.7099262475967407 0.0 0 0 0 1385000000.0
-A110b 85.65053129236571 49.85199243784206 0 0 0 0 3.28451904296875 -1.4433898923209287e-06 8.792663370214893e-05 0.0007199364961437026 -0.7099262475967407 0.0 0 0 0 1385000000.0
-A110c 85.65055277967043 49.85199808578795 0 0 0 0 3.2845193481445314 -1.443390026431169e-06 8.792666576973363e-05 0.0007199366586275336 -0.7099262475967407 0.0 0 0 0 1385000000.0
-A110d 85.65062930448465 49.85212044247567 0 0 0 0 1.234733123779297 -5.426064782276373e-07 3.3053832365716185e-05 0.0002706421936292891 -0.7099262475967407 0.0 0 0 0 1385000000.0
-A110e 85.65063791160625 49.852175398105864 0 0 0 0 0.4096230697631836 -1.8000985557485017e-07 1.0965618416099512e-05 8.978562575736592e-05 -0.7099262475967407 0.0 0 0 0 1385000000.0
-B250G 85.490387 49.89720499999999 0 0 0 0 0.03826158067268499 0.0 0.0 0.0 -0.8790400371758633 0 5.2884 0.7236 170.733145 1424500000.12
-C242G 85.182151 49.694903 0 0 0 0 0.0887058836969246 0.0 0.0 0.0 0.010392796216600608 0 3.6396 1.5803999999999998 57.219554 1424500000.12
-D122G 85.827299 49.731663 0 0 0 0 0.0236825399308751 0.0 0.0 0.0 -0.3646974893727074 0 2.5056000000000003 2.2788 131.409384 1424500000.12
-E101 85.80834000000002 49.843773000000006 0 0 0 0 0.0116135023170924 0.0 0.0 0.0 -0.8133517046735592 0 0 0 0 1424500000.12
-F112G 85.89017 49.766488 0 0 0 0 0.014704720808157915 0.0 0.0 0.0 -1.1039561188845133 0 14.0616 4.4676 135.531337 1424500000.12
-G196G 85.31441999999998 48.91178899999999 0 0 0 0 1.184207406832343 0.0 0.0 0.0 7.299087678304995 0 6.8976 5.76 76.54418 1424500000.12
-H195G 85.39953 49.042516 0 0 0 0 0.35345544967760817 0.0 0.0 0.0 1.4805344140241368 0 5.202000000000001 3.9095999999999997 16.493141 1424500000.12
-H195aG 85.403229 49.044472 0 0 0 0 0.3282685168540988 0.0 0.0 0.0 1.5425777742624247 0 5.1084 4.104 42.919008 1424500000.12
-I215G 85.008394 49.088678 0 0 0 0 0.41548313652379487 0.0 0.0 0.0 2.902473484685625 0 6.2748 2.4408 22.447551 1424500000.12
-J051G 85.665143 50.059872 0 0 0 0 0.009638236242744293 0.0 0.0 0.0 -0.5750208422631442 0 4.9428 0.0 20.52962 1424500000.12
-B250aG 85.48794300000002 49.907545000000006 0 0 0 0 0.006188563309864936 0.0 0.0 0.0 -1.6429169879215684 0 20.3868 4.9032 170.715884 1424500000.12
-K277 84.22448400000002 49.997924999999995 0 0 0 0 0.2988771537956234 0.0 0.0 0.0 5.165175111712941 0 0 0 0 1424500000.12
-L114G 86.154162 49.704053 0 0 0 0 0.022095505177117666 0.0 0.0 0.0 -0.8024268552220519 0 9.2088 3.1176 57.79198199999999 1424500000.12
-M300G 85.408689 49.954324 0 0 0 0 0.005747212805681905 0.0 0.0 0.0 -1.0586065366047654 0 9.6264 3.2543999999999995 101.546067 1424500000.12
-N201G 85.379709 49.62849 0 0 0 0 0.010367343216787278 0.0 0.0 0.0 -0.2768832991034338 0 12.3984 4.3271999999999995 162.718033 1424500000.12
-L114aG 86.147901 49.694296 0 0 0 0 0.01782805293839603 0.0 0.0 0.0 -0.9664552563844166 0 8.218799999999998 0.9683999999999999 17.563751 1424500000.12
-O266 84.37459 49.724065 0 0 0 0 0.11264831212331218 0.0 0.0 0.0 2.377467128864789 0 0 0 0 1424500000.12
-P050 85.516442 49.913432 0 0 0 0 0.0032203248876156013 0.0 0.0 0.0 0.2860275029737752 0 0 0 0 1424500000.12
-Q150G 85.586806 49.768743 0 0 0 0 0.0030740429925802384 0.0 0.0 0.0 -0.14273714190432324 0 6.0516 2.8116 74.649051 1424500000.12
-R285 84.66131 50.00818400000001 0 0 0 0 0.13494386596000701 0.0 0.0 0.0 1.0591847681338784 0 0 0 0 1424500000.12
-D122a 85.827251 49.731682 0 0 0 0 0.0032964004284253734 0.0 0.0 0.0 0.33585798933856015 0 0 0 0 1424500000.12
-S240 85.418733 49.849665 0 0 0 0 0.002902823496384571 0.0 0.0 0.0 -1.027955111472692 0 0 0 0 1424500000.12
-T256 84.494951 49.588217 0 0 0 0 0.06391065166847286 0.0 0.0 0.0 2.9704825843232725 0 0 0 0 1424500000.12
-U073 86.00413 50.059927 0 0 0 0 0.005678059562557201 0.0 0.0 0.0 -0.32672087269666683 0 0 0 0 1424500000.12
-M300aG 85.39485600000002 49.95132600000001 0 0 0 0 0.00273737341861733 0.0 0.0 0.0 -0.9563659512415716 0 5.4792 0.0 150.745479 1424500000.12
-V132 85.806663 49.64142600000001 0 0 0 0 0.002883827072369766 0.0 0.0 0.0 -0.15728346165511642 0 0 0 0 1424500000.12
-W192 85.467543 49.566686 0 0 0 0 0.005172285191005143 0.0 0.0 0.0 -0.0031084627207409454 0 0 0 0 1424500000.12
-E101a 85.808339 49.843741 0 0 0 0 0.0015768683632177254 0.0 0.0 0.0 0.15715658899389928 0 0 0 0 1424500000.12
-X251 85.23875100000001 49.782947 0 0 0 0 0.0037566400884037404 0.0 0.0 0.0 -0.7175421667402149 0 0 0 0 1424500000.12
-Y022 85.67483200000001 50.33188100000001 0 0 0 0 0.07327267231113754 0.0 0.0 0.0 4.146707374879245 0 0 0 0 1424500000.12
-Z285 84.548397 50.130852999999995 0 0 0 0 0.03846618057775607 0.0 0.0 0.0 1.7899982099052734 0 0 0 0 1424500000.12
-aa321 85.31420499999999 50.119433 0 0 0 0 0.006244825648635683 0.0 0.0 0.0 -0.08949429026377231 0 0 0 0 1424500000.12
-ab315 84.73995 50.47775 0 0 0 0 0.045127587424326 0.0 0.0 0.0 3.524578316545999 0 0 0 0 1424500000.12
-ac309 84.083643 50.640651 0 0 0 0 0.34474621208322065 0.0 0.0 0.0 5.630595492363389 0 0 0 0 1424500000.12
-ad352 85.41405200000001 50.24308 0 0 0 0 0.01628678211290917 0.0 0.0 0.0 0.8097715901148881 0 0 0 0 1424500000.12
-N201a 85.37977400000001 49.623525 0 0 0 0 0.003294625523059915 0.0 0.0 0.0 -0.5412993214393516 0 0 0 0 1424500000.12
-ae222 85.23026999999999 49.592605 0 0 0 0 0.00820482921818608 0.0 0.0 0.0 2.431047004218636 0 0 0 0 1424500000.12
-af246G 84.54470799999999 49.271746 0 0 0 0 0.06829741031591728 0.0 0.0 0.0 4.835124208223845 0 6.3072 0.0 41.912364 1424500000.12
-ag062 85.866977 50.10652000000001 0 0 0 0 0.0026397108590530413 0.0 0.0 0.0 -0.6008029696851742 0 0 0 0 1424500000.12
-F112a 85.89124 49.765812 0 0 0 0 0.0013103670017206533 0.0 0.0 0.0 2.75136548645074 0 0 0 0 1424500000.12
-ah093 86.12741200000002 49.919226 0 0 0 0 0.0030338243266867775 0.0 0.0 0.0 -0.9084735520890121 0 0 0 0 1424500000.12
-ai287 84.318901 50.178700000000006 0 0 0 0 0.05062809327764703 0.0 0.0 0.0 5.035960640711893 0 0 0 0 1424500000.12
-aj151 85.649095 49.685462 0 0 0 0 0.001171303297573771 0.0 0.0 0.0 -0.7597299927270662 0 0 0 0 1424500000.12
-ak103G 86.09595 49.781892000000006 0 0 0 0 0.0023429366479754067 0.0 0.0 0.0 0 0 20.1456 0.0 37.976114 0
-al092G 85.887436 49.873087000000005 0 0 0 0 0.0010198646261616456 0.0 0.0 0.0 0.5851976105827296 0 15.8976 0.0 158.83801 1424500000.12
-L114b 86.1548 49.704221000000004 0 0 0 0 0.004055863930056866 0.0 0.0 0.0 1.9379210113032612 0 0 0 0 1424500000.12
-am246G 84.603938 49.306862 0 0 0 0 0.033853253624760875 0.0 0.0 0.0 3.046185354407594 0 6.3431999999999995 0.0 47.275424 1424500000.12
-an093 86.11137299999999 49.93751700000001 0 0 0 0 0.002455100302376349 0.0 0.0 0.0 -0.7915066173610139 0 0 0 0 1424500000.12
-ad352a 85.411788 50.242187 0 0 0 0 0.010355667214408469 0.0 0.0 0.0 1.073981466713624 0 0 0 0 1424500000.12
-B250b 85.489125 49.900927 0 0 0 0 0.0008374208096926871 0.0 0.0 0.0 -0.2533724378447622 0 0 0 0 1424500000.12
-ao344G 85.21736500000002 50.515296 0 0 0 0 0.023032200938294563 0.0 0.0 0.0 2.2099402507470467 0 3.9996 1.8395999999999997 119.38237500000001 1424500000.12
-ap163 85.71434 49.434934 0 0 0 0 0.00897535718293354 0.0 0.0 0.0 1.7078435341140903 0 0 0 0 1424500000.12
-aq093G 86.140584 49.93580599999999 0 0 0 0 0.0025671509770156 0.0 0.0 0.0 -1.2294580542263924 0 11.2824 5.8356 146.377815 1424500000.12
-ar086G 86.594289 50.083580999999995 0 0 0 0 0.04719925346734011 0.0 0.0 0.0 -2.061904743868059 0 9.468 2.34 73.090631 1424500000.12
-as250 85.34539400000001 49.853659 0 0 0 0 0.0010495489725337959 0.0 0.0 0.0 0.5467076638942489 0 0 0 0 1424500000.12
-at024G 85.772823 50.570226 0 0 0 0 0.022267239731096435 0.0 0.0 0.0 0 0 28.929599999999997 5.497199999999999 43.963277 0
-au052 85.798692 50.16624699999999 0 0 0 0 0.0024914742957367463 0.0 0.0 0.0 -0.8721995847559127 0 0 0 0 1424500000.12
-av132 85.778557 49.650481000000006 0 0 0 0 0.0010773680371497871 0.0 0.0 0.0 -0.3028886032954041 0 0 0 0 1424500000.12
-ac309aG 84.085934 50.640471 0 0 0 0 0.17331164559313803 0.0 0.0 0.0 5.3224204745015555 0 7.0632 0.0 42.7589 1424500000.12
-aw055G 86.251358 50.54776 0 0 0 0 0.020221095075116376 0.0 0.0 0.0 2.465592230859434 0 5.670000000000001 0.0 52.024985 1424500000.12
-ax214G 85.195879 49.28760700000001 0 0 0 0 0.04526571400459344 0.0 0.0 0.0 0 0 11.556000000000001 4.3668000000000005 80.873909 0
-L114c 86.14774000000001 49.693944 0 0 0 0 0.00313788178025012 0.0 0.0 0.0 2.581965263387142 0 0 0 0 1424500000.12
-ay102 85.834979 49.858217999999994 0 0 0 0 0.0006836974666558675 0.0 0.0 0.0 0.34844517391545904 0 0 0 0 1424500000.12
-az214G 85.21439299999999 49.284831 0 0 0 0 0.04662695211083994 0.0 0.0 0.0 0 0 10.4148 3.3912 111.062388 0
-ba055G 86.298091 50.494159 0 0 0 0 0.019356871728253858 0.0 0.0 0.0 1.3104962402424625 0 6.5196 1.2276 43.564796 1424500000.12
-B250cG 85.48751500000002 49.907757 0 0 0 0 0.0006889420939524911 0.0 0.0 0.0 4.866549689017183 0 8.37 0.0 49.509819 1424500000.12
-bb195 85.38988399999998 48.976066 0 0 0 0 0.02929067630253879 0.0 0.0 0.0 0 0 0 0 0 0
-bc122 85.894653 49.713411 0 0 0 0 0.0009359923942207983 0.0 0.0 0.0 -0.4106888312608168 0 0 0 0 1424500000.12
-ax214aG 85.20422400000001 49.28623 0 0 0 0 0.04304973573415348 0.0 0.0 0.0 0 0 29.7324 7.639200000000001 107.465628 0
-bd31xG 84.05905100000001 50.884712 0 0 0 0 0.5326354721187088 0.0 0.0 0.0 0 0 12.711599999999999 3.3048 134.147563 0
-be220 85.424535 49.80595799999999 0 0 0 0 0.0007319247948674079 0.0 0.0 0.0 -0.7845945636292365 0 0 0 0 1424500000.12
-bf040 85.602535 50.011602 0 0 0 0 0.0007386972230725153 0.0 0.0 0.0 0.24313824664240757 0 0 0 0 1424500000.12
-bg277 84.23605300000001 49.90021800000001 0 0 0 0 0.030816351012871467 0.0 0.0 0.0 0 0 0 0 0 0
-bh172 85.545155 49.54555 0 0 0 0 0.0018540674528342352 0.0 0.0 0.0 0 0 0 0 0 0
-bi265G 84.556756 49.681695 0 0 0 0 0.01674515506394857 0.0 0.0 0.0 0 0 22.0968 3.258 4.329168 0
-bj093 86.036108 49.910209 0 0 0 0 0.001089912353848124 0.0 0.0 0.0 0 0 0 0 0 0
-F112b 85.886639 49.767953 0 0 0 0 0.0007066374511119615 0.0 0.0 0.0 2.4240590023537463 0 0 0 0 1424500000.12
-J051a 85.665063 50.059819 0 0 0 0 0.0008430457198374354 0.0 0.0 0.0 0 0 0 0 0 0
-L114dG 86.149869 49.700471 0 0 0 0 0.0026010863407512725 0.0 0.0 0.0 0 0 28.674 0.0 5.189007 0
-J051b 85.651206 50.06197600000001 0 0 0 0 0.0008393916924586326 0.0 0.0 0.0 -0.5193418922479653 0 0 0 0 1424500000.12
-bk055G 86.186277 50.413227 0 0 0 0 0.03048339102662157 0.0 0.0 0.0 0 0 20.7684 6.6096 128.453681 0
-bl194 85.36135100000001 49.1267 0 0 0 0 0.015622797370746073 0.0 0.0 0.0 0 0 0 0 0 0
-bm041 85.653995 50.09158500000001 0 0 0 0 0.0009679577526259028 0.0 0.0 0.0 0 0 0 0 0 0
-bn257G 84.313251 49.439423000000005 0 0 0 0 0.05116865782016437 0.0 0.0 0.0 0 0 7.8191999999999995 2.4588 46.073707 0
-bo273G 84.951211 49.91433800000001 0 0 0 0 0.01469858102192274 0.0 0.0 0.0 0 0 7.549199999999999 0.0 113.230829 0
-bp043G 85.846438 50.26794300000001 0 0 0 0 0.008012678005919038 0.0 0.0 0.0 0 0 6.667199999999999 0.0 129.933559 0
-bq001 85.48298299999999 50.12788200000001 0 0 0 0 0.001387178757502645 0.0 0.0 0.0 0 0 0 0 0 0
-br173G 85.56139 49.358871 0 0 0 0 0.04300464118194119 0.0 0.0 0.0 0 0 4.8816 0.0 35.812968 0
-aq093a 86.13618700000002 49.934946 0 0 0 0 0.0016013775737705775 0.0 0.0 0.0 -0.44338937381178756 0 0 0 0 1424500000.12
-bs010 85.520362 49.982495 0 0 0 0 0.00057511481246919 0.0 0.0 0.0 0 0 0 0 0 0
-bt234G 84.86789300000001 49.437307 0 0 0 0 0.023845664962735318 0.0 0.0 0.0 0 0 6.537599999999999 1.6667999999999998 86.477453 0
-bu294G 84.81237100000001 50.203188 0 0 0 0 0.025811781623030463 0.0 0.0 0.0 0 0 18.5616 2.3472 106.021414 0
-bv111 85.781557 49.77478800000001 0 0 0 0 0.0004737687560487315 0.0 0.0 0.0 0 0 0 0 0 0
-bw161 85.57135800000002 49.722723 0 0 0 0 0.0005189191484181142 0.0 0.0 0.0 0 0 0 0 0 0
-bx326G 84.828607 50.733878 0 0 0 0 0.1466105144141137 0.0 0.0 0.0 0 0 6.5916 3.4019999999999997 157.431326 0
-bi265aG 84.55894300000001 49.688128 0 0 0 0 0.01361068675963317 0.0 0.0 0.0 0 0 13.708800000000002 9.536399999999999 116.06580700000002 0
-by211 85.37167999999998 49.684562 0 0 0 0 0.0008743829611748795 0.0 0.0 0.0 0 0 0 0 0 0
-bz052 85.85156500000001 50.173682 0 0 0 0 0.001967592407061195 0.0 0.0 0.0 0 0 0 0 0 0
-ca099 87.036583 49.96748900000001 0 0 0 0 0.02109709504682287 0.0 0.0 0.0 0 0 0 0 0 0
-cb257 84.279644 49.559413000000006 0 0 0 0 0.030324440769925624 0.0 0.0 0.0 0 0 0 0 0 0
-cc078G 86.82519700000002 50.488054 0 0 0 0 0.059119906824737785 0.0 0.0 0.0 0 0 10.7172 4.2588 63.181408 0
-cd122 85.775719 49.71049500000001 0 0 0 0 0.000524211758215733 0.0 0.0 0.0 0 0 0 0 0 0
-ce345G 85.220154 50.80178300000001 0 0 0 0 0.06033024161107503 0.0 0.0 0.0 0 0 5.1516 1.7856 142.73436 0
-cf338G 84.728356 51.123196 0 0 0 0 0.187575703106332 0.0 0.0 0.0 0 0 9.1224 2.0952 138.412607 0
-cg236G 84.709742 49.17465700000001 0 0 0 0 0.023417983810154183 0.0 0.0 0.0 0 0 10.908000000000001 0.0 57.063577 0
-ch074 86.271327 50.200367 0 0 0 0 0.1485903006277715 0.0 0.0 0.0 0 0 0 0 0 0
-ci101G 85.74367799999999 49.87656 0 0 0 0 0.00038734588726479504 0.0 0.0 0.0 0 0 18.9504 0.0 22.350554 0
-bi265bG 84.552774 49.67209600000001 0 0 0 0 0.011929072746064862 0.0 0.0 0.0 0 0 17.4528 10.1664 57.40514199999999 0
-B250d 85.494042 49.89812800000001 0 0 0 0 0.000422042390697006 0.0 0.0 0.0 0 0 0 0 0 0
-cj270 85.39591000000001 49.898933 0 0 0 0 0.000515749848665839 0.0 0.0 0.0 0 0 0 0 0 0
-ck005G 85.549373 50.753725 0 0 0 0 0.019298528836856295 0.0 0.0 0.0 0 0 4.2408 3.798 103.069252 0
-cl091 85.794929 49.884421 0 0 0 0 0.00037995969075168846 0.0 0.0 0.0 0 0 0 0 0 0
-cm078G 86.772197 50.468961 0 0 0 0 0.02935354303329913 0.0 0.0 0.0 0 0 17.208000000000002 6.3684 99.992522 0
-cn12xG 87.605578 48.56615699999999 0 0 0 0 0.1083209155465395 0.0 0.0 0.0 0 0 17.46 8.1864 97.885663 0
-co175G 85.60991 49.07273800000001 0 0 0 0 0.010107262136228935 0.0 0.0 0.0 0 0 4.719600000000001 1.2744 7.337445000000001 0
-cp11xG 87.22663500000002 49.27594 0 0 0 0 0.3328761190407426 0.0 0.0 0.0 0 0 16.358400000000003 5.1732 71.147072 0
-cq171 85.518603 49.70845500000001 0 0 0 0 0.00044246654152716017 0.0 0.0 0.0 0 0 0 0 0 0
-cr28xG 83.550059 50.378839 0 0 0 0 0.304272247351729 0.0 0.0 0.0 0 0 14.997600000000002 8.1324 74.650851 0
-cq171aG 85.508676 49.709215 0 0 0 0 0.00044504011777008926 0.0 0.0 0.0 0 0 5.4684 0.0 130.156961 0
-cs06xG 87.481241 51.072851 0 0 0 0 0.23313856386606116 0.0 0.0 0.0 0 0 10.944 0.0 53.763792 0
-ct142G 85.742743 49.558526 0 0 0 0 0.0009376793934180677 0.0 0.0 0.0 0 0 30.7296 0.0 69.815529 0
-cu314G 84.909267 50.44599900000001 0 0 0 0 0.00889506711631609 0.0 0.0 0.0 0 0 12.005999999999998 4.715999999999999 43.326914 0
-cg236aG 84.69968099999998 49.169685 0 0 0 0 0.020574252480893392 0.0 0.0 0.0 0 0 16.9056 0.0 37.020128 0
-N201bG 85.376716 49.623675 0 0 0 0 0.0008906667295853902 0.0 0.0 0.0 -0.7449505146767801 0 12.376800000000001 0.0 18.940514 1424500000.12
-cv241G 85.322571 49.789888 0 0 0 0 0.0005482912458106664 0.0 0.0 0.0 0 0 20.7072 7.056 104.277873 0
-cw155G 85.93306100000001 49.112832000000004 0 0 0 0 0.009162009456401523 0.0 0.0 0.0 0 0 5.9976 0.0 142.893474 0
-B250e 85.48760900000002 49.896203 0 0 0 0 0.0003478286817978296 0.0 0.0 0.0 0 0 0 0 0 0
-cx279G 83.982983 49.807286 0 0 0 0 0.967793845581341 0.0 0.0 0.0 0 0 8.5824 3.0420000000000003 95.459474 0
-cy112 85.86625799999999 49.797677 0 0 0 0 0.00037076346922860755 0.0 0.0 0.0 0 0 0 0 0 0
-Q150a 85.58740899999998 49.76863000000001 0 0 0 0 0.00032181376174801856 0.0 0.0 0.0 0 0 0 0 0 0
-cz181G 85.480223 49.57903 0 0 0 0 0.0008804723441474854 0.0 0.0 0.0 0 0 11.1996 0.0 24.085089 0
-da000G 85.506194 50.0292 0 0 0 0 0.00046724831326453635 0.0 0.0 0.0 0 0 5.3064 1.5624 13.255068 0
-db142 85.741614 49.612533 0 0 0 0 0.0005834079111351836 0.0 0.0 0.0 0 0 0 0 0 0
-at024aG 85.76345100000002 50.56050299999999 0 0 0 0 0.010134232181075876 0.0 0.0 0.0 0 0 9.705599999999999 1.9584 64.781984 0
-dc222 85.22711600000001 49.538048 0 0 0 0 0.0037869423434740606 0.0 0.0 0.0 0 0 0 0 0 0
-dd250G 85.413888 49.86863100000001 0 0 0 0 0.0003680274902426378 0.0 0.0 0.0 0 0 19.519199999999998 0.0 135.076468 0
-de066G 86.36834600000002 50.430214 0 0 0 0 0.009460380661094597 0.0 0.0 0.0 0 0 7.3008 4.2048000000000005 24.086777 0
-df348G 84.929357 51.113024 0 0 0 0 0.08716879795137178 0.0 0.0 0.0 0 0 8.3628 4.784400000000001 172.139387 0
-M300bG 85.40897600000001 49.95453800000001 0 0 0 0 0.0004124632757367746 0.0 0.0 0.0 0 0 7.977600000000001 0.0 151.674007 0
-dg055G 86.103329 50.488608 0 0 0 0 0.010694840977888694 0.0 0.0 0.0 0 0 5.317200000000001 0.0 35.841443 0
-dh072 85.942204 50.061874 0 0 0 0 0.000688396671395934 0.0 0.0 0.0 0 0 0 0 0 0
-di095G 86.407275 49.859803 0 0 0 0 0.014795187690888032 0.0 0.0 0.0 0 0 3.6936 2.682 106.311612 0
-dj171 85.52869100000001 49.725344 0 0 0 0 0.0003390608256073515 0.0 0.0 0.0 0 0 0 0 0 0
-dk230G 85.377141 49.793793 0 0 0 0 0.0003968836823045322 0.0 0.0 0.0 0 0 9.266399999999999 2.7251999999999996 100.201154 0
-G196a 85.314895 48.912915 0 0 0 0 0.02896142820269427 0.0 0.0 0.0 0 0 0 0 0 0
-dl242G 85.21803000000001 49.701458 0 0 0 0 0.000982639931443642 0.0 0.0 0.0 0 0 4.8816 1.35 134.851015 0
-dm26xG 83.609864 49.459866000000005 0 0 0 0 0.11646526609927536 0.0 0.0 0.0 0 0 12.088799999999999 4.914 91.0956 0
-dn021G 85.57460500000002 50.067604 0 0 0 0 0.0004581155105801508 0.0 0.0 0.0 0 0 5.76 0.0 137.503162 0
-do275 84.628625 49.86225300000001 0 0 0 0 0.012791613613256186 0.0 0.0 0.0 0 0 0 0 0 0
-dp146 86.11976600000001 49.081272 0 0 0 0 0.008442369486110024 0.0 0.0 0.0 0 0 0 0 0 0
-dq040 85.52751800000001 49.934626 0 0 0 0 0.00029583471431229435 0.0 0.0 0.0 0 0 0 0 0 0
-dr134 86.05671100000002 49.458475 0 0 0 0 0.010008421981969084 0.0 0.0 0.0 0 0 0 0 0 0
-ds122 85.924266 49.689602 0 0 0 0 0.000488715569914203 0.0 0.0 0.0 0 0 0 0 0 0
-dt005G 85.531939 50.835938 0 0 0 0 0.03771783856510834 0.0 0.0 0.0 0 0 8.2332 4.3704 157.423832 0
-M300c 85.398495 49.952576 0 0 0 0 0.0003882159546179499 0.0 0.0 0.0 -2.011820774326965 0 0 0 0 1424500000.12
-N201c 85.380442 49.62842800000001 0 0 0 0 0.0006970904451045248 0.0 0.0 0.0 0 0 0 0 0 0
-du070G 85.603154 49.940854 0 0 0 0 0.00027340369702445554 0.0 0.0 0.0 0 0 7.65 4.7988 75.560294 0
-dv207G 85.127997 48.777578999999996 0 0 0 0 1.723461879229338 0.0 0.0 0.0 0 0 6.9552000000000005 0.0 14.578122 0
-dw221G 85.400117 49.759552 0 0 0 0 0.0003596885409137644 0.0 0.0 0.0 0 0 22.453200000000002 6.8328 36.493621 0
-dx317G 84.56013500000002 50.61790899999999 0 0 0 0 0.1108554744287197 0.0 0.0 0.0 0 0 6.994800000000001 4.8671999999999995 176.954691 0
-S240a 85.41965800000001 49.849785000000004 0 0 0 0 0.00029900767291410194 0.0 0.0 0.0 0 0 0 0 0 0
-al092a 85.88726800000002 49.856950999999995 0 0 0 0 0.00028960458010105633 0.0 0.0 0.0 0 0 0 0 0 0
-dy002 85.50964 50.304950000000005 0 0 0 0 0.007576669845425439 0.0 0.0 0.0 0 0 0 0 0 0
-bt234aG 84.861607 49.439751 0 0 0 0 0.01236035204869662 0.0 0.0 0.0 0 0 4.824000000000001 0.0 59.282156 0
-dz281G 85.21698400000001 49.962103 0 0 0 0 0.0007184299875963401 0.0 0.0 0.0 0 0 12.4524 3.5928 1.482691 0
-ea056G 86.300675 50.679145 0 0 0 0 0.015099312498001156 0.0 0.0 0.0 0 0 4.59 0.0 60.24276400000001 0
-eb061G 85.72274800000001 50.01180600000001 0 0 0 0 0.0003015114639467302 0.0 0.0 0.0 0 0 20.7684 0.0 40.243792 0
-ec024G 85.689883 50.59219000000001 0 0 0 0 0.0070439881083481995 0.0 0.0 0.0 0 0 3.6143999999999994 0.0 107.699596 0
-bn257aG 84.31454400000001 49.442433 0 0 0 0 0.02279610744235327 0.0 0.0 0.0 0 0 19.9296 15.6096 6.469376 0
-ed221 85.31351700000002 49.645525000000006 0 0 0 0 0.0006967553707358792 0.0 0.0 0.0 0 0 0 0 0 0
-dj171a 85.54104299999999 49.727654 0 0 0 0 0.0002705165151769336 0.0 0.0 0.0 0 0 0 0 0 0
-ee346 85.149959 50.923973000000004 0 0 0 0 2.728147817248216 0.0 0.0 0.0 0 0 0 0 0 0
-ef215 85.104453 49.069668 0 0 0 0 0.008730058488475053 0.0 0.0 0.0 0 0 0 0 0 0
-eg276 84.475406 49.85484000000001 0 0 0 0 0.006348981854194458 0.0 0.0 0.0 0 0 0 0 0 0
-eh071G 85.671938 49.949747 0 0 0 0 0.00023259839087501374 0.0 0.0 0.0 0 0 7.8804 4.374 79.168324 0
-ei090 85.628938 49.891731 0 0 0 0 0.00021282382575745412 0.0 0.0 0.0 0 0 0 0 0 0
-ej119G 86.88564 49.34951000000001 0 0 0 0 0.015778538251266513 0.0 0.0 0.0 0 0 6.0876 0.0 115.48200299999999 0
-ct142aG 85.75426400000002 49.565978 0 0 0 0 0.000606551647194209 0.0 0.0 0.0 0 0 18.2376 9.144000000000002 31.667094 0
-ek097G 86.80015700000001 49.921440000000004 0 0 0 0 0.006809978299654974 0.0 0.0 0.0 0 0 15.634799999999998 5.450399999999999 1.290049 0
-el101 85.76691100000001 49.859155 0 0 0 0 0.0002141107406224036 0.0 0.0 0.0 0 0 0 0 0 0
-em101 85.80303799999999 49.867780999999994 0 0 0 0 0.00022315962589376128 0.0 0.0 0.0 0 0 0 0 0 0
-ci101aG 85.755473 49.886105 0 0 0 0 0.00021344317248145822 0.0 0.0 0.0 0 0 5.7456000000000005 0.0 44.576166 0
-en021 85.62004400000001 50.1933 0 0 0 0 0.0009483438256831594 0.0 0.0 0.0 0 0 0 0 0 0
-eo315G 84.806559 50.387162 0 0 0 0 0.005845863616972254 0.0 0.0 0.0 0 0 6.3864 2.6208 146.135013 0
-ep142G 85.718518 49.645362 0 0 0 0 0.00033813730275418903 0.0 0.0 0.0 0 0 13.1364 0.0 48.343835 0
-eq146 86.155845 49.111395 0 0 0 0 0.00629177722777114 0.0 0.0 0.0 0 0 0 0 0 0
-bh172a 85.554181 49.543874 0 0 0 0 0.0007087044176143703 0.0 0.0 0.0 0 0 0 0 0 0
-er180G 85.51107699999999 49.763406 0 0 0 0 0.00023921923219858156 0.0 0.0 0.0 0 0 6.429600000000001 0.0 151.353607 0
-ds122a 85.92144900000001 49.70511700000001 0 0 0 0 0.0003579167546523645 0.0 0.0 0.0 0 0 0 0 0 0
-es112G 85.91717400000002 49.731908 0 0 0 0 0.0003216037372839361 0.0 0.0 0.0 0 0 8.3556 3.5172 170.600608 0
-et131 85.63999400000002 49.77747800000001 0 0 0 0 0.00020562175346106775 0.0 0.0 0.0 0 0 0 0 0 0
-eu200G 85.476435 49.815927 0 0 0 0 0.00022943021333847623 0.0 0.0 0.0 0 0 3.2832000000000003 0.0 46.528732 0
-ev133 85.90151600000002 49.495438 0 0 0 0 0.001611077173118112 0.0 0.0 0.0 0 0 0 0 0 0
-dw221aG 85.40575700000001 49.764872 0 0 0 0 0.00028600182916579595 0.0 0.0 0.0 0 0 11.905199999999999 0.0 26.695499 0
-ew140 85.553694 49.841555 0 0 0 0 0.0002001206341371704 0.0 0.0 0.0 0 0 0 0 0 0
-cq171b 85.499072 49.71117900000001 0 0 0 0 0.00027176922491310273 0.0 0.0 0.0 0 0 0 0 0 0
-ex191 85.456894 49.660209 0 0 0 0 0.0003643854022725176 0.0 0.0 0.0 0 0 0 0 0 0
-ay102a 85.82672000000001 49.845052 0 0 0 0 0.00021622971669364632 0.0 0.0 0.0 0 0 0 0 0 0
-ei090a 85.632931 49.886992000000006 0 0 0 0 0.0001909673108899285 0.0 0.0 0.0 0 0 0 0 0 0
-ey147G 86.38005499999998 48.951422 0 0 0 0 0.04967388986371956 0.0 0.0 0.0 0 0 21.4632 2.0412 142.50836 0
-ez103 86.06129 49.791806 0 0 0 0 0.0004490613029539293 0.0 0.0 0.0 0 0 0 0 0 0
-fa082 85.86273599999998 49.933536 0 0 0 0 0.00024344928970226748 0.0 0.0 0.0 0 0 0 0 0 0
-fb220 85.451483 49.846737 0 0 0 0 0.00022376348954072738 0.0 0.0 0.0 0 0 0 0 0 0
-fc011 85.557876 50.16087 0 0 0 0 0.0006519326288746158 0.0 0.0 0.0 0 0 0 0 0 0
-fd025 85.89477 50.77109 0 0 0 0 0.013019302286957897 0.0 0.0 0.0 0 0 0 0 0 0
-P050a 85.516446 49.913458 0 0 0 0 0.00020582094936085277 0.0 0.0 0.0 0 0 0 0 0 0
-fe097 86.744207 49.965603 0 0 0 0 0.006776521503519559 0.0 0.0 0.0 0 0 0 0 0 0
-ff102 85.86684299999999 49.85601 0 0 0 0 0.00021951533224342577 0.0 0.0 0.0 0 0 0 0 0 0
-fg212 85.317982 49.51122199999999 0 0 0 0 0.0019310399946764767 0.0 0.0 0.0 0 0 0 0 0 0
-A110f 85.652678 49.854077 0 0 0 0 0.00017708251203196756 0.0 0.0 0.0 0 0 0 0 0 0
-bn257bG 84.319987 49.454359 0 0 0 0 0.016603130630882357 0.0 0.0 0.0 0 0 14.1192 7.952400000000001 19.793344 0
-fh25xG 83.52087900000001 49.198392 0 0 0 0 3.722566776356147 0.0 0.0 0.0 0 0 11.851199999999999 8.8344 119.84957799999998 0
-fi08xG 87.137636 50.309858 0 0 0 0 0.16427991913287066 0.0 0.0 0.0 0 0 10.8324 0.0 64.318063 0
-fj077G 86.70651599999998 50.416628 0 0 0 0 0.008314775637276443 0.0 0.0 0.0 0 0 6.2496 2.9196 9.545683 0
-A110g 85.644486 49.85488900000001 0 0 0 0 0.0001752783733917841 0.0 0.0 0.0 0 0 0 0 0 0
-fk094G 86.228419 49.866245000000006 0 0 0 0 0.0010882811118068008 0.0 0.0 0.0 0 0 6.6312 4.0068 54.603567 0
-fl135G 86.218842 49.314436 0 0 0 0 0.010919805781931516 0.0 0.0 0.0 0 0 7.178400000000001 0.0 135.675629 0
-cd122a 85.777959 49.715833 0 0 0 0 0.00023033986063413485 0.0 0.0 0.0 0 0 0 0 0 0
-ci101b 85.746041 49.865315 0 0 0 0 0.0001799521444839762 0.0 0.0 0.0 0 0 0 0 0 0
-fm172 85.60057899999998 49.439572999999996 0 0 0 0 0.002076618111313575 0.0 0.0 0.0 0 0 0 0 0 0
-fn130 85.596033 49.805359 0 0 0 0 0.0001747733849492259 0.0 0.0 0.0 0 0 0 0 0 0
-fo093G 86.058376 49.887078 0 0 0 0 0.00037791687445499193 0.0 0.0 0.0 0 0 11.340000000000002 4.95 74.16015 0
-fp177G 85.678773 48.699024 0 0 0 0 0.30361058515430306 0.0 0.0 0.0 0 0 6.260400000000001 3.582 169.918652 0
-fq12xG 87.35319500000001 48.62032200000001 0 0 0 0 0.11326516551203365 0.0 0.0 0.0 0 0 9.183599999999998 0.0 139.084646 0
-A110h 85.64842599999999 49.850019 0 0 0 0 0.00016156574322970772 0.0 0.0 0.0 0 0 0 0 0 0
-fr162 85.61788 49.547094 0 0 0 0 0.00053406470905919 0.0 0.0 0.0 0 0 0 0 0 0
-fs236 84.699728 49.31059599999999 0 0 0 0 0.005613835570835469 0.0 0.0 0.0 0 0 0 0 0 0
-ft135 86.239566 49.28750699999999 0 0 0 0 0.007155195775666683 0.0 0.0 0.0 0 0 0 0 0 0
-fu103 86.05333999999999 49.847118 0 0 0 0 0.00035508511926026745 0.0 0.0 0.0 0 0 0 0 0 0
-fv073G 86.05487400000001 50.065488 0 0 0 0 0.0006838467203289275 0.0 0.0 0.0 0 0 5.3964 1.278 95.957054 0
-dl242a 85.214147 49.688695 0 0 0 0 0.0006698274171574189 0.0 0.0 0.0 0 0 0 0 0 0
-fw231 85.340766 49.77949499999999 0 0 0 0 0.0002801137470120461 0.0 0.0 0.0 0 0 0 0 0 0
-fx235G 84.77889400000001 49.225653 0 0 0 0 0.0060867204286367115 0.0 0.0 0.0 0 0 3.2616 2.4624 31.842927 0
-fy08xG 87.744612 50.167159 0 0 0 0 0.07355207517034314 0.0 0.0 0.0 0 0 10.8 4.1184 116.29120899999998 0
-fz102G 85.99297800000001 49.822733 0 0 0 0 0.0002745629005272173 0.0 0.0 0.0 0 0 8.6904 0.0 25.781977 0
-ga246G 84.64943899999999 49.37351300000001 0 0 0 0 0.005138133629271287 0.0 0.0 0.0 0 0 4.5648 2.61 22.573224 0
-gb272G 85.098163 49.918913999999994 0 0 0 0 0.0009545382633463356 0.0 0.0 0.0 0 0 2.0376 0.0 38.476787 0
-gc014G 85.661183 50.600035 0 0 0 0 0.0048021923126122254 0.0 0.0 0.0 0 0 8.6256 2.79 92.801337 0
-gd191G 85.461719 49.69230300000001 0 0 0 0 0.00024666420277594605 0.0 0.0 0.0 0 0 5.8572 4.1112 62.69264799999999 0
-ge258G 84.175355 49.31368200000001 0 0 0 0 1.813361256131663 0.0 0.0 0.0 0 0 9.4572 5.058 79.004298 0
-gf102 85.930699 49.813717 0 0 0 0 0.00021760453388050194 0.0 0.0 0.0 0 0 0 0 0 0
-gg102 85.974155 49.774816 0 0 0 0 0.0002608084338892978 0.0 0.0 0.0 0 0 0 0 0 0
-gh30xG 83.396886 51.245614 0 0 0 0 0.21438627718534695 0.0 0.0 0.0 0 0 18.3492 2.0556 142.619844 0
-ff102a 85.86678100000002 49.864881 0 0 0 0 0.00017903813265050743 0.0 0.0 0.0 0 0 0 0 0 0
-gi072 85.815074 50.019806 0 0 0 0 0.00022880800992272575 0.0 0.0 0.0 0 0 0 0 0 0
-gj022 85.656176 50.242945000000006 0 0 0 0 0.0012513626897773008 0.0 0.0 0.0 0 0 0 0 0 0
-gk072 85.92180700000002 50.054257 0 0 0 0 0.000340760784675228 0.0 0.0 0.0 0 0 0 0 0 0
-gl035 85.90808699999998 50.708269 0 0 0 0 0.006177948870687285 0.0 0.0 0.0 0 0 0 0 0 0
-gm286G 84.38574 50.09408200000001 0 0 0 0 0.0051213177045641095 0.0 0.0 0.0 0 0 13.2588 0.0 163.017739 0
-gn12xG 87.66597100000001 48.77062500000001 0 0 0 0 0.06536434925685765 0.0 0.0 0.0 0 0 12.2832 4.6692 126.50409199999999 0
-go060 85.605438 49.966779 0 0 0 0 0.00016415703569606316 0.0 0.0 0.0 0 0 0 0 0 0
-gp281 85.288493 49.938894000000005 0 0 0 0 0.0003058721031003116 0.0 0.0 0.0 0 0 0 0 0 0
-gq105 86.397714 49.656589 0 0 0 0 0.0308501635591711 0.0 0.0 0.0 0 0 0 0 0 0
-gr049G 86.65693900000001 51.057327 0 0 0 0 0.061534265569952784 0.0 0.0 0.0 0 0 12.376800000000001 6.0876 14.367753000000002 0
-gs08xG 87.213904 50.145137 0 0 0 0 0.08289667539499954 0.0 0.0 0.0 0 0 13.708800000000002 4.2408 65.931853 0
-gt261 85.252989 49.87091 0 0 0 0 0.0003176841188162603 0.0 0.0 0.0 0 0 0 0 0 0
-es112a 85.91911100000002 49.741314 0 0 0 0 0.00021711401324762028 0.0 0.0 0.0 0 0 0 0 0 0
-A110i 85.656773 49.84955 0 0 0 0 0.00013425466912512943 0.0 0.0 0.0 0 0 0 0 0 0
-H195b 85.40353099999999 49.046619 0 0 0 0 0.004577690977254836 0.0 0.0 0.0 0 0 0 0 0 0
-gu055G 86.227122 50.587917 0 0 0 0 0.0046629219278244965 0.0 0.0 0.0 0 0 6.8976 0.0 43.299775 0
-gv054 86.146804 50.386548 0 0 0 0 0.015454507684941414 0.0 0.0 0.0 0 0 0 0 0 0
-gw269 83.935399 49.680806 0 0 0 0 0.8112730910945324 0.0 0.0 0.0 0 0 0 0 0 0
-gx092 85.963299 49.88134 0 0 0 0 0.00020839384414880714 0.0 0.0 0.0 0 0 0 0 0 0
-gy031 85.612953 50.103486 0 0 0 0 0.0002860224210071341 0.0 0.0 0.0 0 0 0 0 0 0
-H195c 85.39887800000001 49.04036000000001 0 0 0 0 0.004515317090979741 0.0 0.0 0.0 0 0 0 0 0 0
-gz28xG 83.55276100000002 50.161550000000005 0 0 0 0 0.05421926765247324 0.0 0.0 0.0 0 0 12.959999999999999 10.393199999999998 87.366754 0
-ha155G 85.952554 49.06183800000001 0 0 0 0 0.00412509461848593 0.0 0.0 0.0 0 0 4.4604 3.2472 58.746118 0
-hb077G 86.68619400000001 50.291348 0 0 0 0 0.00420870396119081 0.0 0.0 0.0 0 0 7.851600000000001 0.0 46.882137 0
-hc053 85.996367 50.290874 0 0 0 0 0.00908305530895856 0.0 0.0 0.0 0 0 0 0 0 0
-hd066G 86.444216 50.520249 0 0 0 0 0.004695637642435678 0.0 0.0 0.0 0 0 6.6815999999999995 2.1995999999999998 19.963621 0
-he108G 86.919366 49.67228600000001 0 0 0 0 0.004317793720176379 0.0 0.0 0.0 0 0 5.8824000000000005 0.0 136.032184 0
-hf331 85.365399 50.115676 0 0 0 0 0.00048213695351193784 0.0 0.0 0.0 0 0 0 0 0 0
-hg247G 84.319114 49.313972 0 0 0 0 0.039617822538598677 0.0 0.0 0.0 0 0 13.726799999999999 0.0 56.165419 0
-hh103 86.04762500000001 49.769765 0 0 0 0 0.00028933192920472714 0.0 0.0 0.0 0 0 0 0 0 0
-hi162 85.608006 49.50894600000001 0 0 0 0 0.0005926909596606095 0.0 0.0 0.0 0 0 0 0 0 0
-hj342G 85.342057 50.236644 0 0 0 0 0.0022183287264869 0.0 0.0 0.0 0 0 8.1072 6.3755999999999995 19.414599 0
-hk212G 85.300892 49.573115 0 0 0 0 0.0007296053171167158 0.0 0.0 0.0 0 0 6.0047999999999995 0.0 51.114439 0
-G196b 85.312007 48.909369 0 0 0 0 0.01453010833162101 0.0 0.0 0.0 0 0 0 0 0 0
-hl052 85.76841 50.139687 0 0 0 0 0.00036390250857058445 0.0 0.0 0.0 0 0 0 0 0 0
-gn12xaG 87.677258 48.762893999999996 0 0 0 0 0.05064768937243134 0.0 0.0 0.0 0 0 11.4372 4.2264 127.186493 0
-hm265 84.544063 49.79749100000001 0 0 0 0 0.003955588014487305 0.0 0.0 0.0 0 0 0 0 0 0
-hn286G 84.396361 50.066001 0 0 0 0 0.0039540918852228974 0.0 0.0 0.0 0 0 8.956800000000001 6.4404 74.23347 0
-ho109 87.064531 49.73500299999999 0 0 0 0 0.006908560995931712 0.0 0.0 0.0 0 0 0 0 0 0
-hp185 85.44828999999999 49.062978 0 0 0 0 0.0037245147327935645 0.0 0.0 0.0 0 0 0 0 0 0
-hq12xG 87.60048200000001 48.505451 0 0 0 0 0.04195700598091431 0.0 0.0 0.0 0 0 15.0696 0.0 134.10983 0
-hr067G 86.59739400000001 50.513180999999996 0 0 0 0 0.006077710522348738 0.0 0.0 0.0 0 0 13.662 0.0 39.935383 0
-hs166 85.890966 48.917154 0 0 0 0 0.009434979537697416 0.0 0.0 0.0 0 0 0 0 0 0
-ht109G 87.04788900000001 49.693535 0 0 0 0 0.006394898724925413 0.0 0.0 0.0 0 0 6.4404 1.2131999999999998 90.376242 0
-hu166 85.864485 48.836401 0 0 0 0 0.037451314332247035 0.0 0.0 0.0 0 0 0 0 0 0
-hv057G 86.47033000000002 50.60945000000001 0 0 0 0 0.007276076761392004 0.0 0.0 0.0 0 0 6.566400000000001 3.33 34.855409 0
-hw103 86.138871 49.802858 0 0 0 0 0.0003878588645601122 0.0 0.0 0.0 0 0 0 0 0 0
-hx013 85.665198 50.529757 0 0 0 0 0.004979331649519516 0.0 0.0 0.0 0 0 0 0 0 0
-hy133 85.951574 49.573256 0 0 0 0 0.0004781846933216933 0.0 0.0 0.0 0 0 0 0 0 0
-N201dG 85.37570699999999 49.631569 0 0 0 0 0.0003034135332825865 0.0 0.0 0.0 0 0 9.8064 0.0 43.324004 0
-hz08x 87.209263 50.272885 0 0 0 0 0.4051774394879799 0.0 0.0 0.0 0 0 0 0 0 0
-ia29xG 83.82537600000002 50.604996 0 0 0 0 0.043755764656285834 0.0 0.0 0.0 0 0 11.7 2.376 110.916277 0
-ib306G 84.564146 50.377970999999995 0 0 0 0 0.004206147723040001 0.0 0.0 0.0 0 0 5.0976 1.4832 99.865619 0
-ic256G 84.542325 49.51318700000001 0 0 0 0 0.0032984406525964818 0.0 0.0 0.0 0 0 9.302399999999999 0.0 36.696471 0
-id124G 86.15122899999999 49.588189 0 0 0 0 0.0012325030608133585 0.0 0.0 0.0 0 0 7.441199999999999 0.0 118.50048400000001 0
-ie23xG 84.226535 48.629464000000006 0 0 0 0 4.62660628533627 0.0 0.0 0.0 0 0 11.214 2.9699999999999998 22.431274 0
-if295G 84.64782700000002 50.270707 0 0 0 0 0.002938376793122128 0.0 0.0 0.0 0 0 5.8428 0.0 131.060016 0
-ig089G 87.09484 50.192805 0 0 0 0 0.015650064366549966 0.0 0.0 0.0 0 0 7.570799999999998 3.5639999999999996 62.510485 0
-ih118G 86.76536800000001 49.336756 0 0 0 0 0.004480225654096124 0.0 0.0 0.0 0 0 6.4908 1.0403999999999998 150.943669 0
-hw103a 86.152064 49.807353 0 0 0 0 0.0003765278730157013 0.0 0.0 0.0 0 0 0 0 0 0
-ii046G 86.13008400000001 50.715744 0 0 0 0 0.006213397218524051 0.0 0.0 0.0 0 0 5.2632 0.0 68.185846 0
-ij016G 85.75878600000001 50.89748 0 0 0 0 0.06606720999829074 0.0 0.0 0.0 0 0 8.9388 4.6259999999999994 163.381828 0
-ik183G 85.504698 49.338783 0 0 0 0 0.03464575769093049 0.0 0.0 0.0 0 0 6.4799999999999995 4.2156 51.217363 0
-il176G 85.656756 48.804348 0 0 0 0 0.06396067031024755 0.0 0.0 0.0 0 0 7.8372 0.0 29.330807 0
-im298 84.11099299999998 50.288401 0 0 0 0 0.38816090472997955 0.0 0.0 0.0 0 0 0 0 0 0
-gz28xaG 83.56134700000001 50.16470300000001 0 0 0 0 0.036632885637822604 0.0 0.0 0.0 0 0 10.9188 4.2588 80.324133 0
-in11xG 87.467547 49.034364 0 0 0 0 0.06653795773106504 0.0 0.0 0.0 0 0 8.686800000000002 0.0 119.00889700000002 0
-io099 87.050999 49.977192 0 0 0 0 0.005044810388944112 0.0 0.0 0.0 0 0 0 0 0 0
-ip097G 86.759235 49.843522 0 0 0 0 0.003291030626891089 0.0 0.0 0.0 0 0 7.7076 0.0 53.605286 0
-iq095G 86.482881 49.94058400000001 0 0 0 0 0.10150738166626692 0.0 0.0 0.0 0 0 5.7852 0.0 37.843959 0
-ch074a 86.26484900000001 50.203574 0 0 0 0 0.03277376568774914 0.0 0.0 0.0 0 0 0 0 0 0
-Z285a 84.546693 50.127956 0 0 0 0 0.002479451794371511 0.0 0.0 0.0 0 0 0 0 0 0
-ir354 85.327027 50.646644 0 0 0 0 0.002410167230688144 0.0 0.0 0.0 0 0 0 0 0 0
-cq171c 85.49287 49.71318 0 0 0 0 8.111269677687587e-05 0.0 0.0 0.0 0 0 0 0 0 0
-ik183a 85.497474 49.33821900000001 0 0 0 0 0.021971150389285925 0.0 0.0 0.0 0 0 0 0 0 0
+#format: name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0
+A110 85.65057420039344 49.85200936748971 0 0 0 0 9.859337158203125 -4.332709724913578e-06 0.0002639347043305329 0.002161076417922203 -0.7099262475967407 0.0 0 0 0 1385000000.0
+A110a 85.65050986891873 49.85197850280577 0 0 0 0 4.9295166015625 -2.166288075557132e-06 0.00013196325682249821 0.0010805048968762776 -0.7099262475967407 0.0 0 0 0 1385000000.0
+A110b 85.65053129236571 49.85199243784206 0 0 0 0 3.28451904296875 -1.4433898923209287e-06 8.792663370214893e-05 0.0007199364961437026 -0.7099262475967407 0.0 0 0 0 1385000000.0
+A110c 85.65055277967043 49.85199808578795 0 0 0 0 3.2845193481445314 -1.443390026431169e-06 8.792666576973363e-05 0.0007199366586275336 -0.7099262475967407 0.0 0 0 0 1385000000.0
+A110d 85.65062930448465 49.85212044247567 0 0 0 0 1.234733123779297 -5.426064782276373e-07 3.3053832365716185e-05 0.0002706421936292891 -0.7099262475967407 0.0 0 0 0 1385000000.0
+A110e 85.65063791160625 49.852175398105864 0 0 0 0 0.4096230697631836 -1.8000985557485017e-07 1.0965618416099512e-05 8.978562575736592e-05 -0.7099262475967407 0.0 0 0 0 1385000000.0
+B250G 85.490387 49.89720499999999 0 0 0 0 0.03826158067268499 0.0 0.0 0.0 -0.8790400371758633 0 5.2884 0.7236 170.733145 1424500000.12
+C242G 85.182151 49.694903 0 0 0 0 0.0887058836969246 0.0 0.0 0.0 0.010392796216600608 0 3.6396 1.5803999999999998 57.219554 1424500000.12
+D122G 85.827299 49.731663 0 0 0 0 0.0236825399308751 0.0 0.0 0.0 -0.3646974893727074 0 2.5056000000000003 2.2788 131.409384 1424500000.12
+E101 85.80834000000002 49.843773000000006 0 0 0 0 0.0116135023170924 0.0 0.0 0.0 -0.8133517046735592 0 0 0 0 1424500000.12
+F112G 85.89017 49.766488 0 0 0 0 0.014704720808157915 0.0 0.0 0.0 -1.1039561188845133 0 14.0616 4.4676 135.531337 1424500000.12
+G196G 85.31441999999998 48.91178899999999 0 0 0 0 1.184207406832343 0.0 0.0 0.0 7.299087678304995 0 6.8976 5.76 76.54418 1424500000.12
+H195G 85.39953 49.042516 0 0 0 0 0.35345544967760817 0.0 0.0 0.0 1.4805344140241368 0 5.202000000000001 3.9095999999999997 16.493141 1424500000.12
+H195aG 85.403229 49.044472 0 0 0 0 0.3282685168540988 0.0 0.0 0.0 1.5425777742624247 0 5.1084 4.104 42.919008 1424500000.12
+I215G 85.008394 49.088678 0 0 0 0 0.41548313652379487 0.0 0.0 0.0 2.902473484685625 0 6.2748 2.4408 22.447551 1424500000.12
+J051G 85.665143 50.059872 0 0 0 0 0.009638236242744293 0.0 0.0 0.0 -0.5750208422631442 0 4.9428 0.0 20.52962 1424500000.12
+B250aG 85.48794300000002 49.907545000000006 0 0 0 0 0.006188563309864936 0.0 0.0 0.0 -1.6429169879215684 0 20.3868 4.9032 170.715884 1424500000.12
+K277 84.22448400000002 49.997924999999995 0 0 0 0 0.2988771537956234 0.0 0.0 0.0 5.165175111712941 0 0 0 0 1424500000.12
+L114G 86.154162 49.704053 0 0 0 0 0.022095505177117666 0.0 0.0 0.0 -0.8024268552220519 0 9.2088 3.1176 57.79198199999999 1424500000.12
+M300G 85.408689 49.954324 0 0 0 0 0.005747212805681905 0.0 0.0 0.0 -1.0586065366047654 0 9.6264 3.2543999999999995 101.546067 1424500000.12
+N201G 85.379709 49.62849 0 0 0 0 0.010367343216787278 0.0 0.0 0.0 -0.2768832991034338 0 12.3984 4.3271999999999995 162.718033 1424500000.12
+L114aG 86.147901 49.694296 0 0 0 0 0.01782805293839603 0.0 0.0 0.0 -0.9664552563844166 0 8.218799999999998 0.9683999999999999 17.563751 1424500000.12
+O266 84.37459 49.724065 0 0 0 0 0.11264831212331218 0.0 0.0 0.0 2.377467128864789 0 0 0 0 1424500000.12
+P050 85.516442 49.913432 0 0 0 0 0.0032203248876156013 0.0 0.0 0.0 0.2860275029737752 0 0 0 0 1424500000.12
+Q150G 85.586806 49.768743 0 0 0 0 0.0030740429925802384 0.0 0.0 0.0 -0.14273714190432324 0 6.0516 2.8116 74.649051 1424500000.12
+R285 84.66131 50.00818400000001 0 0 0 0 0.13494386596000701 0.0 0.0 0.0 1.0591847681338784 0 0 0 0 1424500000.12
+D122a 85.827251 49.731682 0 0 0 0 0.0032964004284253734 0.0 0.0 0.0 0.33585798933856015 0 0 0 0 1424500000.12
+S240 85.418733 49.849665 0 0 0 0 0.002902823496384571 0.0 0.0 0.0 -1.027955111472692 0 0 0 0 1424500000.12
+T256 84.494951 49.588217 0 0 0 0 0.06391065166847286 0.0 0.0 0.0 2.9704825843232725 0 0 0 0 1424500000.12
+U073 86.00413 50.059927 0 0 0 0 0.005678059562557201 0.0 0.0 0.0 -0.32672087269666683 0 0 0 0 1424500000.12
+M300aG 85.39485600000002 49.95132600000001 0 0 0 0 0.00273737341861733 0.0 0.0 0.0 -0.9563659512415716 0 5.4792 0.0 150.745479 1424500000.12
+V132 85.806663 49.64142600000001 0 0 0 0 0.002883827072369766 0.0 0.0 0.0 -0.15728346165511642 0 0 0 0 1424500000.12
+W192 85.467543 49.566686 0 0 0 0 0.005172285191005143 0.0 0.0 0.0 -0.0031084627207409454 0 0 0 0 1424500000.12
+E101a 85.808339 49.843741 0 0 0 0 0.0015768683632177254 0.0 0.0 0.0 0.15715658899389928 0 0 0 0 1424500000.12
+X251 85.23875100000001 49.782947 0 0 0 0 0.0037566400884037404 0.0 0.0 0.0 -0.7175421667402149 0 0 0 0 1424500000.12
+Y022 85.67483200000001 50.33188100000001 0 0 0 0 0.07327267231113754 0.0 0.0 0.0 4.146707374879245 0 0 0 0 1424500000.12
+Z285 84.548397 50.130852999999995 0 0 0 0 0.03846618057775607 0.0 0.0 0.0 1.7899982099052734 0 0 0 0 1424500000.12
+aa321 85.31420499999999 50.119433 0 0 0 0 0.006244825648635683 0.0 0.0 0.0 -0.08949429026377231 0 0 0 0 1424500000.12
+ab315 84.73995 50.47775 0 0 0 0 0.045127587424326 0.0 0.0 0.0 3.524578316545999 0 0 0 0 1424500000.12
+ac309 84.083643 50.640651 0 0 0 0 0.34474621208322065 0.0 0.0 0.0 5.630595492363389 0 0 0 0 1424500000.12
+ad352 85.41405200000001 50.24308 0 0 0 0 0.01628678211290917 0.0 0.0 0.0 0.8097715901148881 0 0 0 0 1424500000.12
+N201a 85.37977400000001 49.623525 0 0 0 0 0.003294625523059915 0.0 0.0 0.0 -0.5412993214393516 0 0 0 0 1424500000.12
+ae222 85.23026999999999 49.592605 0 0 0 0 0.00820482921818608 0.0 0.0 0.0 2.431047004218636 0 0 0 0 1424500000.12
+af246G 84.54470799999999 49.271746 0 0 0 0 0.06829741031591728 0.0 0.0 0.0 4.835124208223845 0 6.3072 0.0 41.912364 1424500000.12
+ag062 85.866977 50.10652000000001 0 0 0 0 0.0026397108590530413 0.0 0.0 0.0 -0.6008029696851742 0 0 0 0 1424500000.12
+F112a 85.89124 49.765812 0 0 0 0 0.0013103670017206533 0.0 0.0 0.0 2.75136548645074 0 0 0 0 1424500000.12
+ah093 86.12741200000002 49.919226 0 0 0 0 0.0030338243266867775 0.0 0.0 0.0 -0.9084735520890121 0 0 0 0 1424500000.12
+ai287 84.318901 50.178700000000006 0 0 0 0 0.05062809327764703 0.0 0.0 0.0 5.035960640711893 0 0 0 0 1424500000.12
+aj151 85.649095 49.685462 0 0 0 0 0.001171303297573771 0.0 0.0 0.0 -0.7597299927270662 0 0 0 0 1424500000.12
+ak103G 86.09595 49.781892000000006 0 0 0 0 0.0023429366479754067 0.0 0.0 0.0 0 0 20.1456 0.0 37.976114 0
+al092G 85.887436 49.873087000000005 0 0 0 0 0.0010198646261616456 0.0 0.0 0.0 0.5851976105827296 0 15.8976 0.0 158.83801 1424500000.12
+L114b 86.1548 49.704221000000004 0 0 0 0 0.004055863930056866 0.0 0.0 0.0 1.9379210113032612 0 0 0 0 1424500000.12
+am246G 84.603938 49.306862 0 0 0 0 0.033853253624760875 0.0 0.0 0.0 3.046185354407594 0 6.3431999999999995 0.0 47.275424 1424500000.12
+an093 86.11137299999999 49.93751700000001 0 0 0 0 0.002455100302376349 0.0 0.0 0.0 -0.7915066173610139 0 0 0 0 1424500000.12
+ad352a 85.411788 50.242187 0 0 0 0 0.010355667214408469 0.0 0.0 0.0 1.073981466713624 0 0 0 0 1424500000.12
+B250b 85.489125 49.900927 0 0 0 0 0.0008374208096926871 0.0 0.0 0.0 -0.2533724378447622 0 0 0 0 1424500000.12
+ao344G 85.21736500000002 50.515296 0 0 0 0 0.023032200938294563 0.0 0.0 0.0 2.2099402507470467 0 3.9996 1.8395999999999997 119.38237500000001 1424500000.12
+ap163 85.71434 49.434934 0 0 0 0 0.00897535718293354 0.0 0.0 0.0 1.7078435341140903 0 0 0 0 1424500000.12
+aq093G 86.140584 49.93580599999999 0 0 0 0 0.0025671509770156 0.0 0.0 0.0 -1.2294580542263924 0 11.2824 5.8356 146.377815 1424500000.12
+ar086G 86.594289 50.083580999999995 0 0 0 0 0.04719925346734011 0.0 0.0 0.0 -2.061904743868059 0 9.468 2.34 73.090631 1424500000.12
+as250 85.34539400000001 49.853659 0 0 0 0 0.0010495489725337959 0.0 0.0 0.0 0.5467076638942489 0 0 0 0 1424500000.12
+at024G 85.772823 50.570226 0 0 0 0 0.022267239731096435 0.0 0.0 0.0 0 0 28.929599999999997 5.497199999999999 43.963277 0
+au052 85.798692 50.16624699999999 0 0 0 0 0.0024914742957367463 0.0 0.0 0.0 -0.8721995847559127 0 0 0 0 1424500000.12
+av132 85.778557 49.650481000000006 0 0 0 0 0.0010773680371497871 0.0 0.0 0.0 -0.3028886032954041 0 0 0 0 1424500000.12
+ac309aG 84.085934 50.640471 0 0 0 0 0.17331164559313803 0.0 0.0 0.0 5.3224204745015555 0 7.0632 0.0 42.7589 1424500000.12
+aw055G 86.251358 50.54776 0 0 0 0 0.020221095075116376 0.0 0.0 0.0 2.465592230859434 0 5.670000000000001 0.0 52.024985 1424500000.12
+ax214G 85.195879 49.28760700000001 0 0 0 0 0.04526571400459344 0.0 0.0 0.0 0 0 11.556000000000001 4.3668000000000005 80.873909 0
+L114c 86.14774000000001 49.693944 0 0 0 0 0.00313788178025012 0.0 0.0 0.0 2.581965263387142 0 0 0 0 1424500000.12
+ay102 85.834979 49.858217999999994 0 0 0 0 0.0006836974666558675 0.0 0.0 0.0 0.34844517391545904 0 0 0 0 1424500000.12
+az214G 85.21439299999999 49.284831 0 0 0 0 0.04662695211083994 0.0 0.0 0.0 0 0 10.4148 3.3912 111.062388 0
+ba055G 86.298091 50.494159 0 0 0 0 0.019356871728253858 0.0 0.0 0.0 1.3104962402424625 0 6.5196 1.2276 43.564796 1424500000.12
+B250cG 85.48751500000002 49.907757 0 0 0 0 0.0006889420939524911 0.0 0.0 0.0 4.866549689017183 0 8.37 0.0 49.509819 1424500000.12
+bb195 85.38988399999998 48.976066 0 0 0 0 0.02929067630253879 0.0 0.0 0.0 0 0 0 0 0 0
+bc122 85.894653 49.713411 0 0 0 0 0.0009359923942207983 0.0 0.0 0.0 -0.4106888312608168 0 0 0 0 1424500000.12
+ax214aG 85.20422400000001 49.28623 0 0 0 0 0.04304973573415348 0.0 0.0 0.0 0 0 29.7324 7.639200000000001 107.465628 0
+bd31xG 84.05905100000001 50.884712 0 0 0 0 0.5326354721187088 0.0 0.0 0.0 0 0 12.711599999999999 3.3048 134.147563 0
+be220 85.424535 49.80595799999999 0 0 0 0 0.0007319247948674079 0.0 0.0 0.0 -0.7845945636292365 0 0 0 0 1424500000.12
+bf040 85.602535 50.011602 0 0 0 0 0.0007386972230725153 0.0 0.0 0.0 0.24313824664240757 0 0 0 0 1424500000.12
+bg277 84.23605300000001 49.90021800000001 0 0 0 0 0.030816351012871467 0.0 0.0 0.0 0 0 0 0 0 0
+bh172 85.545155 49.54555 0 0 0 0 0.0018540674528342352 0.0 0.0 0.0 0 0 0 0 0 0
+bi265G 84.556756 49.681695 0 0 0 0 0.01674515506394857 0.0 0.0 0.0 0 0 22.0968 3.258 4.329168 0
+bj093 86.036108 49.910209 0 0 0 0 0.001089912353848124 0.0 0.0 0.0 0 0 0 0 0 0
+F112b 85.886639 49.767953 0 0 0 0 0.0007066374511119615 0.0 0.0 0.0 2.4240590023537463 0 0 0 0 1424500000.12
+J051a 85.665063 50.059819 0 0 0 0 0.0008430457198374354 0.0 0.0 0.0 0 0 0 0 0 0
+L114dG 86.149869 49.700471 0 0 0 0 0.0026010863407512725 0.0 0.0 0.0 0 0 28.674 0.0 5.189007 0
+J051b 85.651206 50.06197600000001 0 0 0 0 0.0008393916924586326 0.0 0.0 0.0 -0.5193418922479653 0 0 0 0 1424500000.12
+bk055G 86.186277 50.413227 0 0 0 0 0.03048339102662157 0.0 0.0 0.0 0 0 20.7684 6.6096 128.453681 0
+bl194 85.36135100000001 49.1267 0 0 0 0 0.015622797370746073 0.0 0.0 0.0 0 0 0 0 0 0
+bm041 85.653995 50.09158500000001 0 0 0 0 0.0009679577526259028 0.0 0.0 0.0 0 0 0 0 0 0
+bn257G 84.313251 49.439423000000005 0 0 0 0 0.05116865782016437 0.0 0.0 0.0 0 0 7.8191999999999995 2.4588 46.073707 0
+bo273G 84.951211 49.91433800000001 0 0 0 0 0.01469858102192274 0.0 0.0 0.0 0 0 7.549199999999999 0.0 113.230829 0
+bp043G 85.846438 50.26794300000001 0 0 0 0 0.008012678005919038 0.0 0.0 0.0 0 0 6.667199999999999 0.0 129.933559 0
+bq001 85.48298299999999 50.12788200000001 0 0 0 0 0.001387178757502645 0.0 0.0 0.0 0 0 0 0 0 0
+br173G 85.56139 49.358871 0 0 0 0 0.04300464118194119 0.0 0.0 0.0 0 0 4.8816 0.0 35.812968 0
+aq093a 86.13618700000002 49.934946 0 0 0 0 0.0016013775737705775 0.0 0.0 0.0 -0.44338937381178756 0 0 0 0 1424500000.12
+bs010 85.520362 49.982495 0 0 0 0 0.00057511481246919 0.0 0.0 0.0 0 0 0 0 0 0
+bt234G 84.86789300000001 49.437307 0 0 0 0 0.023845664962735318 0.0 0.0 0.0 0 0 6.537599999999999 1.6667999999999998 86.477453 0
+bu294G 84.81237100000001 50.203188 0 0 0 0 0.025811781623030463 0.0 0.0 0.0 0 0 18.5616 2.3472 106.021414 0
+bv111 85.781557 49.77478800000001 0 0 0 0 0.0004737687560487315 0.0 0.0 0.0 0 0 0 0 0 0
+bw161 85.57135800000002 49.722723 0 0 0 0 0.0005189191484181142 0.0 0.0 0.0 0 0 0 0 0 0
+bx326G 84.828607 50.733878 0 0 0 0 0.1466105144141137 0.0 0.0 0.0 0 0 6.5916 3.4019999999999997 157.431326 0
+bi265aG 84.55894300000001 49.688128 0 0 0 0 0.01361068675963317 0.0 0.0 0.0 0 0 13.708800000000002 9.536399999999999 116.06580700000002 0
+by211 85.37167999999998 49.684562 0 0 0 0 0.0008743829611748795 0.0 0.0 0.0 0 0 0 0 0 0
+bz052 85.85156500000001 50.173682 0 0 0 0 0.001967592407061195 0.0 0.0 0.0 0 0 0 0 0 0
+ca099 87.036583 49.96748900000001 0 0 0 0 0.02109709504682287 0.0 0.0 0.0 0 0 0 0 0 0
+cb257 84.279644 49.559413000000006 0 0 0 0 0.030324440769925624 0.0 0.0 0.0 0 0 0 0 0 0
+cc078G 86.82519700000002 50.488054 0 0 0 0 0.059119906824737785 0.0 0.0 0.0 0 0 10.7172 4.2588 63.181408 0
+cd122 85.775719 49.71049500000001 0 0 0 0 0.000524211758215733 0.0 0.0 0.0 0 0 0 0 0 0
+ce345G 85.220154 50.80178300000001 0 0 0 0 0.06033024161107503 0.0 0.0 0.0 0 0 5.1516 1.7856 142.73436 0
+cf338G 84.728356 51.123196 0 0 0 0 0.187575703106332 0.0 0.0 0.0 0 0 9.1224 2.0952 138.412607 0
+cg236G 84.709742 49.17465700000001 0 0 0 0 0.023417983810154183 0.0 0.0 0.0 0 0 10.908000000000001 0.0 57.063577 0
+ch074 86.271327 50.200367 0 0 0 0 0.1485903006277715 0.0 0.0 0.0 0 0 0 0 0 0
+ci101G 85.74367799999999 49.87656 0 0 0 0 0.00038734588726479504 0.0 0.0 0.0 0 0 18.9504 0.0 22.350554 0
+bi265bG 84.552774 49.67209600000001 0 0 0 0 0.011929072746064862 0.0 0.0 0.0 0 0 17.4528 10.1664 57.40514199999999 0
+B250d 85.494042 49.89812800000001 0 0 0 0 0.000422042390697006 0.0 0.0 0.0 0 0 0 0 0 0
+cj270 85.39591000000001 49.898933 0 0 0 0 0.000515749848665839 0.0 0.0 0.0 0 0 0 0 0 0
+ck005G 85.549373 50.753725 0 0 0 0 0.019298528836856295 0.0 0.0 0.0 0 0 4.2408 3.798 103.069252 0
+cl091 85.794929 49.884421 0 0 0 0 0.00037995969075168846 0.0 0.0 0.0 0 0 0 0 0 0
+cm078G 86.772197 50.468961 0 0 0 0 0.02935354303329913 0.0 0.0 0.0 0 0 17.208000000000002 6.3684 99.992522 0
+cn12xG 87.605578 48.56615699999999 0 0 0 0 0.1083209155465395 0.0 0.0 0.0 0 0 17.46 8.1864 97.885663 0
+co175G 85.60991 49.07273800000001 0 0 0 0 0.010107262136228935 0.0 0.0 0.0 0 0 4.719600000000001 1.2744 7.337445000000001 0
+cp11xG 87.22663500000002 49.27594 0 0 0 0 0.3328761190407426 0.0 0.0 0.0 0 0 16.358400000000003 5.1732 71.147072 0
+cq171 85.518603 49.70845500000001 0 0 0 0 0.00044246654152716017 0.0 0.0 0.0 0 0 0 0 0 0
+cr28xG 83.550059 50.378839 0 0 0 0 0.304272247351729 0.0 0.0 0.0 0 0 14.997600000000002 8.1324 74.650851 0
+cq171aG 85.508676 49.709215 0 0 0 0 0.00044504011777008926 0.0 0.0 0.0 0 0 5.4684 0.0 130.156961 0
+cs06xG 87.481241 51.072851 0 0 0 0 0.23313856386606116 0.0 0.0 0.0 0 0 10.944 0.0 53.763792 0
+ct142G 85.742743 49.558526 0 0 0 0 0.0009376793934180677 0.0 0.0 0.0 0 0 30.7296 0.0 69.815529 0
+cu314G 84.909267 50.44599900000001 0 0 0 0 0.00889506711631609 0.0 0.0 0.0 0 0 12.005999999999998 4.715999999999999 43.326914 0
+cg236aG 84.69968099999998 49.169685 0 0 0 0 0.020574252480893392 0.0 0.0 0.0 0 0 16.9056 0.0 37.020128 0
+N201bG 85.376716 49.623675 0 0 0 0 0.0008906667295853902 0.0 0.0 0.0 -0.7449505146767801 0 12.376800000000001 0.0 18.940514 1424500000.12
+cv241G 85.322571 49.789888 0 0 0 0 0.0005482912458106664 0.0 0.0 0.0 0 0 20.7072 7.056 104.277873 0
+cw155G 85.93306100000001 49.112832000000004 0 0 0 0 0.009162009456401523 0.0 0.0 0.0 0 0 5.9976 0.0 142.893474 0
+B250e 85.48760900000002 49.896203 0 0 0 0 0.0003478286817978296 0.0 0.0 0.0 0 0 0 0 0 0
+cx279G 83.982983 49.807286 0 0 0 0 0.967793845581341 0.0 0.0 0.0 0 0 8.5824 3.0420000000000003 95.459474 0
+cy112 85.86625799999999 49.797677 0 0 0 0 0.00037076346922860755 0.0 0.0 0.0 0 0 0 0 0 0
+Q150a 85.58740899999998 49.76863000000001 0 0 0 0 0.00032181376174801856 0.0 0.0 0.0 0 0 0 0 0 0
+cz181G 85.480223 49.57903 0 0 0 0 0.0008804723441474854 0.0 0.0 0.0 0 0 11.1996 0.0 24.085089 0
+da000G 85.506194 50.0292 0 0 0 0 0.00046724831326453635 0.0 0.0 0.0 0 0 5.3064 1.5624 13.255068 0
+db142 85.741614 49.612533 0 0 0 0 0.0005834079111351836 0.0 0.0 0.0 0 0 0 0 0 0
+at024aG 85.76345100000002 50.56050299999999 0 0 0 0 0.010134232181075876 0.0 0.0 0.0 0 0 9.705599999999999 1.9584 64.781984 0
+dc222 85.22711600000001 49.538048 0 0 0 0 0.0037869423434740606 0.0 0.0 0.0 0 0 0 0 0 0
+dd250G 85.413888 49.86863100000001 0 0 0 0 0.0003680274902426378 0.0 0.0 0.0 0 0 19.519199999999998 0.0 135.076468 0
+de066G 86.36834600000002 50.430214 0 0 0 0 0.009460380661094597 0.0 0.0 0.0 0 0 7.3008 4.2048000000000005 24.086777 0
+df348G 84.929357 51.113024 0 0 0 0 0.08716879795137178 0.0 0.0 0.0 0 0 8.3628 4.784400000000001 172.139387 0
+M300bG 85.40897600000001 49.95453800000001 0 0 0 0 0.0004124632757367746 0.0 0.0 0.0 0 0 7.977600000000001 0.0 151.674007 0
+dg055G 86.103329 50.488608 0 0 0 0 0.010694840977888694 0.0 0.0 0.0 0 0 5.317200000000001 0.0 35.841443 0
+dh072 85.942204 50.061874 0 0 0 0 0.000688396671395934 0.0 0.0 0.0 0 0 0 0 0 0
+di095G 86.407275 49.859803 0 0 0 0 0.014795187690888032 0.0 0.0 0.0 0 0 3.6936 2.682 106.311612 0
+dj171 85.52869100000001 49.725344 0 0 0 0 0.0003390608256073515 0.0 0.0 0.0 0 0 0 0 0 0
+dk230G 85.377141 49.793793 0 0 0 0 0.0003968836823045322 0.0 0.0 0.0 0 0 9.266399999999999 2.7251999999999996 100.201154 0
+G196a 85.314895 48.912915 0 0 0 0 0.02896142820269427 0.0 0.0 0.0 0 0 0 0 0 0
+dl242G 85.21803000000001 49.701458 0 0 0 0 0.000982639931443642 0.0 0.0 0.0 0 0 4.8816 1.35 134.851015 0
+dm26xG 83.609864 49.459866000000005 0 0 0 0 0.11646526609927536 0.0 0.0 0.0 0 0 12.088799999999999 4.914 91.0956 0
+dn021G 85.57460500000002 50.067604 0 0 0 0 0.0004581155105801508 0.0 0.0 0.0 0 0 5.76 0.0 137.503162 0
+do275 84.628625 49.86225300000001 0 0 0 0 0.012791613613256186 0.0 0.0 0.0 0 0 0 0 0 0
+dp146 86.11976600000001 49.081272 0 0 0 0 0.008442369486110024 0.0 0.0 0.0 0 0 0 0 0 0
+dq040 85.52751800000001 49.934626 0 0 0 0 0.00029583471431229435 0.0 0.0 0.0 0 0 0 0 0 0
+dr134 86.05671100000002 49.458475 0 0 0 0 0.010008421981969084 0.0 0.0 0.0 0 0 0 0 0 0
+ds122 85.924266 49.689602 0 0 0 0 0.000488715569914203 0.0 0.0 0.0 0 0 0 0 0 0
+dt005G 85.531939 50.835938 0 0 0 0 0.03771783856510834 0.0 0.0 0.0 0 0 8.2332 4.3704 157.423832 0
+M300c 85.398495 49.952576 0 0 0 0 0.0003882159546179499 0.0 0.0 0.0 -2.011820774326965 0 0 0 0 1424500000.12
+N201c 85.380442 49.62842800000001 0 0 0 0 0.0006970904451045248 0.0 0.0 0.0 0 0 0 0 0 0
+du070G 85.603154 49.940854 0 0 0 0 0.00027340369702445554 0.0 0.0 0.0 0 0 7.65 4.7988 75.560294 0
+dv207G 85.127997 48.777578999999996 0 0 0 0 1.723461879229338 0.0 0.0 0.0 0 0 6.9552000000000005 0.0 14.578122 0
+dw221G 85.400117 49.759552 0 0 0 0 0.0003596885409137644 0.0 0.0 0.0 0 0 22.453200000000002 6.8328 36.493621 0
+dx317G 84.56013500000002 50.61790899999999 0 0 0 0 0.1108554744287197 0.0 0.0 0.0 0 0 6.994800000000001 4.8671999999999995 176.954691 0
+S240a 85.41965800000001 49.849785000000004 0 0 0 0 0.00029900767291410194 0.0 0.0 0.0 0 0 0 0 0 0
+al092a 85.88726800000002 49.856950999999995 0 0 0 0 0.00028960458010105633 0.0 0.0 0.0 0 0 0 0 0 0
+dy002 85.50964 50.304950000000005 0 0 0 0 0.007576669845425439 0.0 0.0 0.0 0 0 0 0 0 0
+bt234aG 84.861607 49.439751 0 0 0 0 0.01236035204869662 0.0 0.0 0.0 0 0 4.824000000000001 0.0 59.282156 0
+dz281G 85.21698400000001 49.962103 0 0 0 0 0.0007184299875963401 0.0 0.0 0.0 0 0 12.4524 3.5928 1.482691 0
+ea056G 86.300675 50.679145 0 0 0 0 0.015099312498001156 0.0 0.0 0.0 0 0 4.59 0.0 60.24276400000001 0
+eb061G 85.72274800000001 50.01180600000001 0 0 0 0 0.0003015114639467302 0.0 0.0 0.0 0 0 20.7684 0.0 40.243792 0
+ec024G 85.689883 50.59219000000001 0 0 0 0 0.0070439881083481995 0.0 0.0 0.0 0 0 3.6143999999999994 0.0 107.699596 0
+bn257aG 84.31454400000001 49.442433 0 0 0 0 0.02279610744235327 0.0 0.0 0.0 0 0 19.9296 15.6096 6.469376 0
+ed221 85.31351700000002 49.645525000000006 0 0 0 0 0.0006967553707358792 0.0 0.0 0.0 0 0 0 0 0 0
+dj171a 85.54104299999999 49.727654 0 0 0 0 0.0002705165151769336 0.0 0.0 0.0 0 0 0 0 0 0
+ee346 85.149959 50.923973000000004 0 0 0 0 2.728147817248216 0.0 0.0 0.0 0 0 0 0 0 0
+ef215 85.104453 49.069668 0 0 0 0 0.008730058488475053 0.0 0.0 0.0 0 0 0 0 0 0
+eg276 84.475406 49.85484000000001 0 0 0 0 0.006348981854194458 0.0 0.0 0.0 0 0 0 0 0 0
+eh071G 85.671938 49.949747 0 0 0 0 0.00023259839087501374 0.0 0.0 0.0 0 0 7.8804 4.374 79.168324 0
+ei090 85.628938 49.891731 0 0 0 0 0.00021282382575745412 0.0 0.0 0.0 0 0 0 0 0 0
+ej119G 86.88564 49.34951000000001 0 0 0 0 0.015778538251266513 0.0 0.0 0.0 0 0 6.0876 0.0 115.48200299999999 0
+ct142aG 85.75426400000002 49.565978 0 0 0 0 0.000606551647194209 0.0 0.0 0.0 0 0 18.2376 9.144000000000002 31.667094 0
+ek097G 86.80015700000001 49.921440000000004 0 0 0 0 0.006809978299654974 0.0 0.0 0.0 0 0 15.634799999999998 5.450399999999999 1.290049 0
+el101 85.76691100000001 49.859155 0 0 0 0 0.0002141107406224036 0.0 0.0 0.0 0 0 0 0 0 0
+em101 85.80303799999999 49.867780999999994 0 0 0 0 0.00022315962589376128 0.0 0.0 0.0 0 0 0 0 0 0
+ci101aG 85.755473 49.886105 0 0 0 0 0.00021344317248145822 0.0 0.0 0.0 0 0 5.7456000000000005 0.0 44.576166 0
+en021 85.62004400000001 50.1933 0 0 0 0 0.0009483438256831594 0.0 0.0 0.0 0 0 0 0 0 0
+eo315G 84.806559 50.387162 0 0 0 0 0.005845863616972254 0.0 0.0 0.0 0 0 6.3864 2.6208 146.135013 0
+ep142G 85.718518 49.645362 0 0 0 0 0.00033813730275418903 0.0 0.0 0.0 0 0 13.1364 0.0 48.343835 0
+eq146 86.155845 49.111395 0 0 0 0 0.00629177722777114 0.0 0.0 0.0 0 0 0 0 0 0
+bh172a 85.554181 49.543874 0 0 0 0 0.0007087044176143703 0.0 0.0 0.0 0 0 0 0 0 0
+er180G 85.51107699999999 49.763406 0 0 0 0 0.00023921923219858156 0.0 0.0 0.0 0 0 6.429600000000001 0.0 151.353607 0
+ds122a 85.92144900000001 49.70511700000001 0 0 0 0 0.0003579167546523645 0.0 0.0 0.0 0 0 0 0 0 0
+es112G 85.91717400000002 49.731908 0 0 0 0 0.0003216037372839361 0.0 0.0 0.0 0 0 8.3556 3.5172 170.600608 0
+et131 85.63999400000002 49.77747800000001 0 0 0 0 0.00020562175346106775 0.0 0.0 0.0 0 0 0 0 0 0
+eu200G 85.476435 49.815927 0 0 0 0 0.00022943021333847623 0.0 0.0 0.0 0 0 3.2832000000000003 0.0 46.528732 0
+ev133 85.90151600000002 49.495438 0 0 0 0 0.001611077173118112 0.0 0.0 0.0 0 0 0 0 0 0
+dw221aG 85.40575700000001 49.764872 0 0 0 0 0.00028600182916579595 0.0 0.0 0.0 0 0 11.905199999999999 0.0 26.695499 0
+ew140 85.553694 49.841555 0 0 0 0 0.0002001206341371704 0.0 0.0 0.0 0 0 0 0 0 0
+cq171b 85.499072 49.71117900000001 0 0 0 0 0.00027176922491310273 0.0 0.0 0.0 0 0 0 0 0 0
+ex191 85.456894 49.660209 0 0 0 0 0.0003643854022725176 0.0 0.0 0.0 0 0 0 0 0 0
+ay102a 85.82672000000001 49.845052 0 0 0 0 0.00021622971669364632 0.0 0.0 0.0 0 0 0 0 0 0
+ei090a 85.632931 49.886992000000006 0 0 0 0 0.0001909673108899285 0.0 0.0 0.0 0 0 0 0 0 0
+ey147G 86.38005499999998 48.951422 0 0 0 0 0.04967388986371956 0.0 0.0 0.0 0 0 21.4632 2.0412 142.50836 0
+ez103 86.06129 49.791806 0 0 0 0 0.0004490613029539293 0.0 0.0 0.0 0 0 0 0 0 0
+fa082 85.86273599999998 49.933536 0 0 0 0 0.00024344928970226748 0.0 0.0 0.0 0 0 0 0 0 0
+fb220 85.451483 49.846737 0 0 0 0 0.00022376348954072738 0.0 0.0 0.0 0 0 0 0 0 0
+fc011 85.557876 50.16087 0 0 0 0 0.0006519326288746158 0.0 0.0 0.0 0 0 0 0 0 0
+fd025 85.89477 50.77109 0 0 0 0 0.013019302286957897 0.0 0.0 0.0 0 0 0 0 0 0
+P050a 85.516446 49.913458 0 0 0 0 0.00020582094936085277 0.0 0.0 0.0 0 0 0 0 0 0
+fe097 86.744207 49.965603 0 0 0 0 0.006776521503519559 0.0 0.0 0.0 0 0 0 0 0 0
+ff102 85.86684299999999 49.85601 0 0 0 0 0.00021951533224342577 0.0 0.0 0.0 0 0 0 0 0 0
+fg212 85.317982 49.51122199999999 0 0 0 0 0.0019310399946764767 0.0 0.0 0.0 0 0 0 0 0 0
+A110f 85.652678 49.854077 0 0 0 0 0.00017708251203196756 0.0 0.0 0.0 0 0 0 0 0 0
+bn257bG 84.319987 49.454359 0 0 0 0 0.016603130630882357 0.0 0.0 0.0 0 0 14.1192 7.952400000000001 19.793344 0
+fh25xG 83.52087900000001 49.198392 0 0 0 0 3.722566776356147 0.0 0.0 0.0 0 0 11.851199999999999 8.8344 119.84957799999998 0
+fi08xG 87.137636 50.309858 0 0 0 0 0.16427991913287066 0.0 0.0 0.0 0 0 10.8324 0.0 64.318063 0
+fj077G 86.70651599999998 50.416628 0 0 0 0 0.008314775637276443 0.0 0.0 0.0 0 0 6.2496 2.9196 9.545683 0
+A110g 85.644486 49.85488900000001 0 0 0 0 0.0001752783733917841 0.0 0.0 0.0 0 0 0 0 0 0
+fk094G 86.228419 49.866245000000006 0 0 0 0 0.0010882811118068008 0.0 0.0 0.0 0 0 6.6312 4.0068 54.603567 0
+fl135G 86.218842 49.314436 0 0 0 0 0.010919805781931516 0.0 0.0 0.0 0 0 7.178400000000001 0.0 135.675629 0
+cd122a 85.777959 49.715833 0 0 0 0 0.00023033986063413485 0.0 0.0 0.0 0 0 0 0 0 0
+ci101b 85.746041 49.865315 0 0 0 0 0.0001799521444839762 0.0 0.0 0.0 0 0 0 0 0 0
+fm172 85.60057899999998 49.439572999999996 0 0 0 0 0.002076618111313575 0.0 0.0 0.0 0 0 0 0 0 0
+fn130 85.596033 49.805359 0 0 0 0 0.0001747733849492259 0.0 0.0 0.0 0 0 0 0 0 0
+fo093G 86.058376 49.887078 0 0 0 0 0.00037791687445499193 0.0 0.0 0.0 0 0 11.340000000000002 4.95 74.16015 0
+fp177G 85.678773 48.699024 0 0 0 0 0.30361058515430306 0.0 0.0 0.0 0 0 6.260400000000001 3.582 169.918652 0
+fq12xG 87.35319500000001 48.62032200000001 0 0 0 0 0.11326516551203365 0.0 0.0 0.0 0 0 9.183599999999998 0.0 139.084646 0
+A110h 85.64842599999999 49.850019 0 0 0 0 0.00016156574322970772 0.0 0.0 0.0 0 0 0 0 0 0
+fr162 85.61788 49.547094 0 0 0 0 0.00053406470905919 0.0 0.0 0.0 0 0 0 0 0 0
+fs236 84.699728 49.31059599999999 0 0 0 0 0.005613835570835469 0.0 0.0 0.0 0 0 0 0 0 0
+ft135 86.239566 49.28750699999999 0 0 0 0 0.007155195775666683 0.0 0.0 0.0 0 0 0 0 0 0
+fu103 86.05333999999999 49.847118 0 0 0 0 0.00035508511926026745 0.0 0.0 0.0 0 0 0 0 0 0
+fv073G 86.05487400000001 50.065488 0 0 0 0 0.0006838467203289275 0.0 0.0 0.0 0 0 5.3964 1.278 95.957054 0
+dl242a 85.214147 49.688695 0 0 0 0 0.0006698274171574189 0.0 0.0 0.0 0 0 0 0 0 0
+fw231 85.340766 49.77949499999999 0 0 0 0 0.0002801137470120461 0.0 0.0 0.0 0 0 0 0 0 0
+fx235G 84.77889400000001 49.225653 0 0 0 0 0.0060867204286367115 0.0 0.0 0.0 0 0 3.2616 2.4624 31.842927 0
+fy08xG 87.744612 50.167159 0 0 0 0 0.07355207517034314 0.0 0.0 0.0 0 0 10.8 4.1184 116.29120899999998 0
+fz102G 85.99297800000001 49.822733 0 0 0 0 0.0002745629005272173 0.0 0.0 0.0 0 0 8.6904 0.0 25.781977 0
+ga246G 84.64943899999999 49.37351300000001 0 0 0 0 0.005138133629271287 0.0 0.0 0.0 0 0 4.5648 2.61 22.573224 0
+gb272G 85.098163 49.918913999999994 0 0 0 0 0.0009545382633463356 0.0 0.0 0.0 0 0 2.0376 0.0 38.476787 0
+gc014G 85.661183 50.600035 0 0 0 0 0.0048021923126122254 0.0 0.0 0.0 0 0 8.6256 2.79 92.801337 0
+gd191G 85.461719 49.69230300000001 0 0 0 0 0.00024666420277594605 0.0 0.0 0.0 0 0 5.8572 4.1112 62.69264799999999 0
+ge258G 84.175355 49.31368200000001 0 0 0 0 1.813361256131663 0.0 0.0 0.0 0 0 9.4572 5.058 79.004298 0
+gf102 85.930699 49.813717 0 0 0 0 0.00021760453388050194 0.0 0.0 0.0 0 0 0 0 0 0
+gg102 85.974155 49.774816 0 0 0 0 0.0002608084338892978 0.0 0.0 0.0 0 0 0 0 0 0
+gh30xG 83.396886 51.245614 0 0 0 0 0.21438627718534695 0.0 0.0 0.0 0 0 18.3492 2.0556 142.619844 0
+ff102a 85.86678100000002 49.864881 0 0 0 0 0.00017903813265050743 0.0 0.0 0.0 0 0 0 0 0 0
+gi072 85.815074 50.019806 0 0 0 0 0.00022880800992272575 0.0 0.0 0.0 0 0 0 0 0 0
+gj022 85.656176 50.242945000000006 0 0 0 0 0.0012513626897773008 0.0 0.0 0.0 0 0 0 0 0 0
+gk072 85.92180700000002 50.054257 0 0 0 0 0.000340760784675228 0.0 0.0 0.0 0 0 0 0 0 0
+gl035 85.90808699999998 50.708269 0 0 0 0 0.006177948870687285 0.0 0.0 0.0 0 0 0 0 0 0
+gm286G 84.38574 50.09408200000001 0 0 0 0 0.0051213177045641095 0.0 0.0 0.0 0 0 13.2588 0.0 163.017739 0
+gn12xG 87.66597100000001 48.77062500000001 0 0 0 0 0.06536434925685765 0.0 0.0 0.0 0 0 12.2832 4.6692 126.50409199999999 0
+go060 85.605438 49.966779 0 0 0 0 0.00016415703569606316 0.0 0.0 0.0 0 0 0 0 0 0
+gp281 85.288493 49.938894000000005 0 0 0 0 0.0003058721031003116 0.0 0.0 0.0 0 0 0 0 0 0
+gq105 86.397714 49.656589 0 0 0 0 0.0308501635591711 0.0 0.0 0.0 0 0 0 0 0 0
+gr049G 86.65693900000001 51.057327 0 0 0 0 0.061534265569952784 0.0 0.0 0.0 0 0 12.376800000000001 6.0876 14.367753000000002 0
+gs08xG 87.213904 50.145137 0 0 0 0 0.08289667539499954 0.0 0.0 0.0 0 0 13.708800000000002 4.2408 65.931853 0
+gt261 85.252989 49.87091 0 0 0 0 0.0003176841188162603 0.0 0.0 0.0 0 0 0 0 0 0
+es112a 85.91911100000002 49.741314 0 0 0 0 0.00021711401324762028 0.0 0.0 0.0 0 0 0 0 0 0
+A110i 85.656773 49.84955 0 0 0 0 0.00013425466912512943 0.0 0.0 0.0 0 0 0 0 0 0
+H195b 85.40353099999999 49.046619 0 0 0 0 0.004577690977254836 0.0 0.0 0.0 0 0 0 0 0 0
+gu055G 86.227122 50.587917 0 0 0 0 0.0046629219278244965 0.0 0.0 0.0 0 0 6.8976 0.0 43.299775 0
+gv054 86.146804 50.386548 0 0 0 0 0.015454507684941414 0.0 0.0 0.0 0 0 0 0 0 0
+gw269 83.935399 49.680806 0 0 0 0 0.8112730910945324 0.0 0.0 0.0 0 0 0 0 0 0
+gx092 85.963299 49.88134 0 0 0 0 0.00020839384414880714 0.0 0.0 0.0 0 0 0 0 0 0
+gy031 85.612953 50.103486 0 0 0 0 0.0002860224210071341 0.0 0.0 0.0 0 0 0 0 0 0
+H195c 85.39887800000001 49.04036000000001 0 0 0 0 0.004515317090979741 0.0 0.0 0.0 0 0 0 0 0 0
+gz28xG 83.55276100000002 50.161550000000005 0 0 0 0 0.05421926765247324 0.0 0.0 0.0 0 0 12.959999999999999 10.393199999999998 87.366754 0
+ha155G 85.952554 49.06183800000001 0 0 0 0 0.00412509461848593 0.0 0.0 0.0 0 0 4.4604 3.2472 58.746118 0
+hb077G 86.68619400000001 50.291348 0 0 0 0 0.00420870396119081 0.0 0.0 0.0 0 0 7.851600000000001 0.0 46.882137 0
+hc053 85.996367 50.290874 0 0 0 0 0.00908305530895856 0.0 0.0 0.0 0 0 0 0 0 0
+hd066G 86.444216 50.520249 0 0 0 0 0.004695637642435678 0.0 0.0 0.0 0 0 6.6815999999999995 2.1995999999999998 19.963621 0
+he108G 86.919366 49.67228600000001 0 0 0 0 0.004317793720176379 0.0 0.0 0.0 0 0 5.8824000000000005 0.0 136.032184 0
+hf331 85.365399 50.115676 0 0 0 0 0.00048213695351193784 0.0 0.0 0.0 0 0 0 0 0 0
+hg247G 84.319114 49.313972 0 0 0 0 0.039617822538598677 0.0 0.0 0.0 0 0 13.726799999999999 0.0 56.165419 0
+hh103 86.04762500000001 49.769765 0 0 0 0 0.00028933192920472714 0.0 0.0 0.0 0 0 0 0 0 0
+hi162 85.608006 49.50894600000001 0 0 0 0 0.0005926909596606095 0.0 0.0 0.0 0 0 0 0 0 0
+hj342G 85.342057 50.236644 0 0 0 0 0.0022183287264869 0.0 0.0 0.0 0 0 8.1072 6.3755999999999995 19.414599 0
+hk212G 85.300892 49.573115 0 0 0 0 0.0007296053171167158 0.0 0.0 0.0 0 0 6.0047999999999995 0.0 51.114439 0
+G196b 85.312007 48.909369 0 0 0 0 0.01453010833162101 0.0 0.0 0.0 0 0 0 0 0 0
+hl052 85.76841 50.139687 0 0 0 0 0.00036390250857058445 0.0 0.0 0.0 0 0 0 0 0 0
+gn12xaG 87.677258 48.762893999999996 0 0 0 0 0.05064768937243134 0.0 0.0 0.0 0 0 11.4372 4.2264 127.186493 0
+hm265 84.544063 49.79749100000001 0 0 0 0 0.003955588014487305 0.0 0.0 0.0 0 0 0 0 0 0
+hn286G 84.396361 50.066001 0 0 0 0 0.0039540918852228974 0.0 0.0 0.0 0 0 8.956800000000001 6.4404 74.23347 0
+ho109 87.064531 49.73500299999999 0 0 0 0 0.006908560995931712 0.0 0.0 0.0 0 0 0 0 0 0
+hp185 85.44828999999999 49.062978 0 0 0 0 0.0037245147327935645 0.0 0.0 0.0 0 0 0 0 0 0
+hq12xG 87.60048200000001 48.505451 0 0 0 0 0.04195700598091431 0.0 0.0 0.0 0 0 15.0696 0.0 134.10983 0
+hr067G 86.59739400000001 50.513180999999996 0 0 0 0 0.006077710522348738 0.0 0.0 0.0 0 0 13.662 0.0 39.935383 0
+hs166 85.890966 48.917154 0 0 0 0 0.009434979537697416 0.0 0.0 0.0 0 0 0 0 0 0
+ht109G 87.04788900000001 49.693535 0 0 0 0 0.006394898724925413 0.0 0.0 0.0 0 0 6.4404 1.2131999999999998 90.376242 0
+hu166 85.864485 48.836401 0 0 0 0 0.037451314332247035 0.0 0.0 0.0 0 0 0 0 0 0
+hv057G 86.47033000000002 50.60945000000001 0 0 0 0 0.007276076761392004 0.0 0.0 0.0 0 0 6.566400000000001 3.33 34.855409 0
+hw103 86.138871 49.802858 0 0 0 0 0.0003878588645601122 0.0 0.0 0.0 0 0 0 0 0 0
+hx013 85.665198 50.529757 0 0 0 0 0.004979331649519516 0.0 0.0 0.0 0 0 0 0 0 0
+hy133 85.951574 49.573256 0 0 0 0 0.0004781846933216933 0.0 0.0 0.0 0 0 0 0 0 0
+N201dG 85.37570699999999 49.631569 0 0 0 0 0.0003034135332825865 0.0 0.0 0.0 0 0 9.8064 0.0 43.324004 0
+hz08x 87.209263 50.272885 0 0 0 0 0.4051774394879799 0.0 0.0 0.0 0 0 0 0 0 0
+ia29xG 83.82537600000002 50.604996 0 0 0 0 0.043755764656285834 0.0 0.0 0.0 0 0 11.7 2.376 110.916277 0
+ib306G 84.564146 50.377970999999995 0 0 0 0 0.004206147723040001 0.0 0.0 0.0 0 0 5.0976 1.4832 99.865619 0
+ic256G 84.542325 49.51318700000001 0 0 0 0 0.0032984406525964818 0.0 0.0 0.0 0 0 9.302399999999999 0.0 36.696471 0
+id124G 86.15122899999999 49.588189 0 0 0 0 0.0012325030608133585 0.0 0.0 0.0 0 0 7.441199999999999 0.0 118.50048400000001 0
+ie23xG 84.226535 48.629464000000006 0 0 0 0 4.62660628533627 0.0 0.0 0.0 0 0 11.214 2.9699999999999998 22.431274 0
+if295G 84.64782700000002 50.270707 0 0 0 0 0.002938376793122128 0.0 0.0 0.0 0 0 5.8428 0.0 131.060016 0
+ig089G 87.09484 50.192805 0 0 0 0 0.015650064366549966 0.0 0.0 0.0 0 0 7.570799999999998 3.5639999999999996 62.510485 0
+ih118G 86.76536800000001 49.336756 0 0 0 0 0.004480225654096124 0.0 0.0 0.0 0 0 6.4908 1.0403999999999998 150.943669 0
+hw103a 86.152064 49.807353 0 0 0 0 0.0003765278730157013 0.0 0.0 0.0 0 0 0 0 0 0
+ii046G 86.13008400000001 50.715744 0 0 0 0 0.006213397218524051 0.0 0.0 0.0 0 0 5.2632 0.0 68.185846 0
+ij016G 85.75878600000001 50.89748 0 0 0 0 0.06606720999829074 0.0 0.0 0.0 0 0 8.9388 4.6259999999999994 163.381828 0
+ik183G 85.504698 49.338783 0 0 0 0 0.03464575769093049 0.0 0.0 0.0 0 0 6.4799999999999995 4.2156 51.217363 0
+il176G 85.656756 48.804348 0 0 0 0 0.06396067031024755 0.0 0.0 0.0 0 0 7.8372 0.0 29.330807 0
+im298 84.11099299999998 50.288401 0 0 0 0 0.38816090472997955 0.0 0.0 0.0 0 0 0 0 0 0
+gz28xaG 83.56134700000001 50.16470300000001 0 0 0 0 0.036632885637822604 0.0 0.0 0.0 0 0 10.9188 4.2588 80.324133 0
+in11xG 87.467547 49.034364 0 0 0 0 0.06653795773106504 0.0 0.0 0.0 0 0 8.686800000000002 0.0 119.00889700000002 0
+io099 87.050999 49.977192 0 0 0 0 0.005044810388944112 0.0 0.0 0.0 0 0 0 0 0 0
+ip097G 86.759235 49.843522 0 0 0 0 0.003291030626891089 0.0 0.0 0.0 0 0 7.7076 0.0 53.605286 0
+iq095G 86.482881 49.94058400000001 0 0 0 0 0.10150738166626692 0.0 0.0 0.0 0 0 5.7852 0.0 37.843959 0
+ch074a 86.26484900000001 50.203574 0 0 0 0 0.03277376568774914 0.0 0.0 0.0 0 0 0 0 0 0
+Z285a 84.546693 50.127956 0 0 0 0 0.002479451794371511 0.0 0.0 0.0 0 0 0 0 0 0
+ir354 85.327027 50.646644 0 0 0 0 0.002410167230688144 0.0 0.0 0.0 0 0 0 0 0 0
+cq171c 85.49287 49.71318 0 0 0 0 8.111269677687587e-05 0.0 0.0 0.0 0 0 0 0 0 0
+ik183a 85.497474 49.33821900000001 0 0 0 0 0.021971150389285925 0.0 0.0 0.0 0 0 0 0 0 0
--- tigger-lsm-1.7.0.orig/test/3C147-HI6.refmodel.reference.txt
+++ tigger-lsm-1.7.0/test/3C147-HI6.refmodel.reference.txt
@@ -1,326 +1,326 @@
-#format: name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0
-A0 85.65057420039344 49.85200936748971 0 0 0 0 9.859337158203125 -4.332709724913578e-06 0.0002639347043305329 0.002161076417922203 -0.7099262475967407 0.0 0 0 0 1385000000.0
-A0a 85.65050986891873 49.85197850280577 0 0 0 0 4.9295166015625 -2.166288075557132e-06 0.00013196325682249821 0.0010805048968762776 -0.7099262475967407 0.0 0 0 0 1385000000.0
-A0b 85.65053129236571 49.85199243784206 0 0 0 0 3.28451904296875 -1.4433898923209287e-06 8.792663370214893e-05 0.0007199364961437026 -0.7099262475967407 0.0 0 0 0 1385000000.0
-A0c 85.65055277967043 49.85199808578795 0 0 0 0 3.2845193481445314 -1.443390026431169e-06 8.792666576973363e-05 0.0007199366586275336 -0.7099262475967407 0.0 0 0 0 1385000000.0
-A0d 85.65062930448465 49.85212044247567 0 0 0 0 1.234733123779297 -5.426064782276373e-07 3.3053832365716185e-05 0.0002706421936292891 -0.7099262475967407 0.0 0 0 0 1385000000.0
-A0e 85.65063791160625 49.852175398105864 0 0 0 0 0.4096230697631836 -1.8000985557485017e-07 1.0965618416099512e-05 8.978562575736592e-05 -0.7099262475967407 0.0 0 0 0 1385000000.0
-B290G 85.490387 49.89720499999999 0 0 0 0 0.03826158067268499 0.0 0.0 0.0 -0.8790400371758633 0 5.2884 0.7236 170.733145 1424500000.12
-C242G 85.182151 49.694903 0 0 0 0 0.0887058836969246 0.0 0.0 0.0 0.010392796216600608 0 3.6396 1.5803999999999998 57.219554 1424500000.12
-D140G 85.827299 49.731663 0 0 0 0 0.0236825399308751 0.0 0.0 0.0 -0.3646974893727074 0 2.5056000000000003 2.2788 131.409384 1424500000.12
-E090 85.80834000000002 49.843773000000006 0 0 0 0 0.0116135023170924 0.0 0.0 0.0 -0.8133517046735592 0 0 0 0 1424500000.12
-F121G 85.89017 49.766488 0 0 0 0 0.014704720808157915 0.0 0.0 0.0 -1.1039561188845133 0 14.0616 4.4676 135.531337 1424500000.12
-G195G 85.31441999999998 48.91178899999999 0 0 0 0 1.184207406832343 0.0 0.0 0.0 7.299087678304995 0 6.8976 5.76 76.54418 1424500000.12
-H194G 85.39953 49.042516 0 0 0 0 0.35345544967760817 0.0 0.0 0.0 1.4805344140241368 0 5.202000000000001 3.9095999999999997 16.493141 1424500000.12
-H194aG 85.403229 49.044472 0 0 0 0 0.3282685168540988 0.0 0.0 0.0 1.5425777742624247 0 5.1084 4.104 42.919008 1424500000.12
-I215G 85.008394 49.088678 0 0 0 0 0.41548313652379487 0.0 0.0 0.0 2.902473484685625 0 6.2748 2.4408 22.447551 1424500000.12
-J001G 85.665143 50.059872 0 0 0 0 0.009638236242744293 0.0 0.0 0.0 -0.5750208422631442 0 4.9428 0.0 20.52962 1424500000.12
-B290aG 85.48794300000002 49.907545000000006 0 0 0 0 0.006188563309864936 0.0 0.0 0.0 -1.6429169879215684 0 20.3868 4.9032 170.715884 1424500000.12
-K285 84.22448400000002 49.997924999999995 0 0 0 0 0.2988771537956234 0.0 0.0 0.0 5.165175111712941 0 0 0 0 1424500000.12
-L112G 86.154162 49.704053 0 0 0 0 0.022095505177117666 0.0 0.0 0.0 -0.8024268552220519 0 9.2088 3.1176 57.79198199999999 1424500000.12
-M301G 85.408689 49.954324 0 0 0 0 0.005747212805681905 0.0 0.0 0.0 -1.0586065366047654 0 9.6264 3.2543999999999995 101.546067 1424500000.12
-N221G 85.379709 49.62849 0 0 0 0 0.010367343216787278 0.0 0.0 0.0 -0.2768832991034338 0 12.3984 4.3271999999999995 162.718033 1424500000.12
-L112aG 86.147901 49.694296 0 0 0 0 0.01782805293839603 0.0 0.0 0.0 -0.9664552563844166 0 8.218799999999998 0.9683999999999999 17.563751 1424500000.12
-O265 84.37459 49.724065 0 0 0 0 0.11264831212331218 0.0 0.0 0.0 2.377467128864789 0 0 0 0 1424500000.12
-P310 85.516442 49.913432 0 0 0 0 0.0032203248876156013 0.0 0.0 0.0 0.2860275029737752 0 0 0 0 1424500000.12
-Q210G 85.586806 49.768743 0 0 0 0 0.0030740429925802384 0.0 0.0 0.0 -0.14273714190432324 0 6.0516 2.8116 74.649051 1424500000.12
-R283 84.66131 50.00818400000001 0 0 0 0 0.13494386596000701 0.0 0.0 0.0 1.0591847681338784 0 0 0 0 1424500000.12
-D140a 85.827251 49.731682 0 0 0 0 0.0032964004284253734 0.0 0.0 0.0 0.33585798933856015 0 0 0 0 1424500000.12
-S270 85.418733 49.849665 0 0 0 0 0.002902823496384571 0.0 0.0 0.0 -1.027955111472692 0 0 0 0 1424500000.12
-T254 84.494951 49.588217 0 0 0 0 0.06391065166847286 0.0 0.0 0.0 2.9704825843232725 0 0 0 0 1424500000.12
-U051 86.00413 50.059927 0 0 0 0 0.005678059562557201 0.0 0.0 0.0 -0.32672087269666683 0 0 0 0 1424500000.12
-M301aG 85.39485600000002 49.95132600000001 0 0 0 0 0.00273737341861733 0.0 0.0 0.0 -0.9563659512415716 0 5.4792 0.0 150.745479 1424500000.12
-V151 85.806663 49.64142600000001 0 0 0 0 0.002883827072369766 0.0 0.0 0.0 -0.15728346165511642 0 0 0 0 1424500000.12
-W201 85.467543 49.566686 0 0 0 0 0.005172285191005143 0.0 0.0 0.0 -0.0031084627207409454 0 0 0 0 1424500000.12
-E090a 85.808339 49.843741 0 0 0 0 0.0015768683632177254 0.0 0.0 0.0 0.15715658899389928 0 0 0 0 1424500000.12
-X261 85.23875100000001 49.782947 0 0 0 0 0.0037566400884037404 0.0 0.0 0.0 -0.7175421667402149 0 0 0 0 1424500000.12
-Y002 85.67483200000001 50.33188100000001 0 0 0 0 0.07327267231113754 0.0 0.0 0.0 4.146707374879245 0 0 0 0 1424500000.12
-Z294 84.548397 50.130852999999995 0 0 0 0 0.03846618057775607 0.0 0.0 0.0 1.7899982099052734 0 0 0 0 1424500000.12
-aa322 85.31420499999999 50.119433 0 0 0 0 0.006244825648635683 0.0 0.0 0.0 -0.08949429026377231 0 0 0 0 1424500000.12
-ab325 84.73995 50.47775 0 0 0 0 0.045127587424326 0.0 0.0 0.0 3.524578316545999 0 0 0 0 1424500000.12
-ac317 84.083643 50.640651 0 0 0 0 0.34474621208322065 0.0 0.0 0.0 5.630595492363389 0 0 0 0 1424500000.12
-ad342 85.41405200000001 50.24308 0 0 0 0 0.01628678211290917 0.0 0.0 0.0 0.8097715901148881 0 0 0 0 1424500000.12
-N221a 85.37977400000001 49.623525 0 0 0 0 0.003294625523059915 0.0 0.0 0.0 -0.5412993214393516 0 0 0 0 1424500000.12
-ae232 85.23026999999999 49.592605 0 0 0 0 0.00820482921818608 0.0 0.0 0.0 2.431047004218636 0 0 0 0 1424500000.12
-af235G 84.54470799999999 49.271746 0 0 0 0 0.06829741031591728 0.0 0.0 0.0 4.835124208223845 0 6.3072 0.0 41.912364 1424500000.12
-ag031 85.866977 50.10652000000001 0 0 0 0 0.0026397108590530413 0.0 0.0 0.0 -0.6008029696851742 0 0 0 0 1424500000.12
-F121a 85.89124 49.765812 0 0 0 0 0.0013103670017206533 0.0 0.0 0.0 2.75136548645074 0 0 0 0 1424500000.12
-ah081 86.12741200000002 49.919226 0 0 0 0 0.0030338243266867775 0.0 0.0 0.0 -0.9084735520890121 0 0 0 0 1424500000.12
-ai295 84.318901 50.178700000000006 0 0 0 0 0.05062809327764703 0.0 0.0 0.0 5.035960640711893 0 0 0 0 1424500000.12
-aj180 85.649095 49.685462 0 0 0 0 0.001171303297573771 0.0 0.0 0.0 -0.7597299927270662 0 0 0 0 1424500000.12
-ak101G 86.09595 49.781892000000006 0 0 0 0 0.0023429366479754067 0.0 0.0 0.0 0 0 20.1456 0.0 37.976114 0
-al080G 85.887436 49.873087000000005 0 0 0 0 0.0010198646261616456 0.0 0.0 0.0 0.5851976105827296 0 15.8976 0.0 158.83801 1424500000.12
-L112b 86.1548 49.704221000000004 0 0 0 0 0.004055863930056866 0.0 0.0 0.0 1.9379210113032612 0 0 0 0 1424500000.12
-am235G 84.603938 49.306862 0 0 0 0 0.033853253624760875 0.0 0.0 0.0 3.046185354407594 0 6.3431999999999995 0.0 47.275424 1424500000.12
-an071 86.11137299999999 49.93751700000001 0 0 0 0 0.002455100302376349 0.0 0.0 0.0 -0.7915066173610139 0 0 0 0 1424500000.12
-ad342a 85.411788 50.242187 0 0 0 0 0.010355667214408469 0.0 0.0 0.0 1.073981466713624 0 0 0 0 1424500000.12
-B290b 85.489125 49.900927 0 0 0 0 0.0008374208096926871 0.0 0.0 0.0 -0.2533724378447622 0 0 0 0 1424500000.12
-ao344G 85.21736500000002 50.515296 0 0 0 0 0.023032200938294563 0.0 0.0 0.0 2.2099402507470467 0 3.9996 1.8395999999999997 119.38237500000001 1424500000.12
-ap172 85.71434 49.434934 0 0 0 0 0.00897535718293354 0.0 0.0 0.0 1.7078435341140903 0 0 0 0 1424500000.12
-aq071G 86.140584 49.93580599999999 0 0 0 0 0.0025671509770156 0.0 0.0 0.0 -1.2294580542263924 0 11.2824 5.8356 146.377815 1424500000.12
-ar073G 86.594289 50.083580999999995 0 0 0 0 0.04719925346734011 0.0 0.0 0.0 -2.061904743868059 0 9.468 2.34 73.090631 1424500000.12
-as271 85.34539400000001 49.853659 0 0 0 0 0.0010495489725337959 0.0 0.0 0.0 0.5467076638942489 0 0 0 0 1424500000.12
-at014G 85.772823 50.570226 0 0 0 0 0.022267239731096435 0.0 0.0 0.0 0 0 28.929599999999997 5.497199999999999 43.963277 0
-au021 85.798692 50.16624699999999 0 0 0 0 0.0024914742957367463 0.0 0.0 0.0 -0.8721995847559127 0 0 0 0 1424500000.12
-av161 85.778557 49.650481000000006 0 0 0 0 0.0010773680371497871 0.0 0.0 0.0 -0.3028886032954041 0 0 0 0 1424500000.12
-ac317aG 84.085934 50.640471 0 0 0 0 0.17331164559313803 0.0 0.0 0.0 5.3224204745015555 0 7.0632 0.0 42.7589 1424500000.12
-aw034G 86.251358 50.54776 0 0 0 0 0.020221095075116376 0.0 0.0 0.0 2.465592230859434 0 5.670000000000001 0.0 52.024985 1424500000.12
-ax213G 85.195879 49.28760700000001 0 0 0 0 0.04526571400459344 0.0 0.0 0.0 0 0 11.556000000000001 4.3668000000000005 80.873909 0
-L112c 86.14774000000001 49.693944 0 0 0 0 0.00313788178025012 0.0 0.0 0.0 2.581965263387142 0 0 0 0 1424500000.12
-ay090 85.834979 49.858217999999994 0 0 0 0 0.0006836974666558675 0.0 0.0 0.0 0.34844517391545904 0 0 0 0 1424500000.12
-ax213aG 85.21439299999999 49.284831 0 0 0 0 0.04662695211083994 0.0 0.0 0.0 0 0 10.4148 3.3912 111.062388 0
-az034G 86.298091 50.494159 0 0 0 0 0.019356871728253858 0.0 0.0 0.0 1.3104962402424625 0 6.5196 1.2276 43.564796 1424500000.12
-B290cG 85.48751500000002 49.907757 0 0 0 0 0.0006889420939524911 0.0 0.0 0.0 4.866549689017183 0 8.37 0.0 49.509819 1424500000.12
-ba195 85.38988399999998 48.976066 0 0 0 0 0.02929067630253879 0.0 0.0 0.0 0 0 0 0 0 0
-bb131 85.894653 49.713411 0 0 0 0 0.0009359923942207983 0.0 0.0 0.0 -0.4106888312608168 0 0 0 0 1424500000.12
-ax213bG 85.20422400000001 49.28623 0 0 0 0 0.04304973573415348 0.0 0.0 0.0 0 0 29.7324 7.639200000000001 107.465628 0
-bc328G 84.05905100000001 50.884712 0 0 0 0 0.5326354721187088 0.0 0.0 0.0 0 0 12.711599999999999 3.3048 134.147563 0
-bd250 85.424535 49.80595799999999 0 0 0 0 0.0007319247948674079 0.0 0.0 0.0 -0.7845945636292365 0 0 0 0 1424500000.12
-be350 85.602535 50.011602 0 0 0 0 0.0007386972230725153 0.0 0.0 0.0 0.24313824664240757 0 0 0 0 1424500000.12
-bf275 84.23605300000001 49.90021800000001 0 0 0 0 0.030816351012871467 0.0 0.0 0.0 0 0 0 0 0 0
-bg191 85.545155 49.54555 0 0 0 0 0.0018540674528342352 0.0 0.0 0.0 0 0 0 0 0 0
-bh264G 84.556756 49.681695 0 0 0 0 0.01674515506394857 0.0 0.0 0.0 0 0 22.0968 3.258 4.329168 0
-bi081 86.036108 49.910209 0 0 0 0 0.001089912353848124 0.0 0.0 0.0 0 0 0 0 0 0
-F121b 85.886639 49.767953 0 0 0 0 0.0007066374511119615 0.0 0.0 0.0 2.4240590023537463 0 0 0 0 1424500000.12
-J001a 85.665063 50.059819 0 0 0 0 0.0008430457198374354 0.0 0.0 0.0 0 0 0 0 0 0
-L112dG 86.149869 49.700471 0 0 0 0 0.0026010863407512725 0.0 0.0 0.0 0 0 28.674 0.0 5.189007 0
-J001b 85.651206 50.06197600000001 0 0 0 0 0.0008393916924586326 0.0 0.0 0.0 -0.5193418922479653 0 0 0 0 1424500000.12
-bj033G 86.186277 50.413227 0 0 0 0 0.03048339102662157 0.0 0.0 0.0 0 0 20.7684 6.6096 128.453681 0
-bk194 85.36135100000001 49.1267 0 0 0 0 0.015622797370746073 0.0 0.0 0.0 0 0 0 0 0 0
-bl001 85.653995 50.09158500000001 0 0 0 0 0.0009679577526259028 0.0 0.0 0.0 0 0 0 0 0 0
-bm255G 84.313251 49.439423000000005 0 0 0 0 0.05116865782016437 0.0 0.0 0.0 0 0 7.8191999999999995 2.4588 46.073707 0
-bn282G 84.951211 49.91433800000001 0 0 0 0 0.01469858102192274 0.0 0.0 0.0 0 0 7.549199999999999 0.0 113.230829 0
-bo022G 85.846438 50.26794300000001 0 0 0 0 0.008012678005919038 0.0 0.0 0.0 0 0 6.667199999999999 0.0 129.933559 0
-bp341 85.48298299999999 50.12788200000001 0 0 0 0 0.001387178757502645 0.0 0.0 0.0 0 0 0 0 0 0
-bq192G 85.56139 49.358871 0 0 0 0 0.04300464118194119 0.0 0.0 0.0 0 0 4.8816 0.0 35.812968 0
-aq071a 86.13618700000002 49.934946 0 0 0 0 0.0016013775737705775 0.0 0.0 0.0 -0.44338937381178756 0 0 0 0 1424500000.12
-br330 85.520362 49.982495 0 0 0 0 0.00057511481246919 0.0 0.0 0.0 0 0 0 0 0 0
-bs233G 84.86789300000001 49.437307 0 0 0 0 0.023845664962735318 0.0 0.0 0.0 0 0 6.537599999999999 1.6667999999999998 86.477453 0
-bt303G 84.81237100000001 50.203188 0 0 0 0 0.025811781623030463 0.0 0.0 0.0 0 0 18.5616 2.3472 106.021414 0
-bu130 85.781557 49.77478800000001 0 0 0 0 0.0004737687560487315 0.0 0.0 0.0 0 0 0 0 0 0
-bv200 85.57135800000002 49.722723 0 0 0 0 0.0005189191484181142 0.0 0.0 0.0 0 0 0 0 0 0
-bw336G 84.828607 50.733878 0 0 0 0 0.1466105144141137 0.0 0.0 0.0 0 0 6.5916 3.4019999999999997 157.431326 0
-bh264aG 84.55894300000001 49.688128 0 0 0 0 0.01361068675963317 0.0 0.0 0.0 0 0 13.708800000000002 9.536399999999999 116.06580700000002 0
-bx231 85.37167999999998 49.684562 0 0 0 0 0.0008743829611748795 0.0 0.0 0.0 0 0 0 0 0 0
-by022 85.85156500000001 50.173682 0 0 0 0 0.001967592407061195 0.0 0.0 0.0 0 0 0 0 0 0
-bz085 87.036583 49.96748900000001 0 0 0 0 0.02109709504682287 0.0 0.0 0.0 0 0 0 0 0 0
-ca255 84.279644 49.559413000000006 0 0 0 0 0.030324440769925624 0.0 0.0 0.0 0 0 0 0 0 0
-cb055G 86.82519700000002 50.488054 0 0 0 0 0.059119906824737785 0.0 0.0 0.0 0 0 10.7172 4.2588 63.181408 0
-cc150 85.775719 49.71049500000001 0 0 0 0 0.000524211758215733 0.0 0.0 0.0 0 0 0 0 0 0
-cd345G 85.220154 50.80178300000001 0 0 0 0 0.06033024161107503 0.0 0.0 0.0 0 0 5.1516 1.7856 142.73436 0
-ce348G 84.728356 51.123196 0 0 0 0 0.187575703106332 0.0 0.0 0.0 0 0 9.1224 2.0952 138.412607 0
-cf225G 84.709742 49.17465700000001 0 0 0 0 0.023417983810154183 0.0 0.0 0.0 0 0 10.908000000000001 0.0 57.063577 0
-cg053 86.271327 50.200367 0 0 0 0 0.1485903006277715 0.0 0.0 0.0 0 0 0 0 0 0
-ch070G 85.74367799999999 49.87656 0 0 0 0 0.00038734588726479504 0.0 0.0 0.0 0 0 18.9504 0.0 22.350554 0
-bh264bG 84.552774 49.67209600000001 0 0 0 0 0.011929072746064862 0.0 0.0 0.0 0 0 17.4528 10.1664 57.40514199999999 0
-B290d 85.494042 49.89812800000001 0 0 0 0 0.000422042390697006 0.0 0.0 0.0 0 0 0 0 0 0
-ci291 85.39591000000001 49.898933 0 0 0 0 0.000515749848665839 0.0 0.0 0.0 0 0 0 0 0 0
-cj005G 85.549373 50.753725 0 0 0 0 0.019298528836856295 0.0 0.0 0.0 0 0 4.2408 3.798 103.069252 0
-ck070 85.794929 49.884421 0 0 0 0 0.00037995969075168846 0.0 0.0 0.0 0 0 0 0 0 0
-cl055G 86.772197 50.468961 0 0 0 0 0.02935354303329913 0.0 0.0 0.0 0 0 17.208000000000002 6.3684 99.992522 0
-cm13xG 87.605578 48.56615699999999 0 0 0 0 0.1083209155465395 0.0 0.0 0.0 0 0 17.46 8.1864 97.885663 0
-cn184G 85.60991 49.07273800000001 0 0 0 0 0.010107262136228935 0.0 0.0 0.0 0 0 4.719600000000001 1.2744 7.337445000000001 0
-co127G 87.22663500000002 49.27594 0 0 0 0 0.3328761190407426 0.0 0.0 0.0 0 0 16.358400000000003 5.1732 71.147072 0
-cp211 85.518603 49.70845500000001 0 0 0 0 0.00044246654152716017 0.0 0.0 0.0 0 0 0 0 0 0
-cq298G 83.550059 50.378839 0 0 0 0 0.304272247351729 0.0 0.0 0.0 0 0 14.997600000000002 8.1324 74.650851 0
-cp211aG 85.508676 49.709215 0 0 0 0 0.00044504011777008926 0.0 0.0 0.0 0 0 5.4684 0.0 130.156961 0
-cr04xG 87.481241 51.072851 0 0 0 0 0.23313856386606116 0.0 0.0 0.0 0 0 10.944 0.0 53.763792 0
-cs171G 85.742743 49.558526 0 0 0 0 0.0009376793934180677 0.0 0.0 0.0 0 0 30.7296 0.0 69.815529 0
-ct324G 84.909267 50.44599900000001 0 0 0 0 0.00889506711631609 0.0 0.0 0.0 0 0 12.005999999999998 4.715999999999999 43.326914 0
-cf225aG 84.69968099999998 49.169685 0 0 0 0 0.020574252480893392 0.0 0.0 0.0 0 0 16.9056 0.0 37.020128 0
-N221bG 85.376716 49.623675 0 0 0 0 0.0008906667295853902 0.0 0.0 0.0 -0.7449505146767801 0 12.376800000000001 0.0 18.940514 1424500000.12
-cu251G 85.322571 49.789888 0 0 0 0 0.0005482912458106664 0.0 0.0 0.0 0 0 20.7072 7.056 104.277873 0
-cv174G 85.93306100000001 49.112832000000004 0 0 0 0 0.009162009456401523 0.0 0.0 0.0 0 0 5.9976 0.0 142.893474 0
-B290e 85.48760900000002 49.896203 0 0 0 0 0.0003478286817978296 0.0 0.0 0.0 0 0 0 0 0 0
-cw276G 83.982983 49.807286 0 0 0 0 0.967793845581341 0.0 0.0 0.0 0 0 8.5824 3.0420000000000003 95.459474 0
-cx110 85.86625799999999 49.797677 0 0 0 0 0.00037076346922860755 0.0 0.0 0.0 0 0 0 0 0 0
-Q210a 85.58740899999998 49.76863000000001 0 0 0 0 0.00032181376174801856 0.0 0.0 0.0 0 0 0 0 0 0
-W201aG 85.480223 49.57903 0 0 0 0 0.0008804723441474854 0.0 0.0 0.0 0 0 11.1996 0.0 24.085089 0
-cy331G 85.506194 50.0292 0 0 0 0 0.00046724831326453635 0.0 0.0 0.0 0 0 5.3064 1.5624 13.255068 0
-cz171 85.741614 49.612533 0 0 0 0 0.0005834079111351836 0.0 0.0 0.0 0 0 0 0 0 0
-at014aG 85.76345100000002 50.56050299999999 0 0 0 0 0.010134232181075876 0.0 0.0 0.0 0 0 9.705599999999999 1.9584 64.781984 0
-da222 85.22711600000001 49.538048 0 0 0 0 0.0037869423434740606 0.0 0.0 0.0 0 0 0 0 0 0
-db280G 85.413888 49.86863100000001 0 0 0 0 0.0003680274902426378 0.0 0.0 0.0 0 0 19.519199999999998 0.0 135.076468 0
-dc044G 86.36834600000002 50.430214 0 0 0 0 0.009460380661094597 0.0 0.0 0.0 0 0 7.3008 4.2048000000000005 24.086777 0
-dd348G 84.929357 51.113024 0 0 0 0 0.08716879795137178 0.0 0.0 0.0 0 0 8.3628 4.784400000000001 172.139387 0
-M301bG 85.40897600000001 49.95453800000001 0 0 0 0 0.0004124632757367746 0.0 0.0 0.0 0 0 7.977600000000001 0.0 151.674007 0
-de024G 86.103329 50.488608 0 0 0 0 0.010694840977888694 0.0 0.0 0.0 0 0 5.317200000000001 0.0 35.841443 0
-df041 85.942204 50.061874 0 0 0 0 0.000688396671395934 0.0 0.0 0.0 0 0 0 0 0 0
-dg092G 86.407275 49.859803 0 0 0 0 0.014795187690888032 0.0 0.0 0.0 0 0 3.6936 2.682 106.311612 0
-dh210 85.52869100000001 49.725344 0 0 0 0 0.0003390608256073515 0.0 0.0 0.0 0 0 0 0 0 0
-di251G 85.377141 49.793793 0 0 0 0 0.0003968836823045322 0.0 0.0 0.0 0 0 9.266399999999999 2.7251999999999996 100.201154 0
-G195a 85.314895 48.912915 0 0 0 0 0.02896142820269427 0.0 0.0 0.0 0 0 0 0 0 0
-dj241G 85.21803000000001 49.701458 0 0 0 0 0.000982639931443642 0.0 0.0 0.0 0 0 4.8816 1.35 134.851015 0
-dk258G 83.609864 49.459866000000005 0 0 0 0 0.11646526609927536 0.0 0.0 0.0 0 0 12.088799999999999 4.914 91.0956 0
-dl351G 85.57460500000002 50.067604 0 0 0 0 0.0004581155105801508 0.0 0.0 0.0 0 0 5.76 0.0 137.503162 0
-dm273 84.628625 49.86225300000001 0 0 0 0 0.012791613613256186 0.0 0.0 0.0 0 0 0 0 0 0
-dn164 86.11976600000001 49.081272 0 0 0 0 0.008442369486110024 0.0 0.0 0.0 0 0 0 0 0 0
-do320 85.52751800000001 49.934626 0 0 0 0 0.00029583471431229435 0.0 0.0 0.0 0 0 0 0 0 0
-dp152 86.05671100000002 49.458475 0 0 0 0 0.010008421981969084 0.0 0.0 0.0 0 0 0 0 0 0
-dq131 85.924266 49.689602 0 0 0 0 0.000488715569914203 0.0 0.0 0.0 0 0 0 0 0 0
-dr005G 85.531939 50.835938 0 0 0 0 0.03771783856510834 0.0 0.0 0.0 0 0 8.2332 4.3704 157.423832 0
-M301c 85.398495 49.952576 0 0 0 0 0.0003882159546179499 0.0 0.0 0.0 -2.011820774326965 0 0 0 0 1424500000.12
-N221c 85.380442 49.62842800000001 0 0 0 0 0.0006970904451045248 0.0 0.0 0.0 0 0 0 0 0 0
-ds340G 85.603154 49.940854 0 0 0 0 0.00027340369702445554 0.0 0.0 0.0 0 0 7.65 4.7988 75.560294 0
-dt206G 85.127997 48.777578999999996 0 0 0 0 1.723461879229338 0.0 0.0 0.0 0 0 6.9552000000000005 0.0 14.578122 0
-du241G 85.400117 49.759552 0 0 0 0 0.0003596885409137644 0.0 0.0 0.0 0 0 22.453200000000002 6.8328 36.493621 0
-dv326G 84.56013500000002 50.61790899999999 0 0 0 0 0.1108554744287197 0.0 0.0 0.0 0 0 6.994800000000001 4.8671999999999995 176.954691 0
-S270a 85.41965800000001 49.849785000000004 0 0 0 0 0.00029900767291410194 0.0 0.0 0.0 0 0 0 0 0 0
-al080a 85.88726800000002 49.856950999999995 0 0 0 0 0.00028960458010105633 0.0 0.0 0.0 0 0 0 0 0 0
-dw352 85.50964 50.304950000000005 0 0 0 0 0.007576669845425439 0.0 0.0 0.0 0 0 0 0 0 0
-bs233aG 84.861607 49.439751 0 0 0 0 0.01236035204869662 0.0 0.0 0.0 0 0 4.824000000000001 0.0 59.282156 0
-dx291G 85.21698400000001 49.962103 0 0 0 0 0.0007184299875963401 0.0 0.0 0.0 0 0 12.4524 3.5928 1.482691 0
-dy035G 86.300675 50.679145 0 0 0 0 0.015099312498001156 0.0 0.0 0.0 0 0 4.59 0.0 60.24276400000001 0
-dz020G 85.72274800000001 50.01180600000001 0 0 0 0 0.0003015114639467302 0.0 0.0 0.0 0 0 20.7684 0.0 40.243792 0
-ea004G 85.689883 50.59219000000001 0 0 0 0 0.0070439881083481995 0.0 0.0 0.0 0 0 3.6143999999999994 0.0 107.699596 0
-bm255aG 84.31454400000001 49.442433 0 0 0 0 0.02279610744235327 0.0 0.0 0.0 0 0 19.9296 15.6096 6.469376 0
-eb231 85.31351700000002 49.645525000000006 0 0 0 0 0.0006967553707358792 0.0 0.0 0.0 0 0 0 0 0 0
-dh210a 85.54104299999999 49.727654 0 0 0 0 0.0002705165151769336 0.0 0.0 0.0 0 0 0 0 0 0
-ec346 85.149959 50.923973000000004 0 0 0 0 2.728147817248216 0.0 0.0 0.0 0 0 0 0 0 0
-ed205 85.104453 49.069668 0 0 0 0 0.008730058488475053 0.0 0.0 0.0 0 0 0 0 0 0
-ee274 84.475406 49.85484000000001 0 0 0 0 0.006348981854194458 0.0 0.0 0.0 0 0 0 0 0 0
-ef010G 85.671938 49.949747 0 0 0 0 0.00023259839087501374 0.0 0.0 0.0 0 0 7.8804 4.374 79.168324 0
-eg340 85.628938 49.891731 0 0 0 0 0.00021282382575745412 0.0 0.0 0.0 0 0 0 0 0 0
-eh125G 86.88564 49.34951000000001 0 0 0 0 0.015778538251266513 0.0 0.0 0.0 0 0 6.0876 0.0 115.48200299999999 0
-cs171aG 85.75426400000002 49.565978 0 0 0 0 0.000606551647194209 0.0 0.0 0.0 0 0 18.2376 9.144000000000002 31.667094 0
-ei084G 86.80015700000001 49.921440000000004 0 0 0 0 0.006809978299654974 0.0 0.0 0.0 0 0 15.634799999999998 5.450399999999999 1.290049 0
-ej080 85.76691100000001 49.859155 0 0 0 0 0.0002141107406224036 0.0 0.0 0.0 0 0 0 0 0 0
-ek080 85.80303799999999 49.867780999999994 0 0 0 0 0.00022315962589376128 0.0 0.0 0.0 0 0 0 0 0 0
-ch070aG 85.755473 49.886105 0 0 0 0 0.00021344317248145822 0.0 0.0 0.0 0 0 5.7456000000000005 0.0 44.576166 0
-el002 85.62004400000001 50.1933 0 0 0 0 0.0009483438256831594 0.0 0.0 0.0 0 0 0 0 0 0
-em324G 84.806559 50.387162 0 0 0 0 0.005845863616972254 0.0 0.0 0.0 0 0 6.3864 2.6208 146.135013 0
-en171G 85.718518 49.645362 0 0 0 0 0.00033813730275418903 0.0 0.0 0.0 0 0 13.1364 0.0 48.343835 0
-eo164 86.155845 49.111395 0 0 0 0 0.00629177722777114 0.0 0.0 0.0 0 0 0 0 0 0
-bg191a 85.554181 49.543874 0 0 0 0 0.0007087044176143703 0.0 0.0 0.0 0 0 0 0 0 0
-ep230G 85.51107699999999 49.763406 0 0 0 0 0.00023921923219858156 0.0 0.0 0.0 0 0 6.429600000000001 0.0 151.353607 0
-dq131a 85.92144900000001 49.70511700000001 0 0 0 0 0.0003579167546523645 0.0 0.0 0.0 0 0 0 0 0 0
-eq121G 85.91717400000002 49.731908 0 0 0 0 0.0003216037372839361 0.0 0.0 0.0 0 0 8.3556 3.5172 170.600608 0
-er190 85.63999400000002 49.77747800000001 0 0 0 0 0.00020562175346106775 0.0 0.0 0.0 0 0 0 0 0 0
-es250G 85.476435 49.815927 0 0 0 0 0.00022943021333847623 0.0 0.0 0.0 0 0 3.2832000000000003 0.0 46.528732 0
-et162 85.90151600000002 49.495438 0 0 0 0 0.001611077173118112 0.0 0.0 0.0 0 0 0 0 0 0
-du241aG 85.40575700000001 49.764872 0 0 0 0 0.00028600182916579595 0.0 0.0 0.0 0 0 11.905199999999999 0.0 26.695499 0
-eu260 85.553694 49.841555 0 0 0 0 0.0002001206341371704 0.0 0.0 0.0 0 0 0 0 0 0
-cp211b 85.499072 49.71117900000001 0 0 0 0 0.00027176922491310273 0.0 0.0 0.0 0 0 0 0 0 0
-ev211 85.456894 49.660209 0 0 0 0 0.0003643854022725176 0.0 0.0 0.0 0 0 0 0 0 0
-E090b 85.82672000000001 49.845052 0 0 0 0 0.00021622971669364632 0.0 0.0 0.0 0 0 0 0 0 0
-eg340a 85.632931 49.886992000000006 0 0 0 0 0.0001909673108899285 0.0 0.0 0.0 0 0 0 0 0 0
-ew156G 86.38005499999998 48.951422 0 0 0 0 0.04967388986371956 0.0 0.0 0.0 0 0 21.4632 2.0412 142.50836 0
-ex101 86.06129 49.791806 0 0 0 0 0.0004490613029539293 0.0 0.0 0.0 0 0 0 0 0 0
-ey060 85.86273599999998 49.933536 0 0 0 0 0.00024344928970226748 0.0 0.0 0.0 0 0 0 0 0 0
-ez270 85.451483 49.846737 0 0 0 0 0.00022376348954072738 0.0 0.0 0.0 0 0 0 0 0 0
-fa351 85.557876 50.16087 0 0 0 0 0.0006519326288746158 0.0 0.0 0.0 0 0 0 0 0 0
-fb015 85.89477 50.77109 0 0 0 0 0.013019302286957897 0.0 0.0 0.0 0 0 0 0 0 0
-P310a 85.516446 49.913458 0 0 0 0 0.00020582094936085277 0.0 0.0 0.0 0 0 0 0 0 0
-fc084 86.744207 49.965603 0 0 0 0 0.006776521503519559 0.0 0.0 0.0 0 0 0 0 0 0
-al080b 85.86684299999999 49.85601 0 0 0 0 0.00021951533224342577 0.0 0.0 0.0 0 0 0 0 0 0
-fd212 85.317982 49.51122199999999 0 0 0 0 0.0019310399946764767 0.0 0.0 0.0 0 0 0 0 0 0
-A0f 85.652678 49.854077 0 0 0 0 0.00017708251203196756 0.0 0.0 0.0 0 0 0 0 0 0
-bm255bG 84.319987 49.454359 0 0 0 0 0.016603130630882357 0.0 0.0 0.0 0 0 14.1192 7.952400000000001 19.793344 0
-fe259G 83.52087900000001 49.198392 0 0 0 0 3.722566776356147 0.0 0.0 0.0 0 0 11.851199999999999 8.8344 119.84957799999998 0
-ff066G 87.137636 50.309858 0 0 0 0 0.16427991913287066 0.0 0.0 0.0 0 0 10.8324 0.0 64.318063 0
-fg055G 86.70651599999998 50.416628 0 0 0 0 0.008314775637276443 0.0 0.0 0.0 0 0 6.2496 2.9196 9.545683 0
-A0g 85.644486 49.85488900000001 0 0 0 0 0.0001752783733917841 0.0 0.0 0.0 0 0 0 0 0 0
-fh092G 86.228419 49.866245000000006 0 0 0 0 0.0010882811118068008 0.0 0.0 0.0 0 0 6.6312 4.0068 54.603567 0
-fi153G 86.218842 49.314436 0 0 0 0 0.010919805781931516 0.0 0.0 0.0 0 0 7.178400000000001 0.0 135.675629 0
-cc150a 85.777959 49.715833 0 0 0 0 0.00023033986063413485 0.0 0.0 0.0 0 0 0 0 0 0
-ch070b 85.746041 49.865315 0 0 0 0 0.0001799521444839762 0.0 0.0 0.0 0 0 0 0 0 0
-fj182 85.60057899999998 49.439572999999996 0 0 0 0 0.002076618111313575 0.0 0.0 0.0 0 0 0 0 0 0
-fk220 85.596033 49.805359 0 0 0 0 0.0001747733849492259 0.0 0.0 0.0 0 0 0 0 0 0
-fl081G 86.058376 49.887078 0 0 0 0 0.00037791687445499193 0.0 0.0 0.0 0 0 11.340000000000002 4.95 74.16015 0
-fm186G 85.678773 48.699024 0 0 0 0 0.30361058515430306 0.0 0.0 0.0 0 0 6.260400000000001 3.582 169.918652 0
-fn149G 87.35319500000001 48.62032200000001 0 0 0 0 0.11326516551203365 0.0 0.0 0.0 0 0 9.183599999999998 0.0 139.084646 0
-A0h 85.64842599999999 49.850019 0 0 0 0 0.00016156574322970772 0.0 0.0 0.0 0 0 0 0 0 0
-fo181 85.61788 49.547094 0 0 0 0 0.00053406470905919 0.0 0.0 0.0 0 0 0 0 0 0
-fp234 84.699728 49.31059599999999 0 0 0 0 0.005613835570835469 0.0 0.0 0.0 0 0 0 0 0 0
-fq154 86.239566 49.28750699999999 0 0 0 0 0.007155195775666683 0.0 0.0 0.0 0 0 0 0 0 0
-fr091 86.05333999999999 49.847118 0 0 0 0 0.00035508511926026745 0.0 0.0 0.0 0 0 0 0 0 0
-fs052G 86.05487400000001 50.065488 0 0 0 0 0.0006838467203289275 0.0 0.0 0.0 0 0 5.3964 1.278 95.957054 0
-dj241a 85.214147 49.688695 0 0 0 0 0.0006698274171574189 0.0 0.0 0.0 0 0 0 0 0 0
-cu251a 85.340766 49.77949499999999 0 0 0 0 0.0002801137470120461 0.0 0.0 0.0 0 0 0 0 0 0
-ft225G 84.77889400000001 49.225653 0 0 0 0 0.0060867204286367115 0.0 0.0 0.0 0 0 3.2616 2.4624 31.842927 0
-fu088G 87.744612 50.167159 0 0 0 0 0.07355207517034314 0.0 0.0 0.0 0 0 10.8 4.1184 116.29120899999998 0
-fv101G 85.99297800000001 49.822733 0 0 0 0 0.0002745629005272173 0.0 0.0 0.0 0 0 8.6904 0.0 25.781977 0
-fw234G 84.64943899999999 49.37351300000001 0 0 0 0 0.005138133629271287 0.0 0.0 0.0 0 0 4.5648 2.61 22.573224 0
-fx282G 85.098163 49.918913999999994 0 0 0 0 0.0009545382633463356 0.0 0.0 0.0 0 0 2.0376 0.0 38.476787 0
-fy004G 85.661183 50.600035 0 0 0 0 0.0048021923126122254 0.0 0.0 0.0 0 0 8.6256 2.79 92.801337 0
-fz221G 85.461719 49.69230300000001 0 0 0 0 0.00024666420277594605 0.0 0.0 0.0 0 0 5.8572 4.1112 62.69264799999999 0
-ga246G 84.175355 49.31368200000001 0 0 0 0 1.813361256131663 0.0 0.0 0.0 0 0 9.4572 5.058 79.004298 0
-gb101 85.930699 49.813717 0 0 0 0 0.00021760453388050194 0.0 0.0 0.0 0 0 0 0 0 0
-gc111 85.974155 49.774816 0 0 0 0 0.0002608084338892978 0.0 0.0 0.0 0 0 0 0 0 0
-gd32xG 83.396886 51.245614 0 0 0 0 0.21438627718534695 0.0 0.0 0.0 0 0 18.3492 2.0556 142.619844 0
-al080c 85.86678100000002 49.864881 0 0 0 0 0.00017903813265050743 0.0 0.0 0.0 0 0 0 0 0 0
-ge031 85.815074 50.019806 0 0 0 0 0.00022880800992272575 0.0 0.0 0.0 0 0 0 0 0 0
-gf002 85.656176 50.242945000000006 0 0 0 0 0.0012513626897773008 0.0 0.0 0.0 0 0 0 0 0 0
-df041a 85.92180700000002 50.054257 0 0 0 0 0.000340760784675228 0.0 0.0 0.0 0 0 0 0 0 0
-gg015 85.90808699999998 50.708269 0 0 0 0 0.006177948870687285 0.0 0.0 0.0 0 0 0 0 0 0
-gh295G 84.38574 50.09408200000001 0 0 0 0 0.0051213177045641095 0.0 0.0 0.0 0 0 13.2588 0.0 163.017739 0
-gi13xG 87.66597100000001 48.77062500000001 0 0 0 0 0.06536434925685765 0.0 0.0 0.0 0 0 12.2832 4.6692 126.50409199999999 0
-gj350 85.605438 49.966779 0 0 0 0 0.00016415703569606316 0.0 0.0 0.0 0 0 0 0 0 0
-gk291 85.288493 49.938894000000005 0 0 0 0 0.0003058721031003116 0.0 0.0 0.0 0 0 0 0 0 0
-gl113 86.397714 49.656589 0 0 0 0 0.0308501635591711 0.0 0.0 0.0 0 0 0 0 0 0
-gm038G 86.65693900000001 51.057327 0 0 0 0 0.061534265569952784 0.0 0.0 0.0 0 0 12.376800000000001 6.0876 14.367753000000002 0
-gn076G 87.213904 50.145137 0 0 0 0 0.08289667539499954 0.0 0.0 0.0 0 0 13.708800000000002 4.2408 65.931853 0
-go271 85.252989 49.87091 0 0 0 0 0.0003176841188162603 0.0 0.0 0.0 0 0 0 0 0 0
-eq121a 85.91911100000002 49.741314 0 0 0 0 0.00021711401324762028 0.0 0.0 0.0 0 0 0 0 0 0
-A0i 85.656773 49.84955 0 0 0 0 0.00013425466912512943 0.0 0.0 0.0 0 0 0 0 0 0
-H194b 85.40353099999999 49.046619 0 0 0 0 0.004577690977254836 0.0 0.0 0.0 0 0 0 0 0 0
-gp034G 86.227122 50.587917 0 0 0 0 0.0046629219278244965 0.0 0.0 0.0 0 0 6.8976 0.0 43.299775 0
-gq033 86.146804 50.386548 0 0 0 0 0.015454507684941414 0.0 0.0 0.0 0 0 0 0 0 0
-gr266 83.935399 49.680806 0 0 0 0 0.8112730910945324 0.0 0.0 0.0 0 0 0 0 0 0
-gs081 85.963299 49.88134 0 0 0 0 0.00020839384414880714 0.0 0.0 0.0 0 0 0 0 0 0
-gt351 85.612953 50.103486 0 0 0 0 0.0002860224210071341 0.0 0.0 0.0 0 0 0 0 0 0
-H194c 85.39887800000001 49.04036000000001 0 0 0 0 0.004515317090979741 0.0 0.0 0.0 0 0 0 0 0 0
-gu288G 83.55276100000002 50.161550000000005 0 0 0 0 0.05421926765247324 0.0 0.0 0.0 0 0 12.959999999999999 10.393199999999998 87.366754 0
-gv174G 85.952554 49.06183800000001 0 0 0 0 0.00412509461848593 0.0 0.0 0.0 0 0 4.4604 3.2472 58.746118 0
-gw064G 86.68619400000001 50.291348 0 0 0 0 0.00420870396119081 0.0 0.0 0.0 0 0 7.851600000000001 0.0 46.882137 0
-gx032 85.996367 50.290874 0 0 0 0 0.00908305530895856 0.0 0.0 0.0 0 0 0 0 0 0
-gy045G 86.444216 50.520249 0 0 0 0 0.004695637642435678 0.0 0.0 0.0 0 0 6.6815999999999995 2.1995999999999998 19.963621 0
-gz105G 86.919366 49.67228600000001 0 0 0 0 0.004317793720176379 0.0 0.0 0.0 0 0 5.8824000000000005 0.0 136.032184 0
-ha331 85.365399 50.115676 0 0 0 0 0.00048213695351193784 0.0 0.0 0.0 0 0 0 0 0 0
-hb246G 84.319114 49.313972 0 0 0 0 0.039617822538598677 0.0 0.0 0.0 0 0 13.726799999999999 0.0 56.165419 0
-hc111 86.04762500000001 49.769765 0 0 0 0 0.00028933192920472714 0.0 0.0 0.0 0 0 0 0 0 0
-hd182 85.608006 49.50894600000001 0 0 0 0 0.0005926909596606095 0.0 0.0 0.0 0 0 0 0 0 0
-he332G 85.342057 50.236644 0 0 0 0 0.0022183287264869 0.0 0.0 0.0 0 0 8.1072 6.3755999999999995 19.414599 0
-hf222G 85.300892 49.573115 0 0 0 0 0.0007296053171167158 0.0 0.0 0.0 0 0 6.0047999999999995 0.0 51.114439 0
-G195b 85.312007 48.909369 0 0 0 0 0.01453010833162101 0.0 0.0 0.0 0 0 0 0 0 0
-hg011 85.76841 50.139687 0 0 0 0 0.00036390250857058445 0.0 0.0 0.0 0 0 0 0 0 0
-gi13xaG 87.677258 48.762893999999996 0 0 0 0 0.05064768937243134 0.0 0.0 0.0 0 0 11.4372 4.2264 127.186493 0
-hh274 84.544063 49.79749100000001 0 0 0 0 0.003955588014487305 0.0 0.0 0.0 0 0 0 0 0 0
-hi295G 84.396361 50.066001 0 0 0 0 0.0039540918852228974 0.0 0.0 0.0 0 0 8.956800000000001 6.4404 74.23347 0
-hj105 87.064531 49.73500299999999 0 0 0 0 0.006908560995931712 0.0 0.0 0.0 0 0 0 0 0 0
-hk194 85.44828999999999 49.062978 0 0 0 0 0.0037245147327935645 0.0 0.0 0.0 0 0 0 0 0 0
-hl14xG 87.60048200000001 48.505451 0 0 0 0 0.04195700598091431 0.0 0.0 0.0 0 0 15.0696 0.0 134.10983 0
-hm045G 86.59739400000001 50.513180999999996 0 0 0 0 0.006077710522348738 0.0 0.0 0.0 0 0 13.662 0.0 39.935383 0
-hn175 85.890966 48.917154 0 0 0 0 0.009434979537697416 0.0 0.0 0.0 0 0 0 0 0 0
-ho105G 87.04788900000001 49.693535 0 0 0 0 0.006394898724925413 0.0 0.0 0.0 0 0 6.4404 1.2131999999999998 90.376242 0
-hp176 85.864485 48.836401 0 0 0 0 0.037451314332247035 0.0 0.0 0.0 0 0 0 0 0 0
-hq035G 86.47033000000002 50.60945000000001 0 0 0 0 0.007276076761392004 0.0 0.0 0.0 0 0 6.566400000000001 3.33 34.855409 0
-hr101 86.138871 49.802858 0 0 0 0 0.0003878588645601122 0.0 0.0 0.0 0 0 0 0 0 0
-hs004 85.665198 50.529757 0 0 0 0 0.004979331649519516 0.0 0.0 0.0 0 0 0 0 0 0
-ht142 85.951574 49.573256 0 0 0 0 0.0004781846933216933 0.0 0.0 0.0 0 0 0 0 0 0
-N221dG 85.37570699999999 49.631569 0 0 0 0 0.0003034135332825865 0.0 0.0 0.0 0 0 9.8064 0.0 43.324004 0
-hu076 87.209263 50.272885 0 0 0 0 0.4051774394879799 0.0 0.0 0.0 0 0 0 0 0 0
-hv308G 83.82537600000002 50.604996 0 0 0 0 0.043755764656285834 0.0 0.0 0.0 0 0 11.7 2.376 110.916277 0
-hw315G 84.564146 50.377970999999995 0 0 0 0 0.004206147723040001 0.0 0.0 0.0 0 0 5.0976 1.4832 99.865619 0
-hx254G 84.542325 49.51318700000001 0 0 0 0 0.0032984406525964818 0.0 0.0 0.0 0 0 9.302399999999999 0.0 36.696471 0
-hy132G 86.15122899999999 49.588189 0 0 0 0 0.0012325030608133585 0.0 0.0 0.0 0 0 7.441199999999999 0.0 118.50048400000001 0
-hz229G 84.226535 48.629464000000006 0 0 0 0 4.62660628533627 0.0 0.0 0.0 0 0 11.214 2.9699999999999998 22.431274 0
-ia304G 84.64782700000002 50.270707 0 0 0 0 0.002938376793122128 0.0 0.0 0.0 0 0 5.8428 0.0 131.060016 0
-ib075G 87.09484 50.192805 0 0 0 0 0.015650064366549966 0.0 0.0 0.0 0 0 7.570799999999998 3.5639999999999996 62.510485 0
-ic135G 86.76536800000001 49.336756 0 0 0 0 0.004480225654096124 0.0 0.0 0.0 0 0 6.4908 1.0403999999999998 150.943669 0
-hr101a 86.152064 49.807353 0 0 0 0 0.0003765278730157013 0.0 0.0 0.0 0 0 0 0 0 0
-id025G 86.13008400000001 50.715744 0 0 0 0 0.006213397218524051 0.0 0.0 0.0 0 0 5.2632 0.0 68.185846 0
-ie006G 85.75878600000001 50.89748 0 0 0 0 0.06606720999829074 0.0 0.0 0.0 0 0 8.9388 4.6259999999999994 163.381828 0
-if193G 85.504698 49.338783 0 0 0 0 0.03464575769093049 0.0 0.0 0.0 0 0 6.4799999999999995 4.2156 51.217363 0
-ig186G 85.656756 48.804348 0 0 0 0 0.06396067031024755 0.0 0.0 0.0 0 0 7.8372 0.0 29.330807 0
-ih296 84.11099299999998 50.288401 0 0 0 0 0.38816090472997955 0.0 0.0 0.0 0 0 0 0 0 0
-gu288aG 83.56134700000001 50.16470300000001 0 0 0 0 0.036632885637822604 0.0 0.0 0.0 0 0 10.9188 4.2588 80.324133 0
-ii128G 87.467547 49.034364 0 0 0 0 0.06653795773106504 0.0 0.0 0.0 0 0 8.686800000000002 0.0 119.00889700000002 0
-bz085a 87.050999 49.977192 0 0 0 0 0.005044810388944112 0.0 0.0 0.0 0 0 0 0 0 0
-ij094G 86.759235 49.843522 0 0 0 0 0.003291030626891089 0.0 0.0 0.0 0 0 7.7076 0.0 53.605286 0
-ik083G 86.482881 49.94058400000001 0 0 0 0 0.10150738166626692 0.0 0.0 0.0 0 0 5.7852 0.0 37.843959 0
-cg053a 86.26484900000001 50.203574 0 0 0 0 0.03277376568774914 0.0 0.0 0.0 0 0 0 0 0 0
-Z294a 84.546693 50.127956 0 0 0 0 0.002479451794371511 0.0 0.0 0.0 0 0 0 0 0 0
-il354 85.327027 50.646644 0 0 0 0 0.002410167230688144 0.0 0.0 0.0 0 0 0 0 0 0
-cp211c 85.49287 49.71318 0 0 0 0 8.111269677687587e-05 0.0 0.0 0.0 0 0 0 0 0 0
-if193a 85.497474 49.33821900000001 0 0 0 0 0.021971150389285925 0.0 0.0 0.0 0 0 0 0 0 0
+#format: name ra_d dec_d i q u v i q u v spi rm emaj_s emin_s pa_d freq0
+A0 85.65057420039344 49.85200936748971 0 0 0 0 9.859337158203125 -4.332709724913578e-06 0.0002639347043305329 0.002161076417922203 -0.7099262475967407 0.0 0 0 0 1385000000.0
+A0a 85.65050986891873 49.85197850280577 0 0 0 0 4.9295166015625 -2.166288075557132e-06 0.00013196325682249821 0.0010805048968762776 -0.7099262475967407 0.0 0 0 0 1385000000.0
+A0b 85.65053129236571 49.85199243784206 0 0 0 0 3.28451904296875 -1.4433898923209287e-06 8.792663370214893e-05 0.0007199364961437026 -0.7099262475967407 0.0 0 0 0 1385000000.0
+A0c 85.65055277967043 49.85199808578795 0 0 0 0 3.2845193481445314 -1.443390026431169e-06 8.792666576973363e-05 0.0007199366586275336 -0.7099262475967407 0.0 0 0 0 1385000000.0
+A0d 85.65062930448465 49.85212044247567 0 0 0 0 1.234733123779297 -5.426064782276373e-07 3.3053832365716185e-05 0.0002706421936292891 -0.7099262475967407 0.0 0 0 0 1385000000.0
+A0e 85.65063791160625 49.852175398105864 0 0 0 0 0.4096230697631836 -1.8000985557485017e-07 1.0965618416099512e-05 8.978562575736592e-05 -0.7099262475967407 0.0 0 0 0 1385000000.0
+B290G 85.490387 49.89720499999999 0 0 0 0 0.03826158067268499 0.0 0.0 0.0 -0.8790400371758633 0 5.2884 0.7236 170.733145 1424500000.12
+C242G 85.182151 49.694903 0 0 0 0 0.0887058836969246 0.0 0.0 0.0 0.010392796216600608 0 3.6396 1.5803999999999998 57.219554 1424500000.12
+D140G 85.827299 49.731663 0 0 0 0 0.0236825399308751 0.0 0.0 0.0 -0.3646974893727074 0 2.5056000000000003 2.2788 131.409384 1424500000.12
+E090 85.80834000000002 49.843773000000006 0 0 0 0 0.0116135023170924 0.0 0.0 0.0 -0.8133517046735592 0 0 0 0 1424500000.12
+F121G 85.89017 49.766488 0 0 0 0 0.014704720808157915 0.0 0.0 0.0 -1.1039561188845133 0 14.0616 4.4676 135.531337 1424500000.12
+G195G 85.31441999999998 48.91178899999999 0 0 0 0 1.184207406832343 0.0 0.0 0.0 7.299087678304995 0 6.8976 5.76 76.54418 1424500000.12
+H194G 85.39953 49.042516 0 0 0 0 0.35345544967760817 0.0 0.0 0.0 1.4805344140241368 0 5.202000000000001 3.9095999999999997 16.493141 1424500000.12
+H194aG 85.403229 49.044472 0 0 0 0 0.3282685168540988 0.0 0.0 0.0 1.5425777742624247 0 5.1084 4.104 42.919008 1424500000.12
+I215G 85.008394 49.088678 0 0 0 0 0.41548313652379487 0.0 0.0 0.0 2.902473484685625 0 6.2748 2.4408 22.447551 1424500000.12
+J001G 85.665143 50.059872 0 0 0 0 0.009638236242744293 0.0 0.0 0.0 -0.5750208422631442 0 4.9428 0.0 20.52962 1424500000.12
+B290aG 85.48794300000002 49.907545000000006 0 0 0 0 0.006188563309864936 0.0 0.0 0.0 -1.6429169879215684 0 20.3868 4.9032 170.715884 1424500000.12
+K285 84.22448400000002 49.997924999999995 0 0 0 0 0.2988771537956234 0.0 0.0 0.0 5.165175111712941 0 0 0 0 1424500000.12
+L112G 86.154162 49.704053 0 0 0 0 0.022095505177117666 0.0 0.0 0.0 -0.8024268552220519 0 9.2088 3.1176 57.79198199999999 1424500000.12
+M301G 85.408689 49.954324 0 0 0 0 0.005747212805681905 0.0 0.0 0.0 -1.0586065366047654 0 9.6264 3.2543999999999995 101.546067 1424500000.12
+N221G 85.379709 49.62849 0 0 0 0 0.010367343216787278 0.0 0.0 0.0 -0.2768832991034338 0 12.3984 4.3271999999999995 162.718033 1424500000.12
+L112aG 86.147901 49.694296 0 0 0 0 0.01782805293839603 0.0 0.0 0.0 -0.9664552563844166 0 8.218799999999998 0.9683999999999999 17.563751 1424500000.12
+O265 84.37459 49.724065 0 0 0 0 0.11264831212331218 0.0 0.0 0.0 2.377467128864789 0 0 0 0 1424500000.12
+P310 85.516442 49.913432 0 0 0 0 0.0032203248876156013 0.0 0.0 0.0 0.2860275029737752 0 0 0 0 1424500000.12
+Q210G 85.586806 49.768743 0 0 0 0 0.0030740429925802384 0.0 0.0 0.0 -0.14273714190432324 0 6.0516 2.8116 74.649051 1424500000.12
+R283 84.66131 50.00818400000001 0 0 0 0 0.13494386596000701 0.0 0.0 0.0 1.0591847681338784 0 0 0 0 1424500000.12
+D140a 85.827251 49.731682 0 0 0 0 0.0032964004284253734 0.0 0.0 0.0 0.33585798933856015 0 0 0 0 1424500000.12
+S270 85.418733 49.849665 0 0 0 0 0.002902823496384571 0.0 0.0 0.0 -1.027955111472692 0 0 0 0 1424500000.12
+T254 84.494951 49.588217 0 0 0 0 0.06391065166847286 0.0 0.0 0.0 2.9704825843232725 0 0 0 0 1424500000.12
+U051 86.00413 50.059927 0 0 0 0 0.005678059562557201 0.0 0.0 0.0 -0.32672087269666683 0 0 0 0 1424500000.12
+M301aG 85.39485600000002 49.95132600000001 0 0 0 0 0.00273737341861733 0.0 0.0 0.0 -0.9563659512415716 0 5.4792 0.0 150.745479 1424500000.12
+V151 85.806663 49.64142600000001 0 0 0 0 0.002883827072369766 0.0 0.0 0.0 -0.15728346165511642 0 0 0 0 1424500000.12
+W201 85.467543 49.566686 0 0 0 0 0.005172285191005143 0.0 0.0 0.0 -0.0031084627207409454 0 0 0 0 1424500000.12
+E090a 85.808339 49.843741 0 0 0 0 0.0015768683632177254 0.0 0.0 0.0 0.15715658899389928 0 0 0 0 1424500000.12
+X261 85.23875100000001 49.782947 0 0 0 0 0.0037566400884037404 0.0 0.0 0.0 -0.7175421667402149 0 0 0 0 1424500000.12
+Y002 85.67483200000001 50.33188100000001 0 0 0 0 0.07327267231113754 0.0 0.0 0.0 4.146707374879245 0 0 0 0 1424500000.12
+Z294 84.548397 50.130852999999995 0 0 0 0 0.03846618057775607 0.0 0.0 0.0 1.7899982099052734 0 0 0 0 1424500000.12
+aa322 85.31420499999999 50.119433 0 0 0 0 0.006244825648635683 0.0 0.0 0.0 -0.08949429026377231 0 0 0 0 1424500000.12
+ab325 84.73995 50.47775 0 0 0 0 0.045127587424326 0.0 0.0 0.0 3.524578316545999 0 0 0 0 1424500000.12
+ac317 84.083643 50.640651 0 0 0 0 0.34474621208322065 0.0 0.0 0.0 5.630595492363389 0 0 0 0 1424500000.12
+ad342 85.41405200000001 50.24308 0 0 0 0 0.01628678211290917 0.0 0.0 0.0 0.8097715901148881 0 0 0 0 1424500000.12
+N221a 85.37977400000001 49.623525 0 0 0 0 0.003294625523059915 0.0 0.0 0.0 -0.5412993214393516 0 0 0 0 1424500000.12
+ae232 85.23026999999999 49.592605 0 0 0 0 0.00820482921818608 0.0 0.0 0.0 2.431047004218636 0 0 0 0 1424500000.12
+af235G 84.54470799999999 49.271746 0 0 0 0 0.06829741031591728 0.0 0.0 0.0 4.835124208223845 0 6.3072 0.0 41.912364 1424500000.12
+ag031 85.866977 50.10652000000001 0 0 0 0 0.0026397108590530413 0.0 0.0 0.0 -0.6008029696851742 0 0 0 0 1424500000.12
+F121a 85.89124 49.765812 0 0 0 0 0.0013103670017206533 0.0 0.0 0.0 2.75136548645074 0 0 0 0 1424500000.12
+ah081 86.12741200000002 49.919226 0 0 0 0 0.0030338243266867775 0.0 0.0 0.0 -0.9084735520890121 0 0 0 0 1424500000.12
+ai295 84.318901 50.178700000000006 0 0 0 0 0.05062809327764703 0.0 0.0 0.0 5.035960640711893 0 0 0 0 1424500000.12
+aj180 85.649095 49.685462 0 0 0 0 0.001171303297573771 0.0 0.0 0.0 -0.7597299927270662 0 0 0 0 1424500000.12
+ak101G 86.09595 49.781892000000006 0 0 0 0 0.0023429366479754067 0.0 0.0 0.0 0 0 20.1456 0.0 37.976114 0
+al080G 85.887436 49.873087000000005 0 0 0 0 0.0010198646261616456 0.0 0.0 0.0 0.5851976105827296 0 15.8976 0.0 158.83801 1424500000.12
+L112b 86.1548 49.704221000000004 0 0 0 0 0.004055863930056866 0.0 0.0 0.0 1.9379210113032612 0 0 0 0 1424500000.12
+am235G 84.603938 49.306862 0 0 0 0 0.033853253624760875 0.0 0.0 0.0 3.046185354407594 0 6.3431999999999995 0.0 47.275424 1424500000.12
+an071 86.11137299999999 49.93751700000001 0 0 0 0 0.002455100302376349 0.0 0.0 0.0 -0.7915066173610139 0 0 0 0 1424500000.12
+ad342a 85.411788 50.242187 0 0 0 0 0.010355667214408469 0.0 0.0 0.0 1.073981466713624 0 0 0 0 1424500000.12
+B290b 85.489125 49.900927 0 0 0 0 0.0008374208096926871 0.0 0.0 0.0 -0.2533724378447622 0 0 0 0 1424500000.12
+ao344G 85.21736500000002 50.515296 0 0 0 0 0.023032200938294563 0.0 0.0 0.0 2.2099402507470467 0 3.9996 1.8395999999999997 119.38237500000001 1424500000.12
+ap172 85.71434 49.434934 0 0 0 0 0.00897535718293354 0.0 0.0 0.0 1.7078435341140903 0 0 0 0 1424500000.12
+aq071G 86.140584 49.93580599999999 0 0 0 0 0.0025671509770156 0.0 0.0 0.0 -1.2294580542263924 0 11.2824 5.8356 146.377815 1424500000.12
+ar073G 86.594289 50.083580999999995 0 0 0 0 0.04719925346734011 0.0 0.0 0.0 -2.061904743868059 0 9.468 2.34 73.090631 1424500000.12
+as271 85.34539400000001 49.853659 0 0 0 0 0.0010495489725337959 0.0 0.0 0.0 0.5467076638942489 0 0 0 0 1424500000.12
+at014G 85.772823 50.570226 0 0 0 0 0.022267239731096435 0.0 0.0 0.0 0 0 28.929599999999997 5.497199999999999 43.963277 0
+au021 85.798692 50.16624699999999 0 0 0 0 0.0024914742957367463 0.0 0.0 0.0 -0.8721995847559127 0 0 0 0 1424500000.12
+av161 85.778557 49.650481000000006 0 0 0 0 0.0010773680371497871 0.0 0.0 0.0 -0.3028886032954041 0 0 0 0 1424500000.12
+ac317aG 84.085934 50.640471 0 0 0 0 0.17331164559313803 0.0 0.0 0.0 5.3224204745015555 0 7.0632 0.0 42.7589 1424500000.12
+aw034G 86.251358 50.54776 0 0 0 0 0.020221095075116376 0.0 0.0 0.0 2.465592230859434 0 5.670000000000001 0.0 52.024985 1424500000.12
+ax213G 85.195879 49.28760700000001 0 0 0 0 0.04526571400459344 0.0 0.0 0.0 0 0 11.556000000000001 4.3668000000000005 80.873909 0
+L112c 86.14774000000001 49.693944 0 0 0 0 0.00313788178025012 0.0 0.0 0.0 2.581965263387142 0 0 0 0 1424500000.12
+ay090 85.834979 49.858217999999994 0 0 0 0 0.0006836974666558675 0.0 0.0 0.0 0.34844517391545904 0 0 0 0 1424500000.12
+ax213aG 85.21439299999999 49.284831 0 0 0 0 0.04662695211083994 0.0 0.0 0.0 0 0 10.4148 3.3912 111.062388 0
+az034G 86.298091 50.494159 0 0 0 0 0.019356871728253858 0.0 0.0 0.0 1.3104962402424625 0 6.5196 1.2276 43.564796 1424500000.12
+B290cG 85.48751500000002 49.907757 0 0 0 0 0.0006889420939524911 0.0 0.0 0.0 4.866549689017183 0 8.37 0.0 49.509819 1424500000.12
+ba195 85.38988399999998 48.976066 0 0 0 0 0.02929067630253879 0.0 0.0 0.0 0 0 0 0 0 0
+bb131 85.894653 49.713411 0 0 0 0 0.0009359923942207983 0.0 0.0 0.0 -0.4106888312608168 0 0 0 0 1424500000.12
+ax213bG 85.20422400000001 49.28623 0 0 0 0 0.04304973573415348 0.0 0.0 0.0 0 0 29.7324 7.639200000000001 107.465628 0
+bc328G 84.05905100000001 50.884712 0 0 0 0 0.5326354721187088 0.0 0.0 0.0 0 0 12.711599999999999 3.3048 134.147563 0
+bd250 85.424535 49.80595799999999 0 0 0 0 0.0007319247948674079 0.0 0.0 0.0 -0.7845945636292365 0 0 0 0 1424500000.12
+be350 85.602535 50.011602 0 0 0 0 0.0007386972230725153 0.0 0.0 0.0 0.24313824664240757 0 0 0 0 1424500000.12
+bf275 84.23605300000001 49.90021800000001 0 0 0 0 0.030816351012871467 0.0 0.0 0.0 0 0 0 0 0 0
+bg191 85.545155 49.54555 0 0 0 0 0.0018540674528342352 0.0 0.0 0.0 0 0 0 0 0 0
+bh264G 84.556756 49.681695 0 0 0 0 0.01674515506394857 0.0 0.0 0.0 0 0 22.0968 3.258 4.329168 0
+bi081 86.036108 49.910209 0 0 0 0 0.001089912353848124 0.0 0.0 0.0 0 0 0 0 0 0
+F121b 85.886639 49.767953 0 0 0 0 0.0007066374511119615 0.0 0.0 0.0 2.4240590023537463 0 0 0 0 1424500000.12
+J001a 85.665063 50.059819 0 0 0 0 0.0008430457198374354 0.0 0.0 0.0 0 0 0 0 0 0
+L112dG 86.149869 49.700471 0 0 0 0 0.0026010863407512725 0.0 0.0 0.0 0 0 28.674 0.0 5.189007 0
+J001b 85.651206 50.06197600000001 0 0 0 0 0.0008393916924586326 0.0 0.0 0.0 -0.5193418922479653 0 0 0 0 1424500000.12
+bj033G 86.186277 50.413227 0 0 0 0 0.03048339102662157 0.0 0.0 0.0 0 0 20.7684 6.6096 128.453681 0
+bk194 85.36135100000001 49.1267 0 0 0 0 0.015622797370746073 0.0 0.0 0.0 0 0 0 0 0 0
+bl001 85.653995 50.09158500000001 0 0 0 0 0.0009679577526259028 0.0 0.0 0.0 0 0 0 0 0 0
+bm255G 84.313251 49.439423000000005 0 0 0 0 0.05116865782016437 0.0 0.0 0.0 0 0 7.8191999999999995 2.4588 46.073707 0
+bn282G 84.951211 49.91433800000001 0 0 0 0 0.01469858102192274 0.0 0.0 0.0 0 0 7.549199999999999 0.0 113.230829 0
+bo022G 85.846438 50.26794300000001 0 0 0 0 0.008012678005919038 0.0 0.0 0.0 0 0 6.667199999999999 0.0 129.933559 0
+bp341 85.48298299999999 50.12788200000001 0 0 0 0 0.001387178757502645 0.0 0.0 0.0 0 0 0 0 0 0
+bq192G 85.56139 49.358871 0 0 0 0 0.04300464118194119 0.0 0.0 0.0 0 0 4.8816 0.0 35.812968 0
+aq071a 86.13618700000002 49.934946 0 0 0 0 0.0016013775737705775 0.0 0.0 0.0 -0.44338937381178756 0 0 0 0 1424500000.12
+br330 85.520362 49.982495 0 0 0 0 0.00057511481246919 0.0 0.0 0.0 0 0 0 0 0 0
+bs233G 84.86789300000001 49.437307 0 0 0 0 0.023845664962735318 0.0 0.0 0.0 0 0 6.537599999999999 1.6667999999999998 86.477453 0
+bt303G 84.81237100000001 50.203188 0 0 0 0 0.025811781623030463 0.0 0.0 0.0 0 0 18.5616 2.3472 106.021414 0
+bu130 85.781557 49.77478800000001 0 0 0 0 0.0004737687560487315 0.0 0.0 0.0 0 0 0 0 0 0
+bv200 85.57135800000002 49.722723 0 0 0 0 0.0005189191484181142 0.0 0.0 0.0 0 0 0 0 0 0
+bw336G 84.828607 50.733878 0 0 0 0 0.1466105144141137 0.0 0.0 0.0 0 0 6.5916 3.4019999999999997 157.431326 0
+bh264aG 84.55894300000001 49.688128 0 0 0 0 0.01361068675963317 0.0 0.0 0.0 0 0 13.708800000000002 9.536399999999999 116.06580700000002 0
+bx231 85.37167999999998 49.684562 0 0 0 0 0.0008743829611748795 0.0 0.0 0.0 0 0 0 0 0 0
+by022 85.85156500000001 50.173682 0 0 0 0 0.001967592407061195 0.0 0.0 0.0 0 0 0 0 0 0
+bz085 87.036583 49.96748900000001 0 0 0 0 0.02109709504682287 0.0 0.0 0.0 0 0 0 0 0 0
+ca255 84.279644 49.559413000000006 0 0 0 0 0.030324440769925624 0.0 0.0 0.0 0 0 0 0 0 0
+cb055G 86.82519700000002 50.488054 0 0 0 0 0.059119906824737785 0.0 0.0 0.0 0 0 10.7172 4.2588 63.181408 0
+cc150 85.775719 49.71049500000001 0 0 0 0 0.000524211758215733 0.0 0.0 0.0 0 0 0 0 0 0
+cd345G 85.220154 50.80178300000001 0 0 0 0 0.06033024161107503 0.0 0.0 0.0 0 0 5.1516 1.7856 142.73436 0
+ce348G 84.728356 51.123196 0 0 0 0 0.187575703106332 0.0 0.0 0.0 0 0 9.1224 2.0952 138.412607 0
+cf225G 84.709742 49.17465700000001 0 0 0 0 0.023417983810154183 0.0 0.0 0.0 0 0 10.908000000000001 0.0 57.063577 0
+cg053 86.271327 50.200367 0 0 0 0 0.1485903006277715 0.0 0.0 0.0 0 0 0 0 0 0
+ch070G 85.74367799999999 49.87656 0 0 0 0 0.00038734588726479504 0.0 0.0 0.0 0 0 18.9504 0.0 22.350554 0
+bh264bG 84.552774 49.67209600000001 0 0 0 0 0.011929072746064862 0.0 0.0 0.0 0 0 17.4528 10.1664 57.40514199999999 0
+B290d 85.494042 49.89812800000001 0 0 0 0 0.000422042390697006 0.0 0.0 0.0 0 0 0 0 0 0
+ci291 85.39591000000001 49.898933 0 0 0 0 0.000515749848665839 0.0 0.0 0.0 0 0 0 0 0 0
+cj005G 85.549373 50.753725 0 0 0 0 0.019298528836856295 0.0 0.0 0.0 0 0 4.2408 3.798 103.069252 0
+ck070 85.794929 49.884421 0 0 0 0 0.00037995969075168846 0.0 0.0 0.0 0 0 0 0 0 0
+cl055G 86.772197 50.468961 0 0 0 0 0.02935354303329913 0.0 0.0 0.0 0 0 17.208000000000002 6.3684 99.992522 0
+cm13xG 87.605578 48.56615699999999 0 0 0 0 0.1083209155465395 0.0 0.0 0.0 0 0 17.46 8.1864 97.885663 0
+cn184G 85.60991 49.07273800000001 0 0 0 0 0.010107262136228935 0.0 0.0 0.0 0 0 4.719600000000001 1.2744 7.337445000000001 0
+co127G 87.22663500000002 49.27594 0 0 0 0 0.3328761190407426 0.0 0.0 0.0 0 0 16.358400000000003 5.1732 71.147072 0
+cp211 85.518603 49.70845500000001 0 0 0 0 0.00044246654152716017 0.0 0.0 0.0 0 0 0 0 0 0
+cq298G 83.550059 50.378839 0 0 0 0 0.304272247351729 0.0 0.0 0.0 0 0 14.997600000000002 8.1324 74.650851 0
+cp211aG 85.508676 49.709215 0 0 0 0 0.00044504011777008926 0.0 0.0 0.0 0 0 5.4684 0.0 130.156961 0
+cr04xG 87.481241 51.072851 0 0 0 0 0.23313856386606116 0.0 0.0 0.0 0 0 10.944 0.0 53.763792 0
+cs171G 85.742743 49.558526 0 0 0 0 0.0009376793934180677 0.0 0.0 0.0 0 0 30.7296 0.0 69.815529 0
+ct324G 84.909267 50.44599900000001 0 0 0 0 0.00889506711631609 0.0 0.0 0.0 0 0 12.005999999999998 4.715999999999999 43.326914 0
+cf225aG 84.69968099999998 49.169685 0 0 0 0 0.020574252480893392 0.0 0.0 0.0 0 0 16.9056 0.0 37.020128 0
+N221bG 85.376716 49.623675 0 0 0 0 0.0008906667295853902 0.0 0.0 0.0 -0.7449505146767801 0 12.376800000000001 0.0 18.940514 1424500000.12
+cu251G 85.322571 49.789888 0 0 0 0 0.0005482912458106664 0.0 0.0 0.0 0 0 20.7072 7.056 104.277873 0
+cv174G 85.93306100000001 49.112832000000004 0 0 0 0 0.009162009456401523 0.0 0.0 0.0 0 0 5.9976 0.0 142.893474 0
+B290e 85.48760900000002 49.896203 0 0 0 0 0.0003478286817978296 0.0 0.0 0.0 0 0 0 0 0 0
+cw276G 83.982983 49.807286 0 0 0 0 0.967793845581341 0.0 0.0 0.0 0 0 8.5824 3.0420000000000003 95.459474 0
+cx110 85.86625799999999 49.797677 0 0 0 0 0.00037076346922860755 0.0 0.0 0.0 0 0 0 0 0 0
+Q210a 85.58740899999998 49.76863000000001 0 0 0 0 0.00032181376174801856 0.0 0.0 0.0 0 0 0 0 0 0
+W201aG 85.480223 49.57903 0 0 0 0 0.0008804723441474854 0.0 0.0 0.0 0 0 11.1996 0.0 24.085089 0
+cy331G 85.506194 50.0292 0 0 0 0 0.00046724831326453635 0.0 0.0 0.0 0 0 5.3064 1.5624 13.255068 0
+cz171 85.741614 49.612533 0 0 0 0 0.0005834079111351836 0.0 0.0 0.0 0 0 0 0 0 0
+at014aG 85.76345100000002 50.56050299999999 0 0 0 0 0.010134232181075876 0.0 0.0 0.0 0 0 9.705599999999999 1.9584 64.781984 0
+da222 85.22711600000001 49.538048 0 0 0 0 0.0037869423434740606 0.0 0.0 0.0 0 0 0 0 0 0
+db280G 85.413888 49.86863100000001 0 0 0 0 0.0003680274902426378 0.0 0.0 0.0 0 0 19.519199999999998 0.0 135.076468 0
+dc044G 86.36834600000002 50.430214 0 0 0 0 0.009460380661094597 0.0 0.0 0.0 0 0 7.3008 4.2048000000000005 24.086777 0
+dd348G 84.929357 51.113024 0 0 0 0 0.08716879795137178 0.0 0.0 0.0 0 0 8.3628 4.784400000000001 172.139387 0
+M301bG 85.40897600000001 49.95453800000001 0 0 0 0 0.0004124632757367746 0.0 0.0 0.0 0 0 7.977600000000001 0.0 151.674007 0
+de024G 86.103329 50.488608 0 0 0 0 0.010694840977888694 0.0 0.0 0.0 0 0 5.317200000000001 0.0 35.841443 0
+df041 85.942204 50.061874 0 0 0 0 0.000688396671395934 0.0 0.0 0.0 0 0 0 0 0 0
+dg092G 86.407275 49.859803 0 0 0 0 0.014795187690888032 0.0 0.0 0.0 0 0 3.6936 2.682 106.311612 0
+dh210 85.52869100000001 49.725344 0 0 0 0 0.0003390608256073515 0.0 0.0 0.0 0 0 0 0 0 0
+di251G 85.377141 49.793793 0 0 0 0 0.0003968836823045322 0.0 0.0 0.0 0 0 9.266399999999999 2.7251999999999996 100.201154 0
+G195a 85.314895 48.912915 0 0 0 0 0.02896142820269427 0.0 0.0 0.0 0 0 0 0 0 0
+dj241G 85.21803000000001 49.701458 0 0 0 0 0.000982639931443642 0.0 0.0 0.0 0 0 4.8816 1.35 134.851015 0
+dk258G 83.609864 49.459866000000005 0 0 0 0 0.11646526609927536 0.0 0.0 0.0 0 0 12.088799999999999 4.914 91.0956 0
+dl351G 85.57460500000002 50.067604 0 0 0 0 0.0004581155105801508 0.0 0.0 0.0 0 0 5.76 0.0 137.503162 0
+dm273 84.628625 49.86225300000001 0 0 0 0 0.012791613613256186 0.0 0.0 0.0 0 0 0 0 0 0
+dn164 86.11976600000001 49.081272 0 0 0 0 0.008442369486110024 0.0 0.0 0.0 0 0 0 0 0 0
+do320 85.52751800000001 49.934626 0 0 0 0 0.00029583471431229435 0.0 0.0 0.0 0 0 0 0 0 0
+dp152 86.05671100000002 49.458475 0 0 0 0 0.010008421981969084 0.0 0.0 0.0 0 0 0 0 0 0
+dq131 85.924266 49.689602 0 0 0 0 0.000488715569914203 0.0 0.0 0.0 0 0 0 0 0 0
+dr005G 85.531939 50.835938 0 0 0 0 0.03771783856510834 0.0 0.0 0.0 0 0 8.2332 4.3704 157.423832 0
+M301c 85.398495 49.952576 0 0 0 0 0.0003882159546179499 0.0 0.0 0.0 -2.011820774326965 0 0 0 0 1424500000.12
+N221c 85.380442 49.62842800000001 0 0 0 0 0.0006970904451045248 0.0 0.0 0.0 0 0 0 0 0 0
+ds340G 85.603154 49.940854 0 0 0 0 0.00027340369702445554 0.0 0.0 0.0 0 0 7.65 4.7988 75.560294 0
+dt206G 85.127997 48.777578999999996 0 0 0 0 1.723461879229338 0.0 0.0 0.0 0 0 6.9552000000000005 0.0 14.578122 0
+du241G 85.400117 49.759552 0 0 0 0 0.0003596885409137644 0.0 0.0 0.0 0 0 22.453200000000002 6.8328 36.493621 0
+dv326G 84.56013500000002 50.61790899999999 0 0 0 0 0.1108554744287197 0.0 0.0 0.0 0 0 6.994800000000001 4.8671999999999995 176.954691 0
+S270a 85.41965800000001 49.849785000000004 0 0 0 0 0.00029900767291410194 0.0 0.0 0.0 0 0 0 0 0 0
+al080a 85.88726800000002 49.856950999999995 0 0 0 0 0.00028960458010105633 0.0 0.0 0.0 0 0 0 0 0 0
+dw352 85.50964 50.304950000000005 0 0 0 0 0.007576669845425439 0.0 0.0 0.0 0 0 0 0 0 0
+bs233aG 84.861607 49.439751 0 0 0 0 0.01236035204869662 0.0 0.0 0.0 0 0 4.824000000000001 0.0 59.282156 0
+dx291G 85.21698400000001 49.962103 0 0 0 0 0.0007184299875963401 0.0 0.0 0.0 0 0 12.4524 3.5928 1.482691 0
+dy035G 86.300675 50.679145 0 0 0 0 0.015099312498001156 0.0 0.0 0.0 0 0 4.59 0.0 60.24276400000001 0
+dz020G 85.72274800000001 50.01180600000001 0 0 0 0 0.0003015114639467302 0.0 0.0 0.0 0 0 20.7684 0.0 40.243792 0
+ea004G 85.689883 50.59219000000001 0 0 0 0 0.0070439881083481995 0.0 0.0 0.0 0 0 3.6143999999999994 0.0 107.699596 0
+bm255aG 84.31454400000001 49.442433 0 0 0 0 0.02279610744235327 0.0 0.0 0.0 0 0 19.9296 15.6096 6.469376 0
+eb231 85.31351700000002 49.645525000000006 0 0 0 0 0.0006967553707358792 0.0 0.0 0.0 0 0 0 0 0 0
+dh210a 85.54104299999999 49.727654 0 0 0 0 0.0002705165151769336 0.0 0.0 0.0 0 0 0 0 0 0
+ec346 85.149959 50.923973000000004 0 0 0 0 2.728147817248216 0.0 0.0 0.0 0 0 0 0 0 0
+ed205 85.104453 49.069668 0 0 0 0 0.008730058488475053 0.0 0.0 0.0 0 0 0 0 0 0
+ee274 84.475406 49.85484000000001 0 0 0 0 0.006348981854194458 0.0 0.0 0.0 0 0 0 0 0 0
+ef010G 85.671938 49.949747 0 0 0 0 0.00023259839087501374 0.0 0.0 0.0 0 0 7.8804 4.374 79.168324 0
+eg340 85.628938 49.891731 0 0 0 0 0.00021282382575745412 0.0 0.0 0.0 0 0 0 0 0 0
+eh125G 86.88564 49.34951000000001 0 0 0 0 0.015778538251266513 0.0 0.0 0.0 0 0 6.0876 0.0 115.48200299999999 0
+cs171aG 85.75426400000002 49.565978 0 0 0 0 0.000606551647194209 0.0 0.0 0.0 0 0 18.2376 9.144000000000002 31.667094 0
+ei084G 86.80015700000001 49.921440000000004 0 0 0 0 0.006809978299654974 0.0 0.0 0.0 0 0 15.634799999999998 5.450399999999999 1.290049 0
+ej080 85.76691100000001 49.859155 0 0 0 0 0.0002141107406224036 0.0 0.0 0.0 0 0 0 0 0 0
+ek080 85.80303799999999 49.867780999999994 0 0 0 0 0.00022315962589376128 0.0 0.0 0.0 0 0 0 0 0 0
+ch070aG 85.755473 49.886105 0 0 0 0 0.00021344317248145822 0.0 0.0 0.0 0 0 5.7456000000000005 0.0 44.576166 0
+el002 85.62004400000001 50.1933 0 0 0 0 0.0009483438256831594 0.0 0.0 0.0 0 0 0 0 0 0
+em324G 84.806559 50.387162 0 0 0 0 0.005845863616972254 0.0 0.0 0.0 0 0 6.3864 2.6208 146.135013 0
+en171G 85.718518 49.645362 0 0 0 0 0.00033813730275418903 0.0 0.0 0.0 0 0 13.1364 0.0 48.343835 0
+eo164 86.155845 49.111395 0 0 0 0 0.00629177722777114 0.0 0.0 0.0 0 0 0 0 0 0
+bg191a 85.554181 49.543874 0 0 0 0 0.0007087044176143703 0.0 0.0 0.0 0 0 0 0 0 0
+ep230G 85.51107699999999 49.763406 0 0 0 0 0.00023921923219858156 0.0 0.0 0.0 0 0 6.429600000000001 0.0 151.353607 0
+dq131a 85.92144900000001 49.70511700000001 0 0 0 0 0.0003579167546523645 0.0 0.0 0.0 0 0 0 0 0 0
+eq121G 85.91717400000002 49.731908 0 0 0 0 0.0003216037372839361 0.0 0.0 0.0 0 0 8.3556 3.5172 170.600608 0
+er190 85.63999400000002 49.77747800000001 0 0 0 0 0.00020562175346106775 0.0 0.0 0.0 0 0 0 0 0 0
+es250G 85.476435 49.815927 0 0 0 0 0.00022943021333847623 0.0 0.0 0.0 0 0 3.2832000000000003 0.0 46.528732 0
+et162 85.90151600000002 49.495438 0 0 0 0 0.001611077173118112 0.0 0.0 0.0 0 0 0 0 0 0
+du241aG 85.40575700000001 49.764872 0 0 0 0 0.00028600182916579595 0.0 0.0 0.0 0 0 11.905199999999999 0.0 26.695499 0
+eu260 85.553694 49.841555 0 0 0 0 0.0002001206341371704 0.0 0.0 0.0 0 0 0 0 0 0
+cp211b 85.499072 49.71117900000001 0 0 0 0 0.00027176922491310273 0.0 0.0 0.0 0 0 0 0 0 0
+ev211 85.456894 49.660209 0 0 0 0 0.0003643854022725176 0.0 0.0 0.0 0 0 0 0 0 0
+E090b 85.82672000000001 49.845052 0 0 0 0 0.00021622971669364632 0.0 0.0 0.0 0 0 0 0 0 0
+eg340a 85.632931 49.886992000000006 0 0 0 0 0.0001909673108899285 0.0 0.0 0.0 0 0 0 0 0 0
+ew156G 86.38005499999998 48.951422 0 0 0 0 0.04967388986371956 0.0 0.0 0.0 0 0 21.4632 2.0412 142.50836 0
+ex101 86.06129 49.791806 0 0 0 0 0.0004490613029539293 0.0 0.0 0.0 0 0 0 0 0 0
+ey060 85.86273599999998 49.933536 0 0 0 0 0.00024344928970226748 0.0 0.0 0.0 0 0 0 0 0 0
+ez270 85.451483 49.846737 0 0 0 0 0.00022376348954072738 0.0 0.0 0.0 0 0 0 0 0 0
+fa351 85.557876 50.16087 0 0 0 0 0.0006519326288746158 0.0 0.0 0.0 0 0 0 0 0 0
+fb015 85.89477 50.77109 0 0 0 0 0.013019302286957897 0.0 0.0 0.0 0 0 0 0 0 0
+P310a 85.516446 49.913458 0 0 0 0 0.00020582094936085277 0.0 0.0 0.0 0 0 0 0 0 0
+fc084 86.744207 49.965603 0 0 0 0 0.006776521503519559 0.0 0.0 0.0 0 0 0 0 0 0
+al080b 85.86684299999999 49.85601 0 0 0 0 0.00021951533224342577 0.0 0.0 0.0 0 0 0 0 0 0
+fd212 85.317982 49.51122199999999 0 0 0 0 0.0019310399946764767 0.0 0.0 0.0 0 0 0 0 0 0
+A0f 85.652678 49.854077 0 0 0 0 0.00017708251203196756 0.0 0.0 0.0 0 0 0 0 0 0
+bm255bG 84.319987 49.454359 0 0 0 0 0.016603130630882357 0.0 0.0 0.0 0 0 14.1192 7.952400000000001 19.793344 0
+fe259G 83.52087900000001 49.198392 0 0 0 0 3.722566776356147 0.0 0.0 0.0 0 0 11.851199999999999 8.8344 119.84957799999998 0
+ff066G 87.137636 50.309858 0 0 0 0 0.16427991913287066 0.0 0.0 0.0 0 0 10.8324 0.0 64.318063 0
+fg055G 86.70651599999998 50.416628 0 0 0 0 0.008314775637276443 0.0 0.0 0.0 0 0 6.2496 2.9196 9.545683 0
+A0g 85.644486 49.85488900000001 0 0 0 0 0.0001752783733917841 0.0 0.0 0.0 0 0 0 0 0 0
+fh092G 86.228419 49.866245000000006 0 0 0 0 0.0010882811118068008 0.0 0.0 0.0 0 0 6.6312 4.0068 54.603567 0
+fi153G 86.218842 49.314436 0 0 0 0 0.010919805781931516 0.0 0.0 0.0 0 0 7.178400000000001 0.0 135.675629 0
+cc150a 85.777959 49.715833 0 0 0 0 0.00023033986063413485 0.0 0.0 0.0 0 0 0 0 0 0
+ch070b 85.746041 49.865315 0 0 0 0 0.0001799521444839762 0.0 0.0 0.0 0 0 0 0 0 0
+fj182 85.60057899999998 49.439572999999996 0 0 0 0 0.002076618111313575 0.0 0.0 0.0 0 0 0 0 0 0
+fk220 85.596033 49.805359 0 0 0 0 0.0001747733849492259 0.0 0.0 0.0 0 0 0 0 0 0
+fl081G 86.058376 49.887078 0 0 0 0 0.00037791687445499193 0.0 0.0 0.0 0 0 11.340000000000002 4.95 74.16015 0
+fm186G 85.678773 48.699024 0 0 0 0 0.30361058515430306 0.0 0.0 0.0 0 0 6.260400000000001 3.582 169.918652 0
+fn149G 87.35319500000001 48.62032200000001 0 0 0 0 0.11326516551203365 0.0 0.0 0.0 0 0 9.183599999999998 0.0 139.084646 0
+A0h 85.64842599999999 49.850019 0 0 0 0 0.00016156574322970772 0.0 0.0 0.0 0 0 0 0 0 0
+fo181 85.61788 49.547094 0 0 0 0 0.00053406470905919 0.0 0.0 0.0 0 0 0 0 0 0
+fp234 84.699728 49.31059599999999 0 0 0 0 0.005613835570835469 0.0 0.0 0.0 0 0 0 0 0 0
+fq154 86.239566 49.28750699999999 0 0 0 0 0.007155195775666683 0.0 0.0 0.0 0 0 0 0 0 0
+fr091 86.05333999999999 49.847118 0 0 0 0 0.00035508511926026745 0.0 0.0 0.0 0 0 0 0 0 0
+fs052G 86.05487400000001 50.065488 0 0 0 0 0.0006838467203289275 0.0 0.0 0.0 0 0 5.3964 1.278 95.957054 0
+dj241a 85.214147 49.688695 0 0 0 0 0.0006698274171574189 0.0 0.0 0.0 0 0 0 0 0 0
+cu251a 85.340766 49.77949499999999 0 0 0 0 0.0002801137470120461 0.0 0.0 0.0 0 0 0 0 0 0
+ft225G 84.77889400000001 49.225653 0 0 0 0 0.0060867204286367115 0.0 0.0 0.0 0 0 3.2616 2.4624 31.842927 0
+fu088G 87.744612 50.167159 0 0 0 0 0.07355207517034314 0.0 0.0 0.0 0 0 10.8 4.1184 116.29120899999998 0
+fv101G 85.99297800000001 49.822733 0 0 0 0 0.0002745629005272173 0.0 0.0 0.0 0 0 8.6904 0.0 25.781977 0
+fw234G 84.64943899999999 49.37351300000001 0 0 0 0 0.005138133629271287 0.0 0.0 0.0 0 0 4.5648 2.61 22.573224 0
+fx282G 85.098163 49.918913999999994 0 0 0 0 0.0009545382633463356 0.0 0.0 0.0 0 0 2.0376 0.0 38.476787 0
+fy004G 85.661183 50.600035 0 0 0 0 0.0048021923126122254 0.0 0.0 0.0 0 0 8.6256 2.79 92.801337 0
+fz221G 85.461719 49.69230300000001 0 0 0 0 0.00024666420277594605 0.0 0.0 0.0 0 0 5.8572 4.1112 62.69264799999999 0
+ga246G 84.175355 49.31368200000001 0 0 0 0 1.813361256131663 0.0 0.0 0.0 0 0 9.4572 5.058 79.004298 0
+gb101 85.930699 49.813717 0 0 0 0 0.00021760453388050194 0.0 0.0 0.0 0 0 0 0 0 0
+gc111 85.974155 49.774816 0 0 0 0 0.0002608084338892978 0.0 0.0 0.0 0 0 0 0 0 0
+gd32xG 83.396886 51.245614 0 0 0 0 0.21438627718534695 0.0 0.0 0.0 0 0 18.3492 2.0556 142.619844 0
+al080c 85.86678100000002 49.864881 0 0 0 0 0.00017903813265050743 0.0 0.0 0.0 0 0 0 0 0 0
+ge031 85.815074 50.019806 0 0 0 0 0.00022880800992272575 0.0 0.0 0.0 0 0 0 0 0 0
+gf002 85.656176 50.242945000000006 0 0 0 0 0.0012513626897773008 0.0 0.0 0.0 0 0 0 0 0 0
+df041a 85.92180700000002 50.054257 0 0 0 0 0.000340760784675228 0.0 0.0 0.0 0 0 0 0 0 0
+gg015 85.90808699999998 50.708269 0 0 0 0 0.006177948870687285 0.0 0.0 0.0 0 0 0 0 0 0
+gh295G 84.38574 50.09408200000001 0 0 0 0 0.0051213177045641095 0.0 0.0 0.0 0 0 13.2588 0.0 163.017739 0
+gi13xG 87.66597100000001 48.77062500000001 0 0 0 0 0.06536434925685765 0.0 0.0 0.0 0 0 12.2832 4.6692 126.50409199999999 0
+gj350 85.605438 49.966779 0 0 0 0 0.00016415703569606316 0.0 0.0 0.0 0 0 0 0 0 0
+gk291 85.288493 49.938894000000005 0 0 0 0 0.0003058721031003116 0.0 0.0 0.0 0 0 0 0 0 0
+gl113 86.397714 49.656589 0 0 0 0 0.0308501635591711 0.0 0.0 0.0 0 0 0 0 0 0
+gm038G 86.65693900000001 51.057327 0 0 0 0 0.061534265569952784 0.0 0.0 0.0 0 0 12.376800000000001 6.0876 14.367753000000002 0
+gn076G 87.213904 50.145137 0 0 0 0 0.08289667539499954 0.0 0.0 0.0 0 0 13.708800000000002 4.2408 65.931853 0
+go271 85.252989 49.87091 0 0 0 0 0.0003176841188162603 0.0 0.0 0.0 0 0 0 0 0 0
+eq121a 85.91911100000002 49.741314 0 0 0 0 0.00021711401324762028 0.0 0.0 0.0 0 0 0 0 0 0
+A0i 85.656773 49.84955 0 0 0 0 0.00013425466912512943 0.0 0.0 0.0 0 0 0 0 0 0
+H194b 85.40353099999999 49.046619 0 0 0 0 0.004577690977254836 0.0 0.0 0.0 0 0 0 0 0 0
+gp034G 86.227122 50.587917 0 0 0 0 0.0046629219278244965 0.0 0.0 0.0 0 0 6.8976 0.0 43.299775 0
+gq033 86.146804 50.386548 0 0 0 0 0.015454507684941414 0.0 0.0 0.0 0 0 0 0 0 0
+gr266 83.935399 49.680806 0 0 0 0 0.8112730910945324 0.0 0.0 0.0 0 0 0 0 0 0
+gs081 85.963299 49.88134 0 0 0 0 0.00020839384414880714 0.0 0.0 0.0 0 0 0 0 0 0
+gt351 85.612953 50.103486 0 0 0 0 0.0002860224210071341 0.0 0.0 0.0 0 0 0 0 0 0
+H194c 85.39887800000001 49.04036000000001 0 0 0 0 0.004515317090979741 0.0 0.0 0.0 0 0 0 0 0 0
+gu288G 83.55276100000002 50.161550000000005 0 0 0 0 0.05421926765247324 0.0 0.0 0.0 0 0 12.959999999999999 10.393199999999998 87.366754 0
+gv174G 85.952554 49.06183800000001 0 0 0 0 0.00412509461848593 0.0 0.0 0.0 0 0 4.4604 3.2472 58.746118 0
+gw064G 86.68619400000001 50.291348 0 0 0 0 0.00420870396119081 0.0 0.0 0.0 0 0 7.851600000000001 0.0 46.882137 0
+gx032 85.996367 50.290874 0 0 0 0 0.00908305530895856 0.0 0.0 0.0 0 0 0 0 0 0
+gy045G 86.444216 50.520249 0 0 0 0 0.004695637642435678 0.0 0.0 0.0 0 0 6.6815999999999995 2.1995999999999998 19.963621 0
+gz105G 86.919366 49.67228600000001 0 0 0 0 0.004317793720176379 0.0 0.0 0.0 0 0 5.8824000000000005 0.0 136.032184 0
+ha331 85.365399 50.115676 0 0 0 0 0.00048213695351193784 0.0 0.0 0.0 0 0 0 0 0 0
+hb246G 84.319114 49.313972 0 0 0 0 0.039617822538598677 0.0 0.0 0.0 0 0 13.726799999999999 0.0 56.165419 0
+hc111 86.04762500000001 49.769765 0 0 0 0 0.00028933192920472714 0.0 0.0 0.0 0 0 0 0 0 0
+hd182 85.608006 49.50894600000001 0 0 0 0 0.0005926909596606095 0.0 0.0 0.0 0 0 0 0 0 0
+he332G 85.342057 50.236644 0 0 0 0 0.0022183287264869 0.0 0.0 0.0 0 0 8.1072 6.3755999999999995 19.414599 0
+hf222G 85.300892 49.573115 0 0 0 0 0.0007296053171167158 0.0 0.0 0.0 0 0 6.0047999999999995 0.0 51.114439 0
+G195b 85.312007 48.909369 0 0 0 0 0.01453010833162101 0.0 0.0 0.0 0 0 0 0 0 0
+hg011 85.76841 50.139687 0 0 0 0 0.00036390250857058445 0.0 0.0 0.0 0 0 0 0 0 0
+gi13xaG 87.677258 48.762893999999996 0 0 0 0 0.05064768937243134 0.0 0.0 0.0 0 0 11.4372 4.2264 127.186493 0
+hh274 84.544063 49.79749100000001 0 0 0 0 0.003955588014487305 0.0 0.0 0.0 0 0 0 0 0 0
+hi295G 84.396361 50.066001 0 0 0 0 0.0039540918852228974 0.0 0.0 0.0 0 0 8.956800000000001 6.4404 74.23347 0
+hj105 87.064531 49.73500299999999 0 0 0 0 0.006908560995931712 0.0 0.0 0.0 0 0 0 0 0 0
+hk194 85.44828999999999 49.062978 0 0 0 0 0.0037245147327935645 0.0 0.0 0.0 0 0 0 0 0 0
+hl14xG 87.60048200000001 48.505451 0 0 0 0 0.04195700598091431 0.0 0.0 0.0 0 0 15.0696 0.0 134.10983 0
+hm045G 86.59739400000001 50.513180999999996 0 0 0 0 0.006077710522348738 0.0 0.0 0.0 0 0 13.662 0.0 39.935383 0
+hn175 85.890966 48.917154 0 0 0 0 0.009434979537697416 0.0 0.0 0.0 0 0 0 0 0 0
+ho105G 87.04788900000001 49.693535 0 0 0 0 0.006394898724925413 0.0 0.0 0.0 0 0 6.4404 1.2131999999999998 90.376242 0
+hp176 85.864485 48.836401 0 0 0 0 0.037451314332247035 0.0 0.0 0.0 0 0 0 0 0 0
+hq035G 86.47033000000002 50.60945000000001 0 0 0 0 0.007276076761392004 0.0 0.0 0.0 0 0 6.566400000000001 3.33 34.855409 0
+hr101 86.138871 49.802858 0 0 0 0 0.0003878588645601122 0.0 0.0 0.0 0 0 0 0 0 0
+hs004 85.665198 50.529757 0 0 0 0 0.004979331649519516 0.0 0.0 0.0 0 0 0 0 0 0
+ht142 85.951574 49.573256 0 0 0 0 0.0004781846933216933 0.0 0.0 0.0 0 0 0 0 0 0
+N221dG 85.37570699999999 49.631569 0 0 0 0 0.0003034135332825865 0.0 0.0 0.0 0 0 9.8064 0.0 43.324004 0
+hu076 87.209263 50.272885 0 0 0 0 0.4051774394879799 0.0 0.0 0.0 0 0 0 0 0 0
+hv308G 83.82537600000002 50.604996 0 0 0 0 0.043755764656285834 0.0 0.0 0.0 0 0 11.7 2.376 110.916277 0
+hw315G 84.564146 50.377970999999995 0 0 0 0 0.004206147723040001 0.0 0.0 0.0 0 0 5.0976 1.4832 99.865619 0
+hx254G 84.542325 49.51318700000001 0 0 0 0 0.0032984406525964818 0.0 0.0 0.0 0 0 9.302399999999999 0.0 36.696471 0
+hy132G 86.15122899999999 49.588189 0 0 0 0 0.0012325030608133585 0.0 0.0 0.0 0 0 7.441199999999999 0.0 118.50048400000001 0
+hz229G 84.226535 48.629464000000006 0 0 0 0 4.62660628533627 0.0 0.0 0.0 0 0 11.214 2.9699999999999998 22.431274 0
+ia304G 84.64782700000002 50.270707 0 0 0 0 0.002938376793122128 0.0 0.0 0.0 0 0 5.8428 0.0 131.060016 0
+ib075G 87.09484 50.192805 0 0 0 0 0.015650064366549966 0.0 0.0 0.0 0 0 7.570799999999998 3.5639999999999996 62.510485 0
+ic135G 86.76536800000001 49.336756 0 0 0 0 0.004480225654096124 0.0 0.0 0.0 0 0 6.4908 1.0403999999999998 150.943669 0
+hr101a 86.152064 49.807353 0 0 0 0 0.0003765278730157013 0.0 0.0 0.0 0 0 0 0 0 0
+id025G 86.13008400000001 50.715744 0 0 0 0 0.006213397218524051 0.0 0.0 0.0 0 0 5.2632 0.0 68.185846 0
+ie006G 85.75878600000001 50.89748 0 0 0 0 0.06606720999829074 0.0 0.0 0.0 0 0 8.9388 4.6259999999999994 163.381828 0
+if193G 85.504698 49.338783 0 0 0 0 0.03464575769093049 0.0 0.0 0.0 0 0 6.4799999999999995 4.2156 51.217363 0
+ig186G 85.656756 48.804348 0 0 0 0 0.06396067031024755 0.0 0.0 0.0 0 0 7.8372 0.0 29.330807 0
+ih296 84.11099299999998 50.288401 0 0 0 0 0.38816090472997955 0.0 0.0 0.0 0 0 0 0 0 0
+gu288aG 83.56134700000001 50.16470300000001 0 0 0 0 0.036632885637822604 0.0 0.0 0.0 0 0 10.9188 4.2588 80.324133 0
+ii128G 87.467547 49.034364 0 0 0 0 0.06653795773106504 0.0 0.0 0.0 0 0 8.686800000000002 0.0 119.00889700000002 0
+bz085a 87.050999 49.977192 0 0 0 0 0.005044810388944112 0.0 0.0 0.0 0 0 0 0 0 0
+ij094G 86.759235 49.843522 0 0 0 0 0.003291030626891089 0.0 0.0 0.0 0 0 7.7076 0.0 53.605286 0
+ik083G 86.482881 49.94058400000001 0 0 0 0 0.10150738166626692 0.0 0.0 0.0 0 0 5.7852 0.0 37.843959 0
+cg053a 86.26484900000001 50.203574 0 0 0 0 0.03277376568774914 0.0 0.0 0.0 0 0 0 0 0 0
+Z294a 84.546693 50.127956 0 0 0 0 0.002479451794371511 0.0 0.0 0.0 0 0 0 0 0 0
+il354 85.327027 50.646644 0 0 0 0 0.002410167230688144 0.0 0.0 0.0 0 0 0 0 0 0
+cp211c 85.49287 49.71318 0 0 0 0 8.111269677687587e-05 0.0 0.0 0.0 0 0 0 0 0 0
+if193a 85.497474 49.33821900000001 0 0 0 0 0.021971150389285925 0.0 0.0 0.0 0 0 0 0 0 0
--- tigger-lsm-1.7.0.orig/test/deep4.gaul
+++ tigger-lsm-1.7.0/test/deep4.gaul
@@ -1,44 +1,44 @@
-# Gaussian list for ./plots-deep4/deep4_s1.restored.fits
-# Generated by PyBDSM version 1.6 (LOFAR revision 23087)
-# Reference frequency of the detection ("ch0") image: 1.82259e+09 Hz
-# Equinox : 2000.0 
-
-# Gaus_id Isl_id Source_id Wave_id RA E_RA DEC E_DEC Total_flux E_Total_flux Peak_flux E_Peak_flux Xposn E_Xposn Yposn E_Yposn Maj E_Maj Min E_Min PA E_PA DC_Maj E_DC_Maj DC_Min E_DC_Min DC_PA E_DC_PA Isl_Total_flux E_Isl_Total_flux Isl_rms Isl_mean Resid_Isl_rms Resid_Isl_mean S_Code
-   0    0    0    0  72.543361   0.000187 -81.016783   0.000189   0.046954   0.000961   0.046681   0.000556 309.012511   0.044504 378.489099   0.045602   0.037376   0.000448   0.036849   0.000436  46.188402  65.147114   0.000000   0.000448   0.000000   0.000436  30.876423  65.147114   0.045385   0.000719   0.000555  -0.000009   0.000518   0.000002    S
-   1    1    1    0  72.106453   0.000952 -80.250596   0.001035   0.005157   0.000429   0.004447   0.000259 309.543540   0.221265 563.159791   0.254838   0.041660   0.002533   0.038110   0.002133   9.649671  54.612884   0.019282   0.002533   0.008807   0.002133   8.528538  54.612884   0.003901   0.000229   0.000251  -0.000017   0.000050  -0.000017    S
-   2    2    2    0  70.038410   0.000792 -79.784078   0.000726   0.004476   0.000335   0.004273   0.000196 387.770275   0.191450 680.694157   0.172917   0.041474   0.002076   0.034584   0.001449  69.301482  26.879542   0.018527   0.002076   0.000000   0.001449  69.091491  26.879542   0.003667   0.000191   0.000195  -0.000016   0.000029  -0.000016    S
-   3    3    3    0  69.758861   0.000439 -80.269681   0.000373   0.018848   0.000534   0.015073   0.000328 404.943000   0.106360 564.843104   0.088208   0.047304   0.001161   0.036195   0.000700  71.667126  18.771068   0.029337   0.001161   0.000000   0.000700  71.591752  18.771068   0.028202   0.000446   0.000318  -0.000022   0.000122  -0.000022    C
-   4    3    4    0  69.480157   0.000550 -80.272571   0.000424   0.011267   0.000547   0.010729   0.000320 416.265331   0.133560 564.636581   0.099636   0.040869   0.001312   0.035185   0.000976  99.665220  22.155429   0.000000   0.001312   0.000000   0.000976  13.470731  22.155429   0.028202   0.000446   0.000318  -0.000022   0.000122  -0.000022    C
-   5    4    5    0  68.966469   0.000669 -80.754233   0.000718   0.010196   0.000756   0.010033   0.000439 440.758173   0.159937 449.851060   0.172888   0.038140   0.001705   0.036483   0.001560 176.998857  51.916499   0.000000   0.001705   0.000000   0.001560  11.160897  51.916499   0.008406   0.000398   0.000437  -0.000000   0.000056  -0.000001    S
-   6    5    6    0  68.943344   0.001404 -80.432318   0.001990   0.005339   0.000612   0.004166   0.000379 439.222429   0.330680 527.100537   0.482062   0.047987   0.004918   0.036565   0.002952  30.674141  26.255509   0.030556   0.004918   0.000000   0.002952  30.211933  26.255509   0.002825   0.000270   0.000365  -0.000028   0.000031  -0.000028    S
-   7    6    7    0  68.888672   0.000174 -80.950932   0.000162   0.037702   0.000730   0.038650   0.000418 445.196217   0.041742 402.759537   0.038864   0.037300   0.000412   0.035808   0.000379 115.735619  21.865192   0.000000   0.000412   0.000000   0.000379  10.931777  21.865192   0.055562   0.000624   0.000421  -0.000016   0.000174  -0.000021    C
-   8    6    8    0  68.879122   0.000357 -80.888495   0.000328   0.019885   0.000727   0.019556   0.000422 445.101931   0.085964 417.748114   0.078385   0.038188   0.000843   0.036459   0.000769 101.128504  30.108645   0.000000   0.000843   0.000000   0.000769  10.800515  30.108645   0.055562   0.000624   0.000421  -0.000016   0.000174  -0.000021    C
-   9    7    9    0  68.846433   0.000807 -81.440943   0.000857   0.005048   0.000481   0.005176   0.000275 450.293960   0.193166 285.266233   0.206075   0.038448   0.002148   0.034735   0.001751 155.623702  33.500421   0.000000   0.002148   0.000000   0.001751  11.279686  33.500421   0.003947   0.000247   0.000277  -0.000005   0.000020  -0.000005    S
-  10    8   10    0  68.527568   0.001195 -79.805825   0.001087   0.002899   0.000367   0.002912   0.000211 452.159302   0.287251 677.872165   0.260367   0.038136   0.002858   0.035744   0.002510 118.060808  54.576381   0.000000   0.002858   0.000000   0.002510   7.756910  54.576381   0.001778   0.000149   0.000212  -0.000026   0.000014  -0.000026    S
-  11    9   11    0  68.439968   0.000531 -80.054420   0.000542   0.009467   0.000475   0.008653   0.000282 457.233786   0.127431 618.315308   0.130030   0.039141   0.001290   0.038273   0.001235 156.201405  67.165289   0.013044   0.001290   0.009385   0.001235 158.056208  67.165289   0.008286   0.000280   0.000276  -0.000028   0.000070  -0.000027    S
-  12   10   12    0  68.454867   0.001502 -80.199829   0.001310   0.003511   0.000546   0.003531   0.000314 457.418129   0.361365 583.412988   0.313557   0.038994   0.003663   0.034914   0.002936  72.818907  42.008551   0.000000   0.003663   0.000000   0.002936   7.658425  42.008551   0.001766   0.000191   0.000315  -0.000016   0.000006  -0.000016    S
-  13   11   13    0  68.030806   0.000898 -79.741724   0.000771   0.003993   0.000351   0.003907   0.000204 473.014500   0.215790 693.674831   0.184885   0.039415   0.002164   0.035509   0.001758  74.246997  26.288984   0.000000   0.002164   0.000000   0.001758   5.007404  26.288984   0.003032   0.000174   0.000203  -0.000022   0.000034  -0.000022    S
-  14   12   14    0  67.944700   0.000251 -80.489851   0.000248   0.022836   0.000647   0.023205   0.000372 479.244483   0.060259 514.202781   0.059589   0.036811   0.000591   0.036606   0.000585  95.450265 121.808704   0.000000   0.000591   0.000000   0.000585   4.897829 121.808704   0.021315   0.000420   0.000373  -0.000036   0.000096  -0.000044    S
-  15   13   15    0  67.748736   0.000343 -80.610979   0.000373   0.018331   0.000682   0.017772   0.000397 487.329846   0.082219 485.231260   0.089501   0.038720   0.000892   0.036476   0.000792 161.728264  19.416223   0.000000   0.000892   0.000000   0.000792   3.788433  19.416223   0.017341   0.000470   0.000395  -0.000022   0.000412   0.000008    S
-  16   14   16    0  67.810216   0.000838 -81.189527   0.000793   0.006711   0.000538   0.006306   0.000317 486.577758   0.201097 346.366230   0.190278   0.038880   0.001989   0.037476   0.001850  74.315746  60.778011   0.011603   0.001989   0.006557   0.001850  74.012988  60.778011   0.005101   0.000252   0.000312  -0.000008   0.000053  -0.000008    S
-  17   15   17    0  66.650071   0.000695 -80.755076   0.000513   0.013584   0.000662   0.011659   0.000399 530.065945   0.166939 450.709146   0.122954   0.045031   0.001721   0.035429   0.001085  63.863859   3.648187   0.025523   0.001721   0.000000   0.001085  63.619638   3.648187   0.018872   0.000789   0.000390  -0.000022   0.000254  -0.000010    C
-  18   15   18    0  66.979195   0.001283 -80.720288   0.000933   0.008030   0.000658   0.006500   0.000405 517.396084   0.307983 459.124486   0.223957   0.045179   0.003060   0.037441   0.002144 101.939075  13.960778   0.025828   0.003060   0.006107   0.002144 102.496819  13.960778   0.018872   0.000789   0.000390  -0.000022   0.000254  -0.000010    C
-  19   16   19    0  66.693360   0.001189 -79.818128   0.000904   0.004524   0.000392   0.003923   0.000235 530.041969   0.285503 675.579361   0.216799   0.044243   0.002935   0.035694   0.001939  64.254347  10.250850   0.024105   0.002935   0.000000   0.001939  63.983625  10.250850   0.003258   0.000195   0.000230  -0.000025   0.000017  -0.000025    S
-  20   17   20    0  66.652562   0.001048 -80.896435   0.001125   0.005427   0.000622   0.005306   0.000362 529.697471   0.251420 416.785394   0.270045   0.038565   0.002708   0.036311   0.002403 150.502011  44.382299   0.000000   0.002708   0.000000   0.002403 177.107135  44.382299   0.003534   0.000258   0.000360  -0.000025   0.000017  -0.000025    S
-  21   18   21    0  66.392838   0.000603 -80.134838   0.000632   0.008112   0.000529   0.007926   0.000308 541.842989   0.144717 599.451942   0.151824   0.038139   0.001508   0.036744   0.001400 151.049371  38.874456   0.000000   0.001508   0.000000   0.001400 175.851135  38.874456   0.006804   0.000280   0.000306  -0.000024   0.000062  -0.000025    S
-  22   19   22    0  66.267048   0.000376 -80.237540   0.000524   0.016710   0.000551   0.013441   0.000340 546.653941   0.089819 574.736266   0.125891   0.045116   0.001235   0.037731   0.000881 176.665255   1.377607   0.025951   0.001235   0.006861   0.000881 176.407474   1.377607   0.015108   0.000354   0.000327  -0.000022   0.000132  -0.000019    S
-  23   20   23    0  66.328494   0.000949 -79.872998   0.000964   0.003995   0.000417   0.003977   0.000241 545.341964   0.227795 662.250796   0.231331   0.037894   0.002348   0.036291   0.002153 135.752394  53.654936   0.000000   0.002348   0.000000   0.002153 175.602905  53.654936   0.002834   0.000191   0.000241  -0.000030   0.000022  -0.000031    S
-  24   21   24    0  65.828404   0.000393 -81.134947   0.000376   0.011157   0.000464   0.011055   0.000269 559.715893   0.094450 359.085990   0.090065   0.037924   0.000941   0.036439   0.000869 108.493222  16.969997   0.000000   0.000941   0.000000   0.000869 171.821290  16.969997   0.010127   0.000275   0.000268  -0.000019   0.000066  -0.000021    S
-  25   22   25    0  66.009630   0.000922 -79.653164   0.000761   0.003108   0.000328   0.003347   0.000185 559.800862   0.221601 714.776925   0.182233   0.037641   0.002196   0.033787   0.001762  70.491851  15.706168   0.000000   0.002196   0.000000   0.001762 173.971908  15.706168   0.002264   0.000151   0.000189  -0.000022   0.000018  -0.000022    S
-  26   23   26    0  66.003285   0.001580 -79.442657   0.001052   0.002193   0.000272   0.002091   0.000157 561.041406   0.380463 765.277158   0.250653   0.044943   0.003984   0.031945   0.002029  60.132115   4.459135   0.000000   0.003984   0.000000   0.002029 174.059882   4.459135   0.001356   0.000122   0.000159  -0.000015   0.000023  -0.000015    S
-  27   24   27    0  65.891372   0.000648 -80.108013   0.000712   0.007052   0.000508   0.006907   0.000295 562.595688   0.155316 605.541718   0.171142   0.038531   0.001696   0.036284   0.001505  10.812381  22.721518   0.000000   0.001696   0.000000   0.001505 173.025596  22.721518   0.005611   0.000245   0.000294  -0.000026   0.000054  -0.000044    S
-  28   25   28    0  65.840540   0.001651 -79.853710   0.001664   0.003316   0.000387   0.002600   0.000241 566.031556   0.396288 666.511926   0.399456   0.043688   0.004215   0.039970   0.003566 129.299892  37.259710   0.023277   0.004215   0.015028   0.003566 130.667141  37.259710   0.001634   0.000158   0.000230  -0.000029   0.000012  -0.000029    S
-  29   26   29    0  65.578301   0.000920 -80.500086   0.000932   0.005221   0.000590   0.005531   0.000334 573.006540   0.220782 511.170533   0.223646   0.037200   0.002325   0.034748   0.002025  33.220477  27.954772   0.000000   0.002325   0.000000   0.002025 170.910505  27.954772   0.003842   0.000278   0.000339  -0.000036   0.000013  -0.000036    S
-  30   27   30    0  65.539904   0.001662 -80.058947   0.001947   0.004663   0.000454   0.003383   0.000284 577.401863   0.397025 616.962840   0.468741   0.054469   0.005528   0.034649   0.002401 133.074591   0.531908   0.040010   0.005528   0.000000   0.002401 133.305380   0.531908   0.002582   0.000221   0.000277  -0.000029   0.000038  -0.000029    S
-  31   28   31    0  65.004756   0.000903 -80.684917   0.001145   0.006097   0.000532   0.005326   0.000320 594.099390   0.213207 466.126194   0.277571   0.042711   0.002753   0.036700   0.002053 179.997501   4.693860   0.000000   0.002753   0.000000   0.002053 167.372950   4.693860   0.004485   0.000264   0.000312  -0.000037   0.000060  -0.000036    S
-  32   29   32    0  64.763707   0.001685 -81.136902   0.001413   0.003410   0.000389   0.002801   0.000238 599.055110   0.408933 357.381880   0.333728   0.046345   0.004407   0.035975   0.002721  43.587853   0.710349   0.027847   0.004407   0.000000   0.002721  43.106455   0.710349   0.001977   0.000176   0.000230  -0.000015   0.000026  -0.000014    S
-  33   30   33    0  64.513714   0.000376 -80.326000   0.000378   0.012243   0.000510   0.012269   0.000294 617.020137   0.090207 551.405016   0.090645   0.037213   0.000899   0.036718   0.000875  24.900137  58.258895   0.000000   0.000899   0.000000   0.000875 165.118197  58.258895   0.011156   0.000302   0.000295  -0.000036   0.000114  -0.000036    S
-  34   31   34    0  64.200288   0.000670 -79.817110   0.000706   0.004428   0.000329   0.004381   0.000190 635.770925   0.159920 672.780096   0.170159   0.038022   0.001689   0.036400   0.001548   6.356339  25.575597   0.000000   0.001689   0.000000   0.001548 164.217005  25.575597   0.003580   0.000171   0.000190  -0.000023   0.000046  -0.000023    S
-  35   32   35    0  63.627190   0.000978 -80.695972   0.001174   0.003390   0.000440   0.003598   0.000248 647.389313   0.226444 460.897099   0.288537   0.039002   0.002926   0.033084   0.002095   0.892024 177.948480   0.000000   0.002926   0.000000   0.002095 159.657766 177.948480   0.002236   0.000193   0.000253  -0.000026   0.000015  -0.000026    S
-  36   33   36    0  63.621274   0.000393 -80.269970   0.000396   0.010287   0.000427   0.010027   0.000249 653.769499   0.094133 562.938358   0.095273   0.037625   0.000936   0.037334   0.000922 140.829334 109.275730   0.007245   0.000936   0.004297   0.000922 151.119035 109.275730   0.009235   0.000231   0.000247  -0.000032   0.000071  -0.000031    S
-  37   34   37    0  63.085065   0.001257 -81.168709   0.001366   0.002022   0.000322   0.002137   0.000183 660.498341   0.294669 346.356062   0.334066   0.037275   0.003301   0.034762   0.002865 169.410659  26.926533   0.000000   0.003301   0.000000   0.002865 155.690248  26.926533   0.001052   0.000111   0.000185  -0.000004   0.000004  -0.000004    S
+# Gaussian list for ./plots-deep4/deep4_s1.restored.fits
+# Generated by PyBDSM version 1.6 (LOFAR revision 23087)
+# Reference frequency of the detection ("ch0") image: 1.82259e+09 Hz
+# Equinox : 2000.0 
+
+# Gaus_id Isl_id Source_id Wave_id RA E_RA DEC E_DEC Total_flux E_Total_flux Peak_flux E_Peak_flux Xposn E_Xposn Yposn E_Yposn Maj E_Maj Min E_Min PA E_PA DC_Maj E_DC_Maj DC_Min E_DC_Min DC_PA E_DC_PA Isl_Total_flux E_Isl_Total_flux Isl_rms Isl_mean Resid_Isl_rms Resid_Isl_mean S_Code
+   0    0    0    0  72.543361   0.000187 -81.016783   0.000189   0.046954   0.000961   0.046681   0.000556 309.012511   0.044504 378.489099   0.045602   0.037376   0.000448   0.036849   0.000436  46.188402  65.147114   0.000000   0.000448   0.000000   0.000436  30.876423  65.147114   0.045385   0.000719   0.000555  -0.000009   0.000518   0.000002    S
+   1    1    1    0  72.106453   0.000952 -80.250596   0.001035   0.005157   0.000429   0.004447   0.000259 309.543540   0.221265 563.159791   0.254838   0.041660   0.002533   0.038110   0.002133   9.649671  54.612884   0.019282   0.002533   0.008807   0.002133   8.528538  54.612884   0.003901   0.000229   0.000251  -0.000017   0.000050  -0.000017    S
+   2    2    2    0  70.038410   0.000792 -79.784078   0.000726   0.004476   0.000335   0.004273   0.000196 387.770275   0.191450 680.694157   0.172917   0.041474   0.002076   0.034584   0.001449  69.301482  26.879542   0.018527   0.002076   0.000000   0.001449  69.091491  26.879542   0.003667   0.000191   0.000195  -0.000016   0.000029  -0.000016    S
+   3    3    3    0  69.758861   0.000439 -80.269681   0.000373   0.018848   0.000534   0.015073   0.000328 404.943000   0.106360 564.843104   0.088208   0.047304   0.001161   0.036195   0.000700  71.667126  18.771068   0.029337   0.001161   0.000000   0.000700  71.591752  18.771068   0.028202   0.000446   0.000318  -0.000022   0.000122  -0.000022    C
+   4    3    4    0  69.480157   0.000550 -80.272571   0.000424   0.011267   0.000547   0.010729   0.000320 416.265331   0.133560 564.636581   0.099636   0.040869   0.001312   0.035185   0.000976  99.665220  22.155429   0.000000   0.001312   0.000000   0.000976  13.470731  22.155429   0.028202   0.000446   0.000318  -0.000022   0.000122  -0.000022    C
+   5    4    5    0  68.966469   0.000669 -80.754233   0.000718   0.010196   0.000756   0.010033   0.000439 440.758173   0.159937 449.851060   0.172888   0.038140   0.001705   0.036483   0.001560 176.998857  51.916499   0.000000   0.001705   0.000000   0.001560  11.160897  51.916499   0.008406   0.000398   0.000437  -0.000000   0.000056  -0.000001    S
+   6    5    6    0  68.943344   0.001404 -80.432318   0.001990   0.005339   0.000612   0.004166   0.000379 439.222429   0.330680 527.100537   0.482062   0.047987   0.004918   0.036565   0.002952  30.674141  26.255509   0.030556   0.004918   0.000000   0.002952  30.211933  26.255509   0.002825   0.000270   0.000365  -0.000028   0.000031  -0.000028    S
+   7    6    7    0  68.888672   0.000174 -80.950932   0.000162   0.037702   0.000730   0.038650   0.000418 445.196217   0.041742 402.759537   0.038864   0.037300   0.000412   0.035808   0.000379 115.735619  21.865192   0.000000   0.000412   0.000000   0.000379  10.931777  21.865192   0.055562   0.000624   0.000421  -0.000016   0.000174  -0.000021    C
+   8    6    8    0  68.879122   0.000357 -80.888495   0.000328   0.019885   0.000727   0.019556   0.000422 445.101931   0.085964 417.748114   0.078385   0.038188   0.000843   0.036459   0.000769 101.128504  30.108645   0.000000   0.000843   0.000000   0.000769  10.800515  30.108645   0.055562   0.000624   0.000421  -0.000016   0.000174  -0.000021    C
+   9    7    9    0  68.846433   0.000807 -81.440943   0.000857   0.005048   0.000481   0.005176   0.000275 450.293960   0.193166 285.266233   0.206075   0.038448   0.002148   0.034735   0.001751 155.623702  33.500421   0.000000   0.002148   0.000000   0.001751  11.279686  33.500421   0.003947   0.000247   0.000277  -0.000005   0.000020  -0.000005    S
+  10    8   10    0  68.527568   0.001195 -79.805825   0.001087   0.002899   0.000367   0.002912   0.000211 452.159302   0.287251 677.872165   0.260367   0.038136   0.002858   0.035744   0.002510 118.060808  54.576381   0.000000   0.002858   0.000000   0.002510   7.756910  54.576381   0.001778   0.000149   0.000212  -0.000026   0.000014  -0.000026    S
+  11    9   11    0  68.439968   0.000531 -80.054420   0.000542   0.009467   0.000475   0.008653   0.000282 457.233786   0.127431 618.315308   0.130030   0.039141   0.001290   0.038273   0.001235 156.201405  67.165289   0.013044   0.001290   0.009385   0.001235 158.056208  67.165289   0.008286   0.000280   0.000276  -0.000028   0.000070  -0.000027    S
+  12   10   12    0  68.454867   0.001502 -80.199829   0.001310   0.003511   0.000546   0.003531   0.000314 457.418129   0.361365 583.412988   0.313557   0.038994   0.003663   0.034914   0.002936  72.818907  42.008551   0.000000   0.003663   0.000000   0.002936   7.658425  42.008551   0.001766   0.000191   0.000315  -0.000016   0.000006  -0.000016    S
+  13   11   13    0  68.030806   0.000898 -79.741724   0.000771   0.003993   0.000351   0.003907   0.000204 473.014500   0.215790 693.674831   0.184885   0.039415   0.002164   0.035509   0.001758  74.246997  26.288984   0.000000   0.002164   0.000000   0.001758   5.007404  26.288984   0.003032   0.000174   0.000203  -0.000022   0.000034  -0.000022    S
+  14   12   14    0  67.944700   0.000251 -80.489851   0.000248   0.022836   0.000647   0.023205   0.000372 479.244483   0.060259 514.202781   0.059589   0.036811   0.000591   0.036606   0.000585  95.450265 121.808704   0.000000   0.000591   0.000000   0.000585   4.897829 121.808704   0.021315   0.000420   0.000373  -0.000036   0.000096  -0.000044    S
+  15   13   15    0  67.748736   0.000343 -80.610979   0.000373   0.018331   0.000682   0.017772   0.000397 487.329846   0.082219 485.231260   0.089501   0.038720   0.000892   0.036476   0.000792 161.728264  19.416223   0.000000   0.000892   0.000000   0.000792   3.788433  19.416223   0.017341   0.000470   0.000395  -0.000022   0.000412   0.000008    S
+  16   14   16    0  67.810216   0.000838 -81.189527   0.000793   0.006711   0.000538   0.006306   0.000317 486.577758   0.201097 346.366230   0.190278   0.038880   0.001989   0.037476   0.001850  74.315746  60.778011   0.011603   0.001989   0.006557   0.001850  74.012988  60.778011   0.005101   0.000252   0.000312  -0.000008   0.000053  -0.000008    S
+  17   15   17    0  66.650071   0.000695 -80.755076   0.000513   0.013584   0.000662   0.011659   0.000399 530.065945   0.166939 450.709146   0.122954   0.045031   0.001721   0.035429   0.001085  63.863859   3.648187   0.025523   0.001721   0.000000   0.001085  63.619638   3.648187   0.018872   0.000789   0.000390  -0.000022   0.000254  -0.000010    C
+  18   15   18    0  66.979195   0.001283 -80.720288   0.000933   0.008030   0.000658   0.006500   0.000405 517.396084   0.307983 459.124486   0.223957   0.045179   0.003060   0.037441   0.002144 101.939075  13.960778   0.025828   0.003060   0.006107   0.002144 102.496819  13.960778   0.018872   0.000789   0.000390  -0.000022   0.000254  -0.000010    C
+  19   16   19    0  66.693360   0.001189 -79.818128   0.000904   0.004524   0.000392   0.003923   0.000235 530.041969   0.285503 675.579361   0.216799   0.044243   0.002935   0.035694   0.001939  64.254347  10.250850   0.024105   0.002935   0.000000   0.001939  63.983625  10.250850   0.003258   0.000195   0.000230  -0.000025   0.000017  -0.000025    S
+  20   17   20    0  66.652562   0.001048 -80.896435   0.001125   0.005427   0.000622   0.005306   0.000362 529.697471   0.251420 416.785394   0.270045   0.038565   0.002708   0.036311   0.002403 150.502011  44.382299   0.000000   0.002708   0.000000   0.002403 177.107135  44.382299   0.003534   0.000258   0.000360  -0.000025   0.000017  -0.000025    S
+  21   18   21    0  66.392838   0.000603 -80.134838   0.000632   0.008112   0.000529   0.007926   0.000308 541.842989   0.144717 599.451942   0.151824   0.038139   0.001508   0.036744   0.001400 151.049371  38.874456   0.000000   0.001508   0.000000   0.001400 175.851135  38.874456   0.006804   0.000280   0.000306  -0.000024   0.000062  -0.000025    S
+  22   19   22    0  66.267048   0.000376 -80.237540   0.000524   0.016710   0.000551   0.013441   0.000340 546.653941   0.089819 574.736266   0.125891   0.045116   0.001235   0.037731   0.000881 176.665255   1.377607   0.025951   0.001235   0.006861   0.000881 176.407474   1.377607   0.015108   0.000354   0.000327  -0.000022   0.000132  -0.000019    S
+  23   20   23    0  66.328494   0.000949 -79.872998   0.000964   0.003995   0.000417   0.003977   0.000241 545.341964   0.227795 662.250796   0.231331   0.037894   0.002348   0.036291   0.002153 135.752394  53.654936   0.000000   0.002348   0.000000   0.002153 175.602905  53.654936   0.002834   0.000191   0.000241  -0.000030   0.000022  -0.000031    S
+  24   21   24    0  65.828404   0.000393 -81.134947   0.000376   0.011157   0.000464   0.011055   0.000269 559.715893   0.094450 359.085990   0.090065   0.037924   0.000941   0.036439   0.000869 108.493222  16.969997   0.000000   0.000941   0.000000   0.000869 171.821290  16.969997   0.010127   0.000275   0.000268  -0.000019   0.000066  -0.000021    S
+  25   22   25    0  66.009630   0.000922 -79.653164   0.000761   0.003108   0.000328   0.003347   0.000185 559.800862   0.221601 714.776925   0.182233   0.037641   0.002196   0.033787   0.001762  70.491851  15.706168   0.000000   0.002196   0.000000   0.001762 173.971908  15.706168   0.002264   0.000151   0.000189  -0.000022   0.000018  -0.000022    S
+  26   23   26    0  66.003285   0.001580 -79.442657   0.001052   0.002193   0.000272   0.002091   0.000157 561.041406   0.380463 765.277158   0.250653   0.044943   0.003984   0.031945   0.002029  60.132115   4.459135   0.000000   0.003984   0.000000   0.002029 174.059882   4.459135   0.001356   0.000122   0.000159  -0.000015   0.000023  -0.000015    S
+  27   24   27    0  65.891372   0.000648 -80.108013   0.000712   0.007052   0.000508   0.006907   0.000295 562.595688   0.155316 605.541718   0.171142   0.038531   0.001696   0.036284   0.001505  10.812381  22.721518   0.000000   0.001696   0.000000   0.001505 173.025596  22.721518   0.005611   0.000245   0.000294  -0.000026   0.000054  -0.000044    S
+  28   25   28    0  65.840540   0.001651 -79.853710   0.001664   0.003316   0.000387   0.002600   0.000241 566.031556   0.396288 666.511926   0.399456   0.043688   0.004215   0.039970   0.003566 129.299892  37.259710   0.023277   0.004215   0.015028   0.003566 130.667141  37.259710   0.001634   0.000158   0.000230  -0.000029   0.000012  -0.000029    S
+  29   26   29    0  65.578301   0.000920 -80.500086   0.000932   0.005221   0.000590   0.005531   0.000334 573.006540   0.220782 511.170533   0.223646   0.037200   0.002325   0.034748   0.002025  33.220477  27.954772   0.000000   0.002325   0.000000   0.002025 170.910505  27.954772   0.003842   0.000278   0.000339  -0.000036   0.000013  -0.000036    S
+  30   27   30    0  65.539904   0.001662 -80.058947   0.001947   0.004663   0.000454   0.003383   0.000284 577.401863   0.397025 616.962840   0.468741   0.054469   0.005528   0.034649   0.002401 133.074591   0.531908   0.040010   0.005528   0.000000   0.002401 133.305380   0.531908   0.002582   0.000221   0.000277  -0.000029   0.000038  -0.000029    S
+  31   28   31    0  65.004756   0.000903 -80.684917   0.001145   0.006097   0.000532   0.005326   0.000320 594.099390   0.213207 466.126194   0.277571   0.042711   0.002753   0.036700   0.002053 179.997501   4.693860   0.000000   0.002753   0.000000   0.002053 167.372950   4.693860   0.004485   0.000264   0.000312  -0.000037   0.000060  -0.000036    S
+  32   29   32    0  64.763707   0.001685 -81.136902   0.001413   0.003410   0.000389   0.002801   0.000238 599.055110   0.408933 357.381880   0.333728   0.046345   0.004407   0.035975   0.002721  43.587853   0.710349   0.027847   0.004407   0.000000   0.002721  43.106455   0.710349   0.001977   0.000176   0.000230  -0.000015   0.000026  -0.000014    S
+  33   30   33    0  64.513714   0.000376 -80.326000   0.000378   0.012243   0.000510   0.012269   0.000294 617.020137   0.090207 551.405016   0.090645   0.037213   0.000899   0.036718   0.000875  24.900137  58.258895   0.000000   0.000899   0.000000   0.000875 165.118197  58.258895   0.011156   0.000302   0.000295  -0.000036   0.000114  -0.000036    S
+  34   31   34    0  64.200288   0.000670 -79.817110   0.000706   0.004428   0.000329   0.004381   0.000190 635.770925   0.159920 672.780096   0.170159   0.038022   0.001689   0.036400   0.001548   6.356339  25.575597   0.000000   0.001689   0.000000   0.001548 164.217005  25.575597   0.003580   0.000171   0.000190  -0.000023   0.000046  -0.000023    S
+  35   32   35    0  63.627190   0.000978 -80.695972   0.001174   0.003390   0.000440   0.003598   0.000248 647.389313   0.226444 460.897099   0.288537   0.039002   0.002926   0.033084   0.002095   0.892024 177.948480   0.000000   0.002926   0.000000   0.002095 159.657766 177.948480   0.002236   0.000193   0.000253  -0.000026   0.000015  -0.000026    S
+  36   33   36    0  63.621274   0.000393 -80.269970   0.000396   0.010287   0.000427   0.010027   0.000249 653.769499   0.094133 562.938358   0.095273   0.037625   0.000936   0.037334   0.000922 140.829334 109.275730   0.007245   0.000936   0.004297   0.000922 151.119035 109.275730   0.009235   0.000231   0.000247  -0.000032   0.000071  -0.000031    S
+  37   34   37    0  63.085065   0.001257 -81.168709   0.001366   0.002022   0.000322   0.002137   0.000183 660.498341   0.294669 346.356062   0.334066   0.037275   0.003301   0.034762   0.002865 169.410659  26.926533   0.000000   0.003301   0.000000   0.002865 155.690248  26.926533   0.001052   0.000111   0.000185  -0.000004   0.000004  -0.000004    S
--- tigger-lsm-1.7.0.orig/test/deep4.reference.txt
+++ tigger-lsm-1.7.0/test/deep4.reference.txt
@@ -1,39 +1,39 @@
-#format: name ra_d dec_d i q u v spi rm emaj_s emin_s pa_d freq0
-0 72.54336100000002 -81.016783 0.046954 0 0 0 0 0 0 0 0 0
-1 72.106453 -80.250596 0.005157 0 0 0 0 0 69.4152 31.7052 8.528538 0
-2 70.03841000000001 -79.784078 0.004476 0 0 0 0 0 66.6972 0.0 69.091491 0
-3 69.758861 -80.269681 0.018848 0 0 0 0 0 105.61319999999999 0.0 71.591752 0
-4 69.480157 -80.272571 0.011267 0 0 0 0 0 0 0 0 0
-5 68.966469 -80.754233 0.010196 0 0 0 0 0 0 0 0 0
-6 68.943344 -80.43231800000001 0.005339 0 0 0 0 0 110.00160000000001 0.0 30.211933000000002 0
-7 68.888672 -80.950932 0.037702 0 0 0 0 0 0 0 0 0
-8 68.879122 -80.888495 0.019885 0 0 0 0 0 0 0 0 0
-9 68.84643300000002 -81.44094300000002 0.005048 0 0 0 0 0 0 0 0 0
-10 68.527568 -79.805825 0.002899 0 0 0 0 0 0 0 0 0
-11 68.439968 -80.05442 0.009467 0 0 0 0 0 46.958400000000005 33.786 158.056208 0
-12 68.454867 -80.199829 0.003511 0 0 0 0 0 0 0 0 0
-13 68.030806 -79.741724 0.003993 0 0 0 0 0 0 0 0 0
-14 67.9447 -80.489851 0.022836 0 0 0 0 0 0 0 0 0
-15 67.74873600000001 -80.610979 0.018331 0 0 0 0 0 0 0 0 0
-16 67.810216 -81.189527 0.006711 0 0 0 0 0 41.7708 23.605200000000004 74.012988 0
-17 66.650071 -80.755076 0.013584 0 0 0 0 0 91.8828 0.0 63.619638 0
-18 66.979195 -80.720288 0.00803 0 0 0 0 0 92.9808 21.9852 102.496819 0
-19 66.69336 -79.818128 0.004524 0 0 0 0 0 86.778 0.0 63.98362500000001 0
-20 66.652562 -80.896435 0.005427 0 0 0 0 0 0 0 0 0
-21 66.392838 -80.134838 0.008112 0 0 0 0 0 0 0 0 0
-22 66.267048 -80.23754 0.01671 0 0 0 0 0 93.4236 24.6996 176.407474 0
-23 66.328494 -79.872998 0.003995 0 0 0 0 0 0 0 0 0
-24 65.828404 -81.134947 0.011157 0 0 0 0 0 0 0 0 0
-25 66.00963 -79.65316399999999 0.003108 0 0 0 0 0 0 0 0 0
-26 66.003285 -79.44265699999998 0.002193 0 0 0 0 0 0 0 0 0
-27 65.891372 -80.108013 0.007052 0 0 0 0 0 0 0 0 0
-28 65.84054000000002 -79.85371 0.003316 0 0 0 0 0 83.79719999999999 54.1008 130.667141 0
-29 65.578301 -80.50008600000001 0.005221 0 0 0 0 0 0 0 0 0
-30 65.539904 -80.058947 0.004663 0 0 0 0 0 144.036 0.0 133.30538 0
-31 65.004756 -80.684917 0.006097 0 0 0 0 0 0 0 0 0
-32 64.763707 -81.136902 0.00341 0 0 0 0 0 100.2492 0.0 43.106455 0
-33 64.513714 -80.32600000000001 0.012243 0 0 0 0 0 0 0 0 0
-34 64.20028800000001 -79.81711000000001 0.004428 0 0 0 0 0 0 0 0 0
-35 63.62718999999999 -80.695972 0.00339 0 0 0 0 0 0 0 0 0
-36 63.62127399999999 -80.26997 0.010287 0 0 0 0 0 26.082 15.469199999999997 151.119035 0
-37 63.085065 -81.168709 0.002022 0 0 0 0 0 0 0 0 0
+#format: name ra_d dec_d i q u v spi rm emaj_s emin_s pa_d freq0
+0 72.54336100000002 -81.016783 0.046954 0 0 0 0 0 0 0 0 0
+1 72.106453 -80.250596 0.005157 0 0 0 0 0 69.4152 31.7052 8.528538 0
+2 70.03841000000001 -79.784078 0.004476 0 0 0 0 0 66.6972 0.0 69.091491 0
+3 69.758861 -80.269681 0.018848 0 0 0 0 0 105.61319999999999 0.0 71.591752 0
+4 69.480157 -80.272571 0.011267 0 0 0 0 0 0 0 0 0
+5 68.966469 -80.754233 0.010196 0 0 0 0 0 0 0 0 0
+6 68.943344 -80.43231800000001 0.005339 0 0 0 0 0 110.00160000000001 0.0 30.211933000000002 0
+7 68.888672 -80.950932 0.037702 0 0 0 0 0 0 0 0 0
+8 68.879122 -80.888495 0.019885 0 0 0 0 0 0 0 0 0
+9 68.84643300000002 -81.44094300000002 0.005048 0 0 0 0 0 0 0 0 0
+10 68.527568 -79.805825 0.002899 0 0 0 0 0 0 0 0 0
+11 68.439968 -80.05442 0.009467 0 0 0 0 0 46.958400000000005 33.786 158.056208 0
+12 68.454867 -80.199829 0.003511 0 0 0 0 0 0 0 0 0
+13 68.030806 -79.741724 0.003993 0 0 0 0 0 0 0 0 0
+14 67.9447 -80.489851 0.022836 0 0 0 0 0 0 0 0 0
+15 67.74873600000001 -80.610979 0.018331 0 0 0 0 0 0 0 0 0
+16 67.810216 -81.189527 0.006711 0 0 0 0 0 41.7708 23.605200000000004 74.012988 0
+17 66.650071 -80.755076 0.013584 0 0 0 0 0 91.8828 0.0 63.619638 0
+18 66.979195 -80.720288 0.00803 0 0 0 0 0 92.9808 21.9852 102.496819 0
+19 66.69336 -79.818128 0.004524 0 0 0 0 0 86.778 0.0 63.98362500000001 0
+20 66.652562 -80.896435 0.005427 0 0 0 0 0 0 0 0 0
+21 66.392838 -80.134838 0.008112 0 0 0 0 0 0 0 0 0
+22 66.267048 -80.23754 0.01671 0 0 0 0 0 93.4236 24.6996 176.407474 0
+23 66.328494 -79.872998 0.003995 0 0 0 0 0 0 0 0 0
+24 65.828404 -81.134947 0.011157 0 0 0 0 0 0 0 0 0
+25 66.00963 -79.65316399999999 0.003108 0 0 0 0 0 0 0 0 0
+26 66.003285 -79.44265699999998 0.002193 0 0 0 0 0 0 0 0 0
+27 65.891372 -80.108013 0.007052 0 0 0 0 0 0 0 0 0
+28 65.84054000000002 -79.85371 0.003316 0 0 0 0 0 83.79719999999999 54.1008 130.667141 0
+29 65.578301 -80.50008600000001 0.005221 0 0 0 0 0 0 0 0 0
+30 65.539904 -80.058947 0.004663 0 0 0 0 0 144.036 0.0 133.30538 0
+31 65.004756 -80.684917 0.006097 0 0 0 0 0 0 0 0 0
+32 64.763707 -81.136902 0.00341 0 0 0 0 0 100.2492 0.0 43.106455 0
+33 64.513714 -80.32600000000001 0.012243 0 0 0 0 0 0 0 0 0
+34 64.20028800000001 -79.81711000000001 0.004428 0 0 0 0 0 0 0 0 0
+35 63.62718999999999 -80.695972 0.00339 0 0 0 0 0 0 0 0 0
+36 63.62127399999999 -80.26997 0.010287 0 0 0 0 0 26.082 15.469199999999997 151.119035 0
+37 63.085065 -81.168709 0.002022 0 0 0 0 0 0 0 0 0
